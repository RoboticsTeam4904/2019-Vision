
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/objdetect.hpp ================


Namespaces: ['cv']
Comment: {'objdetect': '\n@defgroup objdetect Object Detection\n\nHaar Feature-based Cascade Classifier for Object Detection\n----------------------------------------------------------\n\nThe object detector described below has been initially proposed by Paul Viola @cite Viola01 and\nimproved by Rainer Lienhart @cite Lienhart02 .\n\nFirst, a classifier (namely a *cascade of boosted classifiers working with haar-like features*) is\ntrained with a few hundred sample views of a particular object (i.e., a face or a car), called\npositive examples, that are scaled to the same size (say, 20x20), and negative examples - arbitrary\nimages of the same size.\n\nAfter a classifier is trained, it can be applied to a region of interest (of the same size as used\nduring the training) in an input image. The classifier outputs a "1" if the region is likely to show\nthe object (i.e., face/car), and "0" otherwise. To search for the object in the whole image one can\nmove the search window across the image and check every location using the classifier. The\nclassifier is designed so that it can be easily "resized" in order to be able to find the objects of\ninterest at different sizes, which is more efficient than resizing the image itself. So, to find an\nobject of an unknown size in the image the scan procedure should be done several times at different\nscales.\n\nThe word "cascade" in the classifier name means that the resultant classifier consists of several\nsimpler classifiers (*stages*) that are applied subsequently to a region of interest until at some\nstage the candidate is rejected or all the stages are passed. The word "boosted" means that the\nclassifiers at every stage of the cascade are complex themselves and they are built out of basic\nclassifiers using one of four different boosting techniques (weighted voting). Currently Discrete\nAdaboost, Real Adaboost, Gentle Adaboost and Logitboost are supported. The basic classifiers are\ndecision-tree classifiers with at least 2 leaves. Haar-like features are the input to the basic\nclassifiers, and are calculated as described below. The current algorithm uses the following\nHaar-like features:\n\n![image](pics/haarfeatures.png)\n\nThe feature used in a particular classifier is specified by its shape (1a, 2b etc.), position within\nthe region of interest and the scale (this scale is not the same as the scale used at the detection\nstage, though these two scales are multiplied). For example, in the case of the third line feature\n(2c) the response is calculated as the difference between the sum of image pixels under the\nrectangle covering the whole feature (including the two white stripes and the black stripe in the\nmiddle) and the sum of the image pixels under the black stripe multiplied by 3 in order to\ncompensate for the differences in the size of areas. The sums of pixel values over a rectangular\nregions are calculated rapidly using integral images (see below and the integral description).\n\nTo see the object detector at work, have a look at the facedetect demo:\n<https://github.com/opencv/opencv/tree/master/samples/cpp/dbt_face_detection.cpp>\n\nThe following reference is for the detection part only. There is a separate application called\nopencv_traincascade that can train a cascade of boosted classifiers from a set of samples.\n\n@note In the new C++ interface it is also possible to use LBP (local binary pattern) features in\naddition to Haar-like features. .. [Viola01] Paul Viola and Michael J. Jones. Rapid Object Detection\nusing a Boosted Cascade of Simple Features. IEEE CVPR, 2001. The paper is available online at\n<http://research.microsoft.com/en-us/um/people/viola/Pubs/Detect/violaJones_CVPR2001.pdf>\n\n@{\n@defgroup objdetect_c C API\n@}\n\n'}

--- Incoming ---
[   'typedef CvHaarClassifierCascade',
    'struct CvHaarClassifierCascade',
    '',
    [],
    None,
    '@defgroup objdetect Object Detection\n'
    '\n'
    'Haar Feature-based Cascade Classifier for Object Detection\n'
    '----------------------------------------------------------\n'
    '\n'
    'The object detector described below has been initially proposed by Paul '
    'Viola @cite Viola01 and\n'
    'improved by Rainer Lienhart @cite Lienhart02 .\n'
    '\n'
    'First, a classifier (namely a *cascade of boosted classifiers working '
    'with haar-like features*) is\n'
    'trained with a few hundred sample views of a particular object (i.e., a '
    'face or a car), called\n'
    'positive examples, that are scaled to the same size (say, 20x20), and '
    'negative examples - arbitrary\n'
    'images of the same size.\n'
    '\n'
    'After a classifier is trained, it can be applied to a region of interest '
    '(of the same size as used\n'
    'during the training) in an input image. The classifier outputs a "1" if '
    'the region is likely to show\n'
    'the object (i.e., face/car), and "0" otherwise. To search for the object '
    'in the whole image one can\n'
    'move the search window across the image and check every location using '
    'the classifier. The\n'
    'classifier is designed so that it can be easily "resized" in order to be '
    'able to find the objects of\n'
    'interest at different sizes, which is more efficient than resizing the '
    'image itself. So, to find an\n'
    'object of an unknown size in the image the scan procedure should be done '
    'several times at different\n'
    'scales.\n'
    '\n'
    'The word "cascade" in the classifier name means that the resultant '
    'classifier consists of several\n'
    'simpler classifiers (*stages*) that are applied subsequently to a region '
    'of interest until at some\n'
    'stage the candidate is rejected or all the stages are passed. The word '
    '"boosted" means that the\n'
    'classifiers at every stage of the cascade are complex themselves and they '
    'are built out of basic\n'
    'classifiers using one of four different boosting techniques (weighted '
    'voting). Currently Discrete\n'
    'Adaboost, Real Adaboost, Gentle Adaboost and Logitboost are supported. '
    'The basic classifiers are\n'
    'decision-tree classifiers with at least 2 leaves. Haar-like features are '
    'the input to the basic\n'
    'classifiers, and are calculated as described below. The current algorithm '
    'uses the following\n'
    'Haar-like features:\n'
    '\n'
    '![image](pics/haarfeatures.png)\n'
    '\n'
    'The feature used in a particular classifier is specified by its shape '
    '(1a, 2b etc.), position within\n'
    'the region of interest and the scale (this scale is not the same as the '
    'scale used at the detection\n'
    'stage, though these two scales are multiplied). For example, in the case '
    'of the third line feature\n'
    '(2c) the response is calculated as the difference between the sum of '
    'image pixels under the\n'
    'rectangle covering the whole feature (including the two white stripes and '
    'the black stripe in the\n'
    'middle) and the sum of the image pixels under the black stripe multiplied '
    'by 3 in order to\n'
    'compensate for the differences in the size of areas. The sums of pixel '
    'values over a rectangular\n'
    'regions are calculated rapidly using integral images (see below and the '
    'integral description).\n'
    '\n'
    'To see the object detector at work, have a look at the facedetect demo:\n'
    '<https://github.com/opencv/opencv/tree/master/samples/cpp/dbt_face_detection.cpp>\n'
    '\n'
    'The following reference is for the detection part only. There is a '
    'separate application called\n'
    'opencv_traincascade that can train a cascade of boosted classifiers from '
    'a set of samples.\n'
    '\n'
    '@note In the new C++ interface it is also possible to use LBP (local '
    'binary pattern) features in\n'
    'addition to Haar-like features. .. [Viola01] Paul Viola and Michael J. '
    'Jones. Rapid Object Detection\n'
    'using a Boosted Cascade of Simple Features. IEEE CVPR, 2001. The paper is '
    'available online at\n'
    '<http://research.microsoft.com/en-us/um/people/viola/Pubs/Detect/violaJones_CVPR2001.pdf>\n'
    '\n'
    '@{\n'
    '@defgroup objdetect_c C API\n'
    '@}']
parse_name: typedef CvHaarClassifierCascade with ['cv'] -> fullname:CvHaarClassifierCascade namespace: classpath: classname: name:CvHaarClassifierCascade
Registering an unknown type: struct CvHaarClassifierCascade

--- Incoming ---
[   'class cv.SimilarRects',
    '',
    [],
    [],
    None,
    '@addtogroup objdetect\n'
    '@{\n'
    'class for grouping object candidates, detected by Cascade Classifier, HOG '
    'etc.\n'
    'instance of the class is to be passed to cv::partition (see '
    'cxoperations.hpp)']
parse_name: class cv.SimilarRects with ['cv'] -> fullname:cv::SimilarRects namespace:cv classpath: classname: name:SimilarRects
register class cv::SimilarRects (['class cv.SimilarRects', '', [], [], None, '@addtogroup objdetect\n@{\nclass for grouping object candidates, detected by Cascade Classifier, HOG etc.\ninstance of the class is to be passed to cv::partition (see cxoperations.hpp)'])

--- Incoming ---
[   'cv.SimilarRects.SimilarRects',
    'S',
    [],
    [['double', '_eps', '', []]],
    None,
    '']
parse_name: cv.SimilarRects.SimilarRects with ['cv'] -> fullname:cv::SimilarRects::SimilarRects namespace:cv classpath:SimilarRects classname:SimilarRects name:SimilarRects
register (constructor) new in cv::SimilarRects (cv_SimilarRects_SimilarRects_double)

--- Incoming ---
[   'cv.SimilarRects.operator ()',
    'bool',
    ['/C'],
    [['const Rect&', 'r1', '', []], ['const Rect&', 'r2', '', []]],
    None,
    '']
parse_name: cv.SimilarRects.operator () with ['cv'] -> fullname:cv::SimilarRects::operator () namespace:cv classpath:SimilarRects classname:SimilarRects name:operator ()
ignore (method) operator () in cv::SimilarRects

--- Incoming ---
[   'cv.groupRectangles',
    'void',
    [],
    [   ['std::vector<Rect>&', 'rectList', '', []],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '0.2', []]],
    None,
    '@brief Groups the object candidate rectangles.\n'
    '\n'
    '@param rectList Input/output vector of rectangles. Output vector includes '
    'retained and grouped\n'
    'rectangles. (The Python list is not modified in place.)\n'
    '@param groupThreshold Minimum possible number of rectangles minus 1. The '
    'threshold is used in a\n'
    'group of rectangles to retain it.\n'
    '@param eps Relative difference between sides of the rectangles to merge '
    'them into a group.\n'
    '\n'
    'The function is a wrapper for the generic function partition . It '
    'clusters all the input rectangles\n'
    'using the rectangle equivalence criteria that combines rectangles with '
    'similar sizes and similar\n'
    'locations. The similarity is defined by eps. When eps=0 , no clustering '
    'is done at all. If\n'
    '\\f$\\texttt{eps}\\rightarrow +\\inf\\f$ , all the rectangles are put in '
    'one cluster. Then, the small\n'
    'clusters containing less than or equal to groupThreshold rectangles are '
    'rejected. In each other\n'
    'cluster, the average rectangle is computed and put into the output '
    'rectangle list.']
parse_name: cv.groupRectangles with ['cv'] -> fullname:cv::groupRectangles namespace:cv classpath: classname: name:groupRectangles
register (function) groupRectangles (cv_groupRectangles_VectorOfRect_int_double)

--- Incoming ---
[   'cv.groupRectangles',
    'void',
    [],
    [   ['std::vector<Rect>&', 'rectList', '', []],
        ['std::vector<int>&', 'weights', '', []],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '0.2', []]],
    None,
    '@overload']
parse_name: cv.groupRectangles with ['cv'] -> fullname:cv::groupRectangles namespace:cv classpath: classname: name:groupRectangles
register (function) groupRectangles (cv_groupRectangles_VectorOfRect_VectorOfint_int_double)

--- Incoming ---
[   'cv.groupRectangles',
    'void',
    [],
    [   ['std::vector<Rect>&', 'rectList', '', []],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '', []],
        ['std::vector<int>*', 'weights', '', []],
        ['std::vector<double>*', 'levelWeights', '', []]],
    None,
    '@overload']
parse_name: cv.groupRectangles with ['cv'] -> fullname:cv::groupRectangles namespace:cv classpath: classname: name:groupRectangles
register (function) groupRectangles (cv_groupRectangles_VectorOfRect_int_double_VectorOfint_VectorOfdouble)

--- Incoming ---
[   'cv.groupRectangles',
    'void',
    [],
    [   ['std::vector<Rect>&', 'rectList', '', []],
        ['std::vector<int>&', 'rejectLevels', '', []],
        ['std::vector<double>&', 'levelWeights', '', []],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '0.2', []]],
    None,
    '@overload']
parse_name: cv.groupRectangles with ['cv'] -> fullname:cv::groupRectangles namespace:cv classpath: classname: name:groupRectangles
register (function) groupRectangles (cv_groupRectangles_VectorOfRect_VectorOfint_VectorOfdouble_int_double)

--- Incoming ---
[   'cv.groupRectangles_meanshift',
    'void',
    [],
    [   ['std::vector<Rect>&', 'rectList', '', []],
        ['std::vector<double>&', 'foundWeights', '', []],
        ['std::vector<double>&', 'foundScales', '', []],
        ['double', 'detectThreshold', '0.0', []],
        ['Size', 'winDetSize', 'Size(64, 128)', []]],
    None,
    '@overload']
parse_name: cv.groupRectangles_meanshift with ['cv'] -> fullname:cv::groupRectangles_meanshift namespace:cv classpath: classname: name:groupRectangles_meanshift
register (function) groupRectangles_meanshift (cv_groupRectangles_meanshift_VectorOfRect_VectorOfdouble_VectorOfdouble_double_Size)

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CASCADE_DO_CANNY_PRUNING', '1', [], [], None, ''],
        ['const cv.CASCADE_SCALE_IMAGE', '2', [], [], None, ''],
        ['const cv.CASCADE_FIND_BIGGEST_OBJECT', '4', [], [], None, ''],
        ['const cv.CASCADE_DO_ROUGH_SEARCH', '8', [], [], None, '']],
    None,
    '']
parse_name: const cv.CASCADE_DO_CANNY_PRUNING with ['cv'] -> fullname:cv::CASCADE_DO_CANNY_PRUNING namespace:cv classpath: classname: name:CASCADE_DO_CANNY_PRUNING
parse_name: const cv.CASCADE_SCALE_IMAGE with ['cv'] -> fullname:cv::CASCADE_SCALE_IMAGE namespace:cv classpath: classname: name:CASCADE_SCALE_IMAGE
parse_name: const cv.CASCADE_FIND_BIGGEST_OBJECT with ['cv'] -> fullname:cv::CASCADE_FIND_BIGGEST_OBJECT namespace:cv classpath: classname: name:CASCADE_FIND_BIGGEST_OBJECT
parse_name: const cv.CASCADE_DO_ROUGH_SEARCH with ['cv'] -> fullname:cv::CASCADE_DO_ROUGH_SEARCH namespace:cv classpath: classname: name:CASCADE_DO_ROUGH_SEARCH

--- Incoming ---
['class cv.BaseCascadeClassifier', ': cv::Algorithm', [], [], None, '']
parse_name: class cv.BaseCascadeClassifier with ['cv'] -> fullname:cv::BaseCascadeClassifier namespace:cv classpath: classname: name:BaseCascadeClassifier
register class cv::BaseCascadeClassifier (['class cv.BaseCascadeClassifier', ': cv::Algorithm', [], [], None, '']) impl:cv::Algorithm

--- Incoming ---
['cv.BaseCascadeClassifier.~BaseCascadeClassifier', '~', [], [], None, '']
parse_name: cv.BaseCascadeClassifier.~BaseCascadeClassifier with ['cv'] -> fullname:cv::BaseCascadeClassifier::~BaseCascadeClassifier namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:~BaseCascadeClassifier
Registering an unknown type: ~
ignore destructor (method) ~BaseCascadeClassifier in cv::BaseCascadeClassifier

--- Incoming ---
['cv.BaseCascadeClassifier.empty', 'bool', ['/C'], [], None, '']
parse_name: cv.BaseCascadeClassifier.empty with ['cv'] -> fullname:cv::BaseCascadeClassifier::empty namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:empty
register (method) empty in cv::BaseCascadeClassifier (cv_BaseCascadeClassifier_empty_const)

--- Incoming ---
[   'cv.BaseCascadeClassifier.load',
    'bool',
    ['/A'],
    [['const String&', 'filename', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.load with ['cv'] -> fullname:cv::BaseCascadeClassifier::load namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:load
register (method) load in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_load_String)

--- Incoming ---
[   'cv.BaseCascadeClassifier.detectMultiScale',
    'void',
    ['/A'],
    [   ['InputArray', 'image', '', []],
        ['std::vector<Rect>&', 'objects', '', []],
        ['double', 'scaleFactor', '', []],
        ['int', 'minNeighbors', '', []],
        ['int', 'flags', '', []],
        ['Size', 'minSize', '', []],
        ['Size', 'maxSize', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.detectMultiScale with ['cv'] -> fullname:cv::BaseCascadeClassifier::detectMultiScale namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:detectMultiScale
register (method) detectMultiScale in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_detectMultiScale__InputArray_VectorOfRect_double_int_int_Size_Size)

--- Incoming ---
[   'cv.BaseCascadeClassifier.detectMultiScale',
    'void',
    ['/A'],
    [   ['InputArray', 'image', '', []],
        ['std::vector<Rect>&', 'objects', '', []],
        ['std::vector<int>&', 'numDetections', '', []],
        ['double', 'scaleFactor', '', []],
        ['int', 'minNeighbors', '', []],
        ['int', 'flags', '', []],
        ['Size', 'minSize', '', []],
        ['Size', 'maxSize', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.detectMultiScale with ['cv'] -> fullname:cv::BaseCascadeClassifier::detectMultiScale namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:detectMultiScale
register (method) detectMultiScale in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_double_int_int_Size_Size)

--- Incoming ---
[   'cv.BaseCascadeClassifier.detectMultiScale',
    'void',
    ['/A'],
    [   ['InputArray', 'image', '', []],
        ['std::vector<Rect>&', 'objects', '', []],
        ['std::vector<int>&', 'rejectLevels', '', []],
        ['std::vector<double>&', 'levelWeights', '', []],
        ['double', 'scaleFactor', '', []],
        ['int', 'minNeighbors', '', []],
        ['int', 'flags', '', []],
        ['Size', 'minSize', '', []],
        ['Size', 'maxSize', '', []],
        ['bool', 'outputRejectLevels', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.detectMultiScale with ['cv'] -> fullname:cv::BaseCascadeClassifier::detectMultiScale namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:detectMultiScale
register (method) detectMultiScale in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_VectorOfdouble_double_int_int_Size_Size_bool)

--- Incoming ---
[   'cv.BaseCascadeClassifier.isOldFormatCascade',
    'bool',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.isOldFormatCascade with ['cv'] -> fullname:cv::BaseCascadeClassifier::isOldFormatCascade namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:isOldFormatCascade
register (method) isOldFormatCascade in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_isOldFormatCascade_const)

--- Incoming ---
[   'cv.BaseCascadeClassifier.getOriginalWindowSize',
    'Size',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.getOriginalWindowSize with ['cv'] -> fullname:cv::BaseCascadeClassifier::getOriginalWindowSize namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:getOriginalWindowSize
register (method) getOriginalWindowSize in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_getOriginalWindowSize_const)

--- Incoming ---
['cv.BaseCascadeClassifier.getFeatureType', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.BaseCascadeClassifier.getFeatureType with ['cv'] -> fullname:cv::BaseCascadeClassifier::getFeatureType namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:getFeatureType
register (method) getFeatureType in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_getFeatureType_const)

--- Incoming ---
['cv.BaseCascadeClassifier.getOldCascade', 'void*', ['/A'], [], None, '']
parse_name: cv.BaseCascadeClassifier.getOldCascade with ['cv'] -> fullname:cv::BaseCascadeClassifier::getOldCascade namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:getOldCascade
register (method) getOldCascade in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_getOldCascade)

--- Incoming ---
['class cv.BaseCascadeClassifier.MaskGenerator', '', [], [], None, '']
parse_name: class cv.BaseCascadeClassifier.MaskGenerator with ['cv'] -> fullname:cv::BaseCascadeClassifier::MaskGenerator namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:MaskGenerator
register class cv::BaseCascadeClassifier::MaskGenerator (['class cv.BaseCascadeClassifier.MaskGenerator', '', [], [], None, ''])

--- Incoming ---
['cv.BaseCascadeClassifier.MaskGenerator.~MaskGenerator', '~', [], [], None, '']
parse_name: cv.BaseCascadeClassifier.MaskGenerator.~MaskGenerator with ['cv'] -> fullname:cv::BaseCascadeClassifier::MaskGenerator::~MaskGenerator namespace:cv classpath:BaseCascadeClassifier::MaskGenerator classname:MaskGenerator name:~MaskGenerator
ignore destructor (method) ~MaskGenerator in cv::BaseCascadeClassifier::MaskGenerator

--- Incoming ---
[   'cv.BaseCascadeClassifier.MaskGenerator.generateMask',
    'Mat',
    ['/A'],
    [['const Mat&', 'src', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.MaskGenerator.generateMask with ['cv'] -> fullname:cv::BaseCascadeClassifier::MaskGenerator::generateMask namespace:cv classpath:BaseCascadeClassifier::MaskGenerator classname:MaskGenerator name:generateMask
register (method) generateMask in cv::BaseCascadeClassifier::MaskGenerator (trait) (cv_BaseCascadeClassifier_MaskGenerator_generateMask_Mat)

--- Incoming ---
[   'cv.BaseCascadeClassifier.MaskGenerator.initializeMask',
    'void',
    [],
    [['const Mat&', '', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.MaskGenerator.initializeMask with ['cv'] -> fullname:cv::BaseCascadeClassifier::MaskGenerator::initializeMask namespace:cv classpath:BaseCascadeClassifier::MaskGenerator classname:MaskGenerator name:initializeMask
register (method) initializeMask in cv::BaseCascadeClassifier::MaskGenerator (trait) (cv_BaseCascadeClassifier_MaskGenerator_initializeMask_Mat)

--- Incoming ---
[   'cv.BaseCascadeClassifier.setMaskGenerator',
    'void',
    ['/A'],
    [['const Ptr<MaskGenerator>&', 'maskGenerator', '', []]],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.setMaskGenerator with ['cv'] -> fullname:cv::BaseCascadeClassifier::setMaskGenerator namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:setMaskGenerator
register (method) setMaskGenerator in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_setMaskGenerator_PtrOfMaskGenerator)

--- Incoming ---
[   'cv.BaseCascadeClassifier.getMaskGenerator',
    'Ptr<MaskGenerator>',
    ['/A'],
    [],
    None,
    '']
parse_name: cv.BaseCascadeClassifier.getMaskGenerator with ['cv'] -> fullname:cv::BaseCascadeClassifier::getMaskGenerator namespace:cv classpath:BaseCascadeClassifier classname:BaseCascadeClassifier name:getMaskGenerator
register (method) getMaskGenerator in cv::BaseCascadeClassifier (trait) (cv_BaseCascadeClassifier_getMaskGenerator)

--- Incoming ---
[   'class cv.CascadeClassifier',
    '',
    [],
    [],
    None,
    '@brief Cascade classifier class for object detection.']
parse_name: class cv.CascadeClassifier with ['cv'] -> fullname:cv::CascadeClassifier namespace:cv classpath: classname: name:CascadeClassifier
register class cv::CascadeClassifier (['class cv.CascadeClassifier', '', [], [], None, '@brief Cascade classifier class for object detection.'])

--- Incoming ---
['cv.CascadeClassifier.CascadeClassifier', 'C', [], [], None, '']
parse_name: cv.CascadeClassifier.CascadeClassifier with ['cv'] -> fullname:cv::CascadeClassifier::CascadeClassifier namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:CascadeClassifier
register (constructor) default in cv::CascadeClassifier (cv_CascadeClassifier_CascadeClassifier)

--- Incoming ---
[   'cv.CascadeClassifier.CascadeClassifier',
    'C',
    [],
    [['const String&', 'filename', '', []]],
    None,
    '@brief Loads a classifier from a file.\n'
    '\n'
    '@param filename Name of the file from which the classifier is loaded.']
parse_name: cv.CascadeClassifier.CascadeClassifier with ['cv'] -> fullname:cv::CascadeClassifier::CascadeClassifier namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:CascadeClassifier
register (constructor) new in cv::CascadeClassifier (cv_CascadeClassifier_CascadeClassifier_String)

--- Incoming ---
['cv.CascadeClassifier.~CascadeClassifier', '~', [], [], None, '']
parse_name: cv.CascadeClassifier.~CascadeClassifier with ['cv'] -> fullname:cv::CascadeClassifier::~CascadeClassifier namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:~CascadeClassifier
ignore destructor (method) ~CascadeClassifier in cv::CascadeClassifier

--- Incoming ---
[   'cv.CascadeClassifier.empty',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Checks whether the classifier has been loaded.']
parse_name: cv.CascadeClassifier.empty with ['cv'] -> fullname:cv::CascadeClassifier::empty namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:empty
register (method) empty in cv::CascadeClassifier (cv_CascadeClassifier_empty_const)

--- Incoming ---
[   'cv.CascadeClassifier.load',
    'bool',
    [],
    [['const String&', 'filename', '', []]],
    None,
    '@brief Loads a classifier from a file.\n'
    '\n'
    '@param filename Name of the file from which the classifier is loaded. The '
    'file may contain an old\n'
    'HAAR classifier trained by the haartraining application or a new cascade '
    'classifier trained by the\n'
    'traincascade application.']
parse_name: cv.CascadeClassifier.load with ['cv'] -> fullname:cv::CascadeClassifier::load namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:load
register (method) load in cv::CascadeClassifier (cv_CascadeClassifier_load_String)

--- Incoming ---
[   'cv.CascadeClassifier.read',
    'bool',
    [],
    [['const FileNode&', 'node', '', []]],
    None,
    '@brief Reads a classifier from a FileStorage node.\n'
    '\n'
    '@note The file may contain a new cascade classifier (trained traincascade '
    'application) only.']
parse_name: cv.CascadeClassifier.read with ['cv'] -> fullname:cv::CascadeClassifier::read namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:read
register (method) read in cv::CascadeClassifier (cv_CascadeClassifier_read_FileNode)

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<Rect>&', 'objects', '', []],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []]],
    None,
    '@brief Detects objects of different sizes in the input image. The '
    'detected objects are returned as a list\n'
    'of rectangles.\n'
    '\n'
    '@param image Matrix of the type CV_8U containing an image where objects '
    'are detected.\n'
    '@param objects Vector of rectangles where each rectangle contains the '
    'detected object, the\n'
    'rectangles may be partially outside the original image.\n'
    '@param scaleFactor Parameter specifying how much the image size is '
    'reduced at each image scale.\n'
    '@param minNeighbors Parameter specifying how many neighbors each '
    'candidate rectangle should have\n'
    'to retain it.\n'
    '@param flags Parameter with the same meaning for an old cascade as in the '
    'function\n'
    'cvHaarDetectObjects. It is not used for a new cascade.\n'
    '@param minSize Minimum possible object size. Objects smaller than that '
    'are ignored.\n'
    '@param maxSize Maximum possible object size. Objects larger than that are '
    'ignored. If `maxSize == minSize` model is evaluated on single scale.\n'
    '\n'
    'The function is parallelized with the TBB library.\n'
    '\n'
    '@note\n'
    '-   (Python) A face detection example using cascade classifiers can be '
    'found at\n'
    'opencv_source_code/samples/python/facedetect.py']
parse_name: cv.CascadeClassifier.detectMultiScale with ['cv'] -> fullname:cv::CascadeClassifier::detectMultiScale namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:detectMultiScale
register (method) detectMultiScale in cv::CascadeClassifier (cv_CascadeClassifier_detectMultiScale__InputArray_VectorOfRect_double_int_int_Size_Size)

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<Rect>&', 'objects', '', []],
        ['std::vector<int>&', 'numDetections', '', []],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []]],
    None,
    '@overload\n'
    '@param image Matrix of the type CV_8U containing an image where objects '
    'are detected.\n'
    '@param objects Vector of rectangles where each rectangle contains the '
    'detected object, the\n'
    'rectangles may be partially outside the original image.\n'
    '@param numDetections Vector of detection numbers for the corresponding '
    "objects. An object's number\n"
    'of detections is the number of neighboring positively classified '
    'rectangles that were joined\n'
    'together to form the object.\n'
    '@param scaleFactor Parameter specifying how much the image size is '
    'reduced at each image scale.\n'
    '@param minNeighbors Parameter specifying how many neighbors each '
    'candidate rectangle should have\n'
    'to retain it.\n'
    '@param flags Parameter with the same meaning for an old cascade as in the '
    'function\n'
    'cvHaarDetectObjects. It is not used for a new cascade.\n'
    '@param minSize Minimum possible object size. Objects smaller than that '
    'are ignored.\n'
    '@param maxSize Maximum possible object size. Objects larger than that are '
    'ignored. If `maxSize == minSize` model is evaluated on single scale.']
parse_name: cv.CascadeClassifier.detectMultiScale with ['cv'] -> fullname:cv::CascadeClassifier::detectMultiScale namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:detectMultiScale
register (method) detectMultiScale in cv::CascadeClassifier (cv_CascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_double_int_int_Size_Size)

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<Rect>&', 'objects', '', []],
        ['std::vector<int>&', 'rejectLevels', '', []],
        ['std::vector<double>&', 'levelWeights', '', []],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []],
        ['bool', 'outputRejectLevels', 'false', []]],
    None,
    '@overload\n'
    'This function allows you to retrieve the final stage decision certainty '
    'of classification.\n'
    'For this, one needs to set `outputRejectLevels` on true and provide the '
    '`rejectLevels` and `levelWeights` parameter.\n'
    'For each resulting detection, `levelWeights` will then contain the '
    'certainty of classification at the final stage.\n'
    'This value can then be used to separate strong from weaker '
    'classifications.\n'
    '\n'
    'A code sample on how to use it efficiently can be found below:\n'
    '@code\n'
    'Mat img;\n'
    'vector<double> weights;\n'
    'vector<int> levels;\n'
    'vector<Rect> detections;\n'
    'CascadeClassifier model("/path/to/your/model.xml");\n'
    'model.detectMultiScale(img, detections, levels, weights, 1.1, 3, 0, '
    'Size(), Size(), true);\n'
    'cerr << "Detection " << detections[0] << " with weight " << weights[0] << '
    'endl;\n'
    '@endcode']
parse_name: cv.CascadeClassifier.detectMultiScale with ['cv'] -> fullname:cv::CascadeClassifier::detectMultiScale namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:detectMultiScale
register (method) detectMultiScale in cv::CascadeClassifier (cv_CascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_VectorOfdouble_double_int_int_Size_Size_bool)

--- Incoming ---
['cv.CascadeClassifier.isOldFormatCascade', 'bool', ['/C'], [], None, '']
parse_name: cv.CascadeClassifier.isOldFormatCascade with ['cv'] -> fullname:cv::CascadeClassifier::isOldFormatCascade namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:isOldFormatCascade
register (method) isOldFormatCascade in cv::CascadeClassifier (cv_CascadeClassifier_isOldFormatCascade_const)

--- Incoming ---
['cv.CascadeClassifier.getOriginalWindowSize', 'Size', ['/C'], [], None, '']
parse_name: cv.CascadeClassifier.getOriginalWindowSize with ['cv'] -> fullname:cv::CascadeClassifier::getOriginalWindowSize namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:getOriginalWindowSize
register (method) getOriginalWindowSize in cv::CascadeClassifier (cv_CascadeClassifier_getOriginalWindowSize_const)

--- Incoming ---
['cv.CascadeClassifier.getFeatureType', 'int', ['/C'], [], None, '']
parse_name: cv.CascadeClassifier.getFeatureType with ['cv'] -> fullname:cv::CascadeClassifier::getFeatureType namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:getFeatureType
register (method) getFeatureType in cv::CascadeClassifier (cv_CascadeClassifier_getFeatureType_const)

--- Incoming ---
['cv.CascadeClassifier.getOldCascade', 'void*', [], [], None, '']
parse_name: cv.CascadeClassifier.getOldCascade with ['cv'] -> fullname:cv::CascadeClassifier::getOldCascade namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:getOldCascade
register (method) getOldCascade in cv::CascadeClassifier (cv_CascadeClassifier_getOldCascade)

--- Incoming ---
[   'cv.CascadeClassifier.convert',
    'bool',
    ['/S'],
    [   ['const String&', 'oldcascade', '', []],
        ['const String&', 'newcascade', '', []]],
    None,
    '']
parse_name: cv.CascadeClassifier.convert with ['cv'] -> fullname:cv::CascadeClassifier::convert namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:convert
register (method) convert in cv::CascadeClassifier (cv_CascadeClassifier_convert_String_String)

--- Incoming ---
[   'cv.CascadeClassifier.setMaskGenerator',
    'void',
    [],
    [   [   'const Ptr<BaseCascadeClassifier::MaskGenerator>&',
            'maskGenerator',
            '',
            []]],
    None,
    '']
parse_name: cv.CascadeClassifier.setMaskGenerator with ['cv'] -> fullname:cv::CascadeClassifier::setMaskGenerator namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:setMaskGenerator
register (method) setMaskGenerator in cv::CascadeClassifier (cv_CascadeClassifier_setMaskGenerator_PtrOfMaskGenerator)

--- Incoming ---
[   'cv.CascadeClassifier.getMaskGenerator',
    'Ptr<BaseCascadeClassifier::MaskGenerator>',
    [],
    [],
    None,
    '']
parse_name: cv.CascadeClassifier.getMaskGenerator with ['cv'] -> fullname:cv::CascadeClassifier::getMaskGenerator namespace:cv classpath:CascadeClassifier classname:CascadeClassifier name:getMaskGenerator
register (method) getMaskGenerator in cv::CascadeClassifier (cv_CascadeClassifier_getMaskGenerator)

--- Incoming ---
[   'cv.createFaceDetectionMaskGenerator',
    'Ptr<BaseCascadeClassifier::MaskGenerator>',
    [],
    [],
    None,
    '']
parse_name: cv.createFaceDetectionMaskGenerator with ['cv'] -> fullname:cv::createFaceDetectionMaskGenerator namespace:cv classpath: classname: name:createFaceDetectionMaskGenerator
register (function) createFaceDetectionMaskGenerator (cv_createFaceDetectionMaskGenerator)

--- Incoming ---
[   'struct cv.DetectionROI',
    '',
    [],
    [],
    None,
    'struct for detection region of interest (ROI)']
parse_name: struct cv.DetectionROI with ['cv'] -> fullname:cv::DetectionROI namespace:cv classpath: classname: name:DetectionROI
register class cv::DetectionROI (['struct cv.DetectionROI', '', [], [], None, 'struct for detection region of interest (ROI)'])

--- Incoming ---
[   'enum cv.HOGDescriptor.HistogramNormType',
    '',
    [],
    [   [   'const cv.HOGDescriptor.L2Hys',
            '0',
            [],
            [],
            None,
            'Default histogramNormType\n']],
    None,
    '']
parse_name: const cv.HOGDescriptor.L2Hys with ['cv'] -> fullname:cv::HOGDescriptor::L2Hys namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:L2Hys
parse_name: enum cv.HOGDescriptor.HistogramNormType with ['cv'] -> fullname:cv::HOGDescriptor::HistogramNormType namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:HistogramNormType
parse_name: const cv.HOGDescriptor.L2Hys with ['cv'] -> fullname:cv::HOGDescriptor::L2Hys namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:L2Hys

--- Incoming ---
[   'enum cv.HOGDescriptor.<unnamed>',
    '',
    [],
    [   [   'const cv.HOGDescriptor.DEFAULT_NLEVELS',
            '64',
            [],
            [],
            None,
            'Default nlevels value.\n']],
    None,
    '']
parse_name: const cv.HOGDescriptor.DEFAULT_NLEVELS with ['cv'] -> fullname:cv::HOGDescriptor::DEFAULT_NLEVELS namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:DEFAULT_NLEVELS

--- Incoming ---
[   'enum cv.HOGDescriptor.DescriptorStorageFormat',
    '',
    [],
    [   [   'const cv.HOGDescriptor.DESCR_FORMAT_COL_BY_COL',
            '0',
            [],
            [],
            None,
            ''],
        [   'const cv.HOGDescriptor.DESCR_FORMAT_ROW_BY_ROW',
            '1',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv.HOGDescriptor.DESCR_FORMAT_COL_BY_COL with ['cv'] -> fullname:cv::HOGDescriptor::DESCR_FORMAT_COL_BY_COL namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:DESCR_FORMAT_COL_BY_COL
parse_name: const cv.HOGDescriptor.DESCR_FORMAT_ROW_BY_ROW with ['cv'] -> fullname:cv::HOGDescriptor::DESCR_FORMAT_ROW_BY_ROW namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:DESCR_FORMAT_ROW_BY_ROW
parse_name: enum cv.HOGDescriptor.DescriptorStorageFormat with ['cv'] -> fullname:cv::HOGDescriptor::DescriptorStorageFormat namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:DescriptorStorageFormat
parse_name: const cv.HOGDescriptor.DESCR_FORMAT_COL_BY_COL with ['cv'] -> fullname:cv::HOGDescriptor::DESCR_FORMAT_COL_BY_COL namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:DESCR_FORMAT_COL_BY_COL
parse_name: const cv.HOGDescriptor.DESCR_FORMAT_ROW_BY_ROW with ['cv'] -> fullname:cv::HOGDescriptor::DESCR_FORMAT_ROW_BY_ROW namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:DESCR_FORMAT_ROW_BY_ROW

--- Incoming ---
[   'struct cv.HOGDescriptor',
    '',
    [],
    [   [   'Size',
            'winSize',
            'Detection window size. Align to block size and block stride. '
            'Default value is Size(64,128).',
            []],
        [   'Size',
            'blockSize',
            'Block size in pixels. Align to cell size. Default value is '
            'Size(16,16).',
            []],
        [   'Size',
            'blockStride',
            'Block stride. It must be a multiple of cell size. Default value '
            'is Size(8,8).',
            []],
        ['Size', 'cellSize', 'Cell size. Default value is Size(8,8).', []],
        [   'int',
            'nbins',
            'Number of bins used in the calculation of histogram of gradients. '
            'Default value is 9.',
            []],
        ['int', 'derivAperture', 'not documented', []],
        ['double', 'winSigma', 'Gaussian smoothing window parameter.', []],
        [   'HOGDescriptor::HistogramNormType',
            'histogramNormType',
            'histogramNormType',
            []],
        [   'double',
            'L2HysThreshold',
            'L2-Hys normalization method shrinkage.',
            []],
        [   'bool',
            'gammaCorrection',
            'Flag to specify whether the gamma correction preprocessing is '
            'required or not.',
            []],
        [   'vector_float',
            'svmDetector',
            'coefficients for the linear SVM classifier.',
            []],
        [   'int',
            'nlevels',
            'Maximum number of detection window increases. Default value is 64',
            []],
        [   'bool',
            'signedGradient',
            'Indicates signed gradient will be used or not',
            []]],
    None,
    '@brief Implementation of HOG (Histogram of Oriented Gradients) descriptor '
    'and object detector.\n'
    '\n'
    'the HOG descriptor algorithm introduced by Navneet Dalal and Bill Triggs '
    '@cite Dalal2005 .\n'
    '\n'
    'useful links:\n'
    '\n'
    'https://hal.inria.fr/inria-00548512/document/\n'
    '\n'
    'https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients\n'
    '\n'
    'https://software.intel.com/en-us/ipp-dev-reference-histogram-of-oriented-gradients-hog-descriptor\n'
    '\n'
    'http://www.learnopencv.com/histogram-of-oriented-gradients\n'
    '\n'
    'http://www.learnopencv.com/handwritten-digits-classification-an-opencv-c-python-tutorial']
parse_name: struct cv.HOGDescriptor with ['cv'] -> fullname:cv::HOGDescriptor namespace:cv classpath: classname: name:HOGDescriptor
register class cv::HOGDescriptor (['struct cv.HOGDescriptor', '', [], [['Size', 'winSize', 'Detection window size. Align to block size and block stride. Default value is Size(64,128).', []], ['Size', 'blockSize', 'Block size in pixels. Align to cell size. Default value is Size(16,16).', []], ['Size', 'blockStride', 'Block stride. It must be a multiple of cell size. Default value is Size(8,8).', []], ['Size', 'cellSize', 'Cell size. Default value is Size(8,8).', []], ['int', 'nbins', 'Number of bins used in the calculation of histogram of gradients. Default value is 9.', []], ['int', 'derivAperture', 'not documented', []], ['double', 'winSigma', 'Gaussian smoothing window parameter.', []], ['HOGDescriptor::HistogramNormType', 'histogramNormType', 'histogramNormType', []], ['double', 'L2HysThreshold', 'L2-Hys normalization method shrinkage.', []], ['bool', 'gammaCorrection', 'Flag to specify whether the gamma correction preprocessing is required or not.', []], ['vector_float', 'svmDetector', 'coefficients for the linear SVM classifier.', []], ['int', 'nlevels', 'Maximum number of detection window increases. Default value is 64', []], ['bool', 'signedGradient', 'Indicates signed gradient will be used or not', []]], None, '@brief Implementation of HOG (Histogram of Oriented Gradients) descriptor and object detector.\n\nthe HOG descriptor algorithm introduced by Navneet Dalal and Bill Triggs @cite Dalal2005 .\n\nuseful links:\n\nhttps://hal.inria.fr/inria-00548512/document/\n\nhttps://en.wikipedia.org/wiki/Histogram_of_oriented_gradients\n\nhttps://software.intel.com/en-us/ipp-dev-reference-histogram-of-oriented-gradients-hog-descriptor\n\nhttp://www.learnopencv.com/histogram-of-oriented-gradients\n\nhttp://www.learnopencv.com/handwritten-digits-classification-an-opencv-c-python-tutorial'])
parse_name: cv.HOGDescriptor.winSize with ['cv'] -> fullname:cv::HOGDescriptor::winSize namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:winSize
register (method) winSize in cv::HOGDescriptor (cv_HOGDescriptor_winSize_const)
parse_name: cv.HOGDescriptor.blockSize with ['cv'] -> fullname:cv::HOGDescriptor::blockSize namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:blockSize
register (method) blockSize in cv::HOGDescriptor (cv_HOGDescriptor_blockSize_const)
parse_name: cv.HOGDescriptor.blockStride with ['cv'] -> fullname:cv::HOGDescriptor::blockStride namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:blockStride
register (method) blockStride in cv::HOGDescriptor (cv_HOGDescriptor_blockStride_const)
parse_name: cv.HOGDescriptor.cellSize with ['cv'] -> fullname:cv::HOGDescriptor::cellSize namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:cellSize
register (method) cellSize in cv::HOGDescriptor (cv_HOGDescriptor_cellSize_const)
parse_name: cv.HOGDescriptor.nbins with ['cv'] -> fullname:cv::HOGDescriptor::nbins namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:nbins
register (method) nbins in cv::HOGDescriptor (cv_HOGDescriptor_nbins_const)
parse_name: cv.HOGDescriptor.derivAperture with ['cv'] -> fullname:cv::HOGDescriptor::derivAperture namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:derivAperture
register (method) derivAperture in cv::HOGDescriptor (cv_HOGDescriptor_derivAperture_const)
parse_name: cv.HOGDescriptor.winSigma with ['cv'] -> fullname:cv::HOGDescriptor::winSigma namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:winSigma
register (method) winSigma in cv::HOGDescriptor (cv_HOGDescriptor_winSigma_const)
parse_name: cv.HOGDescriptor.histogramNormType with ['cv'] -> fullname:cv::HOGDescriptor::histogramNormType namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:histogramNormType
register (method) histogramNormType in cv::HOGDescriptor (cv_HOGDescriptor_histogramNormType_const)
parse_name: cv.HOGDescriptor.L2HysThreshold with ['cv'] -> fullname:cv::HOGDescriptor::L2HysThreshold namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:L2HysThreshold
register (method) L2HysThreshold in cv::HOGDescriptor (cv_HOGDescriptor_L2HysThreshold_const)
parse_name: cv.HOGDescriptor.gammaCorrection with ['cv'] -> fullname:cv::HOGDescriptor::gammaCorrection namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:gammaCorrection
register (method) gammaCorrection in cv::HOGDescriptor (cv_HOGDescriptor_gammaCorrection_const)
parse_name: cv.HOGDescriptor.svmDetector with ['cv'] -> fullname:cv::HOGDescriptor::svmDetector namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:svmDetector
register (method) svmDetector in cv::HOGDescriptor (cv_HOGDescriptor_svmDetector)
parse_name: cv.HOGDescriptor.set_svmDetector with ['cv'] -> fullname:cv::HOGDescriptor::set_svmDetector namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:set_svmDetector
register (method) set_svmDetector in cv::HOGDescriptor (cv_HOGDescriptor_set_svmDetector_VectorOffloat)
parse_name: cv.HOGDescriptor.nlevels with ['cv'] -> fullname:cv::HOGDescriptor::nlevels namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:nlevels
register (method) nlevels in cv::HOGDescriptor (cv_HOGDescriptor_nlevels_const)
parse_name: cv.HOGDescriptor.signedGradient with ['cv'] -> fullname:cv::HOGDescriptor::signedGradient namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:signedGradient
register (method) signedGradient in cv::HOGDescriptor (cv_HOGDescriptor_signedGradient_const)

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    'H',
    [],
    [],
    None,
    '@brief Creates the HOG descriptor and detector with default params.\n'
    '\n'
    'aqual to HOGDescriptor(Size(64,128), Size(16,16), Size(8,8), Size(8,8), 9 '
    ')']
parse_name: cv.HOGDescriptor.HOGDescriptor with ['cv'] -> fullname:cv::HOGDescriptor::HOGDescriptor namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:HOGDescriptor
register (constructor) default in cv::HOGDescriptor (cv_HOGDescriptor_HOGDescriptor)

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    'H',
    [],
    [   ['Size', '_winSize', '', []],
        ['Size', '_blockSize', '', []],
        ['Size', '_blockStride', '', []],
        ['Size', '_cellSize', '', []],
        ['int', '_nbins', '', []],
        ['int', '_derivAperture', '1', []],
        ['double', '_winSigma', '-1', []],
        [   'HOGDescriptor::HistogramNormType',
            '_histogramNormType',
            'HOGDescriptor::L2Hys',
            []],
        ['double', '_L2HysThreshold', '0.2', []],
        ['bool', '_gammaCorrection', 'false', []],
        ['int', '_nlevels', 'HOGDescriptor::DEFAULT_NLEVELS', []],
        ['bool', '_signedGradient', 'false', []]],
    None,
    '@overload\n'
    '@param _winSize sets winSize with given value.\n'
    '@param _blockSize sets blockSize with given value.\n'
    '@param _blockStride sets blockStride with given value.\n'
    '@param _cellSize sets cellSize with given value.\n'
    '@param _nbins sets nbins with given value.\n'
    '@param _derivAperture sets derivAperture with given value.\n'
    '@param _winSigma sets winSigma with given value.\n'
    '@param _histogramNormType sets histogramNormType with given value.\n'
    '@param _L2HysThreshold sets L2HysThreshold with given value.\n'
    '@param _gammaCorrection sets gammaCorrection with given value.\n'
    '@param _nlevels sets nlevels with given value.\n'
    '@param _signedGradient sets signedGradient with given value.']
parse_name: cv.HOGDescriptor.HOGDescriptor with ['cv'] -> fullname:cv::HOGDescriptor::HOGDescriptor namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:HOGDescriptor
register (constructor) new in cv::HOGDescriptor (cv_HOGDescriptor_HOGDescriptor_Size_Size_Size_Size_int_int_double_HOGDescriptor_HistogramNormType_double_bool_int_bool)

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    'H',
    [],
    [['const String&', 'filename', '', []]],
    None,
    '@overload\n'
    '@param filename The file name containing HOGDescriptor properties and '
    'coefficients for the linear SVM classifier.']
parse_name: cv.HOGDescriptor.HOGDescriptor with ['cv'] -> fullname:cv::HOGDescriptor::HOGDescriptor namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:HOGDescriptor
register (constructor) new in cv::HOGDescriptor (cv_HOGDescriptor_HOGDescriptor_String)

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    'H',
    [],
    [['const HOGDescriptor&', 'd', '', []]],
    None,
    '@overload\n@param d the HOGDescriptor which cloned to create a new one.']
parse_name: cv.HOGDescriptor.HOGDescriptor with ['cv'] -> fullname:cv::HOGDescriptor::HOGDescriptor namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:HOGDescriptor
register (constructor) copy in cv::HOGDescriptor (cv_HOGDescriptor_HOGDescriptor_HOGDescriptor)

--- Incoming ---
[   'cv.HOGDescriptor.~HOGDescriptor',
    '~',
    [],
    [],
    None,
    '@brief Default destructor.']
parse_name: cv.HOGDescriptor.~HOGDescriptor with ['cv'] -> fullname:cv::HOGDescriptor::~HOGDescriptor namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:~HOGDescriptor
ignore destructor (method) ~HOGDescriptor in cv::HOGDescriptor

--- Incoming ---
[   'cv.HOGDescriptor.getDescriptorSize',
    'size_t',
    ['/C'],
    [],
    None,
    '@brief Returns the number of coefficients required for the '
    'classification.']
parse_name: cv.HOGDescriptor.getDescriptorSize with ['cv'] -> fullname:cv::HOGDescriptor::getDescriptorSize namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:getDescriptorSize
register (method) getDescriptorSize in cv::HOGDescriptor (cv_HOGDescriptor_getDescriptorSize_const)

--- Incoming ---
[   'cv.HOGDescriptor.checkDetectorSize',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Checks if detector size equal to descriptor size.']
parse_name: cv.HOGDescriptor.checkDetectorSize with ['cv'] -> fullname:cv::HOGDescriptor::checkDetectorSize namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:checkDetectorSize
register (method) checkDetectorSize in cv::HOGDescriptor (cv_HOGDescriptor_checkDetectorSize_const)

--- Incoming ---
[   'cv.HOGDescriptor.getWinSigma',
    'double',
    ['/C'],
    [],
    None,
    '@brief Returns winSigma value']
parse_name: cv.HOGDescriptor.getWinSigma with ['cv'] -> fullname:cv::HOGDescriptor::getWinSigma namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:getWinSigma
register (method) getWinSigma in cv::HOGDescriptor (cv_HOGDescriptor_getWinSigma_const)

--- Incoming ---
[   'cv.HOGDescriptor.setSVMDetector',
    'void',
    [],
    [['InputArray', 'svmdetector', '', []]],
    None,
    '@brief Sets coefficients for the linear SVM classifier.\n'
    '@param svmdetector coefficients for the linear SVM classifier.']
parse_name: cv.HOGDescriptor.setSVMDetector with ['cv'] -> fullname:cv::HOGDescriptor::setSVMDetector namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:setSVMDetector
register (method) setSVMDetector in cv::HOGDescriptor (cv_HOGDescriptor_setSVMDetector__InputArray)

--- Incoming ---
[   'cv.HOGDescriptor.read',
    'bool',
    [],
    [['FileNode&', 'fn', '', []]],
    None,
    '@brief Reads HOGDescriptor parameters from a cv::FileNode.\n'
    '@param fn File node']
parse_name: cv.HOGDescriptor.read with ['cv'] -> fullname:cv::HOGDescriptor::read namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:read
register (method) read in cv::HOGDescriptor (cv_HOGDescriptor_read_FileNode)

--- Incoming ---
[   'cv.HOGDescriptor.write',
    'void',
    ['/C'],
    [['FileStorage&', 'fs', '', []], ['const String&', 'objname', '', []]],
    None,
    '@brief Stores HOGDescriptor parameters in a cv::FileStorage.\n'
    '@param fs File storage\n'
    '@param objname Object name']
parse_name: cv.HOGDescriptor.write with ['cv'] -> fullname:cv::HOGDescriptor::write namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:write
register (method) write in cv::HOGDescriptor (cv_HOGDescriptor_write_const_FileStorage_String)

--- Incoming ---
[   'cv.HOGDescriptor.load',
    'bool',
    [],
    [   ['const String&', 'filename', '', []],
        ['const String&', 'objname', 'String()', []]],
    None,
    '@brief loads HOGDescriptor parameters and coefficients for the linear SVM '
    'classifier from a file.\n'
    '@param filename Path of the file to read.\n'
    '@param objname The optional name of the node to read (if empty, the first '
    'top-level node will be used).']
parse_name: cv.HOGDescriptor.load with ['cv'] -> fullname:cv::HOGDescriptor::load namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:load
register (method) load in cv::HOGDescriptor (cv_HOGDescriptor_load_String_String)

--- Incoming ---
[   'cv.HOGDescriptor.save',
    'void',
    ['/C'],
    [   ['const String&', 'filename', '', []],
        ['const String&', 'objname', 'String()', []]],
    None,
    '@brief saves HOGDescriptor parameters and coefficients for the linear SVM '
    'classifier to a file\n'
    '@param filename File name\n'
    '@param objname Object name']
parse_name: cv.HOGDescriptor.save with ['cv'] -> fullname:cv::HOGDescriptor::save namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:save
register (method) save in cv::HOGDescriptor (cv_HOGDescriptor_save_const_String_String)

--- Incoming ---
[   'cv.HOGDescriptor.copyTo',
    'void',
    ['/C'],
    [['HOGDescriptor&', 'c', '', []]],
    None,
    '@brief clones the HOGDescriptor\n@param c cloned HOGDescriptor']
parse_name: cv.HOGDescriptor.copyTo with ['cv'] -> fullname:cv::HOGDescriptor::copyTo namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:copyTo
register (method) copyTo in cv::HOGDescriptor (cv_HOGDescriptor_copyTo_const_HOGDescriptor)

--- Incoming ---
[   'cv.HOGDescriptor.compute',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['std::vector<float>&', 'descriptors', '', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['const std::vector<Point>&', 'locations', 'std::vector<Point>()', []]],
    None,
    '@brief Computes HOG descriptors of given image.\n'
    '@param img Matrix of the type CV_8U containing an image where HOG '
    'features will be calculated.\n'
    '@param descriptors Matrix of the type CV_32F\n'
    '@param winStride Window stride. It must be a multiple of block stride.\n'
    '@param padding Padding\n'
    '@param locations Vector of Point']
parse_name: cv.HOGDescriptor.compute with ['cv'] -> fullname:cv::HOGDescriptor::compute namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:compute
register (method) compute in cv::HOGDescriptor (cv_HOGDescriptor_compute_const__InputArray_VectorOffloat_Size_Size_VectorOfPoint)

--- Incoming ---
[   'cv.HOGDescriptor.detect',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['std::vector<Point>&', 'foundLocations', '', []],
        ['std::vector<double>&', 'weights', '', []],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        [   'const std::vector<Point>&',
            'searchLocations',
            'std::vector<Point>()',
            []]],
    None,
    '@brief Performs object detection without a multi-scale window.\n'
    '@param img Matrix of the type CV_8U or CV_8UC3 containing an image where '
    'objects are detected.\n'
    '@param foundLocations Vector of point where each point contains left-top '
    'corner point of detected object boundaries.\n'
    '@param weights Vector that will contain confidence values for each '
    'detected object.\n'
    '@param hitThreshold Threshold for the distance between features and SVM '
    'classifying plane.\n'
    'Usually it is 0 and should be specified in the detector coefficients (as '
    'the last free coefficient).\n'
    'But if the free coefficient is omitted (which is allowed), you can '
    'specify it manually here.\n'
    '@param winStride Window stride. It must be a multiple of block stride.\n'
    '@param padding Padding\n'
    '@param searchLocations Vector of Point includes set of requested '
    'locations to be evaluated.']
parse_name: cv.HOGDescriptor.detect with ['cv'] -> fullname:cv::HOGDescriptor::detect namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:detect
register (method) detect in cv::HOGDescriptor (cv_HOGDescriptor_detect_const__InputArray_VectorOfPoint_VectorOfdouble_double_Size_Size_VectorOfPoint)

--- Incoming ---
[   'cv.HOGDescriptor.detect',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['std::vector<Point>&', 'foundLocations', '', []],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        [   'const std::vector<Point>&',
            'searchLocations',
            'std::vector<Point>()',
            []]],
    None,
    '@brief Performs object detection without a multi-scale window.\n'
    '@param img Matrix of the type CV_8U or CV_8UC3 containing an image where '
    'objects are detected.\n'
    '@param foundLocations Vector of point where each point contains left-top '
    'corner point of detected object boundaries.\n'
    '@param hitThreshold Threshold for the distance between features and SVM '
    'classifying plane.\n'
    'Usually it is 0 and should be specified in the detector coefficients (as '
    'the last free coefficient).\n'
    'But if the free coefficient is omitted (which is allowed), you can '
    'specify it manually here.\n'
    '@param winStride Window stride. It must be a multiple of block stride.\n'
    '@param padding Padding\n'
    '@param searchLocations Vector of Point includes locations to search.']
parse_name: cv.HOGDescriptor.detect with ['cv'] -> fullname:cv::HOGDescriptor::detect namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:detect
register (method) detect in cv::HOGDescriptor (cv_HOGDescriptor_detect_const__InputArray_VectorOfPoint_double_Size_Size_VectorOfPoint)

--- Incoming ---
[   'cv.HOGDescriptor.detectMultiScale',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['std::vector<Rect>&', 'foundLocations', '', []],
        ['std::vector<double>&', 'foundWeights', '', []],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['double', 'scale', '1.05', []],
        ['double', 'finalThreshold', '2.0', []],
        ['bool', 'useMeanshiftGrouping', 'false', []]],
    None,
    '@brief Detects objects of different sizes in the input image. The '
    'detected objects are returned as a list\n'
    'of rectangles.\n'
    '@param img Matrix of the type CV_8U or CV_8UC3 containing an image where '
    'objects are detected.\n'
    '@param foundLocations Vector of rectangles where each rectangle contains '
    'the detected object.\n'
    '@param foundWeights Vector that will contain confidence values for each '
    'detected object.\n'
    '@param hitThreshold Threshold for the distance between features and SVM '
    'classifying plane.\n'
    'Usually it is 0 and should be specified in the detector coefficients (as '
    'the last free coefficient).\n'
    'But if the free coefficient is omitted (which is allowed), you can '
    'specify it manually here.\n'
    '@param winStride Window stride. It must be a multiple of block stride.\n'
    '@param padding Padding\n'
    '@param scale Coefficient of the detection window increase.\n'
    '@param finalThreshold Final threshold\n'
    '@param useMeanshiftGrouping indicates grouping algorithm']
parse_name: cv.HOGDescriptor.detectMultiScale with ['cv'] -> fullname:cv::HOGDescriptor::detectMultiScale namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:detectMultiScale
register (method) detectMultiScale in cv::HOGDescriptor (cv_HOGDescriptor_detectMultiScale_const__InputArray_VectorOfRect_VectorOfdouble_double_Size_Size_double_double_bool)

--- Incoming ---
[   'cv.HOGDescriptor.detectMultiScale',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['std::vector<Rect>&', 'foundLocations', '', []],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['double', 'scale', '1.05', []],
        ['double', 'finalThreshold', '2.0', []],
        ['bool', 'useMeanshiftGrouping', 'false', []]],
    None,
    '@brief Detects objects of different sizes in the input image. The '
    'detected objects are returned as a list\n'
    'of rectangles.\n'
    '@param img Matrix of the type CV_8U or CV_8UC3 containing an image where '
    'objects are detected.\n'
    '@param foundLocations Vector of rectangles where each rectangle contains '
    'the detected object.\n'
    '@param hitThreshold Threshold for the distance between features and SVM '
    'classifying plane.\n'
    'Usually it is 0 and should be specified in the detector coefficients (as '
    'the last free coefficient).\n'
    'But if the free coefficient is omitted (which is allowed), you can '
    'specify it manually here.\n'
    '@param winStride Window stride. It must be a multiple of block stride.\n'
    '@param padding Padding\n'
    '@param scale Coefficient of the detection window increase.\n'
    '@param finalThreshold Final threshold\n'
    '@param useMeanshiftGrouping indicates grouping algorithm']
parse_name: cv.HOGDescriptor.detectMultiScale with ['cv'] -> fullname:cv::HOGDescriptor::detectMultiScale namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:detectMultiScale
register (method) detectMultiScale in cv::HOGDescriptor (cv_HOGDescriptor_detectMultiScale_const__InputArray_VectorOfRect_double_Size_Size_double_double_bool)

--- Incoming ---
[   'cv.HOGDescriptor.computeGradient',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['InputOutputArray', 'grad', '', []],
        ['InputOutputArray', 'angleOfs', '', []],
        ['Size', 'paddingTL', 'Size()', []],
        ['Size', 'paddingBR', 'Size()', []]],
    None,
    '@brief  Computes gradients and quantized gradient orientations.\n'
    '@param img Matrix contains the image to be computed\n'
    '@param grad Matrix of type CV_32FC2 contains computed gradients\n'
    '@param angleOfs Matrix of type CV_8UC2 contains quantized gradient '
    'orientations\n'
    '@param paddingTL Padding from top-left\n'
    '@param paddingBR Padding from bottom-right']
parse_name: cv.HOGDescriptor.computeGradient with ['cv'] -> fullname:cv::HOGDescriptor::computeGradient namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:computeGradient
register (method) computeGradient in cv::HOGDescriptor (cv_HOGDescriptor_computeGradient_const__InputArray__InputOutputArray__InputOutputArray_Size_Size)

--- Incoming ---
[   'cv.HOGDescriptor.getDefaultPeopleDetector',
    'std::vector<float>',
    ['/S'],
    [],
    None,
    '@brief Returns coefficients of the classifier trained for people '
    'detection (for 64x128 windows).']
parse_name: cv.HOGDescriptor.getDefaultPeopleDetector with ['cv'] -> fullname:cv::HOGDescriptor::getDefaultPeopleDetector namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:getDefaultPeopleDetector
register (method) getDefaultPeopleDetector in cv::HOGDescriptor (cv_HOGDescriptor_getDefaultPeopleDetector)

--- Incoming ---
[   'cv.HOGDescriptor.getDaimlerPeopleDetector',
    'std::vector<float>',
    ['/S'],
    [],
    None,
    '@brief Returns coefficients of the classifier trained for people '
    'detection (for 48x96 windows).']
parse_name: cv.HOGDescriptor.getDaimlerPeopleDetector with ['cv'] -> fullname:cv::HOGDescriptor::getDaimlerPeopleDetector namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:getDaimlerPeopleDetector
register (method) getDaimlerPeopleDetector in cv::HOGDescriptor (cv_HOGDescriptor_getDaimlerPeopleDetector)

--- Incoming ---
[   'cv.HOGDescriptor.detectROI',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['const std::vector<cv::Point> &', 'locations', '', []],
        ['std::vector<cv::Point>&', 'foundLocations', '', []],
        ['std::vector<double>&', 'confidences', '', []],
        ['double', 'hitThreshold', '0', []],
        ['cv::Size', 'winStride', 'Size()', []],
        ['cv::Size', 'padding', 'Size()', []]],
    None,
    '@brief evaluate specified ROI and return confidence value for each '
    'location\n'
    '@param img Matrix of the type CV_8U or CV_8UC3 containing an image where '
    'objects are detected.\n'
    '@param locations Vector of Point\n'
    '@param foundLocations Vector of Point where each Point is detected '
    "object's top-left point.\n"
    '@param confidences confidences\n'
    '@param hitThreshold Threshold for the distance between features and SVM '
    'classifying plane. Usually\n'
    'it is 0 and should be specified in the detector coefficients (as the last '
    'free coefficient). But if\n'
    'the free coefficient is omitted (which is allowed), you can specify it '
    'manually here\n'
    '@param winStride winStride\n'
    '@param padding padding']
parse_name: cv.HOGDescriptor.detectROI with ['cv'] -> fullname:cv::HOGDescriptor::detectROI namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:detectROI
register (method) detectROI in cv::HOGDescriptor (cv_HOGDescriptor_detectROI_const__InputArray_VectorOfPoint_VectorOfPoint_VectorOfdouble_double_Size_Size)

--- Incoming ---
[   'cv.HOGDescriptor.detectMultiScaleROI',
    'void',
    ['/C'],
    [   ['InputArray', 'img', '', []],
        ['std::vector<cv::Rect>&', 'foundLocations', '', []],
        ['std::vector<DetectionROI>&', 'locations', '', []],
        ['double', 'hitThreshold', '0', []],
        ['int', 'groupThreshold', '0', []]],
    None,
    '@brief evaluate specified ROI and return confidence value for each '
    'location in multiple scales\n'
    '@param img Matrix of the type CV_8U or CV_8UC3 containing an image where '
    'objects are detected.\n'
    '@param foundLocations Vector of rectangles where each rectangle contains '
    'the detected object.\n'
    '@param locations Vector of DetectionROI\n'
    '@param hitThreshold Threshold for the distance between features and SVM '
    'classifying plane. Usually it is 0 and should be specified\n'
    'in the detector coefficients (as the last free coefficient). But if the '
    'free coefficient is omitted (which is allowed), you can specify it '
    'manually here.\n'
    '@param groupThreshold Minimum possible number of rectangles minus 1. The '
    'threshold is used in a group of rectangles to retain it.']
parse_name: cv.HOGDescriptor.detectMultiScaleROI with ['cv'] -> fullname:cv::HOGDescriptor::detectMultiScaleROI namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:detectMultiScaleROI
register (method) detectMultiScaleROI in cv::HOGDescriptor (cv_HOGDescriptor_detectMultiScaleROI_const__InputArray_VectorOfRect_VectorOfDetectionROI_double_int)

--- Incoming ---
[   'cv.HOGDescriptor.groupRectangles',
    'void',
    ['/C'],
    [   ['std::vector<cv::Rect>&', 'rectList', '', []],
        ['std::vector<double>&', 'weights', '', []],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '', []]],
    None,
    '@brief Groups the object candidate rectangles.\n'
    '@param rectList  Input/output vector of rectangles. Output vector '
    'includes retained and grouped rectangles. (The Python list is not '
    'modified in place.)\n'
    '@param weights Input/output vector of weights of rectangles. Output '
    'vector includes weights of retained and grouped rectangles. (The Python '
    'list is not modified in place.)\n'
    '@param groupThreshold Minimum possible number of rectangles minus 1. The '
    'threshold is used in a group of rectangles to retain it.\n'
    '@param eps Relative difference between sides of the rectangles to merge '
    'them into a group.']
parse_name: cv.HOGDescriptor.groupRectangles with ['cv'] -> fullname:cv::HOGDescriptor::groupRectangles namespace:cv classpath:HOGDescriptor classname:HOGDescriptor name:groupRectangles
register (method) groupRectangles in cv::HOGDescriptor (cv_HOGDescriptor_groupRectangles_const_VectorOfRect_VectorOfdouble_int_double)

--- Incoming ---
['class cv.QRCodeDetector', '', [], [], None, '']
parse_name: class cv.QRCodeDetector with ['cv'] -> fullname:cv::QRCodeDetector namespace:cv classpath: classname: name:QRCodeDetector
register class cv::QRCodeDetector (['class cv.QRCodeDetector', '', [], [], None, ''])

--- Incoming ---
['cv.QRCodeDetector.QRCodeDetector', 'Q', [], [], None, '']
parse_name: cv.QRCodeDetector.QRCodeDetector with ['cv'] -> fullname:cv::QRCodeDetector::QRCodeDetector namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:QRCodeDetector
register (constructor) default in cv::QRCodeDetector (cv_QRCodeDetector_QRCodeDetector)

--- Incoming ---
['cv.QRCodeDetector.~QRCodeDetector', '~', [], [], None, '']
parse_name: cv.QRCodeDetector.~QRCodeDetector with ['cv'] -> fullname:cv::QRCodeDetector::~QRCodeDetector namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:~QRCodeDetector
ignore destructor (method) ~QRCodeDetector in cv::QRCodeDetector

--- Incoming ---
[   'cv.QRCodeDetector.setEpsX',
    'void',
    [],
    [['double', 'epsX', '', []]],
    None,
    '@brief sets the epsilon used during the horizontal scan of QR code stop '
    'marker detection.\n'
    '@param epsX Epsilon neighborhood, which allows you to determine the '
    'horizontal pattern\n'
    'of the scheme 1:1:3:1:1 according to QR code standard.']
parse_name: cv.QRCodeDetector.setEpsX with ['cv'] -> fullname:cv::QRCodeDetector::setEpsX namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:setEpsX
register (method) setEpsX in cv::QRCodeDetector (cv_QRCodeDetector_setEpsX_double)

--- Incoming ---
[   'cv.QRCodeDetector.setEpsY',
    'void',
    [],
    [['double', 'epsY', '', []]],
    None,
    '@brief sets the epsilon used during the vertical scan of QR code stop '
    'marker detection.\n'
    '@param epsY Epsilon neighborhood, which allows you to determine the '
    'vertical pattern\n'
    'of the scheme 1:1:3:1:1 according to QR code standard.']
parse_name: cv.QRCodeDetector.setEpsY with ['cv'] -> fullname:cv::QRCodeDetector::setEpsY namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:setEpsY
register (method) setEpsY in cv::QRCodeDetector (cv_QRCodeDetector_setEpsY_double)

--- Incoming ---
[   'cv.QRCodeDetector.detect',
    'bool',
    ['/C'],
    [['InputArray', 'img', '', []], ['OutputArray', 'points', '', []]],
    None,
    '@brief Detects QR code in image and returns the quadrangle containing the '
    'code.\n'
    '@param img grayscale or color (BGR) image containing (or not) QR code.\n'
    '@param points Output vector of vertices of the minimum-area quadrangle '
    'containing the code.']
parse_name: cv.QRCodeDetector.detect with ['cv'] -> fullname:cv::QRCodeDetector::detect namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:detect
register (method) detect in cv::QRCodeDetector (cv_QRCodeDetector_detect_const__InputArray__OutputArray)

--- Incoming ---
[   'cv.QRCodeDetector.decode',
    'std::string',
    [],
    [   ['InputArray', 'img', '', []],
        ['InputArray', 'points', '', []],
        ['OutputArray', 'straight_qrcode', 'noArray()', []]],
    None,
    "@brief Decodes QR code in image once it's found by the detect() method.\n"
    'Returns UTF8-encoded output string or empty string if the code cannot be '
    'decoded.\n'
    '\n'
    '@param img grayscale or color (BGR) image containing QR code.\n'
    '@param points Quadrangle vertices found by detect() method (or some other '
    'algorithm).\n'
    '@param straight_qrcode The optional output image containing rectified and '
    'binarized QR code']
parse_name: cv.QRCodeDetector.decode with ['cv'] -> fullname:cv::QRCodeDetector::decode namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:decode
register (method) decode in cv::QRCodeDetector (cv_QRCodeDetector_decode__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.QRCodeDetector.detectAndDecode',
    'std::string',
    [],
    [   ['InputArray', 'img', '', []],
        ['OutputArray', 'points', 'noArray()', []],
        ['OutputArray', 'straight_qrcode', 'noArray()', []]],
    None,
    '@brief Both detects and decodes QR code\n'
    '\n'
    '@param img grayscale or color (BGR) image containing QR code.\n'
    '@param points opiotnal output array of vertices of the found QR code '
    'quadrangle. Will be empty if not found.\n'
    '@param straight_qrcode The optional output image containing rectified and '
    'binarized QR code']
parse_name: cv.QRCodeDetector.detectAndDecode with ['cv'] -> fullname:cv::QRCodeDetector::detectAndDecode namespace:cv classpath:QRCodeDetector classname:QRCodeDetector name:detectAndDecode
register (method) detectAndDecode in cv::QRCodeDetector (cv_QRCodeDetector_detectAndDecode__InputArray__OutputArray__OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/objdetect/detection_based_tracker.hpp ================


Namespaces: ['cv']
Comment: {'objdetect': '\n@defgroup objdetect Object Detection\n\nHaar Feature-based Cascade Classifier for Object Detection\n----------------------------------------------------------\n\nThe object detector described below has been initially proposed by Paul Viola @cite Viola01 and\nimproved by Rainer Lienhart @cite Lienhart02 .\n\nFirst, a classifier (namely a *cascade of boosted classifiers working with haar-like features*) is\ntrained with a few hundred sample views of a particular object (i.e., a face or a car), called\npositive examples, that are scaled to the same size (say, 20x20), and negative examples - arbitrary\nimages of the same size.\n\nAfter a classifier is trained, it can be applied to a region of interest (of the same size as used\nduring the training) in an input image. The classifier outputs a "1" if the region is likely to show\nthe object (i.e., face/car), and "0" otherwise. To search for the object in the whole image one can\nmove the search window across the image and check every location using the classifier. The\nclassifier is designed so that it can be easily "resized" in order to be able to find the objects of\ninterest at different sizes, which is more efficient than resizing the image itself. So, to find an\nobject of an unknown size in the image the scan procedure should be done several times at different\nscales.\n\nThe word "cascade" in the classifier name means that the resultant classifier consists of several\nsimpler classifiers (*stages*) that are applied subsequently to a region of interest until at some\nstage the candidate is rejected or all the stages are passed. The word "boosted" means that the\nclassifiers at every stage of the cascade are complex themselves and they are built out of basic\nclassifiers using one of four different boosting techniques (weighted voting). Currently Discrete\nAdaboost, Real Adaboost, Gentle Adaboost and Logitboost are supported. The basic classifiers are\ndecision-tree classifiers with at least 2 leaves. Haar-like features are the input to the basic\nclassifiers, and are calculated as described below. The current algorithm uses the following\nHaar-like features:\n\n![image](pics/haarfeatures.png)\n\nThe feature used in a particular classifier is specified by its shape (1a, 2b etc.), position within\nthe region of interest and the scale (this scale is not the same as the scale used at the detection\nstage, though these two scales are multiplied). For example, in the case of the third line feature\n(2c) the response is calculated as the difference between the sum of image pixels under the\nrectangle covering the whole feature (including the two white stripes and the black stripe in the\nmiddle) and the sum of the image pixels under the black stripe multiplied by 3 in order to\ncompensate for the differences in the size of areas. The sums of pixel values over a rectangular\nregions are calculated rapidly using integral images (see below and the integral description).\n\nTo see the object detector at work, have a look at the facedetect demo:\n<https://github.com/opencv/opencv/tree/master/samples/cpp/dbt_face_detection.cpp>\n\nThe following reference is for the detection part only. There is a separate application called\nopencv_traincascade that can train a cascade of boosted classifiers from a set of samples.\n\n@note In the new C++ interface it is also possible to use LBP (local binary pattern) features in\naddition to Haar-like features. .. [Viola01] Paul Viola and Michael J. Jones. Rapid Object Detection\nusing a Boosted Cascade of Simple Features. IEEE CVPR, 2001. The paper is available online at\n<http://research.microsoft.com/en-us/um/people/viola/Pubs/Detect/violaJones_CVPR2001.pdf>\n\n@{\n@defgroup objdetect_c C API\n@}\n\n'}

--- Incoming ---
[   'class cv.DetectionBasedTracker',
    '',
    [],
    [],
    None,
    '@addtogroup objdetect\n@{']
parse_name: class cv.DetectionBasedTracker with ['cv'] -> fullname:cv::DetectionBasedTracker namespace:cv classpath: classname: name:DetectionBasedTracker
register class cv::DetectionBasedTracker (['class cv.DetectionBasedTracker', '', [], [], None, '@addtogroup objdetect\n@{'])

--- Incoming ---
['struct cv.DetectionBasedTracker.Parameters', '', [], [], None, '']
parse_name: struct cv.DetectionBasedTracker.Parameters with ['cv'] -> fullname:cv::DetectionBasedTracker::Parameters namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:Parameters
register class cv::DetectionBasedTracker::Parameters (['struct cv.DetectionBasedTracker.Parameters', '', [], [], None, ''])

--- Incoming ---
['cv.DetectionBasedTracker.Parameters.Parameters', 'P', [], [], None, '']
parse_name: cv.DetectionBasedTracker.Parameters.Parameters with ['cv'] -> fullname:cv::DetectionBasedTracker::Parameters::Parameters namespace:cv classpath:DetectionBasedTracker::Parameters classname:Parameters name:Parameters
register (constructor) default in cv::DetectionBasedTracker::Parameters (cv_DetectionBasedTracker_Parameters_Parameters)

--- Incoming ---
['class cv.DetectionBasedTracker.IDetector', '', [], [], None, '']
parse_name: class cv.DetectionBasedTracker.IDetector with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:IDetector
register class cv::DetectionBasedTracker::IDetector (['class cv.DetectionBasedTracker.IDetector', '', [], [], None, ''])

--- Incoming ---
['cv.DetectionBasedTracker.IDetector.IDetector', 'I', [], [], None, '']
parse_name: cv.DetectionBasedTracker.IDetector.IDetector with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::IDetector namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:IDetector
register (constructor) default in cv::DetectionBasedTracker::IDetector (cv_DetectionBasedTracker_IDetector_IDetector)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.detect',
    'void',
    ['/A'],
    [   ['const cv::Mat&', 'image', '', []],
        ['std::vector<cv::Rect>&', 'objects', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.detect with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::detect namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:detect
register (method) detect in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_detect_Mat_VectorOfRect)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.setMinObjectSize',
    'void',
    [],
    [['const cv::Size&', 'min', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.setMinObjectSize with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::setMinObjectSize namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:setMinObjectSize
register (method) setMinObjectSize in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_setMinObjectSize_Size)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.setMaxObjectSize',
    'void',
    [],
    [['const cv::Size&', 'max', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.setMaxObjectSize with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::setMaxObjectSize namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:setMaxObjectSize
register (method) setMaxObjectSize in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_setMaxObjectSize_Size)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.getMinObjectSize',
    'cv::Size',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.getMinObjectSize with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::getMinObjectSize namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:getMinObjectSize
register (method) getMinObjectSize in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_getMinObjectSize_const)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.getMaxObjectSize',
    'cv::Size',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.getMaxObjectSize with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::getMaxObjectSize namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:getMaxObjectSize
register (method) getMaxObjectSize in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_getMaxObjectSize_const)

--- Incoming ---
['cv.DetectionBasedTracker.IDetector.getScaleFactor', 'float', [], [], None, '']
parse_name: cv.DetectionBasedTracker.IDetector.getScaleFactor with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::getScaleFactor namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:getScaleFactor
register (method) getScaleFactor in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_getScaleFactor)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.setScaleFactor',
    'void',
    [],
    [['float', 'value', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.setScaleFactor with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::setScaleFactor namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:setScaleFactor
register (method) setScaleFactor in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_setScaleFactor_float)

--- Incoming ---
['cv.DetectionBasedTracker.IDetector.getMinNeighbours', 'int', [], [], None, '']
parse_name: cv.DetectionBasedTracker.IDetector.getMinNeighbours with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::getMinNeighbours namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:getMinNeighbours
register (method) getMinNeighbours in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_getMinNeighbours)

--- Incoming ---
[   'cv.DetectionBasedTracker.IDetector.setMinNeighbours',
    'void',
    [],
    [['int', 'value', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.IDetector.setMinNeighbours with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::setMinNeighbours namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:setMinNeighbours
register (method) setMinNeighbours in cv::DetectionBasedTracker::IDetector (trait) (cv_DetectionBasedTracker_IDetector_setMinNeighbours_int)

--- Incoming ---
['cv.DetectionBasedTracker.IDetector.~IDetector', '~', [], [], None, '']
parse_name: cv.DetectionBasedTracker.IDetector.~IDetector with ['cv'] -> fullname:cv::DetectionBasedTracker::IDetector::~IDetector namespace:cv classpath:DetectionBasedTracker::IDetector classname:IDetector name:~IDetector
ignore destructor (method) ~IDetector in cv::DetectionBasedTracker::IDetector (trait)

--- Incoming ---
[   'cv.DetectionBasedTracker.DetectionBasedTracker',
    'D',
    [],
    [   ['cv::Ptr<IDetector>', 'mainDetector', '', []],
        ['cv::Ptr<IDetector>', 'trackingDetector', '', []],
        ['const Parameters&', 'params', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.DetectionBasedTracker with ['cv'] -> fullname:cv::DetectionBasedTracker::DetectionBasedTracker namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DetectionBasedTracker
Registering an unknown type: cv::Ptr<IDetector>
register (constructor) new in cv::DetectionBasedTracker (cv_DetectionBasedTracker_DetectionBasedTracker_Ptr<IDetector>_Ptr<IDetector>_Parameters)

--- Incoming ---
['cv.DetectionBasedTracker.~DetectionBasedTracker', '~', [], [], None, '']
parse_name: cv.DetectionBasedTracker.~DetectionBasedTracker with ['cv'] -> fullname:cv::DetectionBasedTracker::~DetectionBasedTracker namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:~DetectionBasedTracker
ignore destructor (method) ~DetectionBasedTracker in cv::DetectionBasedTracker

--- Incoming ---
['cv.DetectionBasedTracker.run', 'bool', [], [], None, '']
parse_name: cv.DetectionBasedTracker.run with ['cv'] -> fullname:cv::DetectionBasedTracker::run namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:run
register (method) run in cv::DetectionBasedTracker (cv_DetectionBasedTracker_run)

--- Incoming ---
['cv.DetectionBasedTracker.stop', 'void', [], [], None, '']
parse_name: cv.DetectionBasedTracker.stop with ['cv'] -> fullname:cv::DetectionBasedTracker::stop namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:stop
register (method) stop in cv::DetectionBasedTracker (cv_DetectionBasedTracker_stop)

--- Incoming ---
['cv.DetectionBasedTracker.resetTracking', 'void', [], [], None, '']
parse_name: cv.DetectionBasedTracker.resetTracking with ['cv'] -> fullname:cv::DetectionBasedTracker::resetTracking namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:resetTracking
register (method) resetTracking in cv::DetectionBasedTracker (cv_DetectionBasedTracker_resetTracking)

--- Incoming ---
[   'cv.DetectionBasedTracker.process',
    'void',
    [],
    [['const cv::Mat&', 'imageGray', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.process with ['cv'] -> fullname:cv::DetectionBasedTracker::process namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:process
register (method) process in cv::DetectionBasedTracker (cv_DetectionBasedTracker_process_Mat)

--- Incoming ---
[   'cv.DetectionBasedTracker.setParameters',
    'bool',
    [],
    [['const Parameters&', 'params', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.setParameters with ['cv'] -> fullname:cv::DetectionBasedTracker::setParameters namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:setParameters
register (method) setParameters in cv::DetectionBasedTracker (cv_DetectionBasedTracker_setParameters_Parameters)

--- Incoming ---
[   'cv.DetectionBasedTracker.getParameters',
    'const Parameters&',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.DetectionBasedTracker.getParameters with ['cv'] -> fullname:cv::DetectionBasedTracker::getParameters namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:getParameters
register (method) getParameters in cv::DetectionBasedTracker (cv_DetectionBasedTracker_getParameters_const)

--- Incoming ---
[   'typedef cv.DetectionBasedTracker.Object',
    'std::pair<cv::Rect, int>',
    '',
    [],
    None,
    '']
parse_name: typedef cv.DetectionBasedTracker.Object with ['cv'] -> fullname:cv::DetectionBasedTracker::Object namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:Object
Registering an unknown type: std::pair<cv::Rect, int>

--- Incoming ---
[   'cv.DetectionBasedTracker.getObjects',
    'void',
    ['/C'],
    [['std::vector<cv::Rect>&', 'result', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.getObjects with ['cv'] -> fullname:cv::DetectionBasedTracker::getObjects namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:getObjects
register (method) getObjects in cv::DetectionBasedTracker (cv_DetectionBasedTracker_getObjects_const_VectorOfRect)

--- Incoming ---
[   'cv.DetectionBasedTracker.getObjects',
    'void',
    ['/C'],
    [['std::vector<Object>&', 'result', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.getObjects with ['cv'] -> fullname:cv::DetectionBasedTracker::getObjects namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:getObjects
Registering an unknown type: Object
register (method) getObjects in cv::DetectionBasedTracker (cv_DetectionBasedTracker_getObjects_const_std_vector<Object>)

--- Incoming ---
[   'enum cv.DetectionBasedTracker.ObjectStatus',
    '',
    [],
    [   [   'const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET',
            '0',
            [],
            [],
            None,
            ''],
        ['const cv.DetectionBasedTracker.DETECTED', '1', [], [], None, ''],
        [   'const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST',
            '2',
            [],
            [],
            None,
            ''],
        ['const cv.DetectionBasedTracker.WRONG_OBJECT', '3', [], [], None, '']],
    None,
    '']
parse_name: const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET with ['cv'] -> fullname:cv::DetectionBasedTracker::DETECTED_NOT_SHOWN_YET namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DETECTED_NOT_SHOWN_YET
parse_name: const cv.DetectionBasedTracker.DETECTED with ['cv'] -> fullname:cv::DetectionBasedTracker::DETECTED namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DETECTED
parse_name: const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST with ['cv'] -> fullname:cv::DetectionBasedTracker::DETECTED_TEMPORARY_LOST namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DETECTED_TEMPORARY_LOST
parse_name: const cv.DetectionBasedTracker.WRONG_OBJECT with ['cv'] -> fullname:cv::DetectionBasedTracker::WRONG_OBJECT namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:WRONG_OBJECT
parse_name: enum cv.DetectionBasedTracker.ObjectStatus with ['cv'] -> fullname:cv::DetectionBasedTracker::ObjectStatus namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:ObjectStatus
parse_name: const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET with ['cv'] -> fullname:cv::DetectionBasedTracker::DETECTED_NOT_SHOWN_YET namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DETECTED_NOT_SHOWN_YET
parse_name: const cv.DetectionBasedTracker.DETECTED with ['cv'] -> fullname:cv::DetectionBasedTracker::DETECTED namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DETECTED
parse_name: const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST with ['cv'] -> fullname:cv::DetectionBasedTracker::DETECTED_TEMPORARY_LOST namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:DETECTED_TEMPORARY_LOST
parse_name: const cv.DetectionBasedTracker.WRONG_OBJECT with ['cv'] -> fullname:cv::DetectionBasedTracker::WRONG_OBJECT namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:WRONG_OBJECT

--- Incoming ---
['struct cv.DetectionBasedTracker.ExtObject', '', [], [], None, '']
parse_name: struct cv.DetectionBasedTracker.ExtObject with ['cv'] -> fullname:cv::DetectionBasedTracker::ExtObject namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:ExtObject
register class cv::DetectionBasedTracker::ExtObject (['struct cv.DetectionBasedTracker.ExtObject', '', [], [], None, ''])

--- Incoming ---
[   'cv.DetectionBasedTracker.ExtObject.ExtObject',
    'E',
    [],
    [   ['int', '_id', '', []],
        ['cv::Rect', '_location', '', []],
        ['ObjectStatus', '_status', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.ExtObject.ExtObject with ['cv'] -> fullname:cv::DetectionBasedTracker::ExtObject::ExtObject namespace:cv classpath:DetectionBasedTracker::ExtObject classname:ExtObject name:ExtObject
register (constructor) new in cv::DetectionBasedTracker::ExtObject (cv_DetectionBasedTracker_ExtObject_ExtObject_int_Rect_DetectionBasedTracker_ObjectStatus)

--- Incoming ---
[   'cv.DetectionBasedTracker.getObjects',
    'void',
    ['/C'],
    [['std::vector<ExtObject>&', 'result', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.getObjects with ['cv'] -> fullname:cv::DetectionBasedTracker::getObjects namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:getObjects
register (method) getObjects in cv::DetectionBasedTracker (cv_DetectionBasedTracker_getObjects_const_VectorOfExtObject)

--- Incoming ---
[   'cv.DetectionBasedTracker.addObject',
    'int',
    [],
    [['const cv::Rect&', 'location', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.addObject with ['cv'] -> fullname:cv::DetectionBasedTracker::addObject namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:addObject
register (method) addObject in cv::DetectionBasedTracker (cv_DetectionBasedTracker_addObject_Rect)

--- Incoming ---
[   'cv.DetectionBasedTracker.void * workcycleObjectDetectorFunction',
    'friend void*',
    ['/H'],
    [['void*', 'p', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.void * workcycleObjectDetectorFunction with ['cv'] -> fullname:cv::DetectionBasedTracker::void * workcycleObjectDetectorFunction namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:void * workcycleObjectDetectorFunction
Registering an unknown type: friend void

--- Incoming ---
[   'struct cv.DetectionBasedTracker.InnerParameters',
    '',
    ['/Hidden'],
    [],
    None,
    '']
parse_name: struct cv.DetectionBasedTracker.InnerParameters with ['cv'] -> fullname:cv::DetectionBasedTracker::InnerParameters namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:InnerParameters
register class cv::DetectionBasedTracker::InnerParameters (['struct cv.DetectionBasedTracker.InnerParameters', '', ['/Hidden'], [], None, '']) [ignored]

--- Incoming ---
[   'cv.DetectionBasedTracker.InnerParameters.InnerParameters',
    'I',
    [],
    [],
    None,
    '']
parse_name: cv.DetectionBasedTracker.InnerParameters.InnerParameters with ['cv'] -> fullname:cv::DetectionBasedTracker::InnerParameters::InnerParameters namespace:cv classpath:DetectionBasedTracker::InnerParameters classname:InnerParameters name:InnerParameters
Registering an unknown type: DetectionBasedTracker::InnerParameters
register (constructor) default in cv::DetectionBasedTracker::InnerParameters (ignored) (cv_DetectionBasedTracker_InnerParameters_InnerParameters)

--- Incoming ---
['struct cv.DetectionBasedTracker.TrackedObject', '', ['/Hidden'], [], None, '']
parse_name: struct cv.DetectionBasedTracker.TrackedObject with ['cv'] -> fullname:cv::DetectionBasedTracker::TrackedObject namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:TrackedObject
register class cv::DetectionBasedTracker::TrackedObject (['struct cv.DetectionBasedTracker.TrackedObject', '', ['/Hidden'], [], None, '']) [ignored]

--- Incoming ---
[   'typedef cv.DetectionBasedTracker.TrackedObject.PositionsVector',
    'std::vector<cv::Rect>',
    '',
    [],
    None,
    '']
parse_name: typedef cv.DetectionBasedTracker.TrackedObject.PositionsVector with ['cv'] -> fullname:cv::DetectionBasedTracker::TrackedObject::PositionsVector namespace:cv classpath:DetectionBasedTracker::TrackedObject classname:TrackedObject name:PositionsVector
Registering an unknown type: PositionsVector

--- Incoming ---
[   'cv.DetectionBasedTracker.TrackedObject.TrackedObject',
    'T',
    [],
    [['const cv::Rect&', 'rect', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.TrackedObject.TrackedObject with ['cv'] -> fullname:cv::DetectionBasedTracker::TrackedObject::TrackedObject namespace:cv classpath:DetectionBasedTracker::TrackedObject classname:TrackedObject name:TrackedObject
Registering an unknown type: DetectionBasedTracker::TrackedObject
register (constructor) new in cv::DetectionBasedTracker::TrackedObject (ignored) (cv_DetectionBasedTracker_TrackedObject_TrackedObject_Rect)

--- Incoming ---
[   'cv.DetectionBasedTracker.TrackedObject.getNextId',
    'int',
    ['/S'],
    [],
    None,
    '']
parse_name: cv.DetectionBasedTracker.TrackedObject.getNextId with ['cv'] -> fullname:cv::DetectionBasedTracker::TrackedObject::getNextId namespace:cv classpath:DetectionBasedTracker::TrackedObject classname:TrackedObject name:getNextId
register (method) getNextId in cv::DetectionBasedTracker::TrackedObject (ignored) (cv_DetectionBasedTracker_TrackedObject_getNextId)

--- Incoming ---
[   'cv.DetectionBasedTracker.updateTrackedObjects',
    'void',
    ['/H'],
    [['const std::vector<cv::Rect>&', 'detectedObjects', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.updateTrackedObjects with ['cv'] -> fullname:cv::DetectionBasedTracker::updateTrackedObjects namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:updateTrackedObjects

--- Incoming ---
[   'cv.DetectionBasedTracker.calcTrackedObjectPositionToShow',
    'cv::Rect',
    ['/C', '/H'],
    [['int', 'i', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.calcTrackedObjectPositionToShow with ['cv'] -> fullname:cv::DetectionBasedTracker::calcTrackedObjectPositionToShow namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:calcTrackedObjectPositionToShow

--- Incoming ---
[   'cv.DetectionBasedTracker.calcTrackedObjectPositionToShow',
    'cv::Rect',
    ['/C', '/H'],
    [['int', 'i', '', []], ['ObjectStatus&', 'status', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.calcTrackedObjectPositionToShow with ['cv'] -> fullname:cv::DetectionBasedTracker::calcTrackedObjectPositionToShow namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:calcTrackedObjectPositionToShow

--- Incoming ---
[   'cv.DetectionBasedTracker.detectInRegion',
    'void',
    ['/H'],
    [   ['const cv::Mat&', 'img', '', []],
        ['const cv::Rect&', 'r', '', []],
        ['std::vector<cv::Rect>&', 'detectedObjectsInRegions', '', []]],
    None,
    '']
parse_name: cv.DetectionBasedTracker.detectInRegion with ['cv'] -> fullname:cv::DetectionBasedTracker::detectInRegion namespace:cv classpath:DetectionBasedTracker classname:DetectionBasedTracker name:detectInRegion


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/objdetect/objdetect.hpp ================


Namespaces: ['cv']
Comment: {'objdetect': '\n@defgroup objdetect Object Detection\n\nHaar Feature-based Cascade Classifier for Object Detection\n----------------------------------------------------------\n\nThe object detector described below has been initially proposed by Paul Viola @cite Viola01 and\nimproved by Rainer Lienhart @cite Lienhart02 .\n\nFirst, a classifier (namely a *cascade of boosted classifiers working with haar-like features*) is\ntrained with a few hundred sample views of a particular object (i.e., a face or a car), called\npositive examples, that are scaled to the same size (say, 20x20), and negative examples - arbitrary\nimages of the same size.\n\nAfter a classifier is trained, it can be applied to a region of interest (of the same size as used\nduring the training) in an input image. The classifier outputs a "1" if the region is likely to show\nthe object (i.e., face/car), and "0" otherwise. To search for the object in the whole image one can\nmove the search window across the image and check every location using the classifier. The\nclassifier is designed so that it can be easily "resized" in order to be able to find the objects of\ninterest at different sizes, which is more efficient than resizing the image itself. So, to find an\nobject of an unknown size in the image the scan procedure should be done several times at different\nscales.\n\nThe word "cascade" in the classifier name means that the resultant classifier consists of several\nsimpler classifiers (*stages*) that are applied subsequently to a region of interest until at some\nstage the candidate is rejected or all the stages are passed. The word "boosted" means that the\nclassifiers at every stage of the cascade are complex themselves and they are built out of basic\nclassifiers using one of four different boosting techniques (weighted voting). Currently Discrete\nAdaboost, Real Adaboost, Gentle Adaboost and Logitboost are supported. The basic classifiers are\ndecision-tree classifiers with at least 2 leaves. Haar-like features are the input to the basic\nclassifiers, and are calculated as described below. The current algorithm uses the following\nHaar-like features:\n\n![image](pics/haarfeatures.png)\n\nThe feature used in a particular classifier is specified by its shape (1a, 2b etc.), position within\nthe region of interest and the scale (this scale is not the same as the scale used at the detection\nstage, though these two scales are multiplied). For example, in the case of the third line feature\n(2c) the response is calculated as the difference between the sum of image pixels under the\nrectangle covering the whole feature (including the two white stripes and the black stripe in the\nmiddle) and the sum of the image pixels under the black stripe multiplied by 3 in order to\ncompensate for the differences in the size of areas. The sums of pixel values over a rectangular\nregions are calculated rapidly using integral images (see below and the integral description).\n\nTo see the object detector at work, have a look at the facedetect demo:\n<https://github.com/opencv/opencv/tree/master/samples/cpp/dbt_face_detection.cpp>\n\nThe following reference is for the detection part only. There is a separate application called\nopencv_traincascade that can train a cascade of boosted classifiers from a set of samples.\n\n@note In the new C++ interface it is also possible to use LBP (local binary pattern) features in\naddition to Haar-like features. .. [Viola01] Paul Viola and Michael J. Jones. Rapid Object Detection\nusing a Boosted Cascade of Simple Features. IEEE CVPR, 2001. The paper is available online at\n<http://research.microsoft.com/en-us/um/people/viola/Pubs/Detect/violaJones_CVPR2001.pdf>\n\n@{\n@defgroup objdetect_c C API\n@}\n\n'}


===== Generating... =====
Generating func cv_createFaceDetectionMaskGenerator
Generating func cv_groupRectangles_VectorOfRect_VectorOfint_VectorOfdouble_int_double
Generating func cv_groupRectangles_VectorOfRect_VectorOfint_int_double
Generating func cv_groupRectangles_VectorOfRect_int_double
Generating func cv_groupRectangles_VectorOfRect_int_double_VectorOfint_VectorOfdouble
Generating func cv_groupRectangles_meanshift_VectorOfRect_VectorOfdouble_VectorOfdouble_double_Size
Ghost class cv::Algorithm (ghost, trait), ignoring
Generating impl for trait cv::BaseCascadeClassifier (trait)
Generating func cv_BaseCascadeClassifier_empty_const
Generating func cv_BaseCascadeClassifier_load_String
Generating func cv_BaseCascadeClassifier_detectMultiScale__InputArray_VectorOfRect_double_int_int_Size_Size
Generating func cv_BaseCascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_double_int_int_Size_Size
Generating func cv_BaseCascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_VectorOfdouble_double_int_int_Size_Size_bool
Generating func cv_BaseCascadeClassifier_isOldFormatCascade_const
Generating func cv_BaseCascadeClassifier_getOriginalWindowSize_const
Generating func cv_BaseCascadeClassifier_getFeatureType_const
Generating func cv_BaseCascadeClassifier_getOldCascade
Generating func cv_BaseCascadeClassifier_setMaskGenerator_PtrOfMaskGenerator
Generating func cv_BaseCascadeClassifier_getMaskGenerator
Generating impl for trait cv::BaseCascadeClassifier::MaskGenerator (trait)
Generating func cv_BaseCascadeClassifier_MaskGenerator_generateMask_Mat
Generating func cv_BaseCascadeClassifier_MaskGenerator_initializeMask_Mat
Generating box for cv::CascadeClassifier
Generating func cv_CascadeClassifier_CascadeClassifier
Generating func cv_CascadeClassifier_CascadeClassifier_String
Generating func cv_CascadeClassifier_empty_const
Generating func cv_CascadeClassifier_load_String
Generating func cv_CascadeClassifier_read_FileNode
Generating func cv_CascadeClassifier_detectMultiScale__InputArray_VectorOfRect_double_int_int_Size_Size
Generating func cv_CascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_double_int_int_Size_Size
Generating func cv_CascadeClassifier_detectMultiScale__InputArray_VectorOfRect_VectorOfint_VectorOfdouble_double_int_int_Size_Size_bool
Generating func cv_CascadeClassifier_isOldFormatCascade_const
Generating func cv_CascadeClassifier_getOriginalWindowSize_const
Generating func cv_CascadeClassifier_getFeatureType_const
Generating func cv_CascadeClassifier_getOldCascade
Generating func cv_CascadeClassifier_convert_String_String
Generating func cv_CascadeClassifier_setMaskGenerator_PtrOfMaskGenerator
Generating func cv_CascadeClassifier_getMaskGenerator
Ghost class cv::DMatch (simple, ghost), ignoring
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Generating box for cv::DetectionBasedTracker
Generating func cv_DetectionBasedTracker_DetectionBasedTracker_Ptr<IDetector>_Ptr<IDetector>_Parameters
  ignored: can not map type Unknown[cv::Ptr<IDetector>] yet
Generating func cv_DetectionBasedTracker_run
Generating func cv_DetectionBasedTracker_stop
Generating func cv_DetectionBasedTracker_resetTracking
Generating func cv_DetectionBasedTracker_process_Mat
Generating func cv_DetectionBasedTracker_setParameters_Parameters
Generating func cv_DetectionBasedTracker_getParameters_const
Generating func cv_DetectionBasedTracker_getObjects_const_VectorOfRect
Generating func cv_DetectionBasedTracker_getObjects_const_std_vector<Object>
  ignored: can not map type Vector[Unknown[Object]] yet
Generating func cv_DetectionBasedTracker_getObjects_const_VectorOfExtObject
Generating func cv_DetectionBasedTracker_addObject_Rect
Generating box for cv::DetectionBasedTracker::ExtObject
Generating func cv_DetectionBasedTracker_ExtObject_ExtObject_int_Rect_DetectionBasedTracker_ObjectStatus
Generating impl for trait cv::DetectionBasedTracker::IDetector (trait)
Generating func cv_DetectionBasedTracker_IDetector_detect_Mat_VectorOfRect
Generating func cv_DetectionBasedTracker_IDetector_setMinObjectSize_Size
Generating func cv_DetectionBasedTracker_IDetector_setMaxObjectSize_Size
Generating func cv_DetectionBasedTracker_IDetector_getMinObjectSize_const
Generating func cv_DetectionBasedTracker_IDetector_getMaxObjectSize_const
Generating func cv_DetectionBasedTracker_IDetector_getScaleFactor
Generating func cv_DetectionBasedTracker_IDetector_setScaleFactor_float
Generating func cv_DetectionBasedTracker_IDetector_getMinNeighbours
Generating func cv_DetectionBasedTracker_IDetector_setMinNeighbours_int
Manual ignore class cv::DetectionBasedTracker::InnerParameters (ignored)
Generating box for cv::DetectionBasedTracker::Parameters
Generating func cv_DetectionBasedTracker_Parameters_Parameters
Manual ignore class cv::DetectionBasedTracker::TrackedObject (ignored)
Generating box for cv::DetectionROI
Ghost class cv::Feature2D (ghost, trait), ignoring
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Generating box for cv::HOGDescriptor
Generating func cv_HOGDescriptor_winSize_const
Generating func cv_HOGDescriptor_blockSize_const
Generating func cv_HOGDescriptor_blockStride_const
Generating func cv_HOGDescriptor_cellSize_const
Generating func cv_HOGDescriptor_nbins_const
Generating func cv_HOGDescriptor_derivAperture_const
Generating func cv_HOGDescriptor_winSigma_const
Generating func cv_HOGDescriptor_histogramNormType_const
Generating func cv_HOGDescriptor_L2HysThreshold_const
Generating func cv_HOGDescriptor_gammaCorrection_const
Generating func cv_HOGDescriptor_svmDetector
Generating func cv_HOGDescriptor_set_svmDetector_VectorOffloat
Generating func cv_HOGDescriptor_nlevels_const
Generating func cv_HOGDescriptor_signedGradient_const
Generating func cv_HOGDescriptor_HOGDescriptor
Generating func cv_HOGDescriptor_HOGDescriptor_Size_Size_Size_Size_int_int_double_HOGDescriptor_HistogramNormType_double_bool_int_bool
Generating func cv_HOGDescriptor_HOGDescriptor_String
Generating func cv_HOGDescriptor_HOGDescriptor_HOGDescriptor
Generating func cv_HOGDescriptor_getDescriptorSize_const
Generating func cv_HOGDescriptor_checkDetectorSize_const
Generating func cv_HOGDescriptor_getWinSigma_const
Generating func cv_HOGDescriptor_setSVMDetector__InputArray
Generating func cv_HOGDescriptor_read_FileNode
Generating func cv_HOGDescriptor_write_const_FileStorage_String
Generating func cv_HOGDescriptor_load_String_String
Generating func cv_HOGDescriptor_save_const_String_String
Generating func cv_HOGDescriptor_copyTo_const_HOGDescriptor
Generating func cv_HOGDescriptor_compute_const__InputArray_VectorOffloat_Size_Size_VectorOfPoint
Generating func cv_HOGDescriptor_detect_const__InputArray_VectorOfPoint_VectorOfdouble_double_Size_Size_VectorOfPoint
Generating func cv_HOGDescriptor_detect_const__InputArray_VectorOfPoint_double_Size_Size_VectorOfPoint
Generating func cv_HOGDescriptor_detectMultiScale_const__InputArray_VectorOfRect_VectorOfdouble_double_Size_Size_double_double_bool
Generating func cv_HOGDescriptor_detectMultiScale_const__InputArray_VectorOfRect_double_Size_Size_double_double_bool
Generating func cv_HOGDescriptor_computeGradient_const__InputArray__InputOutputArray__InputOutputArray_Size_Size
Generating func cv_HOGDescriptor_getDefaultPeopleDetector
Generating func cv_HOGDescriptor_getDaimlerPeopleDetector
Generating func cv_HOGDescriptor_detectROI_const__InputArray_VectorOfPoint_VectorOfPoint_VectorOfdouble_double_Size_Size
Generating func cv_HOGDescriptor_detectMultiScaleROI_const__InputArray_VectorOfRect_VectorOfDetectionROI_double_int
Generating func cv_HOGDescriptor_groupRectangles_const_VectorOfRect_VectorOfdouble_int_double
Ghost class cv::KeyPoint (simple, ghost), ignoring
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Generating box for cv::QRCodeDetector
Generating func cv_QRCodeDetector_QRCodeDetector
Generating func cv_QRCodeDetector_setEpsX_double
Generating func cv_QRCodeDetector_setEpsY_double
Generating func cv_QRCodeDetector_detect_const__InputArray__OutputArray
Generating func cv_QRCodeDetector_decode__InputArray__InputArray__OutputArray
Generating func cv_QRCodeDetector_detectAndDecode__InputArray__OutputArray__OutputArray
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Generating box for cv::SimilarRects
Generating func cv_SimilarRects_SimilarRects_double
Ghost class cv::TermCriteria (ghost), ignoring
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Ghost class cv::utils::logging::LogTag (ghost), ignoring
