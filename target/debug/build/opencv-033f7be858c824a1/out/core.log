
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/cvdef.h ================


Namespaces: ['cv', 'cv.debug_build_guard']
Comment: {}

--- Incoming ---
[   'const CV__DEBUG_NS_BEGIN',
    'namespace debug_build_guard {',
    [],
    [],
    '@addtogroup core_utils\n@{\n']
parse_name: const CV__DEBUG_NS_BEGIN with ['cv', 'cv::debug_build_guard'] -> fullname:CV__DEBUG_NS_BEGIN namespace: classpath: classname: name:CV__DEBUG_NS_BEGIN
ignored: CONST CV__DEBUG_NS_BEGIN=namespace debug_build_guard {

--- Incoming ---
['const CV__DEBUG_NS_END', '}', [], [], '@addtogroup core_utils\n@{\n']
parse_name: const CV__DEBUG_NS_END with ['cv', 'cv::debug_build_guard'] -> fullname:CV__DEBUG_NS_END namespace: classpath: classname: name:CV__DEBUG_NS_END
ignored: CONST CV__DEBUG_NS_END=}

--- Incoming ---
['const CV_SUPPRESS_DEPRECATED_START', '\\', [], [], '']
parse_name: const CV_SUPPRESS_DEPRECATED_START with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUPPRESS_DEPRECATED_START namespace: classpath: classname: name:CV_SUPPRESS_DEPRECATED_START
ignored: CONST CV_SUPPRESS_DEPRECATED_START=\

--- Incoming ---
['const CV_SUPPRESS_DEPRECATED_END', 'CV_DO_PRAGMA(warning(pop))', [], [], '']
parse_name: const CV_SUPPRESS_DEPRECATED_END with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUPPRESS_DEPRECATED_END namespace: classpath: classname: name:CV_SUPPRESS_DEPRECATED_END
ignored: CONST CV_SUPPRESS_DEPRECATED_END=CV_DO_PRAGMA(warning(pop))

--- Incoming ---
['const CV_SUPPRESS_DEPRECATED_START', '\\', [], [], '']
parse_name: const CV_SUPPRESS_DEPRECATED_START with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUPPRESS_DEPRECATED_START namespace: classpath: classname: name:CV_SUPPRESS_DEPRECATED_START
ignored: CONST CV_SUPPRESS_DEPRECATED_START=\

--- Incoming ---
[   'const CV_SUPPRESS_DEPRECATED_END',
    'CV_DO_PRAGMA(GCC diagnostic pop)',
    [],
    [],
    '']
parse_name: const CV_SUPPRESS_DEPRECATED_END with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUPPRESS_DEPRECATED_END namespace: classpath: classname: name:CV_SUPPRESS_DEPRECATED_END
ignored: CONST CV_SUPPRESS_DEPRECATED_END=CV_DO_PRAGMA(GCC diagnostic pop)

--- Incoming ---
[   'const CV_ALWAYS_INLINE',
    'inline __attribute__((always_inline))',
    [],
    [],
    '@endcond\n']
parse_name: const CV_ALWAYS_INLINE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_ALWAYS_INLINE namespace: classpath: classname: name:CV_ALWAYS_INLINE
ignored: CONST CV_ALWAYS_INLINE=inline __attribute__((always_inline))

--- Incoming ---
['const CV_ALWAYS_INLINE', '__forceinline', [], [], '@endcond\n']
parse_name: const CV_ALWAYS_INLINE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_ALWAYS_INLINE namespace: classpath: classname: name:CV_ALWAYS_INLINE
ignored: CONST CV_ALWAYS_INLINE=__forceinline

--- Incoming ---
['const CV_ALWAYS_INLINE', 'inline', [], [], '@endcond\n']
parse_name: const CV_ALWAYS_INLINE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_ALWAYS_INLINE namespace: classpath: classname: name:CV_ALWAYS_INLINE
ignored: CONST CV_ALWAYS_INLINE=inline

--- Incoming ---
['const CV_CPU_NONE', '0', [], [], '@endcond\n']
parse_name: const CV_CPU_NONE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_NONE namespace: classpath: classname: name:CV_CPU_NONE

--- Incoming ---
['const CV_CPU_MMX', '1', [], [], '@endcond\n']
parse_name: const CV_CPU_MMX with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_MMX namespace: classpath: classname: name:CV_CPU_MMX

--- Incoming ---
['const CV_CPU_SSE', '2', [], [], '@endcond\n']
parse_name: const CV_CPU_SSE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_SSE namespace: classpath: classname: name:CV_CPU_SSE

--- Incoming ---
['const CV_CPU_SSE2', '3', [], [], '@endcond\n']
parse_name: const CV_CPU_SSE2 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_SSE2 namespace: classpath: classname: name:CV_CPU_SSE2

--- Incoming ---
['const CV_CPU_SSE3', '4', [], [], '@endcond\n']
parse_name: const CV_CPU_SSE3 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_SSE3 namespace: classpath: classname: name:CV_CPU_SSE3

--- Incoming ---
['const CV_CPU_SSSE3', '5', [], [], '@endcond\n']
parse_name: const CV_CPU_SSSE3 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_SSSE3 namespace: classpath: classname: name:CV_CPU_SSSE3

--- Incoming ---
['const CV_CPU_SSE4_1', '6', [], [], '@endcond\n']
parse_name: const CV_CPU_SSE4_1 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_SSE4_1 namespace: classpath: classname: name:CV_CPU_SSE4_1

--- Incoming ---
['const CV_CPU_SSE4_2', '7', [], [], '@endcond\n']
parse_name: const CV_CPU_SSE4_2 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_SSE4_2 namespace: classpath: classname: name:CV_CPU_SSE4_2

--- Incoming ---
['const CV_CPU_POPCNT', '8', [], [], '@endcond\n']
parse_name: const CV_CPU_POPCNT with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_POPCNT namespace: classpath: classname: name:CV_CPU_POPCNT

--- Incoming ---
['const CV_CPU_FP16', '9', [], [], '@endcond\n']
parse_name: const CV_CPU_FP16 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_FP16 namespace: classpath: classname: name:CV_CPU_FP16

--- Incoming ---
['const CV_CPU_AVX', '10', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX namespace: classpath: classname: name:CV_CPU_AVX

--- Incoming ---
['const CV_CPU_AVX2', '11', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX2 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX2 namespace: classpath: classname: name:CV_CPU_AVX2

--- Incoming ---
['const CV_CPU_FMA3', '12', [], [], '@endcond\n']
parse_name: const CV_CPU_FMA3 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_FMA3 namespace: classpath: classname: name:CV_CPU_FMA3

--- Incoming ---
['const CV_CPU_AVX_512F', '13', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512F with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512F namespace: classpath: classname: name:CV_CPU_AVX_512F

--- Incoming ---
['const CV_CPU_AVX_512BW', '14', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512BW with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512BW namespace: classpath: classname: name:CV_CPU_AVX_512BW

--- Incoming ---
['const CV_CPU_AVX_512CD', '15', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512CD with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512CD namespace: classpath: classname: name:CV_CPU_AVX_512CD

--- Incoming ---
['const CV_CPU_AVX_512DQ', '16', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512DQ with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512DQ namespace: classpath: classname: name:CV_CPU_AVX_512DQ

--- Incoming ---
['const CV_CPU_AVX_512ER', '17', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512ER with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512ER namespace: classpath: classname: name:CV_CPU_AVX_512ER

--- Incoming ---
['const CV_CPU_AVX_512IFMA512', '18 // deprecated', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512IFMA512 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512IFMA512 namespace: classpath: classname: name:CV_CPU_AVX_512IFMA512

--- Incoming ---
['const CV_CPU_AVX_512IFMA', '18', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512IFMA with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512IFMA namespace: classpath: classname: name:CV_CPU_AVX_512IFMA

--- Incoming ---
['const CV_CPU_AVX_512PF', '19', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512PF with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512PF namespace: classpath: classname: name:CV_CPU_AVX_512PF

--- Incoming ---
['const CV_CPU_AVX_512VBMI', '20', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512VBMI with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512VBMI namespace: classpath: classname: name:CV_CPU_AVX_512VBMI

--- Incoming ---
['const CV_CPU_AVX_512VL', '21', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512VL with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512VL namespace: classpath: classname: name:CV_CPU_AVX_512VL

--- Incoming ---
['const CV_CPU_AVX_512VBMI2', '22', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512VBMI2 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512VBMI2 namespace: classpath: classname: name:CV_CPU_AVX_512VBMI2

--- Incoming ---
['const CV_CPU_AVX_512VNNI', '23', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512VNNI with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512VNNI namespace: classpath: classname: name:CV_CPU_AVX_512VNNI

--- Incoming ---
['const CV_CPU_AVX_512BITALG', '24', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512BITALG with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512BITALG namespace: classpath: classname: name:CV_CPU_AVX_512BITALG

--- Incoming ---
['const CV_CPU_AVX_512VPOPCNTDQ', '25', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_512VPOPCNTDQ with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_512VPOPCNTDQ namespace: classpath: classname: name:CV_CPU_AVX_512VPOPCNTDQ

--- Incoming ---
['const CV_CPU_AVX_5124VNNIW', '26', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_5124VNNIW with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_5124VNNIW namespace: classpath: classname: name:CV_CPU_AVX_5124VNNIW

--- Incoming ---
['const CV_CPU_AVX_5124FMAPS', '27', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX_5124FMAPS with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX_5124FMAPS namespace: classpath: classname: name:CV_CPU_AVX_5124FMAPS

--- Incoming ---
['const CV_CPU_NEON', '100', [], [], '@endcond\n']
parse_name: const CV_CPU_NEON with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_NEON namespace: classpath: classname: name:CV_CPU_NEON

--- Incoming ---
['const CV_CPU_VSX', '200', [], [], '@endcond\n']
parse_name: const CV_CPU_VSX with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_VSX namespace: classpath: classname: name:CV_CPU_VSX

--- Incoming ---
['const CV_CPU_VSX3', '201', [], [], '@endcond\n']
parse_name: const CV_CPU_VSX3 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_VSX3 namespace: classpath: classname: name:CV_CPU_VSX3

--- Incoming ---
['const CV_CPU_AVX512_SKX', '256', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_SKX with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_SKX namespace: classpath: classname: name:CV_CPU_AVX512_SKX

--- Incoming ---
['const CV_CPU_AVX512_COMMON', '257', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_COMMON with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_COMMON namespace: classpath: classname: name:CV_CPU_AVX512_COMMON

--- Incoming ---
['const CV_CPU_AVX512_KNL', '258', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_KNL with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_KNL namespace: classpath: classname: name:CV_CPU_AVX512_KNL

--- Incoming ---
['const CV_CPU_AVX512_KNM', '259', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_KNM with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_KNM namespace: classpath: classname: name:CV_CPU_AVX512_KNM

--- Incoming ---
['const CV_CPU_AVX512_CNL', '260', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_CNL with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_CNL namespace: classpath: classname: name:CV_CPU_AVX512_CNL

--- Incoming ---
['const CV_CPU_AVX512_CEL', '261', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_CEL with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_CEL namespace: classpath: classname: name:CV_CPU_AVX512_CEL

--- Incoming ---
['const CV_CPU_AVX512_ICL', '262', [], [], '@endcond\n']
parse_name: const CV_CPU_AVX512_ICL with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CPU_AVX512_ICL namespace: classpath: classname: name:CV_CPU_AVX512_ICL

--- Incoming ---
['const CV_HARDWARE_MAX_FEATURE', '512', [], [], '@endcond\n']
parse_name: const CV_HARDWARE_MAX_FEATURE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_HARDWARE_MAX_FEATURE namespace: classpath: classname: name:CV_HARDWARE_MAX_FEATURE

--- Incoming ---
[   'enum CpuFeatures',
    '',
    [],
    [   ['const CPU_MMX', '1', [], [], None, ''],
        ['const CPU_SSE', '2', [], [], None, ''],
        ['const CPU_SSE2', '3', [], [], None, ''],
        ['const CPU_SSE3', '4', [], [], None, ''],
        ['const CPU_SSSE3', '5', [], [], None, ''],
        ['const CPU_SSE4_1', '6', [], [], None, ''],
        ['const CPU_SSE4_2', '7', [], [], None, ''],
        ['const CPU_POPCNT', '8', [], [], None, ''],
        ['const CPU_FP16', '9', [], [], None, ''],
        ['const CPU_AVX', '10', [], [], None, ''],
        ['const CPU_AVX2', '11', [], [], None, ''],
        ['const CPU_FMA3', '12', [], [], None, ''],
        ['const CPU_AVX_512F', '13', [], [], None, ''],
        ['const CPU_AVX_512BW', '14', [], [], None, ''],
        ['const CPU_AVX_512CD', '15', [], [], None, ''],
        ['const CPU_AVX_512DQ', '16', [], [], None, ''],
        ['const CPU_AVX_512ER', '17', [], [], None, ''],
        ['const CPU_AVX_512IFMA512', '18', [], [], None, ''],
        ['const CPU_AVX_512IFMA', '18', [], [], None, ''],
        ['const CPU_AVX_512PF', '19', [], [], None, ''],
        ['const CPU_AVX_512VBMI', '20', [], [], None, ''],
        ['const CPU_AVX_512VL', '21', [], [], None, ''],
        ['const CPU_AVX_512VBMI2', '22', [], [], None, ''],
        ['const CPU_AVX_512VNNI', '23', [], [], None, ''],
        ['const CPU_AVX_512BITALG', '24', [], [], None, ''],
        ['const CPU_AVX_512VPOPCNTDQ', '25', [], [], None, ''],
        ['const CPU_AVX_5124VNNIW', '26', [], [], None, ''],
        ['const CPU_AVX_5124FMAPS', '27', [], [], None, ''],
        ['const CPU_NEON', '100', [], [], None, ''],
        ['const CPU_VSX', '200', [], [], None, ''],
        ['const CPU_VSX3', '201', [], [], None, ''],
        [   'const CPU_AVX512_SKX',
            '256',
            [],
            [],
            None,
            'Skylake-X with AVX-512F/CD/BW/DQ/VL\n'],
        [   'const CPU_AVX512_COMMON',
            '257',
            [],
            [],
            None,
            'Common instructions AVX-512F/CD for all CPUs that support '
            'AVX-512\n'],
        [   'const CPU_AVX512_KNL',
            '258',
            [],
            [],
            None,
            'Knights Landing with AVX-512F/CD/ER/PF\n'],
        [   'const CPU_AVX512_KNM',
            '259',
            [],
            [],
            None,
            'Knights Mill with AVX-512F/CD/ER/PF/4FMAPS/4VNNIW/VPOPCNTDQ\n'],
        [   'const CPU_AVX512_CNL',
            '260',
            [],
            [],
            None,
            'Cannon Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI\n'],
        [   'const CPU_AVX512_CEL',
            '261',
            [],
            [],
            None,
            'Cascade Lake with AVX-512F/CD/BW/DQ/VL/IFMA/VBMI/VNNI\n'],
        [   'const CPU_AVX512_ICL',
            '262',
            [],
            [],
            None,
            'Ice Lake with '
            'AVX-512F/CD/BW/DQ/VL/IFMA/VBMI/VNNI/VBMI2/BITALG/VPOPCNTDQ\n'],
        ['const CPU_MAX_FEATURE', '512', [], [], None, '']],
    None,
    '@brief Available CPU features.']
parse_name: const CPU_MMX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_MMX namespace: classpath: classname: name:CPU_MMX
parse_name: const CPU_SSE with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE namespace: classpath: classname: name:CPU_SSE
parse_name: const CPU_SSE2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE2 namespace: classpath: classname: name:CPU_SSE2
parse_name: const CPU_SSE3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE3 namespace: classpath: classname: name:CPU_SSE3
parse_name: const CPU_SSSE3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSSE3 namespace: classpath: classname: name:CPU_SSSE3
parse_name: const CPU_SSE4_1 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE4_1 namespace: classpath: classname: name:CPU_SSE4_1
parse_name: const CPU_SSE4_2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE4_2 namespace: classpath: classname: name:CPU_SSE4_2
parse_name: const CPU_POPCNT with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_POPCNT namespace: classpath: classname: name:CPU_POPCNT
parse_name: const CPU_FP16 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_FP16 namespace: classpath: classname: name:CPU_FP16
parse_name: const CPU_AVX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX namespace: classpath: classname: name:CPU_AVX
parse_name: const CPU_AVX2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX2 namespace: classpath: classname: name:CPU_AVX2
parse_name: const CPU_FMA3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_FMA3 namespace: classpath: classname: name:CPU_FMA3
parse_name: const CPU_AVX_512F with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512F namespace: classpath: classname: name:CPU_AVX_512F
parse_name: const CPU_AVX_512BW with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512BW namespace: classpath: classname: name:CPU_AVX_512BW
parse_name: const CPU_AVX_512CD with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512CD namespace: classpath: classname: name:CPU_AVX_512CD
parse_name: const CPU_AVX_512DQ with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512DQ namespace: classpath: classname: name:CPU_AVX_512DQ
parse_name: const CPU_AVX_512ER with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512ER namespace: classpath: classname: name:CPU_AVX_512ER
parse_name: const CPU_AVX_512IFMA512 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512IFMA512 namespace: classpath: classname: name:CPU_AVX_512IFMA512
parse_name: const CPU_AVX_512IFMA with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512IFMA namespace: classpath: classname: name:CPU_AVX_512IFMA
parse_name: const CPU_AVX_512PF with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512PF namespace: classpath: classname: name:CPU_AVX_512PF
parse_name: const CPU_AVX_512VBMI with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VBMI namespace: classpath: classname: name:CPU_AVX_512VBMI
parse_name: const CPU_AVX_512VL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VL namespace: classpath: classname: name:CPU_AVX_512VL
parse_name: const CPU_AVX_512VBMI2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VBMI2 namespace: classpath: classname: name:CPU_AVX_512VBMI2
parse_name: const CPU_AVX_512VNNI with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VNNI namespace: classpath: classname: name:CPU_AVX_512VNNI
parse_name: const CPU_AVX_512BITALG with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512BITALG namespace: classpath: classname: name:CPU_AVX_512BITALG
parse_name: const CPU_AVX_512VPOPCNTDQ with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VPOPCNTDQ namespace: classpath: classname: name:CPU_AVX_512VPOPCNTDQ
parse_name: const CPU_AVX_5124VNNIW with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_5124VNNIW namespace: classpath: classname: name:CPU_AVX_5124VNNIW
parse_name: const CPU_AVX_5124FMAPS with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_5124FMAPS namespace: classpath: classname: name:CPU_AVX_5124FMAPS
parse_name: const CPU_NEON with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_NEON namespace: classpath: classname: name:CPU_NEON
parse_name: const CPU_VSX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_VSX namespace: classpath: classname: name:CPU_VSX
parse_name: const CPU_VSX3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_VSX3 namespace: classpath: classname: name:CPU_VSX3
parse_name: const CPU_AVX512_SKX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_SKX namespace: classpath: classname: name:CPU_AVX512_SKX
parse_name: const CPU_AVX512_COMMON with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_COMMON namespace: classpath: classname: name:CPU_AVX512_COMMON
parse_name: const CPU_AVX512_KNL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_KNL namespace: classpath: classname: name:CPU_AVX512_KNL
parse_name: const CPU_AVX512_KNM with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_KNM namespace: classpath: classname: name:CPU_AVX512_KNM
parse_name: const CPU_AVX512_CNL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_CNL namespace: classpath: classname: name:CPU_AVX512_CNL
parse_name: const CPU_AVX512_CEL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_CEL namespace: classpath: classname: name:CPU_AVX512_CEL
parse_name: const CPU_AVX512_ICL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_ICL namespace: classpath: classname: name:CPU_AVX512_ICL
parse_name: const CPU_MAX_FEATURE with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_MAX_FEATURE namespace: classpath: classname: name:CPU_MAX_FEATURE
parse_name: enum CpuFeatures with ['cv', 'cv::debug_build_guard'] -> fullname:CpuFeatures namespace: classpath: classname: name:CpuFeatures
parse_name: const CPU_MMX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_MMX namespace: classpath: classname: name:CPU_MMX
parse_name: const CPU_SSE with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE namespace: classpath: classname: name:CPU_SSE
parse_name: const CPU_SSE2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE2 namespace: classpath: classname: name:CPU_SSE2
parse_name: const CPU_SSE3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE3 namespace: classpath: classname: name:CPU_SSE3
parse_name: const CPU_SSSE3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSSE3 namespace: classpath: classname: name:CPU_SSSE3
parse_name: const CPU_SSE4_1 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE4_1 namespace: classpath: classname: name:CPU_SSE4_1
parse_name: const CPU_SSE4_2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_SSE4_2 namespace: classpath: classname: name:CPU_SSE4_2
parse_name: const CPU_POPCNT with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_POPCNT namespace: classpath: classname: name:CPU_POPCNT
parse_name: const CPU_FP16 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_FP16 namespace: classpath: classname: name:CPU_FP16
parse_name: const CPU_AVX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX namespace: classpath: classname: name:CPU_AVX
parse_name: const CPU_AVX2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX2 namespace: classpath: classname: name:CPU_AVX2
parse_name: const CPU_FMA3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_FMA3 namespace: classpath: classname: name:CPU_FMA3
parse_name: const CPU_AVX_512F with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512F namespace: classpath: classname: name:CPU_AVX_512F
parse_name: const CPU_AVX_512BW with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512BW namespace: classpath: classname: name:CPU_AVX_512BW
parse_name: const CPU_AVX_512CD with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512CD namespace: classpath: classname: name:CPU_AVX_512CD
parse_name: const CPU_AVX_512DQ with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512DQ namespace: classpath: classname: name:CPU_AVX_512DQ
parse_name: const CPU_AVX_512ER with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512ER namespace: classpath: classname: name:CPU_AVX_512ER
parse_name: const CPU_AVX_512IFMA512 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512IFMA512 namespace: classpath: classname: name:CPU_AVX_512IFMA512
parse_name: const CPU_AVX_512IFMA with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512IFMA namespace: classpath: classname: name:CPU_AVX_512IFMA
parse_name: const CPU_AVX_512PF with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512PF namespace: classpath: classname: name:CPU_AVX_512PF
parse_name: const CPU_AVX_512VBMI with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VBMI namespace: classpath: classname: name:CPU_AVX_512VBMI
parse_name: const CPU_AVX_512VL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VL namespace: classpath: classname: name:CPU_AVX_512VL
parse_name: const CPU_AVX_512VBMI2 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VBMI2 namespace: classpath: classname: name:CPU_AVX_512VBMI2
parse_name: const CPU_AVX_512VNNI with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VNNI namespace: classpath: classname: name:CPU_AVX_512VNNI
parse_name: const CPU_AVX_512BITALG with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512BITALG namespace: classpath: classname: name:CPU_AVX_512BITALG
parse_name: const CPU_AVX_512VPOPCNTDQ with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_512VPOPCNTDQ namespace: classpath: classname: name:CPU_AVX_512VPOPCNTDQ
parse_name: const CPU_AVX_5124VNNIW with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_5124VNNIW namespace: classpath: classname: name:CPU_AVX_5124VNNIW
parse_name: const CPU_AVX_5124FMAPS with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX_5124FMAPS namespace: classpath: classname: name:CPU_AVX_5124FMAPS
parse_name: const CPU_NEON with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_NEON namespace: classpath: classname: name:CPU_NEON
parse_name: const CPU_VSX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_VSX namespace: classpath: classname: name:CPU_VSX
parse_name: const CPU_VSX3 with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_VSX3 namespace: classpath: classname: name:CPU_VSX3
parse_name: const CPU_AVX512_SKX with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_SKX namespace: classpath: classname: name:CPU_AVX512_SKX
parse_name: const CPU_AVX512_COMMON with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_COMMON namespace: classpath: classname: name:CPU_AVX512_COMMON
parse_name: const CPU_AVX512_KNL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_KNL namespace: classpath: classname: name:CPU_AVX512_KNL
parse_name: const CPU_AVX512_KNM with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_KNM namespace: classpath: classname: name:CPU_AVX512_KNM
parse_name: const CPU_AVX512_CNL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_CNL namespace: classpath: classname: name:CPU_AVX512_CNL
parse_name: const CPU_AVX512_CEL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_CEL namespace: classpath: classname: name:CPU_AVX512_CEL
parse_name: const CPU_AVX512_ICL with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_AVX512_ICL namespace: classpath: classname: name:CPU_AVX512_ICL
parse_name: const CPU_MAX_FEATURE with ['cv', 'cv::debug_build_guard'] -> fullname:CPU_MAX_FEATURE namespace: classpath: classname: name:CPU_MAX_FEATURE

--- Incoming ---
['const CV_PI', '3.1415926535897932384626433832795', [], [], '']
parse_name: const CV_PI with ['cv', 'cv::debug_build_guard'] -> fullname:CV_PI namespace: classpath: classname: name:CV_PI
ignored: CONST CV_PI=3.1415926535897932384626433832795

--- Incoming ---
['const CV_2PI', '6.283185307179586476925286766559', [], [], '']
parse_name: const CV_2PI with ['cv', 'cv::debug_build_guard'] -> fullname:CV_2PI namespace: classpath: classname: name:CV_2PI
ignored: CONST CV_2PI=6.283185307179586476925286766559

--- Incoming ---
['const CV_LOG2', '0.69314718055994530941723212145818', [], [], '']
parse_name: const CV_LOG2 with ['cv', 'cv::debug_build_guard'] -> fullname:CV_LOG2 namespace: classpath: classname: name:CV_LOG2
ignored: CONST CV_LOG2=0.69314718055994530941723212145818

--- Incoming ---
['const OPENCV_ABI_COMPATIBILITY', '400', [], [], '']
parse_name: const OPENCV_ABI_COMPATIBILITY with ['cv', 'cv::debug_build_guard'] -> fullname:OPENCV_ABI_COMPATIBILITY namespace: classpath: classname: name:OPENCV_ABI_COMPATIBILITY

--- Incoming ---
['const CV_EXPORTS_W', 'CV_EXPORTS', [], [], '']
parse_name: const CV_EXPORTS_W with ['cv', 'cv::debug_build_guard'] -> fullname:CV_EXPORTS_W namespace: classpath: classname: name:CV_EXPORTS_W
ignored: CONST CV_EXPORTS_W=CV_EXPORTS

--- Incoming ---
['const CV_EXPORTS_W_SIMPLE', 'CV_EXPORTS', [], [], '']
parse_name: const CV_EXPORTS_W_SIMPLE with ['cv', 'cv::debug_build_guard'] -> fullname:CV_EXPORTS_W_SIMPLE namespace: classpath: classname: name:CV_EXPORTS_W_SIMPLE
ignored: CONST CV_EXPORTS_W_SIMPLE=CV_EXPORTS

--- Incoming ---
['const CV_EXPORTS_W_MAP', 'CV_EXPORTS', [], [], '']
parse_name: const CV_EXPORTS_W_MAP with ['cv', 'cv::debug_build_guard'] -> fullname:CV_EXPORTS_W_MAP namespace: classpath: classname: name:CV_EXPORTS_W_MAP
ignored: CONST CV_EXPORTS_W_MAP=CV_EXPORTS

--- Incoming ---
[   'const CV_MAT_CN_MASK',
    '((CV_CN_MAX - 1) << CV_CN_SHIFT)',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_MAT_CN_MASK with ['cv', 'cv::debug_build_guard'] -> fullname:CV_MAT_CN_MASK namespace: classpath: classname: name:CV_MAT_CN_MASK

--- Incoming ---
[   'const CV_MAT_TYPE_MASK',
    '(CV_DEPTH_MAX*CV_CN_MAX - 1)',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_MAT_TYPE_MASK with ['cv', 'cv::debug_build_guard'] -> fullname:CV_MAT_TYPE_MASK namespace: classpath: classname: name:CV_MAT_TYPE_MASK

--- Incoming ---
[   'const CV_MAT_CONT_FLAG_SHIFT',
    '14',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_MAT_CONT_FLAG_SHIFT with ['cv', 'cv::debug_build_guard'] -> fullname:CV_MAT_CONT_FLAG_SHIFT namespace: classpath: classname: name:CV_MAT_CONT_FLAG_SHIFT

--- Incoming ---
[   'const CV_MAT_CONT_FLAG',
    '(1 << CV_MAT_CONT_FLAG_SHIFT)',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_MAT_CONT_FLAG with ['cv', 'cv::debug_build_guard'] -> fullname:CV_MAT_CONT_FLAG namespace: classpath: classname: name:CV_MAT_CONT_FLAG

--- Incoming ---
[   'const CV_IS_CONT_MAT',
    'CV_IS_MAT_CONT',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_IS_CONT_MAT with ['cv', 'cv::debug_build_guard'] -> fullname:CV_IS_CONT_MAT namespace: classpath: classname: name:CV_IS_CONT_MAT
ignored: CONST CV_IS_CONT_MAT=CV_IS_MAT_CONT

--- Incoming ---
[   'const CV_SUBMAT_FLAG_SHIFT',
    '15',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_SUBMAT_FLAG_SHIFT with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUBMAT_FLAG_SHIFT namespace: classpath: classname: name:CV_SUBMAT_FLAG_SHIFT

--- Incoming ---
[   'const CV_SUBMAT_FLAG',
    '(1 << CV_SUBMAT_FLAG_SHIFT)',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                  Matrix type '
    '(Mat)                                     *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_SUBMAT_FLAG with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUBMAT_FLAG namespace: classpath: classname: name:CV_SUBMAT_FLAG

--- Incoming ---
[   'const CV_CXX_MOVE_SEMANTICS',
    '1',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                    C++ '
    '11                                              *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_CXX_MOVE_SEMANTICS with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CXX_MOVE_SEMANTICS namespace: classpath: classname: name:CV_CXX_MOVE_SEMANTICS

--- Incoming ---
[   'const CV_CXX_STD_ARRAY',
    '1',
    [],
    [],
    '**************************************************************************************\\\n'
    '*                                    C++ '
    '11                                              *\n'
    '\\***************************************************************************************\n']
parse_name: const CV_CXX_STD_ARRAY with ['cv', 'cv::debug_build_guard'] -> fullname:CV_CXX_STD_ARRAY namespace: classpath: classname: name:CV_CXX_STD_ARRAY

--- Incoming ---
['typedef cv.int8_t', 'signed char', '', [], None, '']
parse_name: typedef cv.int8_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int8_t namespace:cv classpath: classname: name:int8_t
Registering an unknown type: int8_t

--- Incoming ---
['typedef cv.uint8_t', 'unsigned char', '', [], None, '']
parse_name: typedef cv.uint8_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint8_t namespace:cv classpath: classname: name:uint8_t
Registering an unknown type: uint8_t

--- Incoming ---
['typedef cv.int16_t', 'signed short', '', [], None, '']
parse_name: typedef cv.int16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int16_t namespace:cv classpath: classname: name:int16_t
Registering an unknown type: int16_t

--- Incoming ---
['typedef cv.uint16_t', 'unsigned short', '', [], None, '']
parse_name: typedef cv.uint16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint16_t namespace:cv classpath: classname: name:uint16_t
Registering an unknown type: uint16_t

--- Incoming ---
['typedef cv.int32_t', 'signed int', '', [], None, '']
parse_name: typedef cv.int32_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int32_t namespace:cv classpath: classname: name:int32_t
Registering an unknown type: int32_t

--- Incoming ---
['typedef cv.uint32_t', 'unsigned int', '', [], None, '']
parse_name: typedef cv.uint32_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint32_t namespace:cv classpath: classname: name:uint32_t

--- Incoming ---
['typedef cv.int64_t', 'signed __int64', '', [], None, '']
parse_name: typedef cv.int64_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int64_t namespace:cv classpath: classname: name:int64_t

--- Incoming ---
['typedef cv.uint64_t', 'unsigned __int64', '', [], None, '']
parse_name: typedef cv.uint64_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint64_t namespace:cv classpath: classname: name:uint64_t

--- Incoming ---
['typedef cv.int8_t', '::int8_t', '', [], None, '']
parse_name: typedef cv.int8_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int8_t namespace:cv classpath: classname: name:int8_t
Registering an unknown type: ::int8_t

--- Incoming ---
['typedef cv.uint8_t', '::uint8_t', '', [], None, '']
parse_name: typedef cv.uint8_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint8_t namespace:cv classpath: classname: name:uint8_t
Registering an unknown type: ::uint8_t

--- Incoming ---
['typedef cv.int16_t', '::int16_t', '', [], None, '']
parse_name: typedef cv.int16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int16_t namespace:cv classpath: classname: name:int16_t
Registering an unknown type: ::int16_t

--- Incoming ---
['typedef cv.uint16_t', '::uint16_t', '', [], None, '']
parse_name: typedef cv.uint16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint16_t namespace:cv classpath: classname: name:uint16_t
Registering an unknown type: ::uint16_t

--- Incoming ---
['typedef cv.int32_t', '::int32_t', '', [], None, '']
parse_name: typedef cv.int32_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int32_t namespace:cv classpath: classname: name:int32_t
Registering an unknown type: ::int32_t

--- Incoming ---
['typedef cv.uint32_t', '::uint32_t', '', [], None, '']
parse_name: typedef cv.uint32_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint32_t namespace:cv classpath: classname: name:uint32_t
Registering an unknown type: ::uint32_t

--- Incoming ---
['typedef cv.int64_t', '::int64_t', '', [], None, '']
parse_name: typedef cv.int64_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::int64_t namespace:cv classpath: classname: name:int64_t
Registering an unknown type: ::int64_t

--- Incoming ---
['typedef cv.uint64_t', '::uint64_t', '', [], None, '']
parse_name: typedef cv.uint64_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::uint64_t namespace:cv classpath: classname: name:uint64_t
Registering an unknown type: ::uint64_t

--- Incoming ---
['class cv.float16_t', '', [], [], None, '']
parse_name: class cv.float16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t namespace:cv classpath: classname: name:float16_t
register class cv::float16_t (['class cv.float16_t', '', [], [], None, '']) [ignored]

--- Incoming ---
['cv.float16_t.float16_t', 'f', [], [], None, '']
parse_name: cv.float16_t.float16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::float16_t namespace:cv classpath:float16_t classname:float16_t name:float16_t
Registering an unknown type: float16_t
register (constructor) default in cv::float16_t (ignored) (cv_float16_t_float16_t)

--- Incoming ---
['cv.float16_t.float16_t', 'f', ['/E'], [['float', 'x', '', []]], None, '']
parse_name: cv.float16_t.float16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::float16_t namespace:cv classpath:float16_t classname:float16_t name:float16_t
register (constructor) new in cv::float16_t (ignored) (cv_float16_t_float16_t_float)

--- Incoming ---
['cv.float16_t.operator float', '', ['/C'], [], None, '']
parse_name: cv.float16_t.operator float with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::operator float namespace:cv classpath:float16_t classname:float16_t name:operator float
register (convertor method) operator float in cv::float16_t (ignored) (cv_float16_t_operator_float_const)

--- Incoming ---
[   'cv.float16_t.fromBits',
    'float16_t',
    ['/S'],
    [['ushort', 'w', '', []]],
    None,
    '']
parse_name: cv.float16_t.fromBits with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::fromBits namespace:cv classpath:float16_t classname:float16_t name:fromBits
register (method) fromBits in cv::float16_t (ignored) (cv_float16_t_fromBits_ushort)

--- Incoming ---
['cv.float16_t.zero', 'float16_t', ['/S'], [], None, '']
parse_name: cv.float16_t.zero with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::zero namespace:cv classpath:float16_t classname:float16_t name:zero
register (method) zero in cv::float16_t (ignored) (cv_float16_t_zero)

--- Incoming ---
['cv.float16_t.bits', 'ushort', ['/C'], [], None, '']
parse_name: cv.float16_t.bits with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::bits namespace:cv classpath:float16_t classname:float16_t name:bits
register (method) bits in cv::float16_t (ignored) (cv_float16_t_bits_const)

--- Incoming ---
['cv.float16_t.float16_t', 'f', ['/H'], [], None, '']
parse_name: cv.float16_t.float16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::float16_t namespace:cv classpath:float16_t classname:float16_t name:float16_t

--- Incoming ---
[   'cv.float16_t.float16_t',
    'f',
    ['/E', '/H'],
    [['float', 'x', '', []]],
    None,
    '']
parse_name: cv.float16_t.float16_t with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::float16_t namespace:cv classpath:float16_t classname:float16_t name:float16_t

--- Incoming ---
['cv.float16_t.operator float', '', ['/C', '/H'], [], None, '']
parse_name: cv.float16_t.operator float with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::operator float namespace:cv classpath:float16_t classname:float16_t name:operator float

--- Incoming ---
[   'cv.float16_t.fromBits',
    'float16_t',
    ['/S', '/H'],
    [['ushort', 'b', '', []]],
    None,
    '']
parse_name: cv.float16_t.fromBits with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::fromBits namespace:cv classpath:float16_t classname:float16_t name:fromBits

--- Incoming ---
['cv.float16_t.zero', 'float16_t', ['/S', '/H'], [], None, '']
parse_name: cv.float16_t.zero with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::zero namespace:cv classpath:float16_t classname:float16_t name:zero

--- Incoming ---
['cv.float16_t.bits', 'ushort', ['/C', '/H'], [], None, '']
parse_name: cv.float16_t.bits with ['cv', 'cv::debug_build_guard'] -> fullname:cv::float16_t::bits namespace:cv classpath:float16_t classname:float16_t name:bits


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/version.hpp ================


Namespaces: ['cv', 'cv.debug_build_guard']
Comment: {}

--- Incoming ---
['const CV_VERSION_MAJOR', '4', [], [], '']
parse_name: const CV_VERSION_MAJOR with ['cv', 'cv::debug_build_guard'] -> fullname:CV_VERSION_MAJOR namespace: classpath: classname: name:CV_VERSION_MAJOR

--- Incoming ---
['const CV_VERSION_MINOR', '1', [], [], '']
parse_name: const CV_VERSION_MINOR with ['cv', 'cv::debug_build_guard'] -> fullname:CV_VERSION_MINOR namespace: classpath: classname: name:CV_VERSION_MINOR

--- Incoming ---
['const CV_VERSION_REVISION', '1', [], [], '']
parse_name: const CV_VERSION_REVISION with ['cv', 'cv::debug_build_guard'] -> fullname:CV_VERSION_REVISION namespace: classpath: classname: name:CV_VERSION_REVISION

--- Incoming ---
['const CV_VERSION_STATUS', '""', [], [], '']
parse_name: const CV_VERSION_STATUS with ['cv', 'cv::debug_build_guard'] -> fullname:CV_VERSION_STATUS namespace: classpath: classname: name:CV_VERSION_STATUS

--- Incoming ---
[   'const CV_VERSION',
    'CVAUX_STR(CV_VERSION_MAJOR) "." CVAUX_STR(CV_VERSION_MINOR) "." '
    'CVAUX_STR(CV_VERSION_REVISION) CV_VERSION_STATUS',
    [],
    [],
    '']
parse_name: const CV_VERSION with ['cv', 'cv::debug_build_guard'] -> fullname:CV_VERSION namespace: classpath: classname: name:CV_VERSION

--- Incoming ---
['const CV_MAJOR_VERSION', 'CV_VERSION_MAJOR', [], [], '']
parse_name: const CV_MAJOR_VERSION with ['cv', 'cv::debug_build_guard'] -> fullname:CV_MAJOR_VERSION namespace: classpath: classname: name:CV_MAJOR_VERSION

--- Incoming ---
['const CV_MINOR_VERSION', 'CV_VERSION_MINOR', [], [], '']
parse_name: const CV_MINOR_VERSION with ['cv', 'cv::debug_build_guard'] -> fullname:CV_MINOR_VERSION namespace: classpath: classname: name:CV_MINOR_VERSION

--- Incoming ---
['const CV_SUBMINOR_VERSION', 'CV_VERSION_REVISION', [], [], '']
parse_name: const CV_SUBMINOR_VERSION with ['cv', 'cv::debug_build_guard'] -> fullname:CV_SUBMINOR_VERSION namespace: classpath: classname: name:CV_SUBMINOR_VERSION


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/base.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.ipp', 'cv.ogl']
Comment: {}

--- Incoming ---
[   'enum cv.Error.Code',
    '',
    [],
    [   ['const cv.Error.StsOk', '0', [], [], None, 'everything is ok\n'],
        [   'const cv.Error.StsBackTrace',
            '-1',
            [],
            [],
            None,
            'pseudo error for back trace\n'],
        [   'const cv.Error.StsError',
            '-2',
            [],
            [],
            None,
            'unknown /unspecified error\n'],
        [   'const cv.Error.StsInternal',
            '-3',
            [],
            [],
            None,
            'internal error (bad state)\n'],
        [   'const cv.Error.StsNoMem',
            '-4',
            [],
            [],
            None,
            'insufficient memory\n'],
        [   'const cv.Error.StsBadArg',
            '-5',
            [],
            [],
            None,
            'function arg/param is bad\n'],
        [   'const cv.Error.StsBadFunc',
            '-6',
            [],
            [],
            None,
            'unsupported function\n'],
        [   'const cv.Error.StsNoConv',
            '-7',
            [],
            [],
            None,
            "iteration didn't converge\n"],
        ['const cv.Error.StsAutoTrace', '-8', [], [], None, 'tracing\n'],
        [   'const cv.Error.HeaderIsNull',
            '-9',
            [],
            [],
            None,
            'image header is NULL\n'],
        [   'const cv.Error.BadImageSize',
            '-10',
            [],
            [],
            None,
            'image size is invalid\n'],
        [   'const cv.Error.BadOffset',
            '-11',
            [],
            [],
            None,
            'offset is invalid\n'],
        ['const cv.Error.BadDataPtr', '-12', [], [], None, ''],
        [   'const cv.Error.BadStep',
            '-13',
            [],
            [],
            None,
            'image step is wrong, this may happen for a non-continuous '
            'matrix.\n'],
        ['const cv.Error.BadModelOrChSeq', '-14', [], [], None, ''],
        [   'const cv.Error.BadNumChannels',
            '-15',
            [],
            [],
            None,
            'bad number of channels, for example, some functions accept only '
            'single channel matrices.\n'],
        ['const cv.Error.BadNumChannel1U', '-16', [], [], None, ''],
        [   'const cv.Error.BadDepth',
            '-17',
            [],
            [],
            None,
            'input image depth is not supported by the function\n'],
        ['const cv.Error.BadAlphaChannel', '-18', [], [], None, ''],
        [   'const cv.Error.BadOrder',
            '-19',
            [],
            [],
            None,
            'number of dimensions is out of range\n'],
        [   'const cv.Error.BadOrigin',
            '-20',
            [],
            [],
            None,
            'incorrect input origin\n'],
        [   'const cv.Error.BadAlign',
            '-21',
            [],
            [],
            None,
            'incorrect input align\n'],
        ['const cv.Error.BadCallBack', '-22', [], [], None, ''],
        ['const cv.Error.BadTileSize', '-23', [], [], None, ''],
        [   'const cv.Error.BadCOI',
            '-24',
            [],
            [],
            None,
            'input COI is not supported\n'],
        [   'const cv.Error.BadROISize',
            '-25',
            [],
            [],
            None,
            'incorrect input roi\n'],
        ['const cv.Error.MaskIsTiled', '-26', [], [], None, ''],
        ['const cv.Error.StsNullPtr', '-27', [], [], None, 'null pointer\n'],
        [   'const cv.Error.StsVecLengthErr',
            '-28',
            [],
            [],
            None,
            'incorrect vector length\n'],
        [   'const cv.Error.StsFilterStructContentErr',
            '-29',
            [],
            [],
            None,
            'incorrect filter structure content\n'],
        [   'const cv.Error.StsKernelStructContentErr',
            '-30',
            [],
            [],
            None,
            'incorrect transform kernel content\n'],
        [   'const cv.Error.StsFilterOffsetErr',
            '-31',
            [],
            [],
            None,
            'incorrect filter offset value\n'],
        [   'const cv.Error.StsBadSize',
            '-201',
            [],
            [],
            None,
            'the input/output structure size is incorrect\n'],
        [   'const cv.Error.StsDivByZero',
            '-202',
            [],
            [],
            None,
            'division by zero\n'],
        [   'const cv.Error.StsInplaceNotSupported',
            '-203',
            [],
            [],
            None,
            'in-place operation is not supported\n'],
        [   'const cv.Error.StsObjectNotFound',
            '-204',
            [],
            [],
            None,
            "request can't be completed\n"],
        [   'const cv.Error.StsUnmatchedFormats',
            '-205',
            [],
            [],
            None,
            'formats of input/output arrays differ\n'],
        [   'const cv.Error.StsBadFlag',
            '-206',
            [],
            [],
            None,
            'flag is wrong or not supported\n'],
        ['const cv.Error.StsBadPoint', '-207', [], [], None, 'bad CvPoint\n'],
        [   'const cv.Error.StsBadMask',
            '-208',
            [],
            [],
            None,
            'bad format of mask (neither 8uC1 nor 8sC1)\n'],
        [   'const cv.Error.StsUnmatchedSizes',
            '-209',
            [],
            [],
            None,
            'sizes of input/output structures do not match\n'],
        [   'const cv.Error.StsUnsupportedFormat',
            '-210',
            [],
            [],
            None,
            'the data format/type is not supported by the function\n'],
        [   'const cv.Error.StsOutOfRange',
            '-211',
            [],
            [],
            None,
            'some of parameters are out of range\n'],
        [   'const cv.Error.StsParseError',
            '-212',
            [],
            [],
            None,
            'invalid syntax/structure of the parsed file\n'],
        [   'const cv.Error.StsNotImplemented',
            '-213',
            [],
            [],
            None,
            'the requested function/feature is not implemented\n'],
        [   'const cv.Error.StsBadMemBlock',
            '-214',
            [],
            [],
            None,
            'an allocated block has been corrupted\n'],
        [   'const cv.Error.StsAssert',
            '-215',
            [],
            [],
            None,
            'assertion failed\n'],
        [   'const cv.Error.GpuNotSupported',
            '-216',
            [],
            [],
            None,
            'no CUDA support\n'],
        [   'const cv.Error.GpuApiCallError',
            '-217',
            [],
            [],
            None,
            'GPU API call error\n'],
        [   'const cv.Error.OpenGlNotSupported',
            '-218',
            [],
            [],
            None,
            'no OpenGL support\n'],
        [   'const cv.Error.OpenGlApiCallError',
            '-219',
            [],
            [],
            None,
            'OpenGL API call error\n'],
        [   'const cv.Error.OpenCLApiCallError',
            '-220',
            [],
            [],
            None,
            'OpenCL API call error\n'],
        ['const cv.Error.OpenCLDoubleNotSupported', '-221', [], [], None, ''],
        [   'const cv.Error.OpenCLInitError',
            '-222',
            [],
            [],
            None,
            'OpenCL initialization error\n'],
        ['const cv.Error.OpenCLNoAMDBlasFft', '-223', [], [], None, '']],
    None,
    'error codes']
parse_name: const cv.Error.StsOk with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsOk namespace:cv::Error classpath: classname: name:StsOk
parse_name: const cv.Error.StsBackTrace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBackTrace namespace:cv::Error classpath: classname: name:StsBackTrace
parse_name: const cv.Error.StsError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsError namespace:cv::Error classpath: classname: name:StsError
parse_name: const cv.Error.StsInternal with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsInternal namespace:cv::Error classpath: classname: name:StsInternal
parse_name: const cv.Error.StsNoMem with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNoMem namespace:cv::Error classpath: classname: name:StsNoMem
parse_name: const cv.Error.StsBadArg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadArg namespace:cv::Error classpath: classname: name:StsBadArg
parse_name: const cv.Error.StsBadFunc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadFunc namespace:cv::Error classpath: classname: name:StsBadFunc
parse_name: const cv.Error.StsNoConv with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNoConv namespace:cv::Error classpath: classname: name:StsNoConv
parse_name: const cv.Error.StsAutoTrace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsAutoTrace namespace:cv::Error classpath: classname: name:StsAutoTrace
parse_name: const cv.Error.HeaderIsNull with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::HeaderIsNull namespace:cv::Error classpath: classname: name:HeaderIsNull
parse_name: const cv.Error.BadImageSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadImageSize namespace:cv::Error classpath: classname: name:BadImageSize
parse_name: const cv.Error.BadOffset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadOffset namespace:cv::Error classpath: classname: name:BadOffset
parse_name: const cv.Error.BadDataPtr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadDataPtr namespace:cv::Error classpath: classname: name:BadDataPtr
parse_name: const cv.Error.BadStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadStep namespace:cv::Error classpath: classname: name:BadStep
parse_name: const cv.Error.BadModelOrChSeq with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadModelOrChSeq namespace:cv::Error classpath: classname: name:BadModelOrChSeq
parse_name: const cv.Error.BadNumChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadNumChannels namespace:cv::Error classpath: classname: name:BadNumChannels
parse_name: const cv.Error.BadNumChannel1U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadNumChannel1U namespace:cv::Error classpath: classname: name:BadNumChannel1U
parse_name: const cv.Error.BadDepth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadDepth namespace:cv::Error classpath: classname: name:BadDepth
parse_name: const cv.Error.BadAlphaChannel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadAlphaChannel namespace:cv::Error classpath: classname: name:BadAlphaChannel
parse_name: const cv.Error.BadOrder with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadOrder namespace:cv::Error classpath: classname: name:BadOrder
parse_name: const cv.Error.BadOrigin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadOrigin namespace:cv::Error classpath: classname: name:BadOrigin
parse_name: const cv.Error.BadAlign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadAlign namespace:cv::Error classpath: classname: name:BadAlign
parse_name: const cv.Error.BadCallBack with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadCallBack namespace:cv::Error classpath: classname: name:BadCallBack
parse_name: const cv.Error.BadTileSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadTileSize namespace:cv::Error classpath: classname: name:BadTileSize
parse_name: const cv.Error.BadCOI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadCOI namespace:cv::Error classpath: classname: name:BadCOI
parse_name: const cv.Error.BadROISize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadROISize namespace:cv::Error classpath: classname: name:BadROISize
parse_name: const cv.Error.MaskIsTiled with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::MaskIsTiled namespace:cv::Error classpath: classname: name:MaskIsTiled
parse_name: const cv.Error.StsNullPtr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNullPtr namespace:cv::Error classpath: classname: name:StsNullPtr
parse_name: const cv.Error.StsVecLengthErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsVecLengthErr namespace:cv::Error classpath: classname: name:StsVecLengthErr
parse_name: const cv.Error.StsFilterStructContentErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsFilterStructContentErr namespace:cv::Error classpath: classname: name:StsFilterStructContentErr
parse_name: const cv.Error.StsKernelStructContentErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsKernelStructContentErr namespace:cv::Error classpath: classname: name:StsKernelStructContentErr
parse_name: const cv.Error.StsFilterOffsetErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsFilterOffsetErr namespace:cv::Error classpath: classname: name:StsFilterOffsetErr
parse_name: const cv.Error.StsBadSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadSize namespace:cv::Error classpath: classname: name:StsBadSize
parse_name: const cv.Error.StsDivByZero with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsDivByZero namespace:cv::Error classpath: classname: name:StsDivByZero
parse_name: const cv.Error.StsInplaceNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsInplaceNotSupported namespace:cv::Error classpath: classname: name:StsInplaceNotSupported
parse_name: const cv.Error.StsObjectNotFound with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsObjectNotFound namespace:cv::Error classpath: classname: name:StsObjectNotFound
parse_name: const cv.Error.StsUnmatchedFormats with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsUnmatchedFormats namespace:cv::Error classpath: classname: name:StsUnmatchedFormats
parse_name: const cv.Error.StsBadFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadFlag namespace:cv::Error classpath: classname: name:StsBadFlag
parse_name: const cv.Error.StsBadPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadPoint namespace:cv::Error classpath: classname: name:StsBadPoint
parse_name: const cv.Error.StsBadMask with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadMask namespace:cv::Error classpath: classname: name:StsBadMask
parse_name: const cv.Error.StsUnmatchedSizes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsUnmatchedSizes namespace:cv::Error classpath: classname: name:StsUnmatchedSizes
parse_name: const cv.Error.StsUnsupportedFormat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsUnsupportedFormat namespace:cv::Error classpath: classname: name:StsUnsupportedFormat
parse_name: const cv.Error.StsOutOfRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsOutOfRange namespace:cv::Error classpath: classname: name:StsOutOfRange
parse_name: const cv.Error.StsParseError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsParseError namespace:cv::Error classpath: classname: name:StsParseError
parse_name: const cv.Error.StsNotImplemented with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNotImplemented namespace:cv::Error classpath: classname: name:StsNotImplemented
parse_name: const cv.Error.StsBadMemBlock with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadMemBlock namespace:cv::Error classpath: classname: name:StsBadMemBlock
parse_name: const cv.Error.StsAssert with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsAssert namespace:cv::Error classpath: classname: name:StsAssert
parse_name: const cv.Error.GpuNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::GpuNotSupported namespace:cv::Error classpath: classname: name:GpuNotSupported
parse_name: const cv.Error.GpuApiCallError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::GpuApiCallError namespace:cv::Error classpath: classname: name:GpuApiCallError
parse_name: const cv.Error.OpenGlNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenGlNotSupported namespace:cv::Error classpath: classname: name:OpenGlNotSupported
parse_name: const cv.Error.OpenGlApiCallError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenGlApiCallError namespace:cv::Error classpath: classname: name:OpenGlApiCallError
parse_name: const cv.Error.OpenCLApiCallError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLApiCallError namespace:cv::Error classpath: classname: name:OpenCLApiCallError
parse_name: const cv.Error.OpenCLDoubleNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLDoubleNotSupported namespace:cv::Error classpath: classname: name:OpenCLDoubleNotSupported
parse_name: const cv.Error.OpenCLInitError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLInitError namespace:cv::Error classpath: classname: name:OpenCLInitError
parse_name: const cv.Error.OpenCLNoAMDBlasFft with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLNoAMDBlasFft namespace:cv::Error classpath: classname: name:OpenCLNoAMDBlasFft
parse_name: enum cv.Error.Code with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::Code namespace:cv::Error classpath: classname: name:Code
parse_name: const cv.Error.StsOk with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsOk namespace:cv::Error classpath: classname: name:StsOk
parse_name: const cv.Error.StsBackTrace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBackTrace namespace:cv::Error classpath: classname: name:StsBackTrace
parse_name: const cv.Error.StsError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsError namespace:cv::Error classpath: classname: name:StsError
parse_name: const cv.Error.StsInternal with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsInternal namespace:cv::Error classpath: classname: name:StsInternal
parse_name: const cv.Error.StsNoMem with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNoMem namespace:cv::Error classpath: classname: name:StsNoMem
parse_name: const cv.Error.StsBadArg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadArg namespace:cv::Error classpath: classname: name:StsBadArg
parse_name: const cv.Error.StsBadFunc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadFunc namespace:cv::Error classpath: classname: name:StsBadFunc
parse_name: const cv.Error.StsNoConv with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNoConv namespace:cv::Error classpath: classname: name:StsNoConv
parse_name: const cv.Error.StsAutoTrace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsAutoTrace namespace:cv::Error classpath: classname: name:StsAutoTrace
parse_name: const cv.Error.HeaderIsNull with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::HeaderIsNull namespace:cv::Error classpath: classname: name:HeaderIsNull
parse_name: const cv.Error.BadImageSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadImageSize namespace:cv::Error classpath: classname: name:BadImageSize
parse_name: const cv.Error.BadOffset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadOffset namespace:cv::Error classpath: classname: name:BadOffset
parse_name: const cv.Error.BadDataPtr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadDataPtr namespace:cv::Error classpath: classname: name:BadDataPtr
parse_name: const cv.Error.BadStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadStep namespace:cv::Error classpath: classname: name:BadStep
parse_name: const cv.Error.BadModelOrChSeq with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadModelOrChSeq namespace:cv::Error classpath: classname: name:BadModelOrChSeq
parse_name: const cv.Error.BadNumChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadNumChannels namespace:cv::Error classpath: classname: name:BadNumChannels
parse_name: const cv.Error.BadNumChannel1U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadNumChannel1U namespace:cv::Error classpath: classname: name:BadNumChannel1U
parse_name: const cv.Error.BadDepth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadDepth namespace:cv::Error classpath: classname: name:BadDepth
parse_name: const cv.Error.BadAlphaChannel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadAlphaChannel namespace:cv::Error classpath: classname: name:BadAlphaChannel
parse_name: const cv.Error.BadOrder with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadOrder namespace:cv::Error classpath: classname: name:BadOrder
parse_name: const cv.Error.BadOrigin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadOrigin namespace:cv::Error classpath: classname: name:BadOrigin
parse_name: const cv.Error.BadAlign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadAlign namespace:cv::Error classpath: classname: name:BadAlign
parse_name: const cv.Error.BadCallBack with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadCallBack namespace:cv::Error classpath: classname: name:BadCallBack
parse_name: const cv.Error.BadTileSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadTileSize namespace:cv::Error classpath: classname: name:BadTileSize
parse_name: const cv.Error.BadCOI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadCOI namespace:cv::Error classpath: classname: name:BadCOI
parse_name: const cv.Error.BadROISize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::BadROISize namespace:cv::Error classpath: classname: name:BadROISize
parse_name: const cv.Error.MaskIsTiled with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::MaskIsTiled namespace:cv::Error classpath: classname: name:MaskIsTiled
parse_name: const cv.Error.StsNullPtr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNullPtr namespace:cv::Error classpath: classname: name:StsNullPtr
parse_name: const cv.Error.StsVecLengthErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsVecLengthErr namespace:cv::Error classpath: classname: name:StsVecLengthErr
parse_name: const cv.Error.StsFilterStructContentErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsFilterStructContentErr namespace:cv::Error classpath: classname: name:StsFilterStructContentErr
parse_name: const cv.Error.StsKernelStructContentErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsKernelStructContentErr namespace:cv::Error classpath: classname: name:StsKernelStructContentErr
parse_name: const cv.Error.StsFilterOffsetErr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsFilterOffsetErr namespace:cv::Error classpath: classname: name:StsFilterOffsetErr
parse_name: const cv.Error.StsBadSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadSize namespace:cv::Error classpath: classname: name:StsBadSize
parse_name: const cv.Error.StsDivByZero with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsDivByZero namespace:cv::Error classpath: classname: name:StsDivByZero
parse_name: const cv.Error.StsInplaceNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsInplaceNotSupported namespace:cv::Error classpath: classname: name:StsInplaceNotSupported
parse_name: const cv.Error.StsObjectNotFound with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsObjectNotFound namespace:cv::Error classpath: classname: name:StsObjectNotFound
parse_name: const cv.Error.StsUnmatchedFormats with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsUnmatchedFormats namespace:cv::Error classpath: classname: name:StsUnmatchedFormats
parse_name: const cv.Error.StsBadFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadFlag namespace:cv::Error classpath: classname: name:StsBadFlag
parse_name: const cv.Error.StsBadPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadPoint namespace:cv::Error classpath: classname: name:StsBadPoint
parse_name: const cv.Error.StsBadMask with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadMask namespace:cv::Error classpath: classname: name:StsBadMask
parse_name: const cv.Error.StsUnmatchedSizes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsUnmatchedSizes namespace:cv::Error classpath: classname: name:StsUnmatchedSizes
parse_name: const cv.Error.StsUnsupportedFormat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsUnsupportedFormat namespace:cv::Error classpath: classname: name:StsUnsupportedFormat
parse_name: const cv.Error.StsOutOfRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsOutOfRange namespace:cv::Error classpath: classname: name:StsOutOfRange
parse_name: const cv.Error.StsParseError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsParseError namespace:cv::Error classpath: classname: name:StsParseError
parse_name: const cv.Error.StsNotImplemented with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsNotImplemented namespace:cv::Error classpath: classname: name:StsNotImplemented
parse_name: const cv.Error.StsBadMemBlock with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsBadMemBlock namespace:cv::Error classpath: classname: name:StsBadMemBlock
parse_name: const cv.Error.StsAssert with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::StsAssert namespace:cv::Error classpath: classname: name:StsAssert
parse_name: const cv.Error.GpuNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::GpuNotSupported namespace:cv::Error classpath: classname: name:GpuNotSupported
parse_name: const cv.Error.GpuApiCallError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::GpuApiCallError namespace:cv::Error classpath: classname: name:GpuApiCallError
parse_name: const cv.Error.OpenGlNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenGlNotSupported namespace:cv::Error classpath: classname: name:OpenGlNotSupported
parse_name: const cv.Error.OpenGlApiCallError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenGlApiCallError namespace:cv::Error classpath: classname: name:OpenGlApiCallError
parse_name: const cv.Error.OpenCLApiCallError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLApiCallError namespace:cv::Error classpath: classname: name:OpenCLApiCallError
parse_name: const cv.Error.OpenCLDoubleNotSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLDoubleNotSupported namespace:cv::Error classpath: classname: name:OpenCLDoubleNotSupported
parse_name: const cv.Error.OpenCLInitError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLInitError namespace:cv::Error classpath: classname: name:OpenCLInitError
parse_name: const cv.Error.OpenCLNoAMDBlasFft with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Error::OpenCLNoAMDBlasFft namespace:cv::Error classpath: classname: name:OpenCLNoAMDBlasFft

--- Incoming ---
[   'enum cv.DecompTypes',
    '',
    [],
    [   ['const cv.DECOMP_LU', '0', [], [], None, ''],
        ['const cv.DECOMP_SVD', '1', [], [], None, ''],
        ['const cv.DECOMP_EIG', '2', [], [], None, ''],
        ['const cv.DECOMP_CHOLESKY', '3', [], [], None, ''],
        ['const cv.DECOMP_QR', '4', [], [], None, ''],
        ['const cv.DECOMP_NORMAL', '16', [], [], None, '']],
    None,
    '@} core_utils\n@addtogroup core_array\n@{\nmatrix decomposition types']
parse_name: const cv.DECOMP_LU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_LU namespace:cv classpath: classname: name:DECOMP_LU
parse_name: const cv.DECOMP_SVD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_SVD namespace:cv classpath: classname: name:DECOMP_SVD
parse_name: const cv.DECOMP_EIG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_EIG namespace:cv classpath: classname: name:DECOMP_EIG
parse_name: const cv.DECOMP_CHOLESKY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_CHOLESKY namespace:cv classpath: classname: name:DECOMP_CHOLESKY
parse_name: const cv.DECOMP_QR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_QR namespace:cv classpath: classname: name:DECOMP_QR
parse_name: const cv.DECOMP_NORMAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_NORMAL namespace:cv classpath: classname: name:DECOMP_NORMAL
parse_name: enum cv.DecompTypes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DecompTypes namespace:cv classpath: classname: name:DecompTypes
parse_name: const cv.DECOMP_LU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_LU namespace:cv classpath: classname: name:DECOMP_LU
parse_name: const cv.DECOMP_SVD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_SVD namespace:cv classpath: classname: name:DECOMP_SVD
parse_name: const cv.DECOMP_EIG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_EIG namespace:cv classpath: classname: name:DECOMP_EIG
parse_name: const cv.DECOMP_CHOLESKY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_CHOLESKY namespace:cv classpath: classname: name:DECOMP_CHOLESKY
parse_name: const cv.DECOMP_QR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_QR namespace:cv classpath: classname: name:DECOMP_QR
parse_name: const cv.DECOMP_NORMAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DECOMP_NORMAL namespace:cv classpath: classname: name:DECOMP_NORMAL

--- Incoming ---
[   'enum cv.NormTypes',
    '',
    [],
    [   ['const cv.NORM_INF', '1', [], [], None, ''],
        ['const cv.NORM_L1', '2', [], [], None, ''],
        ['const cv.NORM_L2', '4', [], [], None, ''],
        ['const cv.NORM_L2SQR', '5', [], [], None, ''],
        ['const cv.NORM_HAMMING', '6', [], [], None, ''],
        ['const cv.NORM_HAMMING2', '7', [], [], None, ''],
        [   'const cv.NORM_TYPE_MASK',
            '7',
            [],
            [],
            None,
            'bit-mask which can be used to separate norm type from norm '
            'flags\n'],
        ['const cv.NORM_RELATIVE', '8', [], [], None, 'flag\n'],
        ['const cv.NORM_MINMAX', '32', [], [], None, 'flag\n']],
    None,
    'norm types\n\nsrc1 and src2 denote input arrays.']
parse_name: const cv.NORM_INF with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_INF namespace:cv classpath: classname: name:NORM_INF
parse_name: const cv.NORM_L1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_L1 namespace:cv classpath: classname: name:NORM_L1
parse_name: const cv.NORM_L2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_L2 namespace:cv classpath: classname: name:NORM_L2
parse_name: const cv.NORM_L2SQR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_L2SQR namespace:cv classpath: classname: name:NORM_L2SQR
parse_name: const cv.NORM_HAMMING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_HAMMING namespace:cv classpath: classname: name:NORM_HAMMING
parse_name: const cv.NORM_HAMMING2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_HAMMING2 namespace:cv classpath: classname: name:NORM_HAMMING2
parse_name: const cv.NORM_TYPE_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_TYPE_MASK namespace:cv classpath: classname: name:NORM_TYPE_MASK
parse_name: const cv.NORM_RELATIVE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_RELATIVE namespace:cv classpath: classname: name:NORM_RELATIVE
parse_name: const cv.NORM_MINMAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_MINMAX namespace:cv classpath: classname: name:NORM_MINMAX
parse_name: enum cv.NormTypes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NormTypes namespace:cv classpath: classname: name:NormTypes
parse_name: const cv.NORM_INF with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_INF namespace:cv classpath: classname: name:NORM_INF
parse_name: const cv.NORM_L1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_L1 namespace:cv classpath: classname: name:NORM_L1
parse_name: const cv.NORM_L2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_L2 namespace:cv classpath: classname: name:NORM_L2
parse_name: const cv.NORM_L2SQR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_L2SQR namespace:cv classpath: classname: name:NORM_L2SQR
parse_name: const cv.NORM_HAMMING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_HAMMING namespace:cv classpath: classname: name:NORM_HAMMING
parse_name: const cv.NORM_HAMMING2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_HAMMING2 namespace:cv classpath: classname: name:NORM_HAMMING2
parse_name: const cv.NORM_TYPE_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_TYPE_MASK namespace:cv classpath: classname: name:NORM_TYPE_MASK
parse_name: const cv.NORM_RELATIVE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_RELATIVE namespace:cv classpath: classname: name:NORM_RELATIVE
parse_name: const cv.NORM_MINMAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::NORM_MINMAX namespace:cv classpath: classname: name:NORM_MINMAX

--- Incoming ---
[   'enum cv.CmpTypes',
    '',
    [],
    [   ['const cv.CMP_EQ', '0', [], [], None, 'src1 is equal to src2.\n'],
        ['const cv.CMP_GT', '1', [], [], None, 'src1 is greater than src2.\n'],
        [   'const cv.CMP_GE',
            '2',
            [],
            [],
            None,
            'src1 is greater than or equal to src2.\n'],
        ['const cv.CMP_LT', '3', [], [], None, 'src1 is less than src2.\n'],
        [   'const cv.CMP_LE',
            '4',
            [],
            [],
            None,
            'src1 is less than or equal to src2.\n'],
        ['const cv.CMP_NE', '5', [], [], None, 'src1 is unequal to src2.\n']],
    None,
    'comparison types']
parse_name: const cv.CMP_EQ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_EQ namespace:cv classpath: classname: name:CMP_EQ
parse_name: const cv.CMP_GT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_GT namespace:cv classpath: classname: name:CMP_GT
parse_name: const cv.CMP_GE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_GE namespace:cv classpath: classname: name:CMP_GE
parse_name: const cv.CMP_LT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_LT namespace:cv classpath: classname: name:CMP_LT
parse_name: const cv.CMP_LE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_LE namespace:cv classpath: classname: name:CMP_LE
parse_name: const cv.CMP_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_NE namespace:cv classpath: classname: name:CMP_NE
parse_name: enum cv.CmpTypes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CmpTypes namespace:cv classpath: classname: name:CmpTypes
parse_name: const cv.CMP_EQ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_EQ namespace:cv classpath: classname: name:CMP_EQ
parse_name: const cv.CMP_GT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_GT namespace:cv classpath: classname: name:CMP_GT
parse_name: const cv.CMP_GE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_GE namespace:cv classpath: classname: name:CMP_GE
parse_name: const cv.CMP_LT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_LT namespace:cv classpath: classname: name:CMP_LT
parse_name: const cv.CMP_LE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_LE namespace:cv classpath: classname: name:CMP_LE
parse_name: const cv.CMP_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::CMP_NE namespace:cv classpath: classname: name:CMP_NE

--- Incoming ---
[   'enum cv.GemmFlags',
    '',
    [],
    [   ['const cv.GEMM_1_T', '1', [], [], None, 'transposes src1\n'],
        ['const cv.GEMM_2_T', '2', [], [], None, 'transposes src2\n'],
        ['const cv.GEMM_3_T', '4', [], [], None, 'transposes src3\n']],
    None,
    'generalized matrix multiplication flags']
parse_name: const cv.GEMM_1_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GEMM_1_T namespace:cv classpath: classname: name:GEMM_1_T
parse_name: const cv.GEMM_2_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GEMM_2_T namespace:cv classpath: classname: name:GEMM_2_T
parse_name: const cv.GEMM_3_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GEMM_3_T namespace:cv classpath: classname: name:GEMM_3_T
parse_name: enum cv.GemmFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GemmFlags namespace:cv classpath: classname: name:GemmFlags
parse_name: const cv.GEMM_1_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GEMM_1_T namespace:cv classpath: classname: name:GEMM_1_T
parse_name: const cv.GEMM_2_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GEMM_2_T namespace:cv classpath: classname: name:GEMM_2_T
parse_name: const cv.GEMM_3_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::GEMM_3_T namespace:cv classpath: classname: name:GEMM_3_T

--- Incoming ---
[   'enum cv.DftFlags',
    '',
    [],
    [   ['const cv.DFT_INVERSE', '1', [], [], None, ''],
        ['const cv.DFT_SCALE', '2', [], [], None, ''],
        ['const cv.DFT_ROWS', '4', [], [], None, ''],
        ['const cv.DFT_COMPLEX_OUTPUT', '16', [], [], None, ''],
        ['const cv.DFT_REAL_OUTPUT', '32', [], [], None, ''],
        ['const cv.DFT_COMPLEX_INPUT', '64', [], [], None, ''],
        ['const cv.DCT_INVERSE', 'DFT_INVERSE', [], [], None, ''],
        ['const cv.DCT_ROWS', 'DFT_ROWS', [], [], None, '']],
    None,
    '']
parse_name: const cv.DFT_INVERSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_INVERSE namespace:cv classpath: classname: name:DFT_INVERSE
parse_name: const cv.DFT_SCALE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_SCALE namespace:cv classpath: classname: name:DFT_SCALE
parse_name: const cv.DFT_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_ROWS namespace:cv classpath: classname: name:DFT_ROWS
parse_name: const cv.DFT_COMPLEX_OUTPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_COMPLEX_OUTPUT namespace:cv classpath: classname: name:DFT_COMPLEX_OUTPUT
parse_name: const cv.DFT_REAL_OUTPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_REAL_OUTPUT namespace:cv classpath: classname: name:DFT_REAL_OUTPUT
parse_name: const cv.DFT_COMPLEX_INPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_COMPLEX_INPUT namespace:cv classpath: classname: name:DFT_COMPLEX_INPUT
parse_name: const cv.DCT_INVERSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DCT_INVERSE namespace:cv classpath: classname: name:DCT_INVERSE
parse_name: const cv.DCT_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DCT_ROWS namespace:cv classpath: classname: name:DCT_ROWS
parse_name: enum cv.DftFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DftFlags namespace:cv classpath: classname: name:DftFlags
parse_name: const cv.DFT_INVERSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_INVERSE namespace:cv classpath: classname: name:DFT_INVERSE
parse_name: const cv.DFT_SCALE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_SCALE namespace:cv classpath: classname: name:DFT_SCALE
parse_name: const cv.DFT_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_ROWS namespace:cv classpath: classname: name:DFT_ROWS
parse_name: const cv.DFT_COMPLEX_OUTPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_COMPLEX_OUTPUT namespace:cv classpath: classname: name:DFT_COMPLEX_OUTPUT
parse_name: const cv.DFT_REAL_OUTPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_REAL_OUTPUT namespace:cv classpath: classname: name:DFT_REAL_OUTPUT
parse_name: const cv.DFT_COMPLEX_INPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DFT_COMPLEX_INPUT namespace:cv classpath: classname: name:DFT_COMPLEX_INPUT
parse_name: const cv.DCT_INVERSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DCT_INVERSE namespace:cv classpath: classname: name:DCT_INVERSE
parse_name: const cv.DCT_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::DCT_ROWS namespace:cv classpath: classname: name:DCT_ROWS

--- Incoming ---
[   'enum cv.BorderTypes',
    '',
    [],
    [   [   'const cv.BORDER_CONSTANT',
            '0',
            [],
            [],
            None,
            '`iiiiii|abcdefgh|iiiiiii`  with some specified `i`\n'],
        [   'const cv.BORDER_REPLICATE',
            '1',
            [],
            [],
            None,
            '`aaaaaa|abcdefgh|hhhhhhh`\n'],
        [   'const cv.BORDER_REFLECT',
            '2',
            [],
            [],
            None,
            '`fedcba|abcdefgh|hgfedcb`\n'],
        [   'const cv.BORDER_WRAP',
            '3',
            [],
            [],
            None,
            '`cdefgh|abcdefgh|abcdefg`\n'],
        [   'const cv.BORDER_REFLECT_101',
            '4',
            [],
            [],
            None,
            '`gfedcb|abcdefgh|gfedcba`\n'],
        [   'const cv.BORDER_TRANSPARENT',
            '5',
            [],
            [],
            None,
            '`uvwxyz|abcdefgh|ijklmno`\n'],
        [   'const cv.BORDER_REFLECT101',
            'BORDER_REFLECT_101',
            [],
            [],
            None,
            'same as BORDER_REFLECT_101\n'],
        [   'const cv.BORDER_DEFAULT',
            'BORDER_REFLECT_101',
            [],
            [],
            None,
            'same as BORDER_REFLECT_101\n'],
        [   'const cv.BORDER_ISOLATED',
            '16',
            [],
            [],
            None,
            'do not look outside of ROI\n']],
    None,
    'Various border types, image boundaries are denoted with `|`\n'
    '@see borderInterpolate, copyMakeBorder']
parse_name: const cv.BORDER_CONSTANT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_CONSTANT namespace:cv classpath: classname: name:BORDER_CONSTANT
parse_name: const cv.BORDER_REPLICATE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REPLICATE namespace:cv classpath: classname: name:BORDER_REPLICATE
parse_name: const cv.BORDER_REFLECT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REFLECT namespace:cv classpath: classname: name:BORDER_REFLECT
parse_name: const cv.BORDER_WRAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_WRAP namespace:cv classpath: classname: name:BORDER_WRAP
parse_name: const cv.BORDER_REFLECT_101 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REFLECT_101 namespace:cv classpath: classname: name:BORDER_REFLECT_101
parse_name: const cv.BORDER_TRANSPARENT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_TRANSPARENT namespace:cv classpath: classname: name:BORDER_TRANSPARENT
parse_name: const cv.BORDER_REFLECT101 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REFLECT101 namespace:cv classpath: classname: name:BORDER_REFLECT101
parse_name: const cv.BORDER_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_DEFAULT namespace:cv classpath: classname: name:BORDER_DEFAULT
parse_name: const cv.BORDER_ISOLATED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_ISOLATED namespace:cv classpath: classname: name:BORDER_ISOLATED
parse_name: enum cv.BorderTypes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BorderTypes namespace:cv classpath: classname: name:BorderTypes
parse_name: const cv.BORDER_CONSTANT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_CONSTANT namespace:cv classpath: classname: name:BORDER_CONSTANT
parse_name: const cv.BORDER_REPLICATE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REPLICATE namespace:cv classpath: classname: name:BORDER_REPLICATE
parse_name: const cv.BORDER_REFLECT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REFLECT namespace:cv classpath: classname: name:BORDER_REFLECT
parse_name: const cv.BORDER_WRAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_WRAP namespace:cv classpath: classname: name:BORDER_WRAP
parse_name: const cv.BORDER_REFLECT_101 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REFLECT_101 namespace:cv classpath: classname: name:BORDER_REFLECT_101
parse_name: const cv.BORDER_TRANSPARENT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_TRANSPARENT namespace:cv classpath: classname: name:BORDER_TRANSPARENT
parse_name: const cv.BORDER_REFLECT101 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_REFLECT101 namespace:cv classpath: classname: name:BORDER_REFLECT101
parse_name: const cv.BORDER_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_DEFAULT namespace:cv classpath: classname: name:BORDER_DEFAULT
parse_name: const cv.BORDER_ISOLATED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::BORDER_ISOLATED namespace:cv classpath: classname: name:BORDER_ISOLATED

--- Incoming ---
[   'cv.error',
    'void',
    [],
    [   ['int', '_code', '', []],
        ['const String&', '_err', '', []],
        ['const char*', '_func', '', []],
        ['const char*', '_file', '', []],
        ['int', '_line', '', []]],
    None,
    '@} core_array\n@addtogroup core_utils\n@{']
parse_name: cv.error with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::error namespace:cv classpath: classname: name:error
register (function) error (cv_error_int_String_const_char_X_const_char_X_int)

--- Incoming ---
[   'struct cv.Hamming',
    '',
    [],
    [],
    None,
    'replaced with CV_Assert(expr) in Debug configuration']
parse_name: struct cv.Hamming with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Hamming namespace:cv classpath: classname: name:Hamming
register class cv::Hamming (['struct cv.Hamming', '', [], [], None, 'replaced with CV_Assert(expr) in Debug configuration'])

--- Incoming ---
['typedef cv.Hamming.ValueType', 'unsigned char', '', [], None, '']
parse_name: typedef cv.Hamming.ValueType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Hamming::ValueType namespace:cv classpath:Hamming classname:Hamming name:ValueType
Registering an unknown type: ValueType

--- Incoming ---
['typedef cv.Hamming.ResultType', 'int', '', [], None, '']
parse_name: typedef cv.Hamming.ResultType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Hamming::ResultType namespace:cv classpath:Hamming classname:Hamming name:ResultType
Registering an unknown type: ResultType

--- Incoming ---
[   'cv.Hamming.operator ()',
    'ResultType',
    ['/C'],
    [   ['const unsigned char*', 'a', '', []],
        ['const unsigned char*', 'b', '', []],
        ['int', 'size', '', []]],
    None,
    'this will count the bits in a ^ b']
parse_name: cv.Hamming.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Hamming::operator () namespace:cv classpath:Hamming classname:Hamming name:operator ()
ignore (method) operator () in cv::Hamming

--- Incoming ---
['typedef cv.HammingLUT', 'Hamming', '', [], None, '']
parse_name: typedef cv.HammingLUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::HammingLUT namespace:cv classpath: classname: name:HammingLUT
Registering an unknown type: HammingLUT

--- Incoming ---
[   'cv.cv_abs',
    'template<typename _Tp> _Tp',
    [],
    [['_Tp', 'x', '', []]],
    None,
    '']
parse_name: cv.cv_abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::cv_abs namespace:cv classpath: classname: name:cv_abs
Registering an unknown type: template<typename _Tp> _Tp
Registering an unknown type: _Tp
register (function) cv_abs (cv_cv_abs__Tp)

--- Incoming ---
['cv.cv_abs', 'int', [], [['uchar', 'x', '', []]], None, '']
parse_name: cv.cv_abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::cv_abs namespace:cv classpath: classname: name:cv_abs
register (function) cv_abs (cv_cv_abs_uchar)

--- Incoming ---
['cv.cv_abs', 'int', [], [['schar', 'x', '', []]], None, '']
parse_name: cv.cv_abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::cv_abs namespace:cv classpath: classname: name:cv_abs
register (function) cv_abs (cv_cv_abs_schar)

--- Incoming ---
['cv.cv_abs', 'int', [], [['ushort', 'x', '', []]], None, '']
parse_name: cv.cv_abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::cv_abs namespace:cv classpath: classname: name:cv_abs
register (function) cv_abs (cv_cv_abs_ushort)

--- Incoming ---
['cv.cv_abs', 'int', [], [['short', 'x', '', []]], None, '']
parse_name: cv.cv_abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::cv_abs namespace:cv classpath: classname: name:cv_abs
register (function) cv_abs (cv_cv_abs_short)

--- Incoming ---
[   'cv.normL2Sqr',
    'float',
    [],
    [   ['const float*', 'a', '', []],
        ['const float*', 'b', '', []],
        ['int', 'n', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::normL2Sqr namespace:cv classpath: classname: name:normL2Sqr
register (function) normL2Sqr (cv_normL2Sqr_const_float_X_const_float_X_int)

--- Incoming ---
[   'cv.normL1',
    'float',
    [],
    [   ['const float*', 'a', '', []],
        ['const float*', 'b', '', []],
        ['int', 'n', '', []]],
    None,
    '']
parse_name: cv.normL1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::normL1 namespace:cv classpath: classname: name:normL1
register (function) normL1 (cv_normL1_const_float_X_const_float_X_int)

--- Incoming ---
[   'cv.normL1',
    'int',
    [],
    [   ['const uchar*', 'a', '', []],
        ['const uchar*', 'b', '', []],
        ['int', 'n', '', []]],
    None,
    '']
parse_name: cv.normL1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::normL1 namespace:cv classpath: classname: name:normL1
register (function) normL1 (cv_normL1_const_uchar_X_const_uchar_X_int)

--- Incoming ---
[   'cv.cubeRoot',
    'float',
    [],
    [['float', 'val', '', []]],
    None,
    '@brief Computes the cube root of an argument.\n'
    '\n'
    'The function cubeRoot computes \\f$\\sqrt[3]{\\texttt{val}}\\f$. Negative '
    'arguments are handled correctly.\n'
    'NaN and Inf are not handled. The accuracy approaches the maximum possible '
    'accuracy for\n'
    'single-precision data.\n'
    '@param val A function argument.']
parse_name: cv.cubeRoot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::cubeRoot namespace:cv classpath: classname: name:cubeRoot
register (function) cubeRoot (cv_cubeRoot_float)

--- Incoming ---
[   'cv.fastAtan2',
    'float',
    [],
    [['float', 'y', '', []], ['float', 'x', '', []]],
    None,
    '@brief Calculates the angle of a 2D vector in degrees.\n'
    '\n'
    'The function fastAtan2 calculates the full-range angle of an input 2D '
    'vector. The angle is measured\n'
    'in degrees and varies from 0 to 360 degrees. The accuracy is about 0.3 '
    'degrees.\n'
    '@param x x-coordinate of the vector.\n'
    '@param y y-coordinate of the vector.']
parse_name: cv.fastAtan2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::fastAtan2 namespace:cv classpath: classname: name:fastAtan2
register (function) fastAtan2 (cv_fastAtan2_float_float)

--- Incoming ---
[   'cv.LU',
    'int',
    [],
    [   ['float*', 'A', '', []],
        ['size_t', 'astep', '', []],
        ['int', 'm', '', []],
        ['float*', 'b', '', []],
        ['size_t', 'bstep', '', []],
        ['int', 'n', '', []]],
    None,
    'proxy for hal::LU']
parse_name: cv.LU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::LU namespace:cv classpath: classname: name:LU
register (function) LU (cv_LU_float_X_size_t_int_float_X_size_t_int)

--- Incoming ---
[   'cv.LU',
    'int',
    [],
    [   ['double*', 'A', '', []],
        ['size_t', 'astep', '', []],
        ['int', 'm', '', []],
        ['double*', 'b', '', []],
        ['size_t', 'bstep', '', []],
        ['int', 'n', '', []]],
    None,
    'proxy for hal::LU']
parse_name: cv.LU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::LU namespace:cv classpath: classname: name:LU
register (function) LU (cv_LU_double_X_size_t_int_double_X_size_t_int)

--- Incoming ---
[   'cv.Cholesky',
    'bool',
    [],
    [   ['float*', 'A', '', []],
        ['size_t', 'astep', '', []],
        ['int', 'm', '', []],
        ['float*', 'b', '', []],
        ['size_t', 'bstep', '', []],
        ['int', 'n', '', []]],
    None,
    'proxy for hal::Cholesky']
parse_name: cv.Cholesky with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Cholesky namespace:cv classpath: classname: name:Cholesky
register (function) Cholesky (cv_Cholesky_float_X_size_t_int_float_X_size_t_int)

--- Incoming ---
[   'cv.Cholesky',
    'bool',
    [],
    [   ['double*', 'A', '', []],
        ['size_t', 'astep', '', []],
        ['int', 'm', '', []],
        ['double*', 'b', '', []],
        ['size_t', 'bstep', '', []],
        ['int', 'n', '', []]],
    None,
    'proxy for hal::Cholesky']
parse_name: cv.Cholesky with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::Cholesky namespace:cv classpath: classname: name:Cholesky
register (function) Cholesky (cv_Cholesky_double_X_size_t_int_double_X_size_t_int)

--- Incoming ---
['typedef cv.MatND', 'Mat', '', [], None, '']
parse_name: typedef cv.MatND with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::MatND namespace:cv classpath: classname: name:MatND
Registering an unknown type: MatND

--- Incoming ---
['cv.ipp.getIppFeatures', 'unsigned long long', [], [], None, '']
parse_name: cv.ipp.getIppFeatures with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::getIppFeatures namespace:cv::ipp classpath: classname: name:getIppFeatures
register (function) getIppFeatures (cv_ipp_getIppFeatures)

--- Incoming ---
[   'cv.ipp.setIppStatus',
    'void',
    [],
    [   ['int', 'status', '', []],
        ['const char * const', 'funcname', 'NULL', []],
        ['const char * const', 'filename', 'NULL', []],
        ['int', 'line', '0', []]],
    None,
    '']
parse_name: cv.ipp.setIppStatus with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::setIppStatus namespace:cv::ipp classpath: classname: name:setIppStatus
Registering an unknown type: char * const
register (function) setIppStatus (cv_ipp_setIppStatus_int_char * const_char * const_int)

--- Incoming ---
['cv.ipp.getIppStatus', 'int', [], [], None, '']
parse_name: cv.ipp.getIppStatus with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::getIppStatus namespace:cv::ipp classpath: classname: name:getIppStatus
register (function) getIppStatus (cv_ipp_getIppStatus)

--- Incoming ---
['cv.ipp.getIppErrorLocation', 'String', [], [], None, '']
parse_name: cv.ipp.getIppErrorLocation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::getIppErrorLocation namespace:cv::ipp classpath: classname: name:getIppErrorLocation
register (function) getIppErrorLocation (cv_ipp_getIppErrorLocation)

--- Incoming ---
['cv.ipp.useIPP', 'bool', [], [], None, '']
parse_name: cv.ipp.useIPP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::useIPP namespace:cv::ipp classpath: classname: name:useIPP
register (function) useIPP (cv_ipp_useIPP)

--- Incoming ---
['cv.ipp.setUseIPP', 'void', [], [['bool', 'flag', '', []]], None, '']
parse_name: cv.ipp.setUseIPP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::setUseIPP namespace:cv::ipp classpath: classname: name:setUseIPP
register (function) setUseIPP (cv_ipp_setUseIPP_bool)

--- Incoming ---
['cv.ipp.getIppVersion', 'String', [], [], None, '']
parse_name: cv.ipp.getIppVersion with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::getIppVersion namespace:cv::ipp classpath: classname: name:getIppVersion
register (function) getIppVersion (cv_ipp_getIppVersion)

--- Incoming ---
['cv.ipp.useIPP_NotExact', 'bool', [], [], None, '']
parse_name: cv.ipp.useIPP_NotExact with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::useIPP_NotExact namespace:cv::ipp classpath: classname: name:useIPP_NotExact
register (function) useIPP_NotExact (cv_ipp_useIPP_NotExact)

--- Incoming ---
['cv.ipp.setUseIPP_NotExact', 'void', [], [['bool', 'flag', '', []]], None, '']
parse_name: cv.ipp.setUseIPP_NotExact with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::setUseIPP_NotExact namespace:cv::ipp classpath: classname: name:setUseIPP_NotExact
register (function) setUseIPP_NotExact (cv_ipp_setUseIPP_NotExact_bool)

--- Incoming ---
['cv.ipp.useIPP_NE', 'bool', [], [], None, '']
parse_name: cv.ipp.useIPP_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::useIPP_NE namespace:cv::ipp classpath: classname: name:useIPP_NE
register (function) useIPP_NE (cv_ipp_useIPP_NE)

--- Incoming ---
['cv.ipp.setUseIPP_NE', 'void', [], [['bool', 'flag', '', []]], None, '']
parse_name: cv.ipp.setUseIPP_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::ipp', 'cv::ogl'] -> fullname:cv::ipp::setUseIPP_NE namespace:cv::ipp classpath: classname: name:setUseIPP_NE
register (function) setUseIPP_NE (cv_ipp_setUseIPP_NE_bool)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/traits.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/matx.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {}

--- Incoming ---
[   'struct cv.Matx_AddOp',
    '',
    [],
    [],
    None,
    '@addtogroup core_basic\n@{\n@cond IGNORED']
parse_name: struct cv.Matx_AddOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_AddOp namespace:cv classpath: classname: name:Matx_AddOp
register class cv::Matx_AddOp (['struct cv.Matx_AddOp', '', [], [], None, '@addtogroup core_basic\n@{\n@cond IGNORED'])

--- Incoming ---
['cv.Matx_AddOp.Matx_AddOp', 'M', [], [], None, '']
parse_name: cv.Matx_AddOp.Matx_AddOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_AddOp::Matx_AddOp namespace:cv classpath:Matx_AddOp classname:Matx_AddOp name:Matx_AddOp
register (constructor) default in cv::Matx_AddOp (cv_Matx_AddOp_Matx_AddOp)

--- Incoming ---
[   'cv.Matx_AddOp.Matx_AddOp',
    'M',
    [],
    [['const Matx_AddOp&', '', '', []]],
    None,
    '']
parse_name: cv.Matx_AddOp.Matx_AddOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_AddOp::Matx_AddOp namespace:cv classpath:Matx_AddOp classname:Matx_AddOp name:Matx_AddOp
register (constructor) copy in cv::Matx_AddOp (cv_Matx_AddOp_Matx_AddOp_Matx_AddOp)

--- Incoming ---
['struct cv.Matx_SubOp', '', [], [], None, '']
parse_name: struct cv.Matx_SubOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_SubOp namespace:cv classpath: classname: name:Matx_SubOp
register class cv::Matx_SubOp (['struct cv.Matx_SubOp', '', [], [], None, ''])

--- Incoming ---
['cv.Matx_SubOp.Matx_SubOp', 'M', [], [], None, '']
parse_name: cv.Matx_SubOp.Matx_SubOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_SubOp::Matx_SubOp namespace:cv classpath:Matx_SubOp classname:Matx_SubOp name:Matx_SubOp
register (constructor) default in cv::Matx_SubOp (cv_Matx_SubOp_Matx_SubOp)

--- Incoming ---
[   'cv.Matx_SubOp.Matx_SubOp',
    'M',
    [],
    [['const Matx_SubOp&', '', '', []]],
    None,
    '']
parse_name: cv.Matx_SubOp.Matx_SubOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_SubOp::Matx_SubOp namespace:cv classpath:Matx_SubOp classname:Matx_SubOp name:Matx_SubOp
register (constructor) copy in cv::Matx_SubOp (cv_Matx_SubOp_Matx_SubOp_Matx_SubOp)

--- Incoming ---
['struct cv.Matx_ScaleOp', '', [], [], None, '']
parse_name: struct cv.Matx_ScaleOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_ScaleOp namespace:cv classpath: classname: name:Matx_ScaleOp
register class cv::Matx_ScaleOp (['struct cv.Matx_ScaleOp', '', [], [], None, ''])

--- Incoming ---
['cv.Matx_ScaleOp.Matx_ScaleOp', 'M', [], [], None, '']
parse_name: cv.Matx_ScaleOp.Matx_ScaleOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_ScaleOp::Matx_ScaleOp namespace:cv classpath:Matx_ScaleOp classname:Matx_ScaleOp name:Matx_ScaleOp
register (constructor) default in cv::Matx_ScaleOp (cv_Matx_ScaleOp_Matx_ScaleOp)

--- Incoming ---
[   'cv.Matx_ScaleOp.Matx_ScaleOp',
    'M',
    [],
    [['const Matx_ScaleOp&', '', '', []]],
    None,
    '']
parse_name: cv.Matx_ScaleOp.Matx_ScaleOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_ScaleOp::Matx_ScaleOp namespace:cv classpath:Matx_ScaleOp classname:Matx_ScaleOp name:Matx_ScaleOp
register (constructor) copy in cv::Matx_ScaleOp (cv_Matx_ScaleOp_Matx_ScaleOp_Matx_ScaleOp)

--- Incoming ---
['struct cv.Matx_MulOp', '', [], [], None, '']
parse_name: struct cv.Matx_MulOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_MulOp namespace:cv classpath: classname: name:Matx_MulOp
register class cv::Matx_MulOp (['struct cv.Matx_MulOp', '', [], [], None, ''])

--- Incoming ---
['cv.Matx_MulOp.Matx_MulOp', 'M', [], [], None, '']
parse_name: cv.Matx_MulOp.Matx_MulOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_MulOp::Matx_MulOp namespace:cv classpath:Matx_MulOp classname:Matx_MulOp name:Matx_MulOp
register (constructor) default in cv::Matx_MulOp (cv_Matx_MulOp_Matx_MulOp)

--- Incoming ---
[   'cv.Matx_MulOp.Matx_MulOp',
    'M',
    [],
    [['const Matx_MulOp&', '', '', []]],
    None,
    '']
parse_name: cv.Matx_MulOp.Matx_MulOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_MulOp::Matx_MulOp namespace:cv classpath:Matx_MulOp classname:Matx_MulOp name:Matx_MulOp
register (constructor) copy in cv::Matx_MulOp (cv_Matx_MulOp_Matx_MulOp_Matx_MulOp)

--- Incoming ---
['struct cv.Matx_DivOp', '', [], [], None, '']
parse_name: struct cv.Matx_DivOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_DivOp namespace:cv classpath: classname: name:Matx_DivOp
register class cv::Matx_DivOp (['struct cv.Matx_DivOp', '', [], [], None, ''])

--- Incoming ---
['cv.Matx_DivOp.Matx_DivOp', 'M', [], [], None, '']
parse_name: cv.Matx_DivOp.Matx_DivOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_DivOp::Matx_DivOp namespace:cv classpath:Matx_DivOp classname:Matx_DivOp name:Matx_DivOp
register (constructor) default in cv::Matx_DivOp (cv_Matx_DivOp_Matx_DivOp)

--- Incoming ---
[   'cv.Matx_DivOp.Matx_DivOp',
    'M',
    [],
    [['const Matx_DivOp&', '', '', []]],
    None,
    '']
parse_name: cv.Matx_DivOp.Matx_DivOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_DivOp::Matx_DivOp namespace:cv classpath:Matx_DivOp classname:Matx_DivOp name:Matx_DivOp
register (constructor) copy in cv::Matx_DivOp (cv_Matx_DivOp_Matx_DivOp_Matx_DivOp)

--- Incoming ---
['struct cv.Matx_MatMulOp', '', [], [], None, '']
parse_name: struct cv.Matx_MatMulOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_MatMulOp namespace:cv classpath: classname: name:Matx_MatMulOp
register class cv::Matx_MatMulOp (['struct cv.Matx_MatMulOp', '', [], [], None, ''])

--- Incoming ---
['cv.Matx_MatMulOp.Matx_MatMulOp', 'M', [], [], None, '']
parse_name: cv.Matx_MatMulOp.Matx_MatMulOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_MatMulOp::Matx_MatMulOp namespace:cv classpath:Matx_MatMulOp classname:Matx_MatMulOp name:Matx_MatMulOp
register (constructor) default in cv::Matx_MatMulOp (cv_Matx_MatMulOp_Matx_MatMulOp)

--- Incoming ---
[   'cv.Matx_MatMulOp.Matx_MatMulOp',
    'M',
    [],
    [['const Matx_MatMulOp&', '', '', []]],
    None,
    '']
parse_name: cv.Matx_MatMulOp.Matx_MatMulOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_MatMulOp::Matx_MatMulOp namespace:cv classpath:Matx_MatMulOp classname:Matx_MatMulOp name:Matx_MatMulOp
register (constructor) copy in cv::Matx_MatMulOp (cv_Matx_MatMulOp_Matx_MatMulOp_Matx_MatMulOp)

--- Incoming ---
['struct cv.Matx_TOp', '', [], [], None, '']
parse_name: struct cv.Matx_TOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_TOp namespace:cv classpath: classname: name:Matx_TOp
register class cv::Matx_TOp (['struct cv.Matx_TOp', '', [], [], None, ''])

--- Incoming ---
['cv.Matx_TOp.Matx_TOp', 'M', [], [], None, '']
parse_name: cv.Matx_TOp.Matx_TOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_TOp::Matx_TOp namespace:cv classpath:Matx_TOp classname:Matx_TOp name:Matx_TOp
register (constructor) default in cv::Matx_TOp (cv_Matx_TOp_Matx_TOp)

--- Incoming ---
['cv.Matx_TOp.Matx_TOp', 'M', [], [['const Matx_TOp&', '', '', []]], None, '']
parse_name: cv.Matx_TOp.Matx_TOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx_TOp::Matx_TOp namespace:cv classpath:Matx_TOp classname:Matx_TOp name:Matx_TOp
register (constructor) copy in cv::Matx_TOp (cv_Matx_TOp_Matx_TOp_Matx_TOp)

--- Incoming ---
['typedef cv.Matx12f', 'Matx<float, 1, 2>', '', [], None, '']
parse_name: typedef cv.Matx12f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx12f namespace:cv classpath: classname: name:Matx12f
Registering an unknown type: Matx<float, 1, 2>

--- Incoming ---
['typedef cv.Matx12d', 'Matx<double, 1, 2>', '', [], None, '']
parse_name: typedef cv.Matx12d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx12d namespace:cv classpath: classname: name:Matx12d
Registering an unknown type: Matx<double, 1, 2>

--- Incoming ---
['typedef cv.Matx13f', 'Matx<float, 1, 3>', '', [], None, '']
parse_name: typedef cv.Matx13f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx13f namespace:cv classpath: classname: name:Matx13f
Registering an unknown type: Matx<float, 1, 3>

--- Incoming ---
['typedef cv.Matx13d', 'Matx<double, 1, 3>', '', [], None, '']
parse_name: typedef cv.Matx13d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx13d namespace:cv classpath: classname: name:Matx13d
Registering an unknown type: Matx<double, 1, 3>

--- Incoming ---
['typedef cv.Matx14f', 'Matx<float, 1, 4>', '', [], None, '']
parse_name: typedef cv.Matx14f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx14f namespace:cv classpath: classname: name:Matx14f
Registering an unknown type: Matx<float, 1, 4>

--- Incoming ---
['typedef cv.Matx14d', 'Matx<double, 1, 4>', '', [], None, '']
parse_name: typedef cv.Matx14d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx14d namespace:cv classpath: classname: name:Matx14d
Registering an unknown type: Matx<double, 1, 4>

--- Incoming ---
['typedef cv.Matx16f', 'Matx<float, 1, 6>', '', [], None, '']
parse_name: typedef cv.Matx16f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx16f namespace:cv classpath: classname: name:Matx16f
Registering an unknown type: Matx<float, 1, 6>

--- Incoming ---
['typedef cv.Matx16d', 'Matx<double, 1, 6>', '', [], None, '']
parse_name: typedef cv.Matx16d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx16d namespace:cv classpath: classname: name:Matx16d
Registering an unknown type: Matx<double, 1, 6>

--- Incoming ---
['typedef cv.Matx21f', 'Matx<float, 2, 1>', '', [], None, '']
parse_name: typedef cv.Matx21f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx21f namespace:cv classpath: classname: name:Matx21f
Registering an unknown type: Matx<float, 2, 1>

--- Incoming ---
['typedef cv.Matx21d', 'Matx<double, 2, 1>', '', [], None, '']
parse_name: typedef cv.Matx21d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx21d namespace:cv classpath: classname: name:Matx21d
Registering an unknown type: Matx<double, 2, 1>

--- Incoming ---
['typedef cv.Matx31f', 'Matx<float, 3, 1>', '', [], None, '']
parse_name: typedef cv.Matx31f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx31f namespace:cv classpath: classname: name:Matx31f
Registering an unknown type: Matx<float, 3, 1>

--- Incoming ---
['typedef cv.Matx31d', 'Matx<double, 3, 1>', '', [], None, '']
parse_name: typedef cv.Matx31d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx31d namespace:cv classpath: classname: name:Matx31d
Registering an unknown type: Matx<double, 3, 1>

--- Incoming ---
['typedef cv.Matx41f', 'Matx<float, 4, 1>', '', [], None, '']
parse_name: typedef cv.Matx41f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx41f namespace:cv classpath: classname: name:Matx41f
Registering an unknown type: Matx<float, 4, 1>

--- Incoming ---
['typedef cv.Matx41d', 'Matx<double, 4, 1>', '', [], None, '']
parse_name: typedef cv.Matx41d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx41d namespace:cv classpath: classname: name:Matx41d
Registering an unknown type: Matx<double, 4, 1>

--- Incoming ---
['typedef cv.Matx61f', 'Matx<float, 6, 1>', '', [], None, '']
parse_name: typedef cv.Matx61f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx61f namespace:cv classpath: classname: name:Matx61f
Registering an unknown type: Matx<float, 6, 1>

--- Incoming ---
['typedef cv.Matx61d', 'Matx<double, 6, 1>', '', [], None, '']
parse_name: typedef cv.Matx61d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx61d namespace:cv classpath: classname: name:Matx61d
Registering an unknown type: Matx<double, 6, 1>

--- Incoming ---
['typedef cv.Matx22f', 'Matx<float, 2, 2>', '', [], None, '']
parse_name: typedef cv.Matx22f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx22f namespace:cv classpath: classname: name:Matx22f
Registering an unknown type: Matx<float, 2, 2>

--- Incoming ---
['typedef cv.Matx22d', 'Matx<double, 2, 2>', '', [], None, '']
parse_name: typedef cv.Matx22d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx22d namespace:cv classpath: classname: name:Matx22d
Registering an unknown type: Matx<double, 2, 2>

--- Incoming ---
['typedef cv.Matx23f', 'Matx<float, 2, 3>', '', [], None, '']
parse_name: typedef cv.Matx23f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx23f namespace:cv classpath: classname: name:Matx23f
Registering an unknown type: Matx<float, 2, 3>

--- Incoming ---
['typedef cv.Matx23d', 'Matx<double, 2, 3>', '', [], None, '']
parse_name: typedef cv.Matx23d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx23d namespace:cv classpath: classname: name:Matx23d
Registering an unknown type: Matx<double, 2, 3>

--- Incoming ---
['typedef cv.Matx32f', 'Matx<float, 3, 2>', '', [], None, '']
parse_name: typedef cv.Matx32f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx32f namespace:cv classpath: classname: name:Matx32f
Registering an unknown type: Matx<float, 3, 2>

--- Incoming ---
['typedef cv.Matx32d', 'Matx<double, 3, 2>', '', [], None, '']
parse_name: typedef cv.Matx32d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx32d namespace:cv classpath: classname: name:Matx32d
Registering an unknown type: Matx<double, 3, 2>

--- Incoming ---
['typedef cv.Matx33f', 'Matx<float, 3, 3>', '', [], None, '']
parse_name: typedef cv.Matx33f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx33f namespace:cv classpath: classname: name:Matx33f
Registering an unknown type: Matx<float, 3, 3>

--- Incoming ---
['typedef cv.Matx33d', 'Matx<double, 3, 3>', '', [], None, '']
parse_name: typedef cv.Matx33d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx33d namespace:cv classpath: classname: name:Matx33d
Registering an unknown type: Matx<double, 3, 3>

--- Incoming ---
['typedef cv.Matx34f', 'Matx<float, 3, 4>', '', [], None, '']
parse_name: typedef cv.Matx34f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx34f namespace:cv classpath: classname: name:Matx34f
Registering an unknown type: Matx<float, 3, 4>

--- Incoming ---
['typedef cv.Matx34d', 'Matx<double, 3, 4>', '', [], None, '']
parse_name: typedef cv.Matx34d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx34d namespace:cv classpath: classname: name:Matx34d
Registering an unknown type: Matx<double, 3, 4>

--- Incoming ---
['typedef cv.Matx43f', 'Matx<float, 4, 3>', '', [], None, '']
parse_name: typedef cv.Matx43f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx43f namespace:cv classpath: classname: name:Matx43f
Registering an unknown type: Matx<float, 4, 3>

--- Incoming ---
['typedef cv.Matx43d', 'Matx<double, 4, 3>', '', [], None, '']
parse_name: typedef cv.Matx43d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx43d namespace:cv classpath: classname: name:Matx43d
Registering an unknown type: Matx<double, 4, 3>

--- Incoming ---
['typedef cv.Matx44f', 'Matx<float, 4, 4>', '', [], None, '']
parse_name: typedef cv.Matx44f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx44f namespace:cv classpath: classname: name:Matx44f
Registering an unknown type: Matx<float, 4, 4>

--- Incoming ---
['typedef cv.Matx44d', 'Matx<double, 4, 4>', '', [], None, '']
parse_name: typedef cv.Matx44d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx44d namespace:cv classpath: classname: name:Matx44d
Registering an unknown type: Matx<double, 4, 4>

--- Incoming ---
['typedef cv.Matx66f', 'Matx<float, 6, 6>', '', [], None, '']
parse_name: typedef cv.Matx66f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx66f namespace:cv classpath: classname: name:Matx66f
Registering an unknown type: Matx<float, 6, 6>

--- Incoming ---
['typedef cv.Matx66d', 'Matx<double, 6, 6>', '', [], None, '']
parse_name: typedef cv.Matx66d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Matx66d namespace:cv classpath: classname: name:Matx66d
Registering an unknown type: Matx<double, 6, 6>

--- Incoming ---
[   'typedef cv.Vec2b',
    'Vec<uchar, 2>',
    '',
    [],
    None,
    '@name Shorter aliases for the most popular specializations of Vec<T,n>\n'
    '@{']
parse_name: typedef cv.Vec2b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
Registering an unknown type: Vec<uchar, 2>

--- Incoming ---
['typedef cv.Vec3b', 'Vec<uchar, 3>', '', [], None, '']
parse_name: typedef cv.Vec3b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
Registering an unknown type: Vec<uchar, 3>

--- Incoming ---
['typedef cv.Vec4b', 'Vec<uchar, 4>', '', [], None, '']
parse_name: typedef cv.Vec4b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
Registering an unknown type: Vec<uchar, 4>

--- Incoming ---
['typedef cv.Vec2s', 'Vec<short, 2>', '', [], None, '']
parse_name: typedef cv.Vec2s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
Registering an unknown type: Vec<short, 2>

--- Incoming ---
['typedef cv.Vec3s', 'Vec<short, 3>', '', [], None, '']
parse_name: typedef cv.Vec3s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
Registering an unknown type: Vec<short, 3>

--- Incoming ---
['typedef cv.Vec4s', 'Vec<short, 4>', '', [], None, '']
parse_name: typedef cv.Vec4s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
Registering an unknown type: Vec<short, 4>

--- Incoming ---
['typedef cv.Vec2w', 'Vec<ushort, 2>', '', [], None, '']
parse_name: typedef cv.Vec2w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
Registering an unknown type: Vec<ushort, 2>

--- Incoming ---
['typedef cv.Vec3w', 'Vec<ushort, 3>', '', [], None, '']
parse_name: typedef cv.Vec3w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
Registering an unknown type: Vec<ushort, 3>

--- Incoming ---
['typedef cv.Vec4w', 'Vec<ushort, 4>', '', [], None, '']
parse_name: typedef cv.Vec4w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
Registering an unknown type: Vec<ushort, 4>

--- Incoming ---
['typedef cv.Vec2i', 'Vec<int, 2>', '', [], None, '']
parse_name: typedef cv.Vec2i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
Registering an unknown type: Vec<int, 2>

--- Incoming ---
['typedef cv.Vec3i', 'Vec<int, 3>', '', [], None, '']
parse_name: typedef cv.Vec3i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
Registering an unknown type: Vec<int, 3>

--- Incoming ---
['typedef cv.Vec4i', 'Vec<int, 4>', '', [], None, '']
parse_name: typedef cv.Vec4i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
Registering an unknown type: Vec<int, 4>

--- Incoming ---
['typedef cv.Vec6i', 'Vec<int, 6>', '', [], None, '']
parse_name: typedef cv.Vec6i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
Registering an unknown type: Vec<int, 6>

--- Incoming ---
['typedef cv.Vec8i', 'Vec<int, 8>', '', [], None, '']
parse_name: typedef cv.Vec8i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
Registering an unknown type: Vec<int, 8>

--- Incoming ---
['typedef cv.Vec2f', 'Vec<float, 2>', '', [], None, '']
parse_name: typedef cv.Vec2f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
Registering an unknown type: Vec<float, 2>

--- Incoming ---
['typedef cv.Vec3f', 'Vec<float, 3>', '', [], None, '']
parse_name: typedef cv.Vec3f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
Registering an unknown type: Vec<float, 3>

--- Incoming ---
['typedef cv.Vec4f', 'Vec<float, 4>', '', [], None, '']
parse_name: typedef cv.Vec4f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
Registering an unknown type: Vec<float, 4>

--- Incoming ---
['typedef cv.Vec6f', 'Vec<float, 6>', '', [], None, '']
parse_name: typedef cv.Vec6f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
Registering an unknown type: Vec<float, 6>

--- Incoming ---
['typedef cv.Vec2d', 'Vec<double, 2>', '', [], None, '']
parse_name: typedef cv.Vec2d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
Registering an unknown type: Vec<double, 2>

--- Incoming ---
['typedef cv.Vec3d', 'Vec<double, 3>', '', [], None, '']
parse_name: typedef cv.Vec3d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
Registering an unknown type: Vec<double, 3>

--- Incoming ---
['typedef cv.Vec4d', 'Vec<double, 4>', '', [], None, '']
parse_name: typedef cv.Vec4d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
Registering an unknown type: Vec<double, 4>

--- Incoming ---
['typedef cv.Vec6d', 'Vec<double, 6>', '', [], None, '']
parse_name: typedef cv.Vec6d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
Registering an unknown type: Vec<double, 6>


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/types.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {}

--- Incoming ---
['typedef cv.Complexf', 'Complex<float>', '', [], None, '']
parse_name: typedef cv.Complexf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Complexf namespace:cv classpath: classname: name:Complexf
Registering an unknown type: Complex<float>

--- Incoming ---
['typedef cv.Complexd', 'Complex<double>', '', [], None, '']
parse_name: typedef cv.Complexd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Complexd namespace:cv classpath: classname: name:Complexd
Registering an unknown type: Complex<double>

--- Incoming ---
['typedef cv.Point2i', 'Point_<int>', '', [], None, '']
parse_name: typedef cv.Point2i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i

--- Incoming ---
['typedef cv.Point2l', 'Point_<int64>', '', [], None, '']
parse_name: typedef cv.Point2l with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l

--- Incoming ---
['typedef cv.Point2f', 'Point_<float>', '', [], None, '']
parse_name: typedef cv.Point2f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f

--- Incoming ---
['typedef cv.Point2d', 'Point_<double>', '', [], None, '']
parse_name: typedef cv.Point2d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d

--- Incoming ---
['typedef cv.Point', 'Point2i', '', [], None, '']
parse_name: typedef cv.Point with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point

--- Incoming ---
['typedef cv.Point3i', 'Point3_<int>', '', [], None, '']
parse_name: typedef cv.Point3i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3i namespace:cv classpath: classname: name:Point3i
Registering an unknown type: Point3_<int>

--- Incoming ---
['typedef cv.Point3f', 'Point3_<float>', '', [], None, '']
parse_name: typedef cv.Point3f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3f namespace:cv classpath: classname: name:Point3f
Registering an unknown type: Point3_<float>

--- Incoming ---
['typedef cv.Point3d', 'Point3_<double>', '', [], None, '']
parse_name: typedef cv.Point3d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3d namespace:cv classpath: classname: name:Point3d
Registering an unknown type: Point3_<double>

--- Incoming ---
['typedef cv.Size2i', 'Size_<int>', '', [], None, '']
parse_name: typedef cv.Size2i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
Registering an unknown type: Size_<int>

--- Incoming ---
['typedef cv.Size2l', 'Size_<int64>', '', [], None, '']
parse_name: typedef cv.Size2l with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l

--- Incoming ---
['typedef cv.Size2f', 'Size_<float>', '', [], None, '']
parse_name: typedef cv.Size2f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f

--- Incoming ---
['typedef cv.Size2d', 'Size_<double>', '', [], None, '']
parse_name: typedef cv.Size2d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d

--- Incoming ---
['typedef cv.Size', 'Size2i', '', [], None, '']
parse_name: typedef cv.Size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size

--- Incoming ---
['typedef cv.Rect2i', 'Rect_<int>', '', [], None, '']
parse_name: typedef cv.Rect2i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i

--- Incoming ---
['typedef cv.Rect2f', 'Rect_<float>', '', [], None, '']
parse_name: typedef cv.Rect2f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f

--- Incoming ---
['typedef cv.Rect2d', 'Rect_<double>', '', [], None, '']
parse_name: typedef cv.Rect2d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d

--- Incoming ---
['typedef cv.Rect', 'Rect2i', '', [], None, '']
parse_name: typedef cv.Rect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect

--- Incoming ---
[   'class cv.RotatedRect',
    '',
    [],
    [   ['Point2f', 'center', 'returns the rectangle mass center', []],
        ['Size2f', 'size', 'returns width and height of the rectangle', []],
        [   'float',
            'angle',
            'returns the rotation angle. When the angle is 0, 90, 180, 270 '
            'etc., the rectangle becomes an up-right rectangle.',
            []]],
    None,
    '@brief The class represents rotated (i.e. not up-right) rectangles on a '
    'plane.\n'
    '\n'
    'Each rectangle is specified by the center point (mass center), length of '
    'each side (represented by\n'
    '#Size2f structure) and the rotation angle in degrees.\n'
    '\n'
    'The sample below demonstrates how to use RotatedRect:\n'
    '@snippet snippets/core_various.cpp RotatedRect_demo\n'
    '![image](pics/rotatedrect.png)\n'
    '\n'
    '@sa CamShift, fitEllipse, minAreaRect, CvBox2D']
parse_name: class cv.RotatedRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (['class cv.RotatedRect', '', [], [['Point2f', 'center', 'returns the rectangle mass center', []], ['Size2f', 'size', 'returns width and height of the rectangle', []], ['float', 'angle', 'returns the rotation angle. When the angle is 0, 90, 180, 270 etc., the rectangle becomes an up-right rectangle.', []]], None, '@brief The class represents rotated (i.e. not up-right) rectangles on a plane.\n\nEach rectangle is specified by the center point (mass center), length of each side (represented by\n#Size2f structure) and the rotation angle in degrees.\n\nThe sample below demonstrates how to use RotatedRect:\n@snippet snippets/core_various.cpp RotatedRect_demo\n![image](pics/rotatedrect.png)\n\n@sa CamShift, fitEllipse, minAreaRect, CvBox2D'])
parse_name: cv.RotatedRect.center with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::center namespace:cv classpath:RotatedRect classname:RotatedRect name:center
register (method) center in cv::RotatedRect (cv_RotatedRect_center_const)
parse_name: cv.RotatedRect.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::size namespace:cv classpath:RotatedRect classname:RotatedRect name:size
register (method) size in cv::RotatedRect (cv_RotatedRect_size_const)
parse_name: cv.RotatedRect.angle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::angle namespace:cv classpath:RotatedRect classname:RotatedRect name:angle
register (method) angle in cv::RotatedRect (cv_RotatedRect_angle_const)

--- Incoming ---
['cv.RotatedRect.RotatedRect', 'R', [], [], None, 'default constructor']
parse_name: cv.RotatedRect.RotatedRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::RotatedRect namespace:cv classpath:RotatedRect classname:RotatedRect name:RotatedRect
register (constructor) default in cv::RotatedRect (cv_RotatedRect_RotatedRect)

--- Incoming ---
[   'cv.RotatedRect.RotatedRect',
    'R',
    [],
    [   ['const Point2f&', 'center', '', []],
        ['const Size2f&', 'size', '', []],
        ['float', 'angle', '', []]],
    None,
    'full constructor\n'
    '@param center The rectangle mass center.\n'
    '@param size Width and height of the rectangle.\n'
    '@param angle The rotation angle in a clockwise direction. When the angle '
    'is 0, 90, 180, 270 etc.,\n'
    'the rectangle becomes an up-right rectangle.']
parse_name: cv.RotatedRect.RotatedRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::RotatedRect namespace:cv classpath:RotatedRect classname:RotatedRect name:RotatedRect
register (constructor) new in cv::RotatedRect (cv_RotatedRect_RotatedRect_Point2f_Size2f_float)

--- Incoming ---
[   'cv.RotatedRect.RotatedRect',
    'R',
    [],
    [   ['const Point2f&', 'point1', '', []],
        ['const Point2f&', 'point2', '', []],
        ['const Point2f&', 'point3', '', []]],
    None,
    'Any 3 end points of the RotatedRect. They must be given in order (either '
    'clockwise or\n'
    'anticlockwise).']
parse_name: cv.RotatedRect.RotatedRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::RotatedRect namespace:cv classpath:RotatedRect classname:RotatedRect name:RotatedRect
register (constructor) new in cv::RotatedRect (cv_RotatedRect_RotatedRect_Point2f_Point2f_Point2f)

--- Incoming ---
[   'cv.RotatedRect.points',
    'void',
    ['/C'],
    [['Point2f[]', 'pts', '', []]],
    None,
    'returns 4 vertices of the rectangle\n'
    '@param pts The points array for storing rectangle vertices. The order is '
    'bottomLeft, topLeft, topRight, bottomRight.']
parse_name: cv.RotatedRect.points with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::points namespace:cv classpath:RotatedRect classname:RotatedRect name:points
register (method) points in cv::RotatedRect (cv_RotatedRect_points_const_Point2f_X)

--- Incoming ---
[   'cv.RotatedRect.boundingRect',
    'Rect',
    ['/C'],
    [],
    None,
    'returns the minimal up-right integer rectangle containing the rotated '
    'rectangle']
parse_name: cv.RotatedRect.boundingRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::boundingRect namespace:cv classpath:RotatedRect classname:RotatedRect name:boundingRect
register (method) boundingRect in cv::RotatedRect (cv_RotatedRect_boundingRect_const)

--- Incoming ---
[   'cv.RotatedRect.boundingRect2f',
    'Rect_<float>',
    ['/C'],
    [],
    None,
    'returns the minimal (exact) floating point rectangle containing the '
    'rotated rectangle, not intended for use with images']
parse_name: cv.RotatedRect.boundingRect2f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::boundingRect2f namespace:cv classpath:RotatedRect classname:RotatedRect name:boundingRect2f
register (method) boundingRect2f in cv::RotatedRect (cv_RotatedRect_boundingRect2f_const)

--- Incoming ---
[   'class cv.Range',
    '',
    [],
    [['int', 'start', '', []], ['int', 'end', '', []]],
    None,
    '@brief Template class specifying a continuous subsequence (slice) of a '
    'sequence.\n'
    '\n'
    'The class is used to specify a row or a column span in a matrix ( Mat ) '
    'and for many other purposes.\n'
    'Range(a,b) is basically the same as a:b in Matlab or a..b in Python. As '
    'in Python, start is an\n'
    'inclusive left boundary of the range and end is an exclusive right '
    'boundary of the range. Such a\n'
    'half-opened interval is usually denoted as \\f$[start,end)\\f$ .\n'
    '\n'
    'The static method Range::all() returns a special variable that means "the '
    'whole sequence" or "the\n'
    'whole range", just like " : " in Matlab or " ... " in Python. All the '
    'methods and functions in\n'
    'OpenCV that take Range support this special Range::all() value. But, of '
    'course, in case of your own\n'
    'custom processing, you will probably have to check and handle it '
    'explicitly:\n'
    '@code\n'
    'void my_function(..., const Range& r, ....)\n'
    '{\n'
    'if(r == Range::all()) {\n'
    '// process all the data\n'
    '}\n'
    'else {\n'
    '// process [r.start, r.end)\n'
    '}\n'
    '}\n'
    '@endcode']
parse_name: class cv.Range with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (['class cv.Range', '', [], [['int', 'start', '', []], ['int', 'end', '', []]], None, '@brief Template class specifying a continuous subsequence (slice) of a sequence.\n\nThe class is used to specify a row or a column span in a matrix ( Mat ) and for many other purposes.\nRange(a,b) is basically the same as a:b in Matlab or a..b in Python. As in Python, start is an\ninclusive left boundary of the range and end is an exclusive right boundary of the range. Such a\nhalf-opened interval is usually denoted as \\f$[start,end)\\f$ .\n\nThe static method Range::all() returns a special variable that means "the whole sequence" or "the\nwhole range", just like " : " in Matlab or " ... " in Python. All the methods and functions in\nOpenCV that take Range support this special Range::all() value. But, of course, in case of your own\ncustom processing, you will probably have to check and handle it explicitly:\n@code\nvoid my_function(..., const Range& r, ....)\n{\nif(r == Range::all()) {\n// process all the data\n}\nelse {\n// process [r.start, r.end)\n}\n}\n@endcode'])
parse_name: cv.Range.start with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::start namespace:cv classpath:Range classname:Range name:start
register (method) start in cv::Range (cv_Range_start_const)
parse_name: cv.Range.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::end namespace:cv classpath:Range classname:Range name:end
register (method) end in cv::Range (cv_Range_end_const)

--- Incoming ---
['cv.Range.Range', 'R', [], [], None, '']
parse_name: cv.Range.Range with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::Range namespace:cv classpath:Range classname:Range name:Range
register (constructor) default in cv::Range (cv_Range_Range)

--- Incoming ---
[   'cv.Range.Range',
    'R',
    [],
    [['int', '_start', '', []], ['int', '_end', '', []]],
    None,
    '']
parse_name: cv.Range.Range with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::Range namespace:cv classpath:Range classname:Range name:Range
register (constructor) new in cv::Range (cv_Range_Range_int_int)

--- Incoming ---
['cv.Range.size', 'int', ['/C'], [], None, '']
parse_name: cv.Range.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::size namespace:cv classpath:Range classname:Range name:size
register (method) size in cv::Range (cv_Range_size_const)

--- Incoming ---
['cv.Range.empty', 'bool', ['/C'], [], None, '']
parse_name: cv.Range.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::empty namespace:cv classpath:Range classname:Range name:empty
register (method) empty in cv::Range (cv_Range_empty_const)

--- Incoming ---
['cv.Range.all', 'Range', ['/S'], [], None, '']
parse_name: cv.Range.all with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::all namespace:cv classpath:Range classname:Range name:all
register (method) all in cv::Range (cv_Range_all)

--- Incoming ---
['typedef cv.Scalar', 'Scalar_<double>', '', [], None, '']
parse_name: typedef cv.Scalar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar

--- Incoming ---
[   'class cv.KeyPoint',
    '',
    ['/Simple'],
    [   ['Point2f', 'pt', 'coordinates of the keypoints', ['/RW']],
        [   'float',
            'size',
            'diameter of the meaningful keypoint neighborhood',
            ['/RW']],
        [   'float',
            'angle',
            "computed orientation of the keypoint (-1 if not applicable);it's "
            'in [0,360) degrees and measured relative toimage coordinate '
            'system, ie in clockwise.',
            ['/RW']],
        [   'float',
            'response',
            'the response by which the most strong keypoints have been '
            'selected. Can be used for the further sorting or subsampling',
            ['/RW']],
        [   'int',
            'octave',
            'octave (pyramid layer) from which the keypoint has been extracted',
            ['/RW']],
        [   'int',
            'class_id',
            'object class (if the keypoints need to be clustered by an object '
            'they belong to)',
            ['/RW']]],
    None,
    '@brief Data structure for salient point detectors.\n'
    '\n'
    'The class instance stores a keypoint, i.e. a point feature found by one '
    'of many available keypoint\n'
    'detectors, such as Harris corner detector, #FAST, %StarDetector, %SURF, '
    '%SIFT etc.\n'
    '\n'
    'The keypoint is characterized by the 2D position, scale (proportional to '
    'the diameter of the\n'
    'neighborhood that needs to be taken into account), orientation and some '
    'other parameters. The\n'
    'keypoint neighborhood is then analyzed by another algorithm that builds a '
    'descriptor (usually\n'
    'represented as a feature vector). The keypoints representing the same '
    'object in different images\n'
    'can then be matched using %KDTree or another method.']
parse_name: class cv.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (['class cv.KeyPoint', '', ['/Simple'], [['Point2f', 'pt', 'coordinates of the keypoints', ['/RW']], ['float', 'size', 'diameter of the meaningful keypoint neighborhood', ['/RW']], ['float', 'angle', "computed orientation of the keypoint (-1 if not applicable);it's in [0,360) degrees and measured relative toimage coordinate system, ie in clockwise.", ['/RW']], ['float', 'response', 'the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling', ['/RW']], ['int', 'octave', 'octave (pyramid layer) from which the keypoint has been extracted', ['/RW']], ['int', 'class_id', 'object class (if the keypoints need to be clustered by an object they belong to)', ['/RW']]], None, '@brief Data structure for salient point detectors.\n\nThe class instance stores a keypoint, i.e. a point feature found by one of many available keypoint\ndetectors, such as Harris corner detector, #FAST, %StarDetector, %SURF, %SIFT etc.\n\nThe keypoint is characterized by the 2D position, scale (proportional to the diameter of the\nneighborhood that needs to be taken into account), orientation and some other parameters. The\nkeypoint neighborhood is then analyzed by another algorithm that builds a descriptor (usually\nrepresented as a feature vector). The keypoints representing the same object in different images\ncan then be matched using %KDTree or another method.'])

--- Incoming ---
['cv.KeyPoint.KeyPoint', 'K', [], [], None, 'the default constructor']
parse_name: cv.KeyPoint.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::KeyPoint namespace:cv classpath:KeyPoint classname:KeyPoint name:KeyPoint
register (constructor) default in cv::KeyPoint (simple) (cv_KeyPoint_KeyPoint)

--- Incoming ---
[   'cv.KeyPoint.KeyPoint',
    'K',
    [],
    [   ['Point2f', '_pt', '', []],
        ['float', '_size', '', []],
        ['float', '_angle', '-1', []],
        ['float', '_response', '0', []],
        ['int', '_octave', '0', []],
        ['int', '_class_id', '-1', []]],
    None,
    '@param _pt x & y coordinates of the keypoint\n'
    '@param _size keypoint diameter\n'
    '@param _angle keypoint orientation\n'
    '@param _response keypoint detector response on the keypoint (that is, '
    'strength of the keypoint)\n'
    '@param _octave pyramid octave in which the keypoint has been detected\n'
    '@param _class_id object id']
parse_name: cv.KeyPoint.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::KeyPoint namespace:cv classpath:KeyPoint classname:KeyPoint name:KeyPoint
register (constructor) new in cv::KeyPoint (simple) (cv_KeyPoint_KeyPoint_Point2f_float_float_float_int_int)

--- Incoming ---
[   'cv.KeyPoint.KeyPoint',
    'K',
    [],
    [   ['float', 'x', '', []],
        ['float', 'y', '', []],
        ['float', '_size', '', []],
        ['float', '_angle', '-1', []],
        ['float', '_response', '0', []],
        ['int', '_octave', '0', []],
        ['int', '_class_id', '-1', []]],
    None,
    '@param x x-coordinate of the keypoint\n'
    '@param y y-coordinate of the keypoint\n'
    '@param _size keypoint diameter\n'
    '@param _angle keypoint orientation\n'
    '@param _response keypoint detector response on the keypoint (that is, '
    'strength of the keypoint)\n'
    '@param _octave pyramid octave in which the keypoint has been detected\n'
    '@param _class_id object id']
parse_name: cv.KeyPoint.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::KeyPoint namespace:cv classpath:KeyPoint classname:KeyPoint name:KeyPoint
register (constructor) new in cv::KeyPoint (simple) (cv_KeyPoint_KeyPoint_float_float_float_float_float_int_int)

--- Incoming ---
['cv.KeyPoint.hash', 'size_t', ['/C'], [], None, '']
parse_name: cv.KeyPoint.hash with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::hash namespace:cv classpath:KeyPoint classname:KeyPoint name:hash
register (method) hash in cv::KeyPoint (simple) (cv_KeyPoint_hash_const)

--- Incoming ---
[   'cv.KeyPoint.convert',
    'void',
    ['/S'],
    [   ['const std::vector<KeyPoint>&', 'keypoints', '', []],
        ['std::vector<Point2f>&', 'points2f', '', []],
        [   'const std::vector<int>&',
            'keypointIndexes',
            'std::vector<int>()',
            []]],
    None,
    'This method converts vector of keypoints to vector of points or the '
    'reverse, where each keypoint is\n'
    'assigned the same size and the same orientation.\n'
    '\n'
    '@param keypoints Keypoints obtained from any feature detection algorithm '
    'like SIFT/SURF/ORB\n'
    '@param points2f Array of (x,y) coordinates of each keypoint\n'
    '@param keypointIndexes Array of indexes of keypoints to be converted to '
    'points. (Acts like a mask to\n'
    'convert only specified keypoints)']
parse_name: cv.KeyPoint.convert with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::convert namespace:cv classpath:KeyPoint classname:KeyPoint name:convert
register (method) convert in cv::KeyPoint (simple) (cv_KeyPoint_convert_VectorOfKeyPoint_VectorOfPoint2f_VectorOfint)

--- Incoming ---
[   'cv.KeyPoint.convert',
    'void',
    ['/S'],
    [   ['const std::vector<Point2f>&', 'points2f', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['float', 'size', '1', []],
        ['float', 'response', '1', []],
        ['int', 'octave', '0', []],
        ['int', 'class_id', '-1', []]],
    None,
    '@overload\n'
    '@param points2f Array of (x,y) coordinates of each keypoint\n'
    '@param keypoints Keypoints obtained from any feature detection algorithm '
    'like SIFT/SURF/ORB\n'
    '@param size keypoint diameter\n'
    '@param response keypoint detector response on the keypoint (that is, '
    'strength of the keypoint)\n'
    '@param octave pyramid octave in which the keypoint has been detected\n'
    '@param class_id object id']
parse_name: cv.KeyPoint.convert with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::convert namespace:cv classpath:KeyPoint classname:KeyPoint name:convert
register (method) convert in cv::KeyPoint (simple) (cv_KeyPoint_convert_VectorOfPoint2f_VectorOfKeyPoint_float_float_int_int)

--- Incoming ---
[   'cv.KeyPoint.overlap',
    'float',
    ['/S'],
    [['const KeyPoint&', 'kp1', '', []], ['const KeyPoint&', 'kp2', '', []]],
    None,
    'This method computes overlap for pair of keypoints. Overlap is the ratio '
    'between area of keypoint\n'
    "regions' intersection and area of keypoint regions' union (considering "
    'keypoint region as circle).\n'
    "If they don't overlap, we get zero. If they coincide at same location "
    'with same size, we get 1.\n'
    '@param kp1 First keypoint\n'
    '@param kp2 Second keypoint']
parse_name: cv.KeyPoint.overlap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::overlap namespace:cv classpath:KeyPoint classname:KeyPoint name:overlap
register (method) overlap in cv::KeyPoint (simple) (cv_KeyPoint_overlap_KeyPoint_KeyPoint)

--- Incoming ---
[   'class cv.DMatch',
    '',
    ['/Simple'],
    [   ['int', 'queryIdx', 'query descriptor index', ['/RW']],
        ['int', 'trainIdx', 'train descriptor index', ['/RW']],
        ['int', 'imgIdx', 'train image index', ['/RW']],
        ['float', 'distance', '', ['/RW']]],
    None,
    '@brief Class for matching keypoint descriptors\n'
    '\n'
    'query descriptor index, train descriptor index, train image index, and '
    'distance between\n'
    'descriptors.']
parse_name: class cv.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (['class cv.DMatch', '', ['/Simple'], [['int', 'queryIdx', 'query descriptor index', ['/RW']], ['int', 'trainIdx', 'train descriptor index', ['/RW']], ['int', 'imgIdx', 'train image index', ['/RW']], ['float', 'distance', '', ['/RW']]], None, '@brief Class for matching keypoint descriptors\n\nquery descriptor index, train descriptor index, train image index, and distance between\ndescriptors.'])

--- Incoming ---
['cv.DMatch.DMatch', 'D', [], [], None, '']
parse_name: cv.DMatch.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::DMatch namespace:cv classpath:DMatch classname:DMatch name:DMatch
register (constructor) default in cv::DMatch (simple) (cv_DMatch_DMatch)

--- Incoming ---
[   'cv.DMatch.DMatch',
    'D',
    [],
    [   ['int', '_queryIdx', '', []],
        ['int', '_trainIdx', '', []],
        ['float', '_distance', '', []]],
    None,
    '']
parse_name: cv.DMatch.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::DMatch namespace:cv classpath:DMatch classname:DMatch name:DMatch
register (constructor) new in cv::DMatch (simple) (cv_DMatch_DMatch_int_int_float)

--- Incoming ---
[   'cv.DMatch.DMatch',
    'D',
    [],
    [   ['int', '_queryIdx', '', []],
        ['int', '_trainIdx', '', []],
        ['int', '_imgIdx', '', []],
        ['float', '_distance', '', []]],
    None,
    '']
parse_name: cv.DMatch.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::DMatch namespace:cv classpath:DMatch classname:DMatch name:DMatch
register (constructor) new in cv::DMatch (simple) (cv_DMatch_DMatch_int_int_int_float)

--- Incoming ---
[   'cv.DMatch.operator <',
    'bool',
    ['/C'],
    [['const DMatch &', 'm', '', []]],
    None,
    '']
parse_name: cv.DMatch.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::operator < namespace:cv classpath:DMatch classname:DMatch name:operator <
ignore (method) operator < in cv::DMatch (simple)

--- Incoming ---
[   'class cv.TermCriteria',
    '',
    [],
    [   [   'int',
            'type',
            'the type of termination criteria: COUNT, EPS or COUNT + EPS',
            []],
        ['int', 'maxCount', 'the maximum number of iterations/elements', []],
        ['double', 'epsilon', 'the desired accuracy', []]],
    None,
    '@brief The class defining termination criteria for iterative algorithms.\n'
    '\n'
    'You can initialize it by default constructor and then override any '
    'parameters, or the structure may\n'
    'be fully initialized using the advanced variant of the constructor.']
parse_name: class cv.TermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (['class cv.TermCriteria', '', [], [['int', 'type', 'the type of termination criteria: COUNT, EPS or COUNT + EPS', []], ['int', 'maxCount', 'the maximum number of iterations/elements', []], ['double', 'epsilon', 'the desired accuracy', []]], None, '@brief The class defining termination criteria for iterative algorithms.\n\nYou can initialize it by default constructor and then override any parameters, or the structure may\nbe fully initialized using the advanced variant of the constructor.'])
parse_name: cv.TermCriteria.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::type namespace:cv classpath:TermCriteria classname:TermCriteria name:type
register (method) type in cv::TermCriteria (cv_TermCriteria_type_const)
parse_name: cv.TermCriteria.maxCount with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::maxCount namespace:cv classpath:TermCriteria classname:TermCriteria name:maxCount
register (method) maxCount in cv::TermCriteria (cv_TermCriteria_maxCount_const)
parse_name: cv.TermCriteria.epsilon with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::epsilon namespace:cv classpath:TermCriteria classname:TermCriteria name:epsilon
register (method) epsilon in cv::TermCriteria (cv_TermCriteria_epsilon_const)

--- Incoming ---
[   'enum cv.TermCriteria.Type',
    '',
    [],
    [   [   'const cv.TermCriteria.COUNT',
            '1',
            [],
            [],
            None,
            'the maximum number of iterations or elements to compute\n'],
        ['const cv.TermCriteria.MAX_ITER', 'COUNT', [], [], None, 'ditto\n'],
        [   'const cv.TermCriteria.EPS',
            '2',
            [],
            [],
            None,
            'the desired accuracy or change in parameters at which the '
            'iterative algorithm stops\n']],
    None,
    'Criteria type, can be one of: COUNT, EPS or COUNT + EPS']
parse_name: const cv.TermCriteria.COUNT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::COUNT namespace:cv classpath:TermCriteria classname:TermCriteria name:COUNT
parse_name: const cv.TermCriteria.MAX_ITER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::MAX_ITER namespace:cv classpath:TermCriteria classname:TermCriteria name:MAX_ITER
parse_name: const cv.TermCriteria.EPS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::EPS namespace:cv classpath:TermCriteria classname:TermCriteria name:EPS
parse_name: enum cv.TermCriteria.Type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::Type namespace:cv classpath:TermCriteria classname:TermCriteria name:Type
parse_name: const cv.TermCriteria.COUNT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::COUNT namespace:cv classpath:TermCriteria classname:TermCriteria name:COUNT
parse_name: const cv.TermCriteria.MAX_ITER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::MAX_ITER namespace:cv classpath:TermCriteria classname:TermCriteria name:MAX_ITER
parse_name: const cv.TermCriteria.EPS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::EPS namespace:cv classpath:TermCriteria classname:TermCriteria name:EPS

--- Incoming ---
['cv.TermCriteria.TermCriteria', 'T', [], [], None, 'default constructor']
parse_name: cv.TermCriteria.TermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::TermCriteria namespace:cv classpath:TermCriteria classname:TermCriteria name:TermCriteria
register (constructor) default in cv::TermCriteria (cv_TermCriteria_TermCriteria)

--- Incoming ---
[   'cv.TermCriteria.TermCriteria',
    'T',
    [],
    [   ['int', 'type', '', []],
        ['int', 'maxCount', '', []],
        ['double', 'epsilon', '', []]],
    None,
    '@param type The type of termination criteria, one of TermCriteria::Type\n'
    '@param maxCount The maximum number of iterations or elements to compute.\n'
    '@param epsilon The desired accuracy or change in parameters at which the '
    'iterative algorithm stops.']
parse_name: cv.TermCriteria.TermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::TermCriteria namespace:cv classpath:TermCriteria classname:TermCriteria name:TermCriteria
register (constructor) new in cv::TermCriteria (cv_TermCriteria_TermCriteria_int_int_double)

--- Incoming ---
['cv.TermCriteria.isValid', 'bool', ['/C'], [], None, '']
parse_name: cv.TermCriteria.isValid with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::isValid namespace:cv classpath:TermCriteria classname:TermCriteria name:isValid
register (method) isValid in cv::TermCriteria (cv_TermCriteria_isValid_const)

--- Incoming ---
[   'class cv.Moments',
    '',
    ['/Map'],
    [   ['double', 'm00', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm10', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm01', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm20', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm11', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm02', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm30', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm21', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm12', '@name spatial moments\n@{', ['/RW']],
        ['double', 'm03', '@name spatial moments\n@{', ['/RW']],
        ['double', 'mu20', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'mu11', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'mu02', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'mu30', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'mu21', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'mu12', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'mu03', '@}\n@name central moments\n@{', ['/RW']],
        ['double', 'nu20', '@}\n@name central normalized moments\n@{', ['/RW']],
        ['double', 'nu11', '@}\n@name central normalized moments\n@{', ['/RW']],
        ['double', 'nu02', '@}\n@name central normalized moments\n@{', ['/RW']],
        ['double', 'nu30', '@}\n@name central normalized moments\n@{', ['/RW']],
        ['double', 'nu21', '@}\n@name central normalized moments\n@{', ['/RW']],
        ['double', 'nu12', '@}\n@name central normalized moments\n@{', ['/RW']],
        [   'double',
            'nu03',
            '@}\n@name central normalized moments\n@{',
            ['/RW']]],
    None,
    '@brief struct returned by cv::moments\n'
    '\n'
    'The spatial moments \\f$\\texttt{Moments::m}_{ji}\\f$ are computed as:\n'
    '\n'
    '\\f[\\texttt{m} _{ji}= \\sum _{x,y}  \\left ( \\texttt{array} (x,y)  '
    '\\cdot x^j  \\cdot y^i \\right )\\f]\n'
    '\n'
    'The central moments \\f$\\texttt{Moments::mu}_{ji}\\f$ are computed as:\n'
    '\n'
    '\\f[\\texttt{mu} _{ji}= \\sum _{x,y}  \\left ( \\texttt{array} (x,y)  '
    '\\cdot (x -  \\bar{x} )^j  \\cdot (y -  \\bar{y} )^i \\right )\\f]\n'
    '\n'
    'where \\f$(\\bar{x}, \\bar{y})\\f$ is the mass center:\n'
    '\n'
    '\\f[\\bar{x} = \\frac{\\texttt{m}_{10}}{\\texttt{m}_{00}} , \\; \\bar{y} '
    '= \\frac{\\texttt{m}_{01}}{\\texttt{m}_{00}}\\f]\n'
    '\n'
    'The normalized central moments \\f$\\texttt{Moments::nu}_{ij}\\f$ are '
    'computed as:\n'
    '\n'
    '\\f[\\texttt{nu} _{ji}= '
    '\\frac{\\texttt{mu}_{ji}}{\\texttt{m}_{00}^{(i+j)/2+1}} .\\f]\n'
    '\n'
    '@note\n'
    '\\f$\\texttt{mu}_{00}=\\texttt{m}_{00}\\f$, \\f$\\texttt{nu}_{00}=1\\f$\n'
    '\\f$\\texttt{nu}_{10}=\\texttt{mu}_{10}=\\texttt{mu}_{01}=\\texttt{mu}_{10}=0\\f$ '
    ', hence the values are not\n'
    'stored.\n'
    '\n'
    'The moments of a contour are defined in the same way but computed using '
    "the Green's formula (see\n"
    '<http://en.wikipedia.org/wiki/Green_theorem>). So, due to a limited '
    'raster resolution, the moments\n'
    'computed for a contour are slightly different from the moments computed '
    'for the same rasterized\n'
    'contour.\n'
    '\n'
    '@note\n'
    'Since the contour moments are computed using Green formula, you may get '
    'seemingly odd results for\n'
    'contours with self-intersections, e.g. a zero area (m00) for '
    'butterfly-shaped contours.']
parse_name: class cv.Moments with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Moments namespace:cv classpath: classname: name:Moments
register class cv::Moments (['class cv.Moments', '', ['/Map'], [['double', 'm00', '@name spatial moments\n@{', ['/RW']], ['double', 'm10', '@name spatial moments\n@{', ['/RW']], ['double', 'm01', '@name spatial moments\n@{', ['/RW']], ['double', 'm20', '@name spatial moments\n@{', ['/RW']], ['double', 'm11', '@name spatial moments\n@{', ['/RW']], ['double', 'm02', '@name spatial moments\n@{', ['/RW']], ['double', 'm30', '@name spatial moments\n@{', ['/RW']], ['double', 'm21', '@name spatial moments\n@{', ['/RW']], ['double', 'm12', '@name spatial moments\n@{', ['/RW']], ['double', 'm03', '@name spatial moments\n@{', ['/RW']], ['double', 'mu20', '@}\n@name central moments\n@{', ['/RW']], ['double', 'mu11', '@}\n@name central moments\n@{', ['/RW']], ['double', 'mu02', '@}\n@name central moments\n@{', ['/RW']], ['double', 'mu30', '@}\n@name central moments\n@{', ['/RW']], ['double', 'mu21', '@}\n@name central moments\n@{', ['/RW']], ['double', 'mu12', '@}\n@name central moments\n@{', ['/RW']], ['double', 'mu03', '@}\n@name central moments\n@{', ['/RW']], ['double', 'nu20', '@}\n@name central normalized moments\n@{', ['/RW']], ['double', 'nu11', '@}\n@name central normalized moments\n@{', ['/RW']], ['double', 'nu02', '@}\n@name central normalized moments\n@{', ['/RW']], ['double', 'nu30', '@}\n@name central normalized moments\n@{', ['/RW']], ['double', 'nu21', '@}\n@name central normalized moments\n@{', ['/RW']], ['double', 'nu12', '@}\n@name central normalized moments\n@{', ['/RW']], ['double', 'nu03', '@}\n@name central normalized moments\n@{', ['/RW']]], None, "@brief struct returned by cv::moments\n\nThe spatial moments \\f$\\texttt{Moments::m}_{ji}\\f$ are computed as:\n\n\\f[\\texttt{m} _{ji}= \\sum _{x,y}  \\left ( \\texttt{array} (x,y)  \\cdot x^j  \\cdot y^i \\right )\\f]\n\nThe central moments \\f$\\texttt{Moments::mu}_{ji}\\f$ are computed as:\n\n\\f[\\texttt{mu} _{ji}= \\sum _{x,y}  \\left ( \\texttt{array} (x,y)  \\cdot (x -  \\bar{x} )^j  \\cdot (y -  \\bar{y} )^i \\right )\\f]\n\nwhere \\f$(\\bar{x}, \\bar{y})\\f$ is the mass center:\n\n\\f[\\bar{x} = \\frac{\\texttt{m}_{10}}{\\texttt{m}_{00}} , \\; \\bar{y} = \\frac{\\texttt{m}_{01}}{\\texttt{m}_{00}}\\f]\n\nThe normalized central moments \\f$\\texttt{Moments::nu}_{ij}\\f$ are computed as:\n\n\\f[\\texttt{nu} _{ji}= \\frac{\\texttt{mu}_{ji}}{\\texttt{m}_{00}^{(i+j)/2+1}} .\\f]\n\n@note\n\\f$\\texttt{mu}_{00}=\\texttt{m}_{00}\\f$, \\f$\\texttt{nu}_{00}=1\\f$\n\\f$\\texttt{nu}_{10}=\\texttt{mu}_{10}=\\texttt{mu}_{01}=\\texttt{mu}_{10}=0\\f$ , hence the values are not\nstored.\n\nThe moments of a contour are defined in the same way but computed using the Green's formula (see\n<http://en.wikipedia.org/wiki/Green_theorem>). So, due to a limited raster resolution, the moments\ncomputed for a contour are slightly different from the moments computed for the same rasterized\ncontour.\n\n@note\nSince the contour moments are computed using Green formula, you may get seemingly odd results for\ncontours with self-intersections, e.g. a zero area (m00) for butterfly-shaped contours."])

--- Incoming ---
['cv.Moments.Moments', 'M', [], [], None, 'the default constructor']
parse_name: cv.Moments.Moments with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Moments::Moments namespace:cv classpath:Moments classname:Moments name:Moments
register (constructor) default in cv::Moments (simple) (cv_Moments_Moments)

--- Incoming ---
[   'cv.Moments.Moments',
    'M',
    [],
    [   ['double', 'm00', '', []],
        ['double', 'm10', '', []],
        ['double', 'm01', '', []],
        ['double', 'm20', '', []],
        ['double', 'm11', '', []],
        ['double', 'm02', '', []],
        ['double', 'm30', '', []],
        ['double', 'm21', '', []],
        ['double', 'm12', '', []],
        ['double', 'm03', '', []]],
    None,
    'the full constructor']
parse_name: cv.Moments.Moments with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Moments::Moments namespace:cv classpath:Moments classname:Moments name:Moments
register (constructor) new in cv::Moments (simple) (cv_Moments_Moments_double_double_double_double_double_double_double_double_double_double)

--- Incoming ---
[   'cv..Complex',
    'template<typename _Tp>',
    [],
    [],
    None,
    '@} imgproc_shape\n@cond IGNORED']
parse_name: cv..Complex with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Complex namespace:cv classpath: classname: name:Complex
Registering an unknown type: template<typename _Tp>
register (function) Complex (cv__Complex)

--- Incoming ---
[   'cv..Complex',
    'template<typename _Tp>',
    [],
    [['_Tp', '_re', '', []], ['_Tp', '_im', '', []]],
    None,
    '']
parse_name: cv..Complex with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Complex namespace:cv classpath: classname: name:Complex
register (function) Complex (cv__Complex__Tp__Tp)

--- Incoming ---
[   'cv..operator Complex < T2 >',
    'template<typename _Tp> template<typename T2>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv..operator Complex < T2 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::operator Complex < T2 > namespace:cv classpath: classname: name:operator Complex < T2 >
Registering an unknown type: template<typename _Tp> template<typename T2>
ignore (function) operator Complex < T2 > in None

--- Incoming ---
[   'cv.Complex < _Tp > .conj',
    'template<typename _Tp> Complex<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Complex < _Tp > .conj with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Complex < _Tp > ::conj namespace:cv classpath:Complex < _Tp >  classname:Complex < _Tp >  name:conj
Registering an unknown type: template<typename _Tp> Complex<_Tp>

--- Incoming ---
[   'cv.operator -',
    'template<typename _Tp> Complex<_Tp>',
    [],
    [['const Complex<_Tp>&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
Registering an unknown type: Complex<_Tp>
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Complex<_Tp> operator *',
    [],
    [['const Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: template<typename _Tp> Complex<_Tp> operator
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator +',
    'template<typename _Tp> Complex<_Tp>',
    [],
    [['const Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator -',
    'template<typename _Tp> Complex<_Tp>',
    [],
    [['const Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator +=',
    'template<typename _Tp> Complex<_Tp>&',
    [],
    [['Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator += with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator += namespace:cv classpath: classname: name:operator +=
Registering an unknown type: template<typename _Tp> Complex<_Tp>
Registering an unknown type: Complex<_Tp>
ignore (function) operator += in None

--- Incoming ---
[   'cv.operator -=',
    'template<typename _Tp> Complex<_Tp>&',
    [],
    [['Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator -= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator -= namespace:cv classpath: classname: name:operator -=
ignore (function) operator -= in None

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Complex<_Tp>& operator *',
    [],
    [['Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
Registering an unknown type: template<typename _Tp> Complex<_Tp>& operator
ignore (function) operator *= in None

--- Incoming ---
[   'cv.abs',
    'template<typename _Tp> double',
    [],
    [['const Complex<_Tp>&', 'a', '', []]],
    None,
    '']
parse_name: cv.abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::abs namespace:cv classpath: classname: name:abs
Registering an unknown type: template<typename _Tp> double
register (function) abs (cv_abs_Complex<_Tp>)

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Complex<_Tp>',
    [],
    [['const Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Complex<_Tp>',
    [],
    [['const Complex<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
['cv..Point_', 'template<typename _Tp>', [], [], None, '']
parse_name: cv..Point_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point_ namespace:cv classpath: classname: name:Point_
register (function) Point_ (cv__Point_)

--- Incoming ---
[   'cv..Point_',
    'template<typename _Tp>',
    [],
    [['_Tp', '_x', '', []], ['_Tp', '_y', '', []]],
    None,
    '']
parse_name: cv..Point_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point_ namespace:cv classpath: classname: name:Point_
register (function) Point_ (cv__Point___Tp__Tp)

--- Incoming ---
[   'cv..Point_',
    'template<typename _Tp>',
    [],
    [['const Point_&', 'pt', '', []]],
    None,
    '']
parse_name: cv..Point_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point_ namespace:cv classpath: classname: name:Point_
Registering an unknown type: Point_
register (function) Point_ (cv__Point__Point_)

--- Incoming ---
[   'cv..Point_',
    'template<typename _Tp>',
    [],
    [   [   'Point_&& pt) CV_NOEXCEPT : x(std::move(pt.x))y(std::move(pt.y)',
            '',
            '',
            []]],
    None,
    '']
parse_name: cv..Point_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point_ namespace:cv classpath: classname: name:Point_
Registering an unknown type: Point_&& pt) CV_NOEXCEPT : x(std::move(pt.x))y(std::move(pt.y)
register (function) Point_ (cv__Point__Point_&& pt) CV_NOEXCEPT : x(std_move(pt.x))y(std_move(pt.y))

--- Incoming ---
[   'cv..Point_',
    'template<typename _Tp>',
    [],
    [['const Size_<_Tp>&', 'sz', '', []]],
    None,
    '']
parse_name: cv..Point_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point_ namespace:cv classpath: classname: name:Point_
Registering an unknown type: Size_<_Tp>
register (function) Point_ (cv__Point__Size_<_Tp>)

--- Incoming ---
[   'cv.Point_ < _Tp > .operator =',
    'template<typename _Tp> Point_<_Tp>&',
    [],
    [['const Point_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point_ < _Tp > ::operator = namespace:cv classpath:Point_ < _Tp >  classname:Point_ < _Tp >  name:operator =
Registering an unknown type: template<typename _Tp> Point_<_Tp>
ignore (method) operator = in None

--- Incoming ---
[   'cv.Point_ < _Tp > .operator =',
    'template<typename _Tp> Point_<_Tp>&',
    [],
    [['Point_&&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point_ < _Tp > ::operator = namespace:cv classpath:Point_ < _Tp >  classname:Point_ < _Tp >  name:operator =
Registering an unknown type: Point_&
ignore (method) operator = in None

--- Incoming ---
[   'cv..operator Point_ < _Tp2 >',
    'template<typename _Tp> template<typename _Tp2>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv..operator Point_ < _Tp2 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::operator Point_ < _Tp2 > namespace:cv classpath: classname: name:operator Point_ < _Tp2 >
Registering an unknown type: template<typename _Tp> template<typename _Tp2>
ignore (function) operator Point_ < _Tp2 > in None

--- Incoming ---
[   'cv.Point_ < _Tp > .dot',
    'template<typename _Tp> _Tp',
    ['/C'],
    [['const Point_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point_ < _Tp > .dot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point_ < _Tp > ::dot namespace:cv classpath:Point_ < _Tp >  classname:Point_ < _Tp >  name:dot

--- Incoming ---
[   'cv.Point_ < _Tp > .ddot',
    'template<typename _Tp> double',
    ['/C'],
    [['const Point_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point_ < _Tp > .ddot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point_ < _Tp > ::ddot namespace:cv classpath:Point_ < _Tp >  classname:Point_ < _Tp >  name:ddot

--- Incoming ---
[   'cv.Point_ < _Tp > .cross',
    'template<typename _Tp> double',
    ['/C'],
    [['const Point_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point_ < _Tp > .cross with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point_ < _Tp > ::cross namespace:cv classpath:Point_ < _Tp >  classname:Point_ < _Tp >  name:cross

--- Incoming ---
[   'cv.Point_ < _Tp > .inside',
    'template<typename _Tp> bool',
    ['/C'],
    [['const Rect_<_Tp>&', 'r', '', []]],
    None,
    '']
parse_name: cv.Point_ < _Tp > .inside with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point_ < _Tp > ::inside namespace:cv classpath:Point_ < _Tp >  classname:Point_ < _Tp >  name:inside
Registering an unknown type: template<typename _Tp> bool
Registering an unknown type: Rect_<_Tp>

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Point_<_Tp>& operator *',
    [],
    [['Point_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
Registering an unknown type: template<typename _Tp> Point_<_Tp>& operator
Registering an unknown type: Point_<_Tp>
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Point_<_Tp>& operator *',
    [],
    [['Point_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Point_<_Tp>& operator *',
    [],
    [['Point_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Point_<_Tp>&',
    [],
    [['Point_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Point_<_Tp>&',
    [],
    [['Point_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Point_<_Tp>&',
    [],
    [['Point_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.norm',
    'template<typename _Tp> double',
    [],
    [['const Point_<_Tp>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.norm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::norm namespace:cv classpath: classname: name:norm
Registering an unknown type: Point_<_Tp>
register (function) norm (cv_norm_Point_<_Tp>)

--- Incoming ---
[   'cv.operator -',
    'template<typename _Tp> Point_<_Tp>',
    [],
    [['const Point_<_Tp>&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
Registering an unknown type: template<typename _Tp> Point_<_Tp>
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Point_<_Tp> operator *',
    [],
    [['const Point_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: template<typename _Tp> Point_<_Tp> operator
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Point_<_Tp> operator *',
    [],
    [['const Point_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Point_<_Tp> operator *',
    [],
    [['const Point_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Point_<_Tp>',
    [],
    [['const Point_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Point_<_Tp>',
    [],
    [['const Point_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Point_<_Tp>',
    [],
    [['const Point_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.normL2Sqr',
    'template<typename _AccTp> _AccTp',
    [],
    [['const Point_<int>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr namespace:cv classpath: classname: name:normL2Sqr
Registering an unknown type: template<typename _AccTp> _AccTp
register (function) normL2Sqr (cv_normL2Sqr_Point2i)

--- Incoming ---
[   'cv.normL2Sqr',
    'template<typename _AccTp> _AccTp',
    [],
    [['const Point_<int64>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr namespace:cv classpath: classname: name:normL2Sqr
register (function) normL2Sqr (cv_normL2Sqr_Point2l)

--- Incoming ---
[   'cv.normL2Sqr',
    'template<typename _AccTp> _AccTp',
    [],
    [['const Point_<float>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr namespace:cv classpath: classname: name:normL2Sqr
register (function) normL2Sqr (cv_normL2Sqr_Point2f)

--- Incoming ---
[   'cv.normL2Sqr',
    'template<typename _AccTp> _AccTp',
    [],
    [['const Point_<double>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr namespace:cv classpath: classname: name:normL2Sqr
register (function) normL2Sqr (cv_normL2Sqr_Point2d)

--- Incoming ---
[   'cv.normL2Sqr < int >',
    'template<> int',
    [],
    [['const Point_<int>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr < int > namespace:cv classpath: classname: name:normL2Sqr < int >
Registering an unknown type: template<> int
register (function) normL2Sqr < int > (cv_normL2Sqr_<_int_>_Point2i)

--- Incoming ---
[   'cv.normL2Sqr < int64 >',
    'template<> int64',
    [],
    [['const Point_<int64>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr < int64 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr < int64 > namespace:cv classpath: classname: name:normL2Sqr < int64 >
Registering an unknown type: template<> int64
register (function) normL2Sqr < int64 > (cv_normL2Sqr_<_int64_>_Point2l)

--- Incoming ---
[   'cv.normL2Sqr < float >',
    'template<> float',
    [],
    [['const Point_<float>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr < float > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr < float > namespace:cv classpath: classname: name:normL2Sqr < float >
Registering an unknown type: template<> float
register (function) normL2Sqr < float > (cv_normL2Sqr_<_float_>_Point2f)

--- Incoming ---
[   'cv.normL2Sqr < double >',
    'template<> double',
    [],
    [['const Point_<int>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr < double > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr < double > namespace:cv classpath: classname: name:normL2Sqr < double >
Registering an unknown type: template<> double
register (function) normL2Sqr < double > (cv_normL2Sqr_<_double_>_Point2i)

--- Incoming ---
[   'cv.normL2Sqr < double >',
    'template<> double',
    [],
    [['const Point_<float>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr < double > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr < double > namespace:cv classpath: classname: name:normL2Sqr < double >
register (function) normL2Sqr < double > (cv_normL2Sqr_<_double_>_Point2f)

--- Incoming ---
[   'cv.normL2Sqr < double >',
    'template<> double',
    [],
    [['const Point_<double>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.normL2Sqr < double > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normL2Sqr < double > namespace:cv classpath: classname: name:normL2Sqr < double >
register (function) normL2Sqr < double > (cv_normL2Sqr_<_double_>_Point2d)

--- Incoming ---
['cv..Point3_', 'template<typename _Tp>', [], [], None, '']
parse_name: cv..Point3_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point3_ namespace:cv classpath: classname: name:Point3_
register (function) Point3_ (cv__Point3_)

--- Incoming ---
[   'cv..Point3_',
    'template<typename _Tp>',
    [],
    [['_Tp', '_x', '', []], ['_Tp', '_y', '', []], ['_Tp', '_z', '', []]],
    None,
    '']
parse_name: cv..Point3_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point3_ namespace:cv classpath: classname: name:Point3_
register (function) Point3_ (cv__Point3___Tp__Tp__Tp)

--- Incoming ---
[   'cv..Point3_',
    'template<typename _Tp>',
    [],
    [['const Point3_&', 'pt', '', []]],
    None,
    '']
parse_name: cv..Point3_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point3_ namespace:cv classpath: classname: name:Point3_
Registering an unknown type: Point3_
register (function) Point3_ (cv__Point3__Point3_)

--- Incoming ---
[   'cv..Point3_',
    'template<typename _Tp>',
    [],
    [   [   'Point3_&& pt) CV_NOEXCEPT : '
            'x(std::move(pt.x))y(std::move(pt.y))z(std::move(pt.z)',
            '',
            '',
            []]],
    None,
    '']
parse_name: cv..Point3_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point3_ namespace:cv classpath: classname: name:Point3_
Registering an unknown type: Point3_&& pt) CV_NOEXCEPT : x(std::move(pt.x))y(std::move(pt.y))z(std::move(pt.z)
register (function) Point3_ (cv__Point3__Point3_&& pt) CV_NOEXCEPT : x(std_move(pt.x))y(std_move(pt.y))z(std_move(pt.z))

--- Incoming ---
[   'cv..Point3_',
    'template<typename _Tp>',
    [],
    [['const Point_<_Tp>&', 'pt', '', []]],
    None,
    '']
parse_name: cv..Point3_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Point3_ namespace:cv classpath: classname: name:Point3_
register (function) Point3_ (cv__Point3__Point_<_Tp>)

--- Incoming ---
[   'cv..operator Point3_ < _Tp2 >',
    'template<typename _Tp> template<typename _Tp2>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv..operator Point3_ < _Tp2 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::operator Point3_ < _Tp2 > namespace:cv classpath: classname: name:operator Point3_ < _Tp2 >
ignore (function) operator Point3_ < _Tp2 > in None

--- Incoming ---
[   'cv.Point3_ < _Tp > .operator =',
    'template<typename _Tp> Point3_<_Tp>&',
    [],
    [['const Point3_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point3_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3_ < _Tp > ::operator = namespace:cv classpath:Point3_ < _Tp >  classname:Point3_ < _Tp >  name:operator =
Registering an unknown type: template<typename _Tp> Point3_<_Tp>
ignore (method) operator = in None

--- Incoming ---
[   'cv.Point3_ < _Tp > .operator =',
    'template<typename _Tp> Point3_<_Tp>&',
    [],
    [['Point3_&&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point3_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3_ < _Tp > ::operator = namespace:cv classpath:Point3_ < _Tp >  classname:Point3_ < _Tp >  name:operator =
Registering an unknown type: Point3_&
ignore (method) operator = in None

--- Incoming ---
[   'cv.Point3_ < _Tp > .dot',
    'template<typename _Tp> _Tp',
    ['/C'],
    [['const Point3_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point3_ < _Tp > .dot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3_ < _Tp > ::dot namespace:cv classpath:Point3_ < _Tp >  classname:Point3_ < _Tp >  name:dot

--- Incoming ---
[   'cv.Point3_ < _Tp > .ddot',
    'template<typename _Tp> double',
    ['/C'],
    [['const Point3_&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point3_ < _Tp > .ddot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3_ < _Tp > ::ddot namespace:cv classpath:Point3_ < _Tp >  classname:Point3_ < _Tp >  name:ddot

--- Incoming ---
[   'cv.Point3_ < _Tp > .cross',
    'template<typename _Tp> Point3_<_Tp>',
    ['/C'],
    [['const Point3_<_Tp>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Point3_ < _Tp > .cross with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Point3_ < _Tp > ::cross namespace:cv classpath:Point3_ < _Tp >  classname:Point3_ < _Tp >  name:cross
Registering an unknown type: template<typename _Tp> Point3_<_Tp>
Registering an unknown type: Point3_<_Tp>

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Point3_<_Tp>& operator *',
    [],
    [['Point3_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
Registering an unknown type: template<typename _Tp> Point3_<_Tp>& operator
Registering an unknown type: Point3_<_Tp>
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Point3_<_Tp>& operator *',
    [],
    [['Point3_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Point3_<_Tp>& operator *',
    [],
    [['Point3_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Point3_<_Tp>&',
    [],
    [['Point3_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Point3_<_Tp>&',
    [],
    [['Point3_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Point3_<_Tp>&',
    [],
    [['Point3_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.norm',
    'template<typename _Tp> double',
    [],
    [['const Point3_<_Tp>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.norm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::norm namespace:cv classpath: classname: name:norm
register (function) norm (cv_norm_Point3_<_Tp>)

--- Incoming ---
[   'cv.operator -',
    'template<typename _Tp> Point3_<_Tp>',
    [],
    [['const Point3_<_Tp>&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Point3_<_Tp> operator *',
    [],
    [['const Point3_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: template<typename _Tp> Point3_<_Tp> operator
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Point3_<_Tp> operator *',
    [],
    [['const Point3_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Point3_<_Tp> operator *',
    [],
    [['const Point3_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Point3_<_Tp>',
    [],
    [['const Point3_<_Tp>&', 'a', '', []], ['int', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Point3_<_Tp>',
    [],
    [['const Point3_<_Tp>&', 'a', '', []], ['float', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Point3_<_Tp>',
    [],
    [['const Point3_<_Tp>&', 'a', '', []], ['double', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
['cv..Size_', 'template<typename _Tp>', [], [], None, '']
parse_name: cv..Size_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Size_ namespace:cv classpath: classname: name:Size_
register (function) Size_ (cv__Size_)

--- Incoming ---
[   'cv..Size_',
    'template<typename _Tp>',
    [],
    [['_Tp', '_width', '', []], ['_Tp', '_height', '', []]],
    None,
    '']
parse_name: cv..Size_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Size_ namespace:cv classpath: classname: name:Size_
register (function) Size_ (cv__Size___Tp__Tp)

--- Incoming ---
[   'cv..Size_',
    'template<typename _Tp>',
    [],
    [['const Size_&', 'sz', '', []]],
    None,
    '']
parse_name: cv..Size_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Size_ namespace:cv classpath: classname: name:Size_
Registering an unknown type: Size_
register (function) Size_ (cv__Size__Size_)

--- Incoming ---
[   'cv..Size_',
    'template<typename _Tp>',
    [],
    [   [   'Size_&& sz) CV_NOEXCEPT : '
            'width(std::move(sz.width))height(std::move(sz.height)',
            '',
            '',
            []]],
    None,
    '']
parse_name: cv..Size_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Size_ namespace:cv classpath: classname: name:Size_
Registering an unknown type: Size_&& sz) CV_NOEXCEPT : width(std::move(sz.width))height(std::move(sz.height)
register (function) Size_ (cv__Size__Size_&& sz) CV_NOEXCEPT : width(std_move(sz.width))height(std_move(sz.height))

--- Incoming ---
[   'cv..Size_',
    'template<typename _Tp>',
    [],
    [['const Point_<_Tp>&', 'pt', '', []]],
    None,
    '']
parse_name: cv..Size_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Size_ namespace:cv classpath: classname: name:Size_
register (function) Size_ (cv__Size__Point_<_Tp>)

--- Incoming ---
[   'cv..operator Size_ < _Tp2 >',
    'template<typename _Tp> template<typename _Tp2>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv..operator Size_ < _Tp2 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::operator Size_ < _Tp2 > namespace:cv classpath: classname: name:operator Size_ < _Tp2 >
ignore (function) operator Size_ < _Tp2 > in None

--- Incoming ---
[   'cv.Size_ < _Tp > .operator =',
    'template<typename _Tp> Size_<_Tp>&',
    [],
    [['const Size_<_Tp>&', 'sz', '', []]],
    None,
    '']
parse_name: cv.Size_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size_ < _Tp > ::operator = namespace:cv classpath:Size_ < _Tp >  classname:Size_ < _Tp >  name:operator =
Registering an unknown type: template<typename _Tp> Size_<_Tp>
ignore (method) operator = in None

--- Incoming ---
[   'cv.Size_ < _Tp > .operator =',
    'template<typename _Tp> Size_<_Tp>&',
    [],
    [['Size_<_Tp>&&', 'sz', '', []]],
    None,
    '']
parse_name: cv.Size_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size_ < _Tp > ::operator = namespace:cv classpath:Size_ < _Tp >  classname:Size_ < _Tp >  name:operator =
Registering an unknown type: Size_<_Tp>&
ignore (method) operator = in None

--- Incoming ---
['cv.Size_ < _Tp > .area', 'template<typename _Tp> _Tp', ['/C'], [], None, '']
parse_name: cv.Size_ < _Tp > .area with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size_ < _Tp > ::area namespace:cv classpath:Size_ < _Tp >  classname:Size_ < _Tp >  name:area

--- Incoming ---
[   'cv.Size_ < _Tp > .aspectRatio',
    'template<typename _Tp> double',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Size_ < _Tp > .aspectRatio with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size_ < _Tp > ::aspectRatio namespace:cv classpath:Size_ < _Tp >  classname:Size_ < _Tp >  name:aspectRatio

--- Incoming ---
['cv.Size_ < _Tp > .empty', 'template<typename _Tp> bool', ['/C'], [], None, '']
parse_name: cv.Size_ < _Tp > .empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Size_ < _Tp > ::empty namespace:cv classpath:Size_ < _Tp >  classname:Size_ < _Tp >  name:empty

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Size_<_Tp>& operator *',
    [],
    [['Size_<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
Registering an unknown type: template<typename _Tp> Size_<_Tp>& operator
Registering an unknown type: Size_<_Tp>
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Size_<_Tp> operator *',
    [],
    [['const Size_<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: template<typename _Tp> Size_<_Tp> operator
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Size_<_Tp>&',
    [],
    [['Size_<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Size_<_Tp>',
    [],
    [['const Size_<_Tp>&', 'a', '', []], ['_Tp', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
Registering an unknown type: template<typename _Tp> Size_<_Tp>
ignore (function) operator / in None

--- Incoming ---
['cv..Rect_', 'template<typename _Tp>', [], [], None, '']
parse_name: cv..Rect_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Rect_ namespace:cv classpath: classname: name:Rect_
register (function) Rect_ (cv__Rect_)

--- Incoming ---
[   'cv..Rect_',
    'template<typename _Tp>',
    [],
    [   ['_Tp', '_x', '', []],
        ['_Tp', '_y', '', []],
        ['_Tp', '_width', '', []],
        ['_Tp', '_height', '', []]],
    None,
    '']
parse_name: cv..Rect_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Rect_ namespace:cv classpath: classname: name:Rect_
register (function) Rect_ (cv__Rect___Tp__Tp__Tp__Tp)

--- Incoming ---
[   'cv..Rect_',
    'template<typename _Tp>',
    [],
    [['const Rect_<_Tp>&', 'r', '', []]],
    None,
    '']
parse_name: cv..Rect_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Rect_ namespace:cv classpath: classname: name:Rect_
register (function) Rect_ (cv__Rect__Rect_<_Tp>)

--- Incoming ---
[   'cv..Rect_',
    'template<typename _Tp>',
    [],
    [   [   'Rect_<_Tp>&& r) CV_NOEXCEPT : '
            'x(std::move(r.x))y(std::move(r.y))width(std::move(r.width))height(std::move(r.height)',
            '',
            '',
            []]],
    None,
    '']
parse_name: cv..Rect_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Rect_ namespace:cv classpath: classname: name:Rect_
Registering an unknown type: Rect_<_Tp>&& r) CV_NOEXCEPT : x(std::move(r.x))y(std::move(r.y))width(std::move(r.width))height(std::move(r.height)
register (function) Rect_ (cv__Rect__Rect_<_Tp>&& r) CV_NOEXCEPT : x(std_move(r.x))y(std_move(r.y))width(std_move(r.width))height(std_move(r.height))

--- Incoming ---
[   'cv.Rect_ < _Tp > .operator =',
    'template<typename _Tp> Rect_<_Tp>&',
    [],
    [['const Rect_<_Tp>&', 'r', '', []]],
    None,
    '']
parse_name: cv.Rect_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::operator = namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:operator =
Registering an unknown type: template<typename _Tp> Rect_<_Tp>
ignore (method) operator = in None

--- Incoming ---
[   'cv.Rect_ < _Tp > .operator =',
    'template<typename _Tp> Rect_<_Tp>&',
    [],
    [['Rect_<_Tp>&&', 'r', '', []]],
    None,
    '']
parse_name: cv.Rect_ < _Tp > .operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::operator = namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:operator =
Registering an unknown type: Rect_<_Tp>&
ignore (method) operator = in None

--- Incoming ---
[   'cv.Rect_ < _Tp > .tl',
    'template<typename _Tp> Point_<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Rect_ < _Tp > .tl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::tl namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:tl

--- Incoming ---
[   'cv.Rect_ < _Tp > .br',
    'template<typename _Tp> Point_<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Rect_ < _Tp > .br with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::br namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:br

--- Incoming ---
[   'cv.Rect_ < _Tp > .size',
    'template<typename _Tp> Size_<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Rect_ < _Tp > .size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::size namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:size

--- Incoming ---
['cv.Rect_ < _Tp > .area', 'template<typename _Tp> _Tp', ['/C'], [], None, '']
parse_name: cv.Rect_ < _Tp > .area with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::area namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:area

--- Incoming ---
['cv.Rect_ < _Tp > .empty', 'template<typename _Tp> bool', ['/C'], [], None, '']
parse_name: cv.Rect_ < _Tp > .empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::empty namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:empty

--- Incoming ---
[   'cv..operator Rect_ < _Tp2 >',
    'template<typename _Tp> template<typename _Tp2>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv..operator Rect_ < _Tp2 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::operator Rect_ < _Tp2 > namespace:cv classpath: classname: name:operator Rect_ < _Tp2 >
ignore (function) operator Rect_ < _Tp2 > in None

--- Incoming ---
[   'cv.Rect_ < _Tp > .contains',
    'template<typename _Tp> bool',
    ['/C'],
    [['const Point_<_Tp>&', 'pt', '', []]],
    None,
    '']
parse_name: cv.Rect_ < _Tp > .contains with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Rect_ < _Tp > ::contains namespace:cv classpath:Rect_ < _Tp >  classname:Rect_ < _Tp >  name:contains

--- Incoming ---
['cv.RotatedRect.RotatedRect', 'R', [], [], None, '']
parse_name: cv.RotatedRect.RotatedRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::RotatedRect namespace:cv classpath:RotatedRect classname:RotatedRect name:RotatedRect
register (constructor) default in cv::RotatedRect (cv_RotatedRect_RotatedRect)

--- Incoming ---
[   'cv.RotatedRect.RotatedRect',
    'R',
    [],
    [   ['const Point2f&', '_center', '', []],
        ['const Size2f&', '_size', '', []],
        ['float', '_angle', '', []]],
    None,
    '']
parse_name: cv.RotatedRect.RotatedRect with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotatedRect::RotatedRect namespace:cv classpath:RotatedRect classname:RotatedRect name:RotatedRect
register (constructor) new in cv::RotatedRect (cv_RotatedRect_RotatedRect_Point2f_Size2f_float)

--- Incoming ---
['cv.Range.Range', 'R', [], [], None, '']
parse_name: cv.Range.Range with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::Range namespace:cv classpath:Range classname:Range name:Range
register (constructor) default in cv::Range (cv_Range_Range)

--- Incoming ---
[   'cv.Range.Range',
    'R',
    [],
    [['int', '_start', '', []], ['int', '_end', '', []]],
    None,
    '']
parse_name: cv.Range.Range with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::Range namespace:cv classpath:Range classname:Range name:Range
register (constructor) new in cv::Range (cv_Range_Range_int_int)

--- Incoming ---
['cv.Range.size', 'int', ['/C'], [], None, '']
parse_name: cv.Range.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::size namespace:cv classpath:Range classname:Range name:size
register (method) size in cv::Range (cv_Range_size_const)

--- Incoming ---
['cv.Range.empty', 'bool', ['/C'], [], None, '']
parse_name: cv.Range.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::empty namespace:cv classpath:Range classname:Range name:empty
register (method) empty in cv::Range (cv_Range_empty_const)

--- Incoming ---
['cv.Range.all', 'Range', [], [], None, '']
parse_name: cv.Range.all with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Range::all namespace:cv classpath:Range classname:Range name:all
register (method) all in cv::Range (cv_Range_all)

--- Incoming ---
[   'cv.operator ==',
    'bool',
    [],
    [['const Range&', 'r1', '', []], ['const Range&', 'r2', '', []]],
    None,
    '']
parse_name: cv.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator == namespace:cv classpath: classname: name:operator ==
ignore (function) operator == in None

--- Incoming ---
[   'cv.operator !=',
    'bool',
    [],
    [['const Range&', 'r1', '', []], ['const Range&', 'r2', '', []]],
    None,
    '']
parse_name: cv.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator != namespace:cv classpath: classname: name:operator !=
ignore (function) operator != in None

--- Incoming ---
['cv.operator !', 'bool', [], [['const Range&', 'r', '', []]], None, '']
parse_name: cv.operator ! with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator ! namespace:cv classpath: classname: name:operator !
ignore (function) operator ! in None

--- Incoming ---
[   'cv.operator &',
    'Range operator &',
    [],
    [['const Range&', 'r1', '', []], ['const Range&', 'r2', '', []]],
    None,
    '']
parse_name: cv.operator & with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator & namespace:cv classpath: classname: name:operator &
Registering an unknown type: Range operator
ignore (function) operator & in None

--- Incoming ---
[   'cv.operator &=',
    'Range& operator &',
    [],
    [['Range&', 'r1', '', []], ['const Range&', 'r2', '', []]],
    None,
    '']
parse_name: cv.operator &= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator &= namespace:cv classpath: classname: name:operator &=
Registering an unknown type: Range& operator
ignore (function) operator &= in None

--- Incoming ---
[   'cv.operator +',
    'Range',
    [],
    [['const Range&', 'r1', '', []], ['int', 'delta', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'Range',
    [],
    [['int', 'delta', '', []], ['const Range&', 'r1', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator -',
    'Range',
    [],
    [['const Range&', 'r1', '', []], ['int', 'delta', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
['cv..Scalar_', 'template<typename _Tp>', [], [], None, '']
parse_name: cv..Scalar_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Scalar_ namespace:cv classpath: classname: name:Scalar_
register (function) Scalar_ (cv__Scalar_)

--- Incoming ---
[   'cv..Scalar_',
    'template<typename _Tp>',
    [],
    [   ['_Tp', 'v0', '', []],
        ['_Tp', 'v1', '', []],
        ['_Tp', 'v2', '', []],
        ['_Tp', 'v3', '', []]],
    None,
    '']
parse_name: cv..Scalar_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Scalar_ namespace:cv classpath: classname: name:Scalar_
register (function) Scalar_ (cv__Scalar___Tp__Tp__Tp__Tp)

--- Incoming ---
[   'cv..Scalar_',
    'template<typename _Tp>',
    [],
    [['Scalar_<_Tp>&&', 's', '', []]],
    None,
    '']
parse_name: cv..Scalar_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Scalar_ namespace:cv classpath: classname: name:Scalar_
Registering an unknown type: Scalar_<_Tp>&
register (function) Scalar_ (cv__Scalar__Scalar_<_Tp>&)

--- Incoming ---
[   'cv.Scalar_ < _Tp > .operator=',
    'template<typename _Tp> Scalar_<_Tp>&',
    [],
    [['const Scalar_<_Tp>&', 's', '', []]],
    None,
    '']
parse_name: cv.Scalar_ < _Tp > .operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar_ < _Tp > ::operator= namespace:cv classpath:Scalar_ < _Tp >  classname:Scalar_ < _Tp >  name:operator=
Registering an unknown type: template<typename _Tp> Scalar_<_Tp>
Registering an unknown type: Scalar_<_Tp>
ignore (method) operator= in None

--- Incoming ---
[   'cv.Scalar_ < _Tp > .operator=',
    'template<typename _Tp> Scalar_<_Tp>&',
    [],
    [['Scalar_<_Tp>&&', 's', '', []]],
    None,
    '']
parse_name: cv.Scalar_ < _Tp > .operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar_ < _Tp > ::operator= namespace:cv classpath:Scalar_ < _Tp >  classname:Scalar_ < _Tp >  name:operator=
ignore (method) operator= in None

--- Incoming ---
['cv..Scalar_', 'template<typename _Tp>', [], [['_Tp', 'v0', '', []]], None, '']
parse_name: cv..Scalar_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::Scalar_ namespace:cv classpath: classname: name:Scalar_
register (function) Scalar_ (cv__Scalar___Tp)

--- Incoming ---
[   'cv.Scalar_ < _Tp > .all',
    'template<typename _Tp> Scalar_<_Tp>',
    [],
    [['_Tp', 'v0', '', []]],
    None,
    '']
parse_name: cv.Scalar_ < _Tp > .all with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar_ < _Tp > ::all namespace:cv classpath:Scalar_ < _Tp >  classname:Scalar_ < _Tp >  name:all
Registering an unknown type: template<typename _Tp> Scalar_<_Tp>

--- Incoming ---
[   'cv.Scalar_ < _Tp > .mul',
    'template<typename _Tp> Scalar_<_Tp>',
    ['/C'],
    [['const Scalar_<_Tp>&', 'a', '', []], ['double', 'scale', '', []]],
    None,
    '']
parse_name: cv.Scalar_ < _Tp > .mul with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar_ < _Tp > ::mul namespace:cv classpath:Scalar_ < _Tp >  classname:Scalar_ < _Tp >  name:mul

--- Incoming ---
[   'cv.Scalar_ < _Tp > .conj',
    'template<typename _Tp> Scalar_<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Scalar_ < _Tp > .conj with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar_ < _Tp > ::conj namespace:cv classpath:Scalar_ < _Tp >  classname:Scalar_ < _Tp >  name:conj

--- Incoming ---
[   'cv.Scalar_ < _Tp > .isReal',
    'template<typename _Tp> bool',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Scalar_ < _Tp > .isReal with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Scalar_ < _Tp > ::isReal namespace:cv classpath:Scalar_ < _Tp >  classname:Scalar_ < _Tp >  name:isReal

--- Incoming ---
[   'cv..operator Scalar_ < T2 >',
    'template<typename _Tp> template<typename T2>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv..operator Scalar_ < T2 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::::operator Scalar_ < T2 > namespace:cv classpath: classname: name:operator Scalar_ < T2 >
ignore (function) operator Scalar_ < T2 > in None

--- Incoming ---
[   'cv.operator *=',
    'template<typename _Tp> Scalar_<_Tp>& operator *',
    [],
    [['Scalar_<_Tp>&', 'a', '', []], ['_Tp', 'v', '', []]],
    None,
    '']
parse_name: cv.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator *= namespace:cv classpath: classname: name:operator *=
Registering an unknown type: template<typename _Tp> Scalar_<_Tp>& operator
Registering an unknown type: Scalar_<_Tp>
ignore (function) operator *= in None

--- Incoming ---
[   'cv.operator *',
    'template<typename _Tp> Scalar_<_Tp> operator *',
    [],
    [['const Scalar_<_Tp>&', 'a', '', []], ['_Tp', 'alpha', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: template<typename _Tp> Scalar_<_Tp> operator
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator -',
    'template<typename _Tp> Scalar_<_Tp>',
    [],
    [['const Scalar_<_Tp>&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Scalar_<_Tp>',
    [],
    [['const Scalar_<_Tp>&', 'a', '', []], ['_Tp', 'alpha', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Scalar_<float>',
    [],
    [['const Scalar_<float>&', 'a', '', []], ['float', 'alpha', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
Registering an unknown type: template<typename _Tp> Scalar_<float>
Registering an unknown type: Scalar_<float>
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'template<typename _Tp> Scalar_<double>',
    [],
    [['const Scalar_<double>&', 'a', '', []], ['double', 'alpha', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
Registering an unknown type: template<typename _Tp> Scalar_<double>
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /=',
    'template<typename _Tp> Scalar_<_Tp>&',
    [],
    [['Scalar_<_Tp>&', 'a', '', []], ['_Tp', 'alpha', '', []]],
    None,
    '']
parse_name: cv.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator /= namespace:cv classpath: classname: name:operator /=
ignore (function) operator /= in None

--- Incoming ---
['cv.KeyPoint.KeyPoint', 'K', [], [], None, '']
parse_name: cv.KeyPoint.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::KeyPoint namespace:cv classpath:KeyPoint classname:KeyPoint name:KeyPoint
register (constructor) default in cv::KeyPoint (simple) (cv_KeyPoint_KeyPoint)

--- Incoming ---
[   'cv.KeyPoint.KeyPoint',
    'K',
    [],
    [   ['Point2f', '_pt', '', []],
        ['float', '_size', '', []],
        ['float', '_angle', '', []],
        ['float', '_response', '', []],
        ['int', '_octave', '', []],
        ['int', '_class_id', '', []]],
    None,
    '']
parse_name: cv.KeyPoint.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::KeyPoint namespace:cv classpath:KeyPoint classname:KeyPoint name:KeyPoint
register (constructor) new in cv::KeyPoint (simple) (cv_KeyPoint_KeyPoint_Point2f_float_float_float_int_int)

--- Incoming ---
[   'cv.KeyPoint.KeyPoint',
    'K',
    [],
    [   ['float', 'x', '', []],
        ['float', 'y', '', []],
        ['float', '_size', '', []],
        ['float', '_angle', '', []],
        ['float', '_response', '', []],
        ['int', '_octave', '', []],
        ['int', '_class_id', '', []]],
    None,
    '']
parse_name: cv.KeyPoint.KeyPoint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KeyPoint::KeyPoint namespace:cv classpath:KeyPoint classname:KeyPoint name:KeyPoint
register (constructor) new in cv::KeyPoint (simple) (cv_KeyPoint_KeyPoint_float_float_float_float_float_int_int)

--- Incoming ---
['cv.DMatch.DMatch', 'D', [], [], None, '']
parse_name: cv.DMatch.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::DMatch namespace:cv classpath:DMatch classname:DMatch name:DMatch
register (constructor) default in cv::DMatch (simple) (cv_DMatch_DMatch)

--- Incoming ---
[   'cv.DMatch.DMatch',
    'D',
    [],
    [   ['int', '_queryIdx', '', []],
        ['int', '_trainIdx', '', []],
        ['float', '_distance', '', []]],
    None,
    '']
parse_name: cv.DMatch.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::DMatch namespace:cv classpath:DMatch classname:DMatch name:DMatch
register (constructor) new in cv::DMatch (simple) (cv_DMatch_DMatch_int_int_float)

--- Incoming ---
[   'cv.DMatch.DMatch',
    'D',
    [],
    [   ['int', '_queryIdx', '', []],
        ['int', '_trainIdx', '', []],
        ['int', '_imgIdx', '', []],
        ['float', '_distance', '', []]],
    None,
    '']
parse_name: cv.DMatch.DMatch with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::DMatch namespace:cv classpath:DMatch classname:DMatch name:DMatch
register (constructor) new in cv::DMatch (simple) (cv_DMatch_DMatch_int_int_int_float)

--- Incoming ---
[   'cv.DMatch.operator <',
    'bool',
    ['/C'],
    [['const DMatch &', 'm', '', []]],
    None,
    '']
parse_name: cv.DMatch.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::DMatch::operator < namespace:cv classpath:DMatch classname:DMatch name:operator <
ignore (method) operator < in cv::DMatch (simple)

--- Incoming ---
['cv.TermCriteria.TermCriteria', 'T', [], [], None, '']
parse_name: cv.TermCriteria.TermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::TermCriteria namespace:cv classpath:TermCriteria classname:TermCriteria name:TermCriteria
register (constructor) default in cv::TermCriteria (cv_TermCriteria_TermCriteria)

--- Incoming ---
[   'cv.TermCriteria.TermCriteria',
    'T',
    [],
    [   ['int', '_type', '', []],
        ['int', '_maxCount', '', []],
        ['double', '_epsilon', '', []]],
    None,
    '']
parse_name: cv.TermCriteria.TermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::TermCriteria::TermCriteria namespace:cv classpath:TermCriteria classname:TermCriteria name:TermCriteria
register (constructor) new in cv::TermCriteria (cv_TermCriteria_TermCriteria_int_int_double)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/mat.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {}

--- Incoming ---
[   'enum cv.AccessFlag',
    '',
    [],
    [   ['const cv.ACCESS_READ', '1<<24', [], [], None, ''],
        ['const cv.ACCESS_WRITE', '1<<25', [], [], None, ''],
        ['const cv.ACCESS_RW', '3<<24', [], [], None, ''],
        ['const cv.ACCESS_MASK', 'ACCESS_RW', [], [], None, ''],
        ['const cv.ACCESS_FAST', '1<<26', [], [], None, '']],
    None,
    '@addtogroup core_basic\n@{']
parse_name: const cv.ACCESS_READ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_READ namespace:cv classpath: classname: name:ACCESS_READ
parse_name: const cv.ACCESS_WRITE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_WRITE namespace:cv classpath: classname: name:ACCESS_WRITE
parse_name: const cv.ACCESS_RW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_RW namespace:cv classpath: classname: name:ACCESS_RW
parse_name: const cv.ACCESS_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_MASK namespace:cv classpath: classname: name:ACCESS_MASK
parse_name: const cv.ACCESS_FAST with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_FAST namespace:cv classpath: classname: name:ACCESS_FAST
parse_name: enum cv.AccessFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AccessFlag namespace:cv classpath: classname: name:AccessFlag
parse_name: const cv.ACCESS_READ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_READ namespace:cv classpath: classname: name:ACCESS_READ
parse_name: const cv.ACCESS_WRITE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_WRITE namespace:cv classpath: classname: name:ACCESS_WRITE
parse_name: const cv.ACCESS_RW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_RW namespace:cv classpath: classname: name:ACCESS_RW
parse_name: const cv.ACCESS_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_MASK namespace:cv classpath: classname: name:ACCESS_MASK
parse_name: const cv.ACCESS_FAST with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ACCESS_FAST namespace:cv classpath: classname: name:ACCESS_FAST

--- Incoming ---
[   'class cv._InputArray',
    '',
    [],
    [],
    None,
    '@brief This is the proxy class for passing read-only input arrays into '
    'OpenCV functions.\n'
    '\n'
    'It is defined as:\n'
    '@code\n'
    'typedef const _InputArray& InputArray;\n'
    '@endcode\n'
    'where _InputArray is a class that can be constructed from `Mat`, '
    '`Mat_<T>`, `Matx<T, m, n>`,\n'
    '`std::vector<T>`, `std::vector<std::vector<T> >`, `std::vector<Mat>`, '
    '`std::vector<Mat_<T> >`,\n'
    '`UMat`, `std::vector<UMat>` or `double`. It can also be constructed from '
    'a matrix expression.\n'
    '\n'
    'Since this is mostly implementation-level class, and its interface may '
    'change in future versions, we\n'
    'do not describe it in details. There are a few key things, though, that '
    'should be kept in mind:\n'
    '\n'
    '-   When you see in the reference manual or in OpenCV source code a '
    'function that takes\n'
    'InputArray, it means that you can actually pass `Mat`, `Matx`, '
    '`vector<T>` etc. (see above the\n'
    'complete list).\n'
    '-   Optional input arguments: If some of the input arrays may be empty, '
    'pass cv::noArray() (or\n'
    'simply cv::Mat() as you probably did before).\n'
    '-   The class is designed solely for passing parameters. That is, '
    'normally you *should not*\n'
    'declare class members, local and global variables of this type.\n'
    '-   If you want to design your own function or a class method that can '
    'operate of arrays of\n'
    'multiple types, you can use InputArray (or OutputArray) for the '
    'respective parameters. Inside\n'
    'a function you should use _InputArray::getMat() method to construct a '
    'matrix header for the\n'
    'array (without copying data). _InputArray::kind() can be used to '
    'distinguish Mat from\n'
    '`vector<>` etc., but normally it is not needed.\n'
    '\n'
    'Here is how you can use a function that takes InputArray :\n'
    '@code\n'
    'std::vector<Point2f> vec;\n'
    '// points or a circle\n'
    'for( int i = 0; i < 30; i++ )\n'
    'vec.push_back(Point2f((float)(100 + 30*cos(i*CV_PI*2/5)),\n'
    '(float)(100 - 30*sin(i*CV_PI*2/5))));\n'
    'cv::transform(vec, vec, cv::Matx23f(0.707, -0.707, 10, 0.707, 0.707, '
    '20));\n'
    '@endcode\n'
    'That is, we form an STL vector containing points, and apply in-place '
    'affine transformation to the\n'
    'vector using the 2x3 matrix created inline as `Matx<float, 2, 3>` '
    'instance.\n'
    '\n'
    'Here is how such a function can be implemented (for simplicity, we '
    'implement a very specific case of\n'
    'it, according to the assertion statement inside) :\n'
    '@code\n'
    'void myAffineTransform(InputArray _src, OutputArray _dst, InputArray _m)\n'
    '{\n'
    '// get Mat headers for input arrays. This is O(1) operation,\n'
    '// unless _src and/or _m are matrix expressions.\n'
    'Mat src = _src.getMat(), m = _m.getMat();\n'
    'CV_Assert( src.type() == CV_32FC2 && m.type() == CV_32F && m.size() == '
    'Size(3, 2) );\n'
    '\n'
    '// [re]create the output array so that it has the proper size and type.\n'
    '// In case of Mat it calls Mat::create, in case of STL vector it calls '
    'vector::resize.\n'
    '_dst.create(src.size(), src.type());\n'
    'Mat dst = _dst.getMat();\n'
    '\n'
    'for( int i = 0; i < src.rows; i++ )\n'
    'for( int j = 0; j < src.cols; j++ )\n'
    '{\n'
    'Point2f pt = src.at<Point2f>(i, j);\n'
    'dst.at<Point2f>(i, j) = Point2f(m.at<float>(0, 0)*pt.x +\n'
    'm.at<float>(0, 1)*pt.y +\n'
    'm.at<float>(0, 2),\n'
    'm.at<float>(1, 0)*pt.x +\n'
    'm.at<float>(1, 1)*pt.y +\n'
    'm.at<float>(1, 2));\n'
    '}\n'
    '}\n'
    '@endcode\n'
    'There is another related type, InputArrayOfArrays, which is currently '
    'defined as a synonym for\n'
    'InputArray:\n'
    '@code\n'
    'typedef InputArray InputArrayOfArrays;\n'
    '@endcode\n'
    'It denotes function arguments that are either vectors of vectors or '
    'vectors of matrices. A separate\n'
    'synonym is needed to generate Python/Java etc. wrappers properly. At the '
    'function implementation\n'
    'level their use is similar, but _InputArray::getMat(idx) should be used '
    'to get header for the\n'
    'idx-th component of the outer vector and _InputArray::size().area() '
    'should be used to find the\n'
    'number of components (vectors/matrices) of the outer vector.\n'
    '\n'
    'In general, type support is limited to cv::Mat types. Other types are '
    'forbidden.\n'
    'But in some cases we need to support passing of custom non-general Mat '
    'types, like arrays of cv::KeyPoint, cv::DMatch, etc.\n'
    'This data is not intented to be interpreted as an image data, or '
    'processed somehow like regular cv::Mat.\n'
    'To pass such custom type use rawIn() / rawOut() / rawInOut() wrappers.\n'
    'Custom type is wrapped as Mat-compatible `CV_8UC<N>` values (N = '
    'sizeof(T), N <= CV_CN_MAX).']
parse_name: class cv._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (['class cv._InputArray', '', [], [], None, '@brief This is the proxy class for passing read-only input arrays into OpenCV functions.\n\nIt is defined as:\n@code\ntypedef const _InputArray& InputArray;\n@endcode\nwhere _InputArray is a class that can be constructed from `Mat`, `Mat_<T>`, `Matx<T, m, n>`,\n`std::vector<T>`, `std::vector<std::vector<T> >`, `std::vector<Mat>`, `std::vector<Mat_<T> >`,\n`UMat`, `std::vector<UMat>` or `double`. It can also be constructed from a matrix expression.\n\nSince this is mostly implementation-level class, and its interface may change in future versions, we\ndo not describe it in details. There are a few key things, though, that should be kept in mind:\n\n-   When you see in the reference manual or in OpenCV source code a function that takes\nInputArray, it means that you can actually pass `Mat`, `Matx`, `vector<T>` etc. (see above the\ncomplete list).\n-   Optional input arguments: If some of the input arrays may be empty, pass cv::noArray() (or\nsimply cv::Mat() as you probably did before).\n-   The class is designed solely for passing parameters. That is, normally you *should not*\ndeclare class members, local and global variables of this type.\n-   If you want to design your own function or a class method that can operate of arrays of\nmultiple types, you can use InputArray (or OutputArray) for the respective parameters. Inside\na function you should use _InputArray::getMat() method to construct a matrix header for the\narray (without copying data). _InputArray::kind() can be used to distinguish Mat from\n`vector<>` etc., but normally it is not needed.\n\nHere is how you can use a function that takes InputArray :\n@code\nstd::vector<Point2f> vec;\n// points or a circle\nfor( int i = 0; i < 30; i++ )\nvec.push_back(Point2f((float)(100 + 30*cos(i*CV_PI*2/5)),\n(float)(100 - 30*sin(i*CV_PI*2/5))));\ncv::transform(vec, vec, cv::Matx23f(0.707, -0.707, 10, 0.707, 0.707, 20));\n@endcode\nThat is, we form an STL vector containing points, and apply in-place affine transformation to the\nvector using the 2x3 matrix created inline as `Matx<float, 2, 3>` instance.\n\nHere is how such a function can be implemented (for simplicity, we implement a very specific case of\nit, according to the assertion statement inside) :\n@code\nvoid myAffineTransform(InputArray _src, OutputArray _dst, InputArray _m)\n{\n// get Mat headers for input arrays. This is O(1) operation,\n// unless _src and/or _m are matrix expressions.\nMat src = _src.getMat(), m = _m.getMat();\nCV_Assert( src.type() == CV_32FC2 && m.type() == CV_32F && m.size() == Size(3, 2) );\n\n// [re]create the output array so that it has the proper size and type.\n// In case of Mat it calls Mat::create, in case of STL vector it calls vector::resize.\n_dst.create(src.size(), src.type());\nMat dst = _dst.getMat();\n\nfor( int i = 0; i < src.rows; i++ )\nfor( int j = 0; j < src.cols; j++ )\n{\nPoint2f pt = src.at<Point2f>(i, j);\ndst.at<Point2f>(i, j) = Point2f(m.at<float>(0, 0)*pt.x +\nm.at<float>(0, 1)*pt.y +\nm.at<float>(0, 2),\nm.at<float>(1, 0)*pt.x +\nm.at<float>(1, 1)*pt.y +\nm.at<float>(1, 2));\n}\n}\n@endcode\nThere is another related type, InputArrayOfArrays, which is currently defined as a synonym for\nInputArray:\n@code\ntypedef InputArray InputArrayOfArrays;\n@endcode\nIt denotes function arguments that are either vectors of vectors or vectors of matrices. A separate\nsynonym is needed to generate Python/Java etc. wrappers properly. At the function implementation\nlevel their use is similar, but _InputArray::getMat(idx) should be used to get header for the\nidx-th component of the outer vector and _InputArray::size().area() should be used to find the\nnumber of components (vectors/matrices) of the outer vector.\n\nIn general, type support is limited to cv::Mat types. Other types are forbidden.\nBut in some cases we need to support passing of custom non-general Mat types, like arrays of cv::KeyPoint, cv::DMatch, etc.\nThis data is not intented to be interpreted as an image data, or processed somehow like regular cv::Mat.\nTo pass such custom type use rawIn() / rawOut() / rawInOut() wrappers.\nCustom type is wrapped as Mat-compatible `CV_8UC<N>` values (N = sizeof(T), N <= CV_CN_MAX).'])

--- Incoming ---
[   'enum cv._InputArray.KindFlag',
    '',
    [],
    [   ['const cv._InputArray.KIND_SHIFT', '16', [], [], None, ''],
        [   'const cv._InputArray.FIXED_TYPE',
            '0x8000 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.FIXED_SIZE',
            '0x4000 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.KIND_MASK',
            '31 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        ['const cv._InputArray.NONE', '0 << KIND_SHIFT', [], [], None, ''],
        ['const cv._InputArray.MAT', '1 << KIND_SHIFT', [], [], None, ''],
        ['const cv._InputArray.MATX', '2 << KIND_SHIFT', [], [], None, ''],
        [   'const cv._InputArray.STD_VECTOR',
            '3 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.STD_VECTOR_VECTOR',
            '4 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.STD_VECTOR_MAT',
            '5 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        ['const cv._InputArray.EXPR', '6 << KIND_SHIFT', [], [], None, ''],
        [   'const cv._InputArray.OPENGL_BUFFER',
            '7 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.CUDA_HOST_MEM',
            '8 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.CUDA_GPU_MAT',
            '9 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        ['const cv._InputArray.UMAT', '10 << KIND_SHIFT', [], [], None, ''],
        [   'const cv._InputArray.STD_VECTOR_UMAT',
            '11 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.STD_BOOL_VECTOR',
            '12 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.STD_VECTOR_CUDA_GPU_MAT',
            '13 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.STD_ARRAY',
            '14 << KIND_SHIFT',
            [],
            [],
            None,
            ''],
        [   'const cv._InputArray.STD_ARRAY_MAT',
            '15 << KIND_SHIFT',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv._InputArray.KIND_SHIFT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::KIND_SHIFT namespace:cv classpath:_InputArray classname:_InputArray name:KIND_SHIFT
parse_name: const cv._InputArray.FIXED_TYPE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::FIXED_TYPE namespace:cv classpath:_InputArray classname:_InputArray name:FIXED_TYPE
parse_name: const cv._InputArray.FIXED_SIZE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::FIXED_SIZE namespace:cv classpath:_InputArray classname:_InputArray name:FIXED_SIZE
parse_name: const cv._InputArray.KIND_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::KIND_MASK namespace:cv classpath:_InputArray classname:_InputArray name:KIND_MASK
parse_name: const cv._InputArray.NONE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::NONE namespace:cv classpath:_InputArray classname:_InputArray name:NONE
parse_name: const cv._InputArray.MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::MAT namespace:cv classpath:_InputArray classname:_InputArray name:MAT
parse_name: const cv._InputArray.MATX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::MATX namespace:cv classpath:_InputArray classname:_InputArray name:MATX
parse_name: const cv._InputArray.STD_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR
parse_name: const cv._InputArray.STD_VECTOR_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_VECTOR namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_VECTOR
parse_name: const cv._InputArray.STD_VECTOR_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_MAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_MAT
parse_name: const cv._InputArray.EXPR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::EXPR namespace:cv classpath:_InputArray classname:_InputArray name:EXPR
parse_name: const cv._InputArray.OPENGL_BUFFER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::OPENGL_BUFFER namespace:cv classpath:_InputArray classname:_InputArray name:OPENGL_BUFFER
parse_name: const cv._InputArray.CUDA_HOST_MEM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::CUDA_HOST_MEM namespace:cv classpath:_InputArray classname:_InputArray name:CUDA_HOST_MEM
parse_name: const cv._InputArray.CUDA_GPU_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::CUDA_GPU_MAT namespace:cv classpath:_InputArray classname:_InputArray name:CUDA_GPU_MAT
parse_name: const cv._InputArray.UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::UMAT namespace:cv classpath:_InputArray classname:_InputArray name:UMAT
parse_name: const cv._InputArray.STD_VECTOR_UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_UMAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_UMAT
parse_name: const cv._InputArray.STD_BOOL_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_BOOL_VECTOR namespace:cv classpath:_InputArray classname:_InputArray name:STD_BOOL_VECTOR
parse_name: const cv._InputArray.STD_VECTOR_CUDA_GPU_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_CUDA_GPU_MAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_CUDA_GPU_MAT
parse_name: const cv._InputArray.STD_ARRAY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_ARRAY namespace:cv classpath:_InputArray classname:_InputArray name:STD_ARRAY
parse_name: const cv._InputArray.STD_ARRAY_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_ARRAY_MAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_ARRAY_MAT
parse_name: enum cv._InputArray.KindFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::KindFlag namespace:cv classpath:_InputArray classname:_InputArray name:KindFlag
parse_name: const cv._InputArray.KIND_SHIFT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::KIND_SHIFT namespace:cv classpath:_InputArray classname:_InputArray name:KIND_SHIFT
parse_name: const cv._InputArray.FIXED_TYPE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::FIXED_TYPE namespace:cv classpath:_InputArray classname:_InputArray name:FIXED_TYPE
parse_name: const cv._InputArray.FIXED_SIZE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::FIXED_SIZE namespace:cv classpath:_InputArray classname:_InputArray name:FIXED_SIZE
parse_name: const cv._InputArray.KIND_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::KIND_MASK namespace:cv classpath:_InputArray classname:_InputArray name:KIND_MASK
parse_name: const cv._InputArray.NONE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::NONE namespace:cv classpath:_InputArray classname:_InputArray name:NONE
parse_name: const cv._InputArray.MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::MAT namespace:cv classpath:_InputArray classname:_InputArray name:MAT
parse_name: const cv._InputArray.MATX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::MATX namespace:cv classpath:_InputArray classname:_InputArray name:MATX
parse_name: const cv._InputArray.STD_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR
parse_name: const cv._InputArray.STD_VECTOR_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_VECTOR namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_VECTOR
parse_name: const cv._InputArray.STD_VECTOR_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_MAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_MAT
parse_name: const cv._InputArray.EXPR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::EXPR namespace:cv classpath:_InputArray classname:_InputArray name:EXPR
parse_name: const cv._InputArray.OPENGL_BUFFER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::OPENGL_BUFFER namespace:cv classpath:_InputArray classname:_InputArray name:OPENGL_BUFFER
parse_name: const cv._InputArray.CUDA_HOST_MEM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::CUDA_HOST_MEM namespace:cv classpath:_InputArray classname:_InputArray name:CUDA_HOST_MEM
parse_name: const cv._InputArray.CUDA_GPU_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::CUDA_GPU_MAT namespace:cv classpath:_InputArray classname:_InputArray name:CUDA_GPU_MAT
parse_name: const cv._InputArray.UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::UMAT namespace:cv classpath:_InputArray classname:_InputArray name:UMAT
parse_name: const cv._InputArray.STD_VECTOR_UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_UMAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_UMAT
parse_name: const cv._InputArray.STD_BOOL_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_BOOL_VECTOR namespace:cv classpath:_InputArray classname:_InputArray name:STD_BOOL_VECTOR
parse_name: const cv._InputArray.STD_VECTOR_CUDA_GPU_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_VECTOR_CUDA_GPU_MAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_VECTOR_CUDA_GPU_MAT
parse_name: const cv._InputArray.STD_ARRAY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_ARRAY namespace:cv classpath:_InputArray classname:_InputArray name:STD_ARRAY
parse_name: const cv._InputArray.STD_ARRAY_MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::STD_ARRAY_MAT namespace:cv classpath:_InputArray classname:_InputArray name:STD_ARRAY_MAT

--- Incoming ---
['cv._InputArray._InputArray', '_', [], [], None, '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) default in cv::_InputArray (trait) (cv__InputArray__InputArray)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['int', '_flags', '', []], ['void*', '_obj', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_int_void_X)

--- Incoming ---
['cv._InputArray._InputArray', '_', [], [['const Mat&', 'm', '', []]], None, '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_Mat)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const MatExpr&', 'expr', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_MatExpr)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const std::vector<Mat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_VectorOfMat)

--- Incoming ---
[   'cv._InputArray._InputArray',
    'template<typename _Tp>',
    [],
    [['const Mat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: Mat_<_Tp>
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_Mat_<_Tp>)

--- Incoming ---
[   'cv._InputArray._InputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_std_vector<_Tp>)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const std::vector<bool>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_VectorOfbool)

--- Incoming ---
[   'cv._InputArray._InputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<std::vector<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_std_vector<std_vector<_Tp> >)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    ['/I'],
    [['const std::vector<std::vector<bool> >&', '', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray

--- Incoming ---
[   'cv._InputArray._InputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<Mat_<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: Mat_<_Tp>
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_std_vector<Mat_<_Tp> >)

--- Incoming ---
[   'cv._InputArray._InputArray',
    'template<typename _Tp>',
    [],
    [['const _Tp*', 'vec', '', []], ['int', 'n', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray__Tp*_int)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const double&', 'val', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_double)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const cuda::GpuMat&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: cuda::GpuMat
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_cuda_GpuMat)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const std::vector<cuda::GpuMat>&', 'd_mat_array', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: cuda::GpuMat
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_std_vector<cuda_GpuMat>)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const ogl::Buffer&', 'buf', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: ogl::Buffer
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_ogl_Buffer)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const cuda::HostMem&', 'cuda_mem', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: cuda::HostMem
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_cuda_HostMem)

--- Incoming ---
[   'cv._InputArray._InputArray',
    'template<typename _Tp>',
    [],
    [['const cudev::GpuMat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
Registering an unknown type: cudev::GpuMat_<_Tp>
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_cudev_GpuMat_<_Tp>)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const UMat&', 'um', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_UMat)

--- Incoming ---
[   'cv._InputArray._InputArray',
    '_',
    [],
    [['const std::vector<UMat>&', 'umv', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray
register (constructor) new in cv::_InputArray (trait) (cv__InputArray__InputArray_VectorOfUMat)

--- Incoming ---
[   'cv._InputArray._InputArray rawIn',
    'template<typename _Tp> static _InputArray',
    [],
    [['const std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputArray._InputArray rawIn with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::_InputArray rawIn namespace:cv classpath:_InputArray classname:_InputArray name:_InputArray rawIn
Registering an unknown type: template<typename _Tp> static _InputArray
register (method) _InputArray rawIn in cv::_InputArray (trait) (cv__InputArray__InputArray_rawIn_std_vector<_Tp>)

--- Incoming ---
['cv._InputArray.getMat', 'Mat', ['/C'], [['int', 'idx', '-1', []]], None, '']
parse_name: cv._InputArray.getMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getMat namespace:cv classpath:_InputArray classname:_InputArray name:getMat
register (method) getMat in cv::_InputArray (trait) (cv__InputArray_getMat_const_int)

--- Incoming ---
['cv._InputArray.getMat_', 'Mat', ['/C'], [['int', 'idx', '-1', []]], None, '']
parse_name: cv._InputArray.getMat_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getMat_ namespace:cv classpath:_InputArray classname:_InputArray name:getMat_
register (method) getMat_ in cv::_InputArray (trait) (cv__InputArray_getMat__const_int)

--- Incoming ---
['cv._InputArray.getUMat', 'UMat', ['/C'], [['int', 'idx', '-1', []]], None, '']
parse_name: cv._InputArray.getUMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getUMat namespace:cv classpath:_InputArray classname:_InputArray name:getUMat
register (method) getUMat in cv::_InputArray (trait) (cv__InputArray_getUMat_const_int)

--- Incoming ---
[   'cv._InputArray.getMatVector',
    'void',
    ['/C'],
    [['std::vector<Mat>&', 'mv', '', []]],
    None,
    '']
parse_name: cv._InputArray.getMatVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getMatVector namespace:cv classpath:_InputArray classname:_InputArray name:getMatVector
register (method) getMatVector in cv::_InputArray (trait) (cv__InputArray_getMatVector_const_VectorOfMat)

--- Incoming ---
[   'cv._InputArray.getUMatVector',
    'void',
    ['/C'],
    [['std::vector<UMat>&', 'umv', '', []]],
    None,
    '']
parse_name: cv._InputArray.getUMatVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getUMatVector namespace:cv classpath:_InputArray classname:_InputArray name:getUMatVector
register (method) getUMatVector in cv::_InputArray (trait) (cv__InputArray_getUMatVector_const_VectorOfUMat)

--- Incoming ---
[   'cv._InputArray.getGpuMatVector',
    'void',
    ['/C'],
    [['std::vector<cuda::GpuMat>&', 'gpumv', '', []]],
    None,
    '']
parse_name: cv._InputArray.getGpuMatVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getGpuMatVector namespace:cv classpath:_InputArray classname:_InputArray name:getGpuMatVector
register (method) getGpuMatVector in cv::_InputArray (trait) (cv__InputArray_getGpuMatVector_const_std_vector<cuda_GpuMat>)

--- Incoming ---
['cv._InputArray.getGpuMat', 'cuda::GpuMat', ['/C'], [], None, '']
parse_name: cv._InputArray.getGpuMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getGpuMat namespace:cv classpath:_InputArray classname:_InputArray name:getGpuMat
register (method) getGpuMat in cv::_InputArray (trait) (cv__InputArray_getGpuMat_const)

--- Incoming ---
['cv._InputArray.getOGlBuffer', 'ogl::Buffer', ['/C'], [], None, '']
parse_name: cv._InputArray.getOGlBuffer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getOGlBuffer namespace:cv classpath:_InputArray classname:_InputArray name:getOGlBuffer
Registering an unknown type: ogl::Buffer
register (method) getOGlBuffer in cv::_InputArray (trait) (cv__InputArray_getOGlBuffer_const)

--- Incoming ---
['cv._InputArray.getFlags', 'int', ['/C'], [], None, '']
parse_name: cv._InputArray.getFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getFlags namespace:cv classpath:_InputArray classname:_InputArray name:getFlags
register (method) getFlags in cv::_InputArray (trait) (cv__InputArray_getFlags_const)

--- Incoming ---
['cv._InputArray.getObj', 'void*', ['/C'], [], None, '']
parse_name: cv._InputArray.getObj with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getObj namespace:cv classpath:_InputArray classname:_InputArray name:getObj
register (method) getObj in cv::_InputArray (trait) (cv__InputArray_getObj_const)

--- Incoming ---
['cv._InputArray.getSz', 'Size', ['/C'], [], None, '']
parse_name: cv._InputArray.getSz with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::getSz namespace:cv classpath:_InputArray classname:_InputArray name:getSz
register (method) getSz in cv::_InputArray (trait) (cv__InputArray_getSz_const)

--- Incoming ---
['cv._InputArray.kind', '_InputArray::KindFlag', ['/C'], [], None, '']
parse_name: cv._InputArray.kind with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::kind namespace:cv classpath:_InputArray classname:_InputArray name:kind
register (method) kind in cv::_InputArray (trait) (cv__InputArray_kind_const)

--- Incoming ---
['cv._InputArray.dims', 'int', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.dims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::dims namespace:cv classpath:_InputArray classname:_InputArray name:dims
register (method) dims in cv::_InputArray (trait) (cv__InputArray_dims_const_int)

--- Incoming ---
['cv._InputArray.cols', 'int', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.cols with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::cols namespace:cv classpath:_InputArray classname:_InputArray name:cols
register (method) cols in cv::_InputArray (trait) (cv__InputArray_cols_const_int)

--- Incoming ---
['cv._InputArray.rows', 'int', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.rows with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::rows namespace:cv classpath:_InputArray classname:_InputArray name:rows
register (method) rows in cv::_InputArray (trait) (cv__InputArray_rows_const_int)

--- Incoming ---
['cv._InputArray.size', 'Size', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::size namespace:cv classpath:_InputArray classname:_InputArray name:size
register (method) size in cv::_InputArray (trait) (cv__InputArray_size_const_int)

--- Incoming ---
[   'cv._InputArray.sizend',
    'int',
    ['/C'],
    [['int*', 'sz', '', []], ['int', 'i', '-1', []]],
    None,
    '']
parse_name: cv._InputArray.sizend with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::sizend namespace:cv classpath:_InputArray classname:_InputArray name:sizend
register (method) sizend in cv::_InputArray (trait) (cv__InputArray_sizend_const_int_X_int)

--- Incoming ---
[   'cv._InputArray.sameSize',
    'bool',
    ['/C'],
    [['const _InputArray&', 'arr', '', []]],
    None,
    '']
parse_name: cv._InputArray.sameSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::sameSize namespace:cv classpath:_InputArray classname:_InputArray name:sameSize
register (method) sameSize in cv::_InputArray (trait) (cv__InputArray_sameSize_const__InputArray)

--- Incoming ---
['cv._InputArray.total', 'size_t', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.total with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::total namespace:cv classpath:_InputArray classname:_InputArray name:total
register (method) total in cv::_InputArray (trait) (cv__InputArray_total_const_int)

--- Incoming ---
['cv._InputArray.type', 'int', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::type namespace:cv classpath:_InputArray classname:_InputArray name:type
register (method) type in cv::_InputArray (trait) (cv__InputArray_type_const_int)

--- Incoming ---
['cv._InputArray.depth', 'int', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.depth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::depth namespace:cv classpath:_InputArray classname:_InputArray name:depth
register (method) depth in cv::_InputArray (trait) (cv__InputArray_depth_const_int)

--- Incoming ---
['cv._InputArray.channels', 'int', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.channels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::channels namespace:cv classpath:_InputArray classname:_InputArray name:channels
register (method) channels in cv::_InputArray (trait) (cv__InputArray_channels_const_int)

--- Incoming ---
[   'cv._InputArray.isContinuous',
    'bool',
    ['/C'],
    [['int', 'i', '-1', []]],
    None,
    '']
parse_name: cv._InputArray.isContinuous with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isContinuous namespace:cv classpath:_InputArray classname:_InputArray name:isContinuous
register (method) isContinuous in cv::_InputArray (trait) (cv__InputArray_isContinuous_const_int)

--- Incoming ---
[   'cv._InputArray.isSubmatrix',
    'bool',
    ['/C'],
    [['int', 'i', '-1', []]],
    None,
    '']
parse_name: cv._InputArray.isSubmatrix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isSubmatrix namespace:cv classpath:_InputArray classname:_InputArray name:isSubmatrix
register (method) isSubmatrix in cv::_InputArray (trait) (cv__InputArray_isSubmatrix_const_int)

--- Incoming ---
['cv._InputArray.empty', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::empty namespace:cv classpath:_InputArray classname:_InputArray name:empty
register (method) empty in cv::_InputArray (trait) (cv__InputArray_empty_const)

--- Incoming ---
[   'cv._InputArray.copyTo',
    'void',
    ['/C'],
    [['const _OutputArray&', 'arr', '', []]],
    None,
    '']
parse_name: cv._InputArray.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::copyTo namespace:cv classpath:_InputArray classname:_InputArray name:copyTo
register (method) copyTo in cv::_InputArray (trait) (cv__InputArray_copyTo_const__OutputArray)

--- Incoming ---
[   'cv._InputArray.copyTo',
    'void',
    ['/C'],
    [   ['const _OutputArray&', 'arr', '', []],
        ['const _InputArray &', 'mask', '', []]],
    None,
    '']
parse_name: cv._InputArray.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::copyTo namespace:cv classpath:_InputArray classname:_InputArray name:copyTo
register (method) copyTo in cv::_InputArray (trait) (cv__InputArray_copyTo_const__OutputArray__InputArray)

--- Incoming ---
['cv._InputArray.offset', 'size_t', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.offset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::offset namespace:cv classpath:_InputArray classname:_InputArray name:offset
register (method) offset in cv::_InputArray (trait) (cv__InputArray_offset_const_int)

--- Incoming ---
['cv._InputArray.step', 'size_t', ['/C'], [['int', 'i', '-1', []]], None, '']
parse_name: cv._InputArray.step with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::step namespace:cv classpath:_InputArray classname:_InputArray name:step
register (method) step in cv::_InputArray (trait) (cv__InputArray_step_const_int)

--- Incoming ---
['cv._InputArray.isMat', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isMat namespace:cv classpath:_InputArray classname:_InputArray name:isMat
register (method) isMat in cv::_InputArray (trait) (cv__InputArray_isMat_const)

--- Incoming ---
['cv._InputArray.isUMat', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isUMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isUMat namespace:cv classpath:_InputArray classname:_InputArray name:isUMat
register (method) isUMat in cv::_InputArray (trait) (cv__InputArray_isUMat_const)

--- Incoming ---
['cv._InputArray.isMatVector', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isMatVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isMatVector namespace:cv classpath:_InputArray classname:_InputArray name:isMatVector
register (method) isMatVector in cv::_InputArray (trait) (cv__InputArray_isMatVector_const)

--- Incoming ---
['cv._InputArray.isUMatVector', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isUMatVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isUMatVector namespace:cv classpath:_InputArray classname:_InputArray name:isUMatVector
register (method) isUMatVector in cv::_InputArray (trait) (cv__InputArray_isUMatVector_const)

--- Incoming ---
['cv._InputArray.isMatx', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isMatx with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isMatx namespace:cv classpath:_InputArray classname:_InputArray name:isMatx
register (method) isMatx in cv::_InputArray (trait) (cv__InputArray_isMatx_const)

--- Incoming ---
['cv._InputArray.isVector', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isVector namespace:cv classpath:_InputArray classname:_InputArray name:isVector
register (method) isVector in cv::_InputArray (trait) (cv__InputArray_isVector_const)

--- Incoming ---
['cv._InputArray.isGpuMat', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isGpuMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isGpuMat namespace:cv classpath:_InputArray classname:_InputArray name:isGpuMat
register (method) isGpuMat in cv::_InputArray (trait) (cv__InputArray_isGpuMat_const)

--- Incoming ---
['cv._InputArray.isGpuMatVector', 'bool', ['/C'], [], None, '']
parse_name: cv._InputArray.isGpuMatVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::isGpuMatVector namespace:cv classpath:_InputArray classname:_InputArray name:isGpuMatVector
register (method) isGpuMatVector in cv::_InputArray (trait) (cv__InputArray_isGpuMatVector_const)

--- Incoming ---
['cv._InputArray.~_InputArray', '~', [], [], None, '']
parse_name: cv._InputArray.~_InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::~_InputArray namespace:cv classpath:_InputArray classname:_InputArray name:~_InputArray
Registering an unknown type: ~
ignore destructor (method) ~_InputArray in cv::_InputArray (trait)

--- Incoming ---
[   'cv._InputArray.init',
    'void',
    ['/H'],
    [['int', '_flags', '', []], ['const void*', '_obj', '', []]],
    None,
    '']
parse_name: cv._InputArray.init with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::init namespace:cv classpath:_InputArray classname:_InputArray name:init

--- Incoming ---
[   'cv._InputArray.init',
    'void',
    ['/H'],
    [   ['int', '_flags', '', []],
        ['const void*', '_obj', '', []],
        ['Size', '_sz', '', []]],
    None,
    '']
parse_name: cv._InputArray.init with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputArray::init namespace:cv classpath:_InputArray classname:_InputArray name:init

--- Incoming ---
[   'class cv._OutputArray',
    ': cv::_InputArray',
    [],
    [],
    None,
    '@brief This type is very similar to InputArray except that it is used for '
    'input/output and output function\n'
    'parameters.\n'
    '\n'
    'Just like with InputArray, OpenCV users should not care about '
    'OutputArray, they just pass `Mat`,\n'
    '`vector<T>` etc. to the functions. The same limitation as for '
    '`InputArray`: *Do not explicitly\n'
    'create OutputArray instances* applies here too.\n'
    '\n'
    'If you want to make your function polymorphic (i.e. accept different '
    'arrays as output parameters),\n'
    'it is also not very difficult. Take the sample above as the reference. '
    'Note that\n'
    '_OutputArray::create() needs to be called before _OutputArray::getMat(). '
    'This way you guarantee\n'
    'that the output array is properly allocated.\n'
    '\n'
    'Optional output parameters. If you do not need certain output array to be '
    'computed and returned to\n'
    'you, pass cv::noArray(), just like you would in the case of optional '
    'input array. At the\n'
    'implementation level, use _OutputArray::needed() to check if certain '
    'output array needs to be\n'
    'computed or not.\n'
    '\n'
    'There are several synonyms for OutputArray that are used to assist '
    'automatic Python/Java/... wrapper\n'
    'generators:\n'
    '@code\n'
    'typedef OutputArray OutputArrayOfArrays;\n'
    'typedef OutputArray InputOutputArray;\n'
    'typedef OutputArray InputOutputArrayOfArrays;\n'
    '@endcode']
parse_name: class cv._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (['class cv._OutputArray', ': cv::_InputArray', [], [], None, '@brief This type is very similar to InputArray except that it is used for input/output and output function\nparameters.\n\nJust like with InputArray, OpenCV users should not care about OutputArray, they just pass `Mat`,\n`vector<T>` etc. to the functions. The same limitation as for `InputArray`: *Do not explicitly\ncreate OutputArray instances* applies here too.\n\nIf you want to make your function polymorphic (i.e. accept different arrays as output parameters),\nit is also not very difficult. Take the sample above as the reference. Note that\n_OutputArray::create() needs to be called before _OutputArray::getMat(). This way you guarantee\nthat the output array is properly allocated.\n\nOptional output parameters. If you do not need certain output array to be computed and returned to\nyou, pass cv::noArray(), just like you would in the case of optional input array. At the\nimplementation level, use _OutputArray::needed() to check if certain output array needs to be\ncomputed or not.\n\nThere are several synonyms for OutputArray that are used to assist automatic Python/Java/... wrapper\ngenerators:\n@code\ntypedef OutputArray OutputArrayOfArrays;\ntypedef OutputArray InputOutputArray;\ntypedef OutputArray InputOutputArrayOfArrays;\n@endcode']) impl:cv::_InputArray

--- Incoming ---
[   'enum cv._OutputArray.DepthMask',
    '',
    [],
    [   ['const cv._OutputArray.DEPTH_MASK_8U', '1 << CV_8U', [], [], None, ''],
        ['const cv._OutputArray.DEPTH_MASK_8S', '1 << CV_8S', [], [], None, ''],
        [   'const cv._OutputArray.DEPTH_MASK_16U',
            '1 << CV_16U',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_16S',
            '1 << CV_16S',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_32S',
            '1 << CV_32S',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_32F',
            '1 << CV_32F',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_64F',
            '1 << CV_64F',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_16F',
            '1 << CV_16F',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_ALL',
            '(DEPTH_MASK_64F<<1)-1',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_ALL_BUT_8S',
            'DEPTH_MASK_ALL & ~DEPTH_MASK_8S',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_ALL_16F',
            '(DEPTH_MASK_16F<<1)-1',
            [],
            [],
            None,
            ''],
        [   'const cv._OutputArray.DEPTH_MASK_FLT',
            'DEPTH_MASK_32F + DEPTH_MASK_64F',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv._OutputArray.DEPTH_MASK_8U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_8U namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_8U
parse_name: const cv._OutputArray.DEPTH_MASK_8S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_8S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_8S
parse_name: const cv._OutputArray.DEPTH_MASK_16U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_16U namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_16U
parse_name: const cv._OutputArray.DEPTH_MASK_16S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_16S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_16S
parse_name: const cv._OutputArray.DEPTH_MASK_32S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_32S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_32S
parse_name: const cv._OutputArray.DEPTH_MASK_32F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_32F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_32F
parse_name: const cv._OutputArray.DEPTH_MASK_64F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_64F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_64F
parse_name: const cv._OutputArray.DEPTH_MASK_16F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_16F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_16F
parse_name: const cv._OutputArray.DEPTH_MASK_ALL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_ALL namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_ALL
parse_name: const cv._OutputArray.DEPTH_MASK_ALL_BUT_8S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_ALL_BUT_8S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_ALL_BUT_8S
parse_name: const cv._OutputArray.DEPTH_MASK_ALL_16F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_ALL_16F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_ALL_16F
parse_name: const cv._OutputArray.DEPTH_MASK_FLT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_FLT namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_FLT
parse_name: enum cv._OutputArray.DepthMask with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DepthMask namespace:cv classpath:_OutputArray classname:_OutputArray name:DepthMask
parse_name: const cv._OutputArray.DEPTH_MASK_8U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_8U namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_8U
parse_name: const cv._OutputArray.DEPTH_MASK_8S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_8S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_8S
parse_name: const cv._OutputArray.DEPTH_MASK_16U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_16U namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_16U
parse_name: const cv._OutputArray.DEPTH_MASK_16S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_16S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_16S
parse_name: const cv._OutputArray.DEPTH_MASK_32S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_32S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_32S
parse_name: const cv._OutputArray.DEPTH_MASK_32F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_32F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_32F
parse_name: const cv._OutputArray.DEPTH_MASK_64F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_64F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_64F
parse_name: const cv._OutputArray.DEPTH_MASK_16F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_16F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_16F
parse_name: const cv._OutputArray.DEPTH_MASK_ALL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_ALL namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_ALL
parse_name: const cv._OutputArray.DEPTH_MASK_ALL_BUT_8S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_ALL_BUT_8S namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_ALL_BUT_8S
parse_name: const cv._OutputArray.DEPTH_MASK_ALL_16F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_ALL_16F namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_ALL_16F
parse_name: const cv._OutputArray.DEPTH_MASK_FLT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::DEPTH_MASK_FLT namespace:cv classpath:_OutputArray classname:_OutputArray name:DEPTH_MASK_FLT

--- Incoming ---
['cv._OutputArray._OutputArray', '_', [], [], None, '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) default in cv::_OutputArray (trait) (cv__OutputArray__OutputArray)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['int', '_flags', '', []], ['void*', '_obj', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_int_void_X)

--- Incoming ---
['cv._OutputArray._OutputArray', '_', [], [['Mat&', 'm', '', []]], None, '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_Mat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['std::vector<Mat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_VectorOfMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['cuda::GpuMat&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
Registering an unknown type: cuda::GpuMat
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_cuda_GpuMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['std::vector<cuda::GpuMat>&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<cuda_GpuMat>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['ogl::Buffer&', 'buf', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
Registering an unknown type: ogl::Buffer
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_ogl_Buffer)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['cuda::HostMem&', 'cuda_mem', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
Registering an unknown type: cuda::HostMem
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_cuda_HostMem)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['cudev::GpuMat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
Registering an unknown type: cudev::GpuMat_<_Tp>
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_cudev_GpuMat_<_Tp>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<_Tp>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    ['/I'],
    [['std::vector<bool>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['std::vector<std::vector<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<std_vector<_Tp> >)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    ['/I'],
    [['std::vector<std::vector<bool> >&', '', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['std::vector<Mat_<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<Mat_<_Tp> >)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['Mat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
Registering an unknown type: Mat_<_Tp>
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_Mat_<_Tp>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['_Tp*', 'vec', '', []], ['int', 'n', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray__Tp*_int)

--- Incoming ---
['cv._OutputArray._OutputArray', '_', [], [['UMat&', 'm', '', []]], None, '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_UMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['std::vector<UMat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_VectorOfUMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_Mat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const std::vector<Mat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_VectorOfMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const cuda::GpuMat&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_cuda_GpuMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const std::vector<cuda::GpuMat>&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<cuda_GpuMat>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const ogl::Buffer&', 'buf', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_ogl_Buffer)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const cuda::HostMem&', 'cuda_mem', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_cuda_HostMem)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['const cudev::GpuMat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_cudev_GpuMat_<_Tp>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<_Tp>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<std::vector<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<std_vector<_Tp> >)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<Mat_<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_std_vector<Mat_<_Tp> >)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['const Mat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_Mat_<_Tp>)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    'template<typename _Tp>',
    [],
    [['const _Tp*', 'vec', '', []], ['int', 'n', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray__Tp*_int)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_UMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray',
    '_',
    [],
    [['const std::vector<UMat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray
register (constructor) new in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_VectorOfUMat)

--- Incoming ---
[   'cv._OutputArray._OutputArray rawOut',
    'template<typename _Tp> static _OutputArray',
    [],
    [['std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._OutputArray._OutputArray rawOut with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::_OutputArray rawOut namespace:cv classpath:_OutputArray classname:_OutputArray name:_OutputArray rawOut
Registering an unknown type: template<typename _Tp> static _OutputArray
register (method) _OutputArray rawOut in cv::_OutputArray (trait) (cv__OutputArray__OutputArray_rawOut_std_vector<_Tp>)

--- Incoming ---
['cv._OutputArray.fixedSize', 'bool', ['/C'], [], None, '']
parse_name: cv._OutputArray.fixedSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::fixedSize namespace:cv classpath:_OutputArray classname:_OutputArray name:fixedSize
register (method) fixedSize in cv::_OutputArray (trait) (cv__OutputArray_fixedSize_const)

--- Incoming ---
['cv._OutputArray.fixedType', 'bool', ['/C'], [], None, '']
parse_name: cv._OutputArray.fixedType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::fixedType namespace:cv classpath:_OutputArray classname:_OutputArray name:fixedType
register (method) fixedType in cv::_OutputArray (trait) (cv__OutputArray_fixedType_const)

--- Incoming ---
['cv._OutputArray.needed', 'bool', ['/C'], [], None, '']
parse_name: cv._OutputArray.needed with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::needed namespace:cv classpath:_OutputArray classname:_OutputArray name:needed
register (method) needed in cv::_OutputArray (trait) (cv__OutputArray_needed_const)

--- Incoming ---
[   'cv._OutputArray.getMatRef',
    'Mat&',
    ['/C'],
    [['int', 'i', '-1', []]],
    None,
    '']
parse_name: cv._OutputArray.getMatRef with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::getMatRef namespace:cv classpath:_OutputArray classname:_OutputArray name:getMatRef
register (method) getMatRef in cv::_OutputArray (trait) (cv__OutputArray_getMatRef_const_int)

--- Incoming ---
[   'cv._OutputArray.getUMatRef',
    'UMat&',
    ['/C'],
    [['int', 'i', '-1', []]],
    None,
    '']
parse_name: cv._OutputArray.getUMatRef with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::getUMatRef namespace:cv classpath:_OutputArray classname:_OutputArray name:getUMatRef
register (method) getUMatRef in cv::_OutputArray (trait) (cv__OutputArray_getUMatRef_const_int)

--- Incoming ---
['cv._OutputArray.getGpuMatRef', 'cuda::GpuMat&', ['/C'], [], None, '']
parse_name: cv._OutputArray.getGpuMatRef with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::getGpuMatRef namespace:cv classpath:_OutputArray classname:_OutputArray name:getGpuMatRef
register (method) getGpuMatRef in cv::_OutputArray (trait) (cv__OutputArray_getGpuMatRef_const)

--- Incoming ---
[   'cv._OutputArray.getGpuMatVecRef',
    'std::vector<cuda::GpuMat>&',
    ['/C'],
    [],
    None,
    '']
parse_name: cv._OutputArray.getGpuMatVecRef with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::getGpuMatVecRef namespace:cv classpath:_OutputArray classname:_OutputArray name:getGpuMatVecRef
register (method) getGpuMatVecRef in cv::_OutputArray (trait) (cv__OutputArray_getGpuMatVecRef_const)

--- Incoming ---
['cv._OutputArray.getOGlBufferRef', 'ogl::Buffer&', ['/C'], [], None, '']
parse_name: cv._OutputArray.getOGlBufferRef with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::getOGlBufferRef namespace:cv classpath:_OutputArray classname:_OutputArray name:getOGlBufferRef
register (method) getOGlBufferRef in cv::_OutputArray (trait) (cv__OutputArray_getOGlBufferRef_const)

--- Incoming ---
['cv._OutputArray.getHostMemRef', 'cuda::HostMem&', ['/C'], [], None, '']
parse_name: cv._OutputArray.getHostMemRef with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::getHostMemRef namespace:cv classpath:_OutputArray classname:_OutputArray name:getHostMemRef
register (method) getHostMemRef in cv::_OutputArray (trait) (cv__OutputArray_getHostMemRef_const)

--- Incoming ---
[   'cv._OutputArray.create',
    'void',
    ['/C'],
    [   ['Size', 'sz', '', []],
        ['int', 'type', '', []],
        ['int', 'i', '-1', []],
        ['bool', 'allowTransposed', 'false', []],
        [   '_OutputArray::DepthMask',
            'fixedDepthMask',
            'static_cast<_OutputArray::DepthMask>(0)',
            []]],
    None,
    '']
parse_name: cv._OutputArray.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::create namespace:cv classpath:_OutputArray classname:_OutputArray name:create
register (method) create in cv::_OutputArray (trait) (cv__OutputArray_create_const_Size_int_int_bool__OutputArray_DepthMask)

--- Incoming ---
[   'cv._OutputArray.create',
    'void',
    ['/C'],
    [   ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['int', 'i', '-1', []],
        ['bool', 'allowTransposed', 'false', []],
        [   '_OutputArray::DepthMask',
            'fixedDepthMask',
            'static_cast<_OutputArray::DepthMask>(0)',
            []]],
    None,
    '']
parse_name: cv._OutputArray.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::create namespace:cv classpath:_OutputArray classname:_OutputArray name:create
register (method) create in cv::_OutputArray (trait) (cv__OutputArray_create_const_int_int_int_int_bool__OutputArray_DepthMask)

--- Incoming ---
[   'cv._OutputArray.create',
    'void',
    ['/C'],
    [   ['int', 'dims', '', []],
        ['const int*', 'size', '', []],
        ['int', 'type', '', []],
        ['int', 'i', '-1', []],
        ['bool', 'allowTransposed', 'false', []],
        [   '_OutputArray::DepthMask',
            'fixedDepthMask',
            'static_cast<_OutputArray::DepthMask>(0)',
            []]],
    None,
    '']
parse_name: cv._OutputArray.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::create namespace:cv classpath:_OutputArray classname:_OutputArray name:create
register (method) create in cv::_OutputArray (trait) (cv__OutputArray_create_const_int_const_int_X_int_int_bool__OutputArray_DepthMask)

--- Incoming ---
[   'cv._OutputArray.createSameSize',
    'void',
    ['/C'],
    [['const _InputArray&', 'arr', '', []], ['int', 'mtype', '', []]],
    None,
    '']
parse_name: cv._OutputArray.createSameSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::createSameSize namespace:cv classpath:_OutputArray classname:_OutputArray name:createSameSize
register (method) createSameSize in cv::_OutputArray (trait) (cv__OutputArray_createSameSize_const__InputArray_int)

--- Incoming ---
['cv._OutputArray.release', 'void', ['/C'], [], None, '']
parse_name: cv._OutputArray.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::release namespace:cv classpath:_OutputArray classname:_OutputArray name:release
register (method) release in cv::_OutputArray (trait) (cv__OutputArray_release_const)

--- Incoming ---
['cv._OutputArray.clear', 'void', ['/C'], [], None, '']
parse_name: cv._OutputArray.clear with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::clear namespace:cv classpath:_OutputArray classname:_OutputArray name:clear
register (method) clear in cv::_OutputArray (trait) (cv__OutputArray_clear_const)

--- Incoming ---
[   'cv._OutputArray.setTo',
    'void',
    ['/C'],
    [   ['const _InputArray&', 'value', '', []],
        ['const _InputArray &', 'mask', '_InputArray()', []]],
    None,
    '']
parse_name: cv._OutputArray.setTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::setTo namespace:cv classpath:_OutputArray classname:_OutputArray name:setTo
register (method) setTo in cv::_OutputArray (trait) (cv__OutputArray_setTo_const__InputArray__InputArray)

--- Incoming ---
[   'cv._OutputArray.assign',
    'void',
    ['/C'],
    [['const UMat&', 'u', '', []]],
    None,
    '']
parse_name: cv._OutputArray.assign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::assign namespace:cv classpath:_OutputArray classname:_OutputArray name:assign
register (method) assign in cv::_OutputArray (trait) (cv__OutputArray_assign_const_UMat)

--- Incoming ---
[   'cv._OutputArray.assign',
    'void',
    ['/C'],
    [['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv._OutputArray.assign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::assign namespace:cv classpath:_OutputArray classname:_OutputArray name:assign
register (method) assign in cv::_OutputArray (trait) (cv__OutputArray_assign_const_Mat)

--- Incoming ---
[   'cv._OutputArray.assign',
    'void',
    ['/C'],
    [['const std::vector<UMat>&', 'v', '', []]],
    None,
    '']
parse_name: cv._OutputArray.assign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::assign namespace:cv classpath:_OutputArray classname:_OutputArray name:assign
register (method) assign in cv::_OutputArray (trait) (cv__OutputArray_assign_const_VectorOfUMat)

--- Incoming ---
[   'cv._OutputArray.assign',
    'void',
    ['/C'],
    [['const std::vector<Mat>&', 'v', '', []]],
    None,
    '']
parse_name: cv._OutputArray.assign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::assign namespace:cv classpath:_OutputArray classname:_OutputArray name:assign
register (method) assign in cv::_OutputArray (trait) (cv__OutputArray_assign_const_VectorOfMat)

--- Incoming ---
['cv._OutputArray.move', 'void', ['/C'], [['UMat&', 'u', '', []]], None, '']
parse_name: cv._OutputArray.move with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::move namespace:cv classpath:_OutputArray classname:_OutputArray name:move
register (method) move in cv::_OutputArray (trait) (cv__OutputArray_move_const_UMat)

--- Incoming ---
['cv._OutputArray.move', 'void', ['/C'], [['Mat&', 'm', '', []]], None, '']
parse_name: cv._OutputArray.move with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_OutputArray::move namespace:cv classpath:_OutputArray classname:_OutputArray name:move
register (method) move in cv::_OutputArray (trait) (cv__OutputArray_move_const_Mat)

--- Incoming ---
['class cv._InputOutputArray', ': cv::_OutputArray', [], [], None, '']
parse_name: class cv._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (['class cv._InputOutputArray', ': cv::_OutputArray', [], [], None, '']) impl:cv::_OutputArray

--- Incoming ---
['cv._InputOutputArray._InputOutputArray', '_', [], [], None, '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) default in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['int', '_flags', '', []], ['void*', '_obj', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_int_void_X)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_Mat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['std::vector<Mat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_VectorOfMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['cuda::GpuMat&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_cuda_GpuMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['ogl::Buffer&', 'buf', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_ogl_Buffer)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['cuda::HostMem&', 'cuda_mem', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_cuda_HostMem)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['cudev::GpuMat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_cudev_GpuMat_<_Tp>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<_Tp>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    ['/I'],
    [['std::vector<bool>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['std::vector<std::vector<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<std_vector<_Tp> >)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['std::vector<Mat_<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<Mat_<_Tp> >)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['Mat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_Mat_<_Tp>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['_Tp*', 'vec', '', []], ['int', 'n', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray__Tp*_int)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_UMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['std::vector<UMat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_VectorOfUMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_Mat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const std::vector<Mat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_VectorOfMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const cuda::GpuMat&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_cuda_GpuMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const std::vector<cuda::GpuMat>&', 'd_mat', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<cuda_GpuMat>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const ogl::Buffer&', 'buf', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_ogl_Buffer)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const cuda::HostMem&', 'cuda_mem', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_cuda_HostMem)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['const cudev::GpuMat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_cudev_GpuMat_<_Tp>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<_Tp>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<std::vector<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<std_vector<_Tp> >)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['const std::vector<Mat_<_Tp> >&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_std_vector<Mat_<_Tp> >)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['const Mat_<_Tp>&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_Mat_<_Tp>)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    'template<typename _Tp>',
    [],
    [['const _Tp*', 'vec', '', []], ['int', 'n', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray__Tp*_int)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_UMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray',
    '_',
    [],
    [['const std::vector<UMat>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray
register (constructor) new in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_VectorOfUMat)

--- Incoming ---
[   'cv._InputOutputArray._InputOutputArray rawInOut',
    'template<typename _Tp> static _InputOutputArray',
    [],
    [['std::vector<_Tp>&', 'vec', '', []]],
    None,
    '']
parse_name: cv._InputOutputArray._InputOutputArray rawInOut with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::_InputOutputArray::_InputOutputArray rawInOut namespace:cv classpath:_InputOutputArray classname:_InputOutputArray name:_InputOutputArray rawInOut
Registering an unknown type: template<typename _Tp> static _InputOutputArray
register (method) _InputOutputArray rawInOut in cv::_InputOutputArray (trait) (cv__InputOutputArray__InputOutputArray_rawInOut_std_vector<_Tp>)

--- Incoming ---
[   'cv.rawIn',
    'template<typename _Tp> _InputArray',
    [],
    [['_Tp&', 'v', '', []]],
    None,
    'Helper to wrap custom types. @see InputArray']
parse_name: cv.rawIn with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::rawIn namespace:cv classpath: classname: name:rawIn
Registering an unknown type: template<typename _Tp> _InputArray
Registering an unknown type: _Tp
register (function) rawIn (cv_rawIn__Tp)

--- Incoming ---
[   'cv.rawOut',
    'template<typename _Tp> _OutputArray',
    [],
    [['_Tp&', 'v', '', []]],
    None,
    'Helper to wrap custom types. @see InputArray']
parse_name: cv.rawOut with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::rawOut namespace:cv classpath: classname: name:rawOut
Registering an unknown type: template<typename _Tp> _OutputArray
register (function) rawOut (cv_rawOut__Tp)

--- Incoming ---
[   'cv.rawInOut',
    'template<typename _Tp> _InputOutputArray',
    [],
    [['_Tp&', 'v', '', []]],
    None,
    'Helper to wrap custom types. @see InputArray']
parse_name: cv.rawInOut with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::rawInOut namespace:cv classpath: classname: name:rawInOut
Registering an unknown type: template<typename _Tp> _InputOutputArray
register (function) rawInOut (cv_rawInOut__Tp)

--- Incoming ---
['typedef cv.InputArray', 'const _InputArray&', '', [], None, '']
parse_name: typedef cv.InputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray

--- Incoming ---
['typedef cv.InputArrayOfArrays', 'InputArray', '', [], None, '']
parse_name: typedef cv.InputArrayOfArrays with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays

--- Incoming ---
['typedef cv.OutputArray', 'const _OutputArray&', '', [], None, '']
parse_name: typedef cv.OutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray

--- Incoming ---
['typedef cv.OutputArrayOfArrays', 'OutputArray', '', [], None, '']
parse_name: typedef cv.OutputArrayOfArrays with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays

--- Incoming ---
['typedef cv.InputOutputArray', 'const _InputOutputArray&', '', [], None, '']
parse_name: typedef cv.InputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray

--- Incoming ---
['typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', '', [], None, '']
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays

--- Incoming ---
['cv.noArray', 'InputOutputArray', [], [], None, '']
parse_name: cv.noArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::noArray namespace:cv classpath: classname: name:noArray
register (function) noArray (cv_noArray)

--- Incoming ---
[   'enum cv.UMatUsageFlags',
    '',
    [],
    [   ['const cv.USAGE_DEFAULT', '0', [], [], None, ''],
        ['const cv.USAGE_ALLOCATE_HOST_MEMORY', '1 << 0', [], [], None, ''],
        ['const cv.USAGE_ALLOCATE_DEVICE_MEMORY', '1 << 1', [], [], None, ''],
        ['const cv.USAGE_ALLOCATE_SHARED_MEMORY', '1 << 2', [], [], None, ''],
        ['const cv.__UMAT_USAGE_FLAGS_32BIT', '0x7fffffff', [], [], None, '']],
    None,
    'Usage flags for allocator']
parse_name: const cv.USAGE_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_DEFAULT namespace:cv classpath: classname: name:USAGE_DEFAULT
parse_name: const cv.USAGE_ALLOCATE_HOST_MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_ALLOCATE_HOST_MEMORY namespace:cv classpath: classname: name:USAGE_ALLOCATE_HOST_MEMORY
parse_name: const cv.USAGE_ALLOCATE_DEVICE_MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_ALLOCATE_DEVICE_MEMORY namespace:cv classpath: classname: name:USAGE_ALLOCATE_DEVICE_MEMORY
parse_name: const cv.USAGE_ALLOCATE_SHARED_MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_ALLOCATE_SHARED_MEMORY namespace:cv classpath: classname: name:USAGE_ALLOCATE_SHARED_MEMORY
parse_name: const cv.__UMAT_USAGE_FLAGS_32BIT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::__UMAT_USAGE_FLAGS_32BIT namespace:cv classpath: classname: name:__UMAT_USAGE_FLAGS_32BIT
parse_name: enum cv.UMatUsageFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatUsageFlags namespace:cv classpath: classname: name:UMatUsageFlags
parse_name: const cv.USAGE_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_DEFAULT namespace:cv classpath: classname: name:USAGE_DEFAULT
parse_name: const cv.USAGE_ALLOCATE_HOST_MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_ALLOCATE_HOST_MEMORY namespace:cv classpath: classname: name:USAGE_ALLOCATE_HOST_MEMORY
parse_name: const cv.USAGE_ALLOCATE_DEVICE_MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_ALLOCATE_DEVICE_MEMORY namespace:cv classpath: classname: name:USAGE_ALLOCATE_DEVICE_MEMORY
parse_name: const cv.USAGE_ALLOCATE_SHARED_MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::USAGE_ALLOCATE_SHARED_MEMORY namespace:cv classpath: classname: name:USAGE_ALLOCATE_SHARED_MEMORY
parse_name: const cv.__UMAT_USAGE_FLAGS_32BIT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::__UMAT_USAGE_FLAGS_32BIT namespace:cv classpath: classname: name:__UMAT_USAGE_FLAGS_32BIT

--- Incoming ---
['class cv.MatAllocator', '', [], [], None, '@brief  Custom array allocator']
parse_name: class cv.MatAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator namespace:cv classpath: classname: name:MatAllocator
register class cv::MatAllocator (['class cv.MatAllocator', '', [], [], None, '@brief  Custom array allocator']) [ignored]

--- Incoming ---
['cv.MatAllocator.MatAllocator', 'M', [], [], None, '']
parse_name: cv.MatAllocator.MatAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::MatAllocator namespace:cv classpath:MatAllocator classname:MatAllocator name:MatAllocator
Registering an unknown type: MatAllocator
register (constructor) default in cv::MatAllocator (ignored) (cv_MatAllocator_MatAllocator)

--- Incoming ---
['cv.MatAllocator.~MatAllocator', '~', [], [], None, '']
parse_name: cv.MatAllocator.~MatAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::~MatAllocator namespace:cv classpath:MatAllocator classname:MatAllocator name:~MatAllocator
ignore destructor (method) ~MatAllocator in cv::MatAllocator (ignored)

--- Incoming ---
[   'cv.MatAllocator.allocate',
    'UMatData*',
    ['/A', '/C'],
    [   ['int', 'dims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []],
        ['void*', 'data', '', []],
        ['size_t*', 'step', '', []],
        ['AccessFlag', 'flags', '', []],
        ['UMatUsageFlags', 'usageFlags', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.allocate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::allocate namespace:cv classpath:MatAllocator classname:MatAllocator name:allocate
Registering an unknown type: UMatData
register (method) allocate in cv::MatAllocator (ignored, trait) (cv_MatAllocator_allocate_const_int_const_int_X_int_void_X_size_t_X_AccessFlag_UMatUsageFlags)

--- Incoming ---
[   'cv.MatAllocator.allocate',
    'bool',
    ['/A', '/C'],
    [   ['UMatData*', 'data', '', []],
        ['AccessFlag', 'accessflags', '', []],
        ['UMatUsageFlags', 'usageFlags', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.allocate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::allocate namespace:cv classpath:MatAllocator classname:MatAllocator name:allocate
register (method) allocate in cv::MatAllocator (ignored, trait) (cv_MatAllocator_allocate_const_UMatData*_AccessFlag_UMatUsageFlags)

--- Incoming ---
[   'cv.MatAllocator.deallocate',
    'void',
    ['/A', '/C'],
    [['UMatData*', 'data', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.deallocate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::deallocate namespace:cv classpath:MatAllocator classname:MatAllocator name:deallocate
register (method) deallocate in cv::MatAllocator (ignored, trait) (cv_MatAllocator_deallocate_const_UMatData*)

--- Incoming ---
[   'cv.MatAllocator.map',
    'void',
    ['/C'],
    [['UMatData*', 'data', '', []], ['AccessFlag', 'accessflags', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.map with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::map namespace:cv classpath:MatAllocator classname:MatAllocator name:map
register (method) map in cv::MatAllocator (ignored, trait) (cv_MatAllocator_map_const_UMatData*_AccessFlag)

--- Incoming ---
[   'cv.MatAllocator.unmap',
    'void',
    ['/C'],
    [['UMatData*', 'data', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.unmap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::unmap namespace:cv classpath:MatAllocator classname:MatAllocator name:unmap
register (method) unmap in cv::MatAllocator (ignored, trait) (cv_MatAllocator_unmap_const_UMatData*)

--- Incoming ---
[   'cv.MatAllocator.download',
    'void',
    ['/C'],
    [   ['UMatData*', 'data', '', []],
        ['void*', 'dst', '', []],
        ['int', 'dims', '', []],
        ['const size_t[]', 'sz', '', []],
        ['const size_t[]', 'srcofs', '', []],
        ['const size_t[]', 'srcstep', '', []],
        ['const size_t[]', 'dststep', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.download with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::download namespace:cv classpath:MatAllocator classname:MatAllocator name:download
register (method) download in cv::MatAllocator (ignored, trait) (cv_MatAllocator_download_const_UMatData*_void_X_int_const_size_t_X_const_size_t_X_const_size_t_X_const_size_t_X)

--- Incoming ---
[   'cv.MatAllocator.upload',
    'void',
    ['/C'],
    [   ['UMatData*', 'data', '', []],
        ['const void*', 'src', '', []],
        ['int', 'dims', '', []],
        ['const size_t[]', 'sz', '', []],
        ['const size_t[]', 'dstofs', '', []],
        ['const size_t[]', 'dststep', '', []],
        ['const size_t[]', 'srcstep', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.upload with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::upload namespace:cv classpath:MatAllocator classname:MatAllocator name:upload
register (method) upload in cv::MatAllocator (ignored, trait) (cv_MatAllocator_upload_const_UMatData*_const_void_X_int_const_size_t_X_const_size_t_X_const_size_t_X_const_size_t_X)

--- Incoming ---
[   'cv.MatAllocator.copy',
    'void',
    ['/C'],
    [   ['UMatData*', 'srcdata', '', []],
        ['UMatData*', 'dstdata', '', []],
        ['int', 'dims', '', []],
        ['const size_t[]', 'sz', '', []],
        ['const size_t[]', 'srcofs', '', []],
        ['const size_t[]', 'srcstep', '', []],
        ['const size_t[]', 'dstofs', '', []],
        ['const size_t[]', 'dststep', '', []],
        ['bool', 'sync', '', []]],
    None,
    '']
parse_name: cv.MatAllocator.copy with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::copy namespace:cv classpath:MatAllocator classname:MatAllocator name:copy
register (method) copy in cv::MatAllocator (ignored, trait) (cv_MatAllocator_copy_const_UMatData*_UMatData*_int_const_size_t_X_const_size_t_X_const_size_t_X_const_size_t_X_const_size_t_X_bool)

--- Incoming ---
[   'cv.MatAllocator.getBufferPoolController',
    'BufferPoolController*',
    ['/C'],
    [['const char*', 'id', 'NULL', []]],
    None,
    '']
parse_name: cv.MatAllocator.getBufferPoolController with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatAllocator::getBufferPoolController namespace:cv classpath:MatAllocator classname:MatAllocator name:getBufferPoolController
Registering an unknown type: BufferPoolController
register (method) getBufferPoolController in cv::MatAllocator (ignored, trait) (cv_MatAllocator_getBufferPoolController_const_const_char_X)

--- Incoming ---
[   'enum cv.UMatData.MemoryFlag',
    '',
    [],
    [   ['const cv.UMatData.COPY_ON_MAP', '1', [], [], None, ''],
        ['const cv.UMatData.HOST_COPY_OBSOLETE', '2', [], [], None, ''],
        ['const cv.UMatData.DEVICE_COPY_OBSOLETE', '4', [], [], None, ''],
        ['const cv.UMatData.TEMP_UMAT', '8', [], [], None, ''],
        ['const cv.UMatData.TEMP_COPIED_UMAT', '24', [], [], None, ''],
        ['const cv.UMatData.USER_ALLOCATED', '32', [], [], None, ''],
        ['const cv.UMatData.DEVICE_MEM_MAPPED', '64', [], [], None, ''],
        ['const cv.UMatData.ASYNC_CLEANUP', '128', [], [], None, '']],
    None,
    '']
parse_name: const cv.UMatData.COPY_ON_MAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::COPY_ON_MAP namespace:cv classpath:UMatData classname:UMatData name:COPY_ON_MAP
parse_name: const cv.UMatData.HOST_COPY_OBSOLETE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::HOST_COPY_OBSOLETE namespace:cv classpath:UMatData classname:UMatData name:HOST_COPY_OBSOLETE
parse_name: const cv.UMatData.DEVICE_COPY_OBSOLETE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::DEVICE_COPY_OBSOLETE namespace:cv classpath:UMatData classname:UMatData name:DEVICE_COPY_OBSOLETE
parse_name: const cv.UMatData.TEMP_UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::TEMP_UMAT namespace:cv classpath:UMatData classname:UMatData name:TEMP_UMAT
parse_name: const cv.UMatData.TEMP_COPIED_UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::TEMP_COPIED_UMAT namespace:cv classpath:UMatData classname:UMatData name:TEMP_COPIED_UMAT
parse_name: const cv.UMatData.USER_ALLOCATED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::USER_ALLOCATED namespace:cv classpath:UMatData classname:UMatData name:USER_ALLOCATED
parse_name: const cv.UMatData.DEVICE_MEM_MAPPED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::DEVICE_MEM_MAPPED namespace:cv classpath:UMatData classname:UMatData name:DEVICE_MEM_MAPPED
parse_name: const cv.UMatData.ASYNC_CLEANUP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::ASYNC_CLEANUP namespace:cv classpath:UMatData classname:UMatData name:ASYNC_CLEANUP
parse_name: enum cv.UMatData.MemoryFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::MemoryFlag namespace:cv classpath:UMatData classname:UMatData name:MemoryFlag
parse_name: const cv.UMatData.COPY_ON_MAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::COPY_ON_MAP namespace:cv classpath:UMatData classname:UMatData name:COPY_ON_MAP
parse_name: const cv.UMatData.HOST_COPY_OBSOLETE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::HOST_COPY_OBSOLETE namespace:cv classpath:UMatData classname:UMatData name:HOST_COPY_OBSOLETE
parse_name: const cv.UMatData.DEVICE_COPY_OBSOLETE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::DEVICE_COPY_OBSOLETE namespace:cv classpath:UMatData classname:UMatData name:DEVICE_COPY_OBSOLETE
parse_name: const cv.UMatData.TEMP_UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::TEMP_UMAT namespace:cv classpath:UMatData classname:UMatData name:TEMP_UMAT
parse_name: const cv.UMatData.TEMP_COPIED_UMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::TEMP_COPIED_UMAT namespace:cv classpath:UMatData classname:UMatData name:TEMP_COPIED_UMAT
parse_name: const cv.UMatData.USER_ALLOCATED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::USER_ALLOCATED namespace:cv classpath:UMatData classname:UMatData name:USER_ALLOCATED
parse_name: const cv.UMatData.DEVICE_MEM_MAPPED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::DEVICE_MEM_MAPPED namespace:cv classpath:UMatData classname:UMatData name:DEVICE_MEM_MAPPED
parse_name: const cv.UMatData.ASYNC_CLEANUP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::ASYNC_CLEANUP namespace:cv classpath:UMatData classname:UMatData name:ASYNC_CLEANUP

--- Incoming ---
['struct cv.UMatData', '', [], [], None, '']
parse_name: struct cv.UMatData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData namespace:cv classpath: classname: name:UMatData
register class cv::UMatData (['struct cv.UMatData', '', [], [], None, ''])

--- Incoming ---
[   'cv.UMatData.UMatData',
    'U',
    [],
    [['const MatAllocator*', 'allocator', '', []]],
    None,
    '']
parse_name: cv.UMatData.UMatData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::UMatData namespace:cv classpath:UMatData classname:UMatData name:UMatData
register (constructor) new in cv::UMatData (cv_UMatData_UMatData_MatAllocator*)

--- Incoming ---
['cv.UMatData.~UMatData', '~', [], [], None, '']
parse_name: cv.UMatData.~UMatData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::~UMatData namespace:cv classpath:UMatData classname:UMatData name:~UMatData
ignore destructor (method) ~UMatData in cv::UMatData

--- Incoming ---
['cv.UMatData.lock', 'void', [], [], None, '']
parse_name: cv.UMatData.lock with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::lock namespace:cv classpath:UMatData classname:UMatData name:lock
register (method) lock in cv::UMatData (cv_UMatData_lock)

--- Incoming ---
['cv.UMatData.unlock', 'void', [], [], None, '']
parse_name: cv.UMatData.unlock with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::unlock namespace:cv classpath:UMatData classname:UMatData name:unlock
register (method) unlock in cv::UMatData (cv_UMatData_unlock)

--- Incoming ---
['cv.UMatData.hostCopyObsolete', 'bool', ['/C'], [], None, '']
parse_name: cv.UMatData.hostCopyObsolete with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::hostCopyObsolete namespace:cv classpath:UMatData classname:UMatData name:hostCopyObsolete
register (method) hostCopyObsolete in cv::UMatData (cv_UMatData_hostCopyObsolete_const)

--- Incoming ---
['cv.UMatData.deviceCopyObsolete', 'bool', ['/C'], [], None, '']
parse_name: cv.UMatData.deviceCopyObsolete with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::deviceCopyObsolete namespace:cv classpath:UMatData classname:UMatData name:deviceCopyObsolete
register (method) deviceCopyObsolete in cv::UMatData (cv_UMatData_deviceCopyObsolete_const)

--- Incoming ---
['cv.UMatData.deviceMemMapped', 'bool', ['/C'], [], None, '']
parse_name: cv.UMatData.deviceMemMapped with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::deviceMemMapped namespace:cv classpath:UMatData classname:UMatData name:deviceMemMapped
register (method) deviceMemMapped in cv::UMatData (cv_UMatData_deviceMemMapped_const)

--- Incoming ---
['cv.UMatData.copyOnMap', 'bool', ['/C'], [], None, '']
parse_name: cv.UMatData.copyOnMap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::copyOnMap namespace:cv classpath:UMatData classname:UMatData name:copyOnMap
register (method) copyOnMap in cv::UMatData (cv_UMatData_copyOnMap_const)

--- Incoming ---
['cv.UMatData.tempUMat', 'bool', ['/C'], [], None, '']
parse_name: cv.UMatData.tempUMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::tempUMat namespace:cv classpath:UMatData classname:UMatData name:tempUMat
register (method) tempUMat in cv::UMatData (cv_UMatData_tempUMat_const)

--- Incoming ---
['cv.UMatData.tempCopiedUMat', 'bool', ['/C'], [], None, '']
parse_name: cv.UMatData.tempCopiedUMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::tempCopiedUMat namespace:cv classpath:UMatData classname:UMatData name:tempCopiedUMat
register (method) tempCopiedUMat in cv::UMatData (cv_UMatData_tempCopiedUMat_const)

--- Incoming ---
[   'cv.UMatData.markHostCopyObsolete',
    'void',
    [],
    [['bool', 'flag', '', []]],
    None,
    '']
parse_name: cv.UMatData.markHostCopyObsolete with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::markHostCopyObsolete namespace:cv classpath:UMatData classname:UMatData name:markHostCopyObsolete
register (method) markHostCopyObsolete in cv::UMatData (cv_UMatData_markHostCopyObsolete_bool)

--- Incoming ---
[   'cv.UMatData.markDeviceCopyObsolete',
    'void',
    [],
    [['bool', 'flag', '', []]],
    None,
    '']
parse_name: cv.UMatData.markDeviceCopyObsolete with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::markDeviceCopyObsolete namespace:cv classpath:UMatData classname:UMatData name:markDeviceCopyObsolete
register (method) markDeviceCopyObsolete in cv::UMatData (cv_UMatData_markDeviceCopyObsolete_bool)

--- Incoming ---
[   'cv.UMatData.markDeviceMemMapped',
    'void',
    [],
    [['bool', 'flag', '', []]],
    None,
    '']
parse_name: cv.UMatData.markDeviceMemMapped with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMatData::markDeviceMemMapped namespace:cv classpath:UMatData classname:UMatData name:markDeviceMemMapped
register (method) markDeviceMemMapped in cv::UMatData (cv_UMatData_markDeviceMemMapped_bool)

--- Incoming ---
['struct cv.MatSize', '', [], [], None, '']
parse_name: struct cv.MatSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize namespace:cv classpath: classname: name:MatSize
register class cv::MatSize (['struct cv.MatSize', '', [], [], None, ''])

--- Incoming ---
['cv.MatSize.MatSize', 'M', ['/E'], [['int*', '_p', '', []]], None, '']
parse_name: cv.MatSize.MatSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::MatSize namespace:cv classpath:MatSize classname:MatSize name:MatSize
register (constructor) new in cv::MatSize (cv_MatSize_MatSize_int_X)

--- Incoming ---
['cv.MatSize.dims', 'int', ['/C'], [], None, '']
parse_name: cv.MatSize.dims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::dims namespace:cv classpath:MatSize classname:MatSize name:dims
register (method) dims in cv::MatSize (cv_MatSize_dims_const)

--- Incoming ---
['cv.MatSize.operator ()', 'Size', ['/C'], [], None, '']
parse_name: cv.MatSize.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::operator () namespace:cv classpath:MatSize classname:MatSize name:operator ()
ignore (method) operator () in cv::MatSize

--- Incoming ---
[   'cv.MatSize.operator[]',
    'const int&',
    ['/C'],
    [['int', 'i', '', []]],
    None,
    '']
parse_name: cv.MatSize.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::operator[] namespace:cv classpath:MatSize classname:MatSize name:operator[]
ignore (method) operator[] in cv::MatSize

--- Incoming ---
['cv.MatSize.operator[]', 'int&', [], [['int', 'i', '', []]], None, '']
parse_name: cv.MatSize.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::operator[] namespace:cv classpath:MatSize classname:MatSize name:operator[]
ignore (method) operator[] in cv::MatSize

--- Incoming ---
['cv.MatSize.operator const int*', 'operator const int*', ['/C'], [], None, '']
parse_name: cv.MatSize.operator const int* with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::operator int* namespace:cv classpath:MatSize classname:MatSize name:operator int*
Registering an unknown type: operator int
ignore (method) operator int* in cv::MatSize

--- Incoming ---
[   'cv.MatSize.operator ==',
    'bool',
    ['/C'],
    [['const MatSize&', 'sz', '', []]],
    None,
    '']
parse_name: cv.MatSize.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::operator == namespace:cv classpath:MatSize classname:MatSize name:operator ==
ignore (method) operator == in cv::MatSize

--- Incoming ---
[   'cv.MatSize.operator !=',
    'bool',
    ['/C'],
    [['const MatSize&', 'sz', '', []]],
    None,
    '']
parse_name: cv.MatSize.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatSize::operator != namespace:cv classpath:MatSize classname:MatSize name:operator !=
ignore (method) operator != in cv::MatSize

--- Incoming ---
['struct cv.MatStep', '', [], [], None, '']
parse_name: struct cv.MatStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep namespace:cv classpath: classname: name:MatStep
register class cv::MatStep (['struct cv.MatStep', '', [], [], None, ''])

--- Incoming ---
['cv.MatStep.MatStep', 'M', [], [], None, '']
parse_name: cv.MatStep.MatStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::MatStep namespace:cv classpath:MatStep classname:MatStep name:MatStep
register (constructor) default in cv::MatStep (cv_MatStep_MatStep)

--- Incoming ---
['cv.MatStep.MatStep', 'M', ['/E'], [['size_t', 's', '', []]], None, '']
parse_name: cv.MatStep.MatStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::MatStep namespace:cv classpath:MatStep classname:MatStep name:MatStep
register (constructor) new in cv::MatStep (cv_MatStep_MatStep_size_t)

--- Incoming ---
[   'cv.MatStep.operator[]',
    'const size_t&',
    ['/C'],
    [['int', 'i', '', []]],
    None,
    '']
parse_name: cv.MatStep.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::operator[] namespace:cv classpath:MatStep classname:MatStep name:operator[]
ignore (method) operator[] in cv::MatStep

--- Incoming ---
['cv.MatStep.operator[]', 'size_t&', [], [['int', 'i', '', []]], None, '']
parse_name: cv.MatStep.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::operator[] namespace:cv classpath:MatStep classname:MatStep name:operator[]
ignore (method) operator[] in cv::MatStep

--- Incoming ---
['cv.MatStep.operator size_t', '', ['/C'], [], None, '']
parse_name: cv.MatStep.operator size_t with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::operator size_t namespace:cv classpath:MatStep classname:MatStep name:operator size_t
register (convertor method) operator size_t in cv::MatStep (cv_MatStep_operator_size_t_const)

--- Incoming ---
['cv.MatStep.operator =', 'MatStep&', [], [['size_t', 's', '', []]], None, '']
parse_name: cv.MatStep.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::operator = namespace:cv classpath:MatStep classname:MatStep name:operator =
ignore (method) operator = in cv::MatStep

--- Incoming ---
[   'cv.MatStep.operator =',
    'MatStep&',
    ['/H'],
    [['const MatStep&', '', '', []]],
    None,
    '']
parse_name: cv.MatStep.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatStep::operator = namespace:cv classpath:MatStep classname:MatStep name:operator =
ignore (method) operator = in cv::MatStep

--- Incoming ---
[   'class cv.Mat',
    '',
    [],
    [   ['int', 'flags', '', []],
        ['int', 'dims', 'the matrix dimensionality, >= 2', []],
        [   'int',
            'rows',
            'the number of rows and columns or (-1, -1) when the matrix has '
            'more than 2 dimensions',
            []],
        [   'int',
            'cols',
            'the number of rows and columns or (-1, -1) when the matrix has '
            'more than 2 dimensions',
            []],
        ['uchar*', 'data', 'pointer to the data', []],
        [   'uchar*',
            'datastart',
            'helper fields used in locateROI and adjustROI',
            ['/C']],
        ['uchar*', 'dataend', '', ['/C']],
        ['uchar*', 'datalimit', '', ['/C']],
        ['MatAllocator*', 'allocator', 'custom allocator', []],
        ['UMatData*', 'u', 'interaction with UMat', []],
        ['MatSize', 'size', '', []],
        ['MatStep', 'step', '', []]],
    None,
    '@brief n-dimensional dense array class \\anchor CVMat_Details\n'
    '\n'
    'The class Mat represents an n-dimensional dense numerical single-channel '
    'or multi-channel array. It\n'
    'can be used to store real or complex-valued vectors and matrices, '
    'grayscale or color images, voxel\n'
    'volumes, vector fields, point clouds, tensors, histograms (though, very '
    'high-dimensional histograms\n'
    'may be better stored in a SparseMat ). The data layout of the array `M` '
    'is defined by the array\n'
    '`M.step[]`, so that the address of element '
    '\\f$(i_0,...,i_{M.dims-1})\\f$, where \\f$0\\leq i_k<M.size[k]\\f$, is\n'
    'computed as:\n'
    '\\f[addr(M_{i_0,...,i_{M.dims-1}}) = M.data + M.step[0]*i_0 + '
    'M.step[1]*i_1 + ... + M.step[M.dims-1]*i_{M.dims-1}\\f]\n'
    'In case of a 2-dimensional array, the above formula is reduced to:\n'
    '\\f[addr(M_{i,j}) = M.data + M.step[0]*i + M.step[1]*j\\f]\n'
    'Note that `M.step[i] >= M.step[i+1]` (in fact, `M.step[i] >= '
    'M.step[i+1]*M.size[i+1]` ). This means\n'
    'that 2-dimensional matrices are stored row-by-row, 3-dimensional matrices '
    'are stored plane-by-plane,\n'
    'and so on. M.step[M.dims-1] is minimal and always equal to the element '
    'size M.elemSize() .\n'
    '\n'
    'So, the data layout in Mat is compatible with the majority of dense array '
    'types from the standard\n'
    'toolkits and SDKs, such as Numpy (ndarray), Win32 (independent device '
    'bitmaps), and others,\n'
    'that is, with any array that uses *steps* (or *strides*) to compute the '
    'position of a pixel.\n'
    'Due to this compatibility, it is possible to make a Mat header for '
    'user-allocated data and process\n'
    'it in-place using OpenCV functions.\n'
    '\n'
    'There are many different ways to create a Mat object. The most popular '
    'options are listed below:\n'
    '\n'
    '- Use the create(nrows, ncols, type) method or the similar Mat(nrows, '
    'ncols, type[, fillValue])\n'
    'constructor. A new array of the specified size and type is allocated. '
    'type has the same meaning as\n'
    'in the cvCreateMat method. For example, CV_8UC1 means a 8-bit '
    'single-channel array, CV_32FC2\n'
    'means a 2-channel (complex) floating-point array, and so on.\n'
    '@code\n'
    '// make a 7x7 complex matrix filled with 1+3j.\n'
    'Mat M(7,7,CV_32FC2,Scalar(1,3));\n'
    '// and now turn M to a 100x60 15-channel 8-bit matrix.\n'
    '// The old content will be deallocated\n'
    'M.create(100,60,CV_8UC(15));\n'
    '@endcode\n'
    'As noted in the introduction to this chapter, create() allocates only a '
    'new array when the shape\n'
    'or type of the current array are different from the specified ones.\n'
    '\n'
    '- Create a multi-dimensional array:\n'
    '@code\n'
    '// create a 100x100x100 8-bit array\n'
    'int sz[] = {100, 100, 100};\n'
    'Mat bigCube(3, sz, CV_8U, Scalar::all(0));\n'
    '@endcode\n'
    'It passes the number of dimensions =1 to the Mat constructor but the '
    'created array will be\n'
    '2-dimensional with the number of columns set to 1. So, Mat::dims is '
    'always \\>= 2 (can also be 0\n'
    'when the array is empty).\n'
    '\n'
    '- Use a copy constructor or assignment operator where there can be an '
    'array or expression on the\n'
    'right side (see below). As noted in the introduction, the array '
    'assignment is an O(1) operation\n'
    'because it only copies the header and increases the reference counter. '
    'The Mat::clone() method can\n'
    'be used to get a full (deep) copy of the array when you need it.\n'
    '\n'
    '- Construct a header for a part of another array. It can be a single row, '
    'single column, several\n'
    'rows, several columns, rectangular region in the array (called a *minor* '
    'in algebra) or a\n'
    'diagonal. Such operations are also O(1) because the new header references '
    'the same data. You can\n'
    'actually modify a part of the array using this feature, for example:\n'
    '@code\n'
    '// add the 5-th row, multiplied by 3 to the 3rd row\n'
    'M.row(3) = M.row(3) + M.row(5)*3;\n'
    '// now copy the 7-th column to the 1-st column\n'
    '// M.col(1) = M.col(7); // this will not work\n'
    'Mat M1 = M.col(1);\n'
    'M.col(7).copyTo(M1);\n'
    '// create a new 320x240 image\n'
    'Mat img(Size(320,240),CV_8UC3);\n'
    '// select a ROI\n'
    'Mat roi(img, Rect(10,10,100,100));\n'
    '// fill the ROI with (0,255,0) (which is green in RGB space);\n'
    '// the original 320x240 image will be modified\n'
    'roi = Scalar(0,255,0);\n'
    '@endcode\n'
    'Due to the additional datastart and dataend members, it is possible to '
    'compute a relative\n'
    'sub-array position in the main *container* array using locateROI():\n'
    '@code\n'
    'Mat A = Mat::eye(10, 10, CV_32S);\n'
    '// extracts A columns, 1 (inclusive) to 3 (exclusive).\n'
    'Mat B = A(Range::all(), Range(1, 3));\n'
    '// extracts B rows, 5 (inclusive) to 9 (exclusive).\n'
    '// that is, C \\~ A(Range(5, 9), Range(1, 3))\n'
    'Mat C = B(Range(5, 9), Range::all());\n'
    'Size size; Point ofs;\n'
    'C.locateROI(size, ofs);\n'
    '// size will be (width=10,height=10) and the ofs will be (x=1, y=5)\n'
    '@endcode\n'
    'As in case of whole matrices, if you need a deep copy, use the `clone()` '
    'method of the extracted\n'
    'sub-matrices.\n'
    '\n'
    '- Make a header for user-allocated data. It can be useful to do the '
    'following:\n'
    '-# Process "foreign" data using OpenCV (for example, when you implement a '
    'DirectShow\\* filter or\n'
    'a processing module for gstreamer, and so on). For example:\n'
    '@code\n'
    'void process_video_frame(const unsigned char* pixels,\n'
    'int width, int height, int step)\n'
    '{\n'
    'Mat img(height, width, CV_8UC3, pixels, step);\n'
    'GaussianBlur(img, img, Size(7,7), 1.5, 1.5);\n'
    '}\n'
    '@endcode\n'
    '-# Quickly initialize small matrices and/or get a super-fast element '
    'access.\n'
    '@code\n'
    'double m[3][3] = {{a, b, c}, {d, e, f}, {g, h, i}};\n'
    'Mat M = Mat(3, 3, CV_64F, m).inv();\n'
    '@endcode\n'
    '.\n'
    '\n'
    '- Use MATLAB-style array initializers, zeros(), ones(), eye(), for '
    'example:\n'
    '@code\n'
    '// create a double-precision identity matrix and add it to M.\n'
    'M += Mat::eye(M.rows, M.cols, CV_64F);\n'
    '@endcode\n'
    '\n'
    '- Use a comma-separated initializer:\n'
    '@code\n'
    '// create a 3x3 double-precision identity matrix\n'
    'Mat M = (Mat_<double>(3,3) << 1, 0, 0, 0, 1, 0, 0, 0, 1);\n'
    '@endcode\n'
    'With this approach, you first call a constructor of the Mat class with '
    'the proper parameters, and\n'
    'then you just put `<< operator` followed by comma-separated values that '
    'can be constants,\n'
    'variables, expressions, and so on. Also, note the extra parentheses '
    'required to avoid compilation\n'
    'errors.\n'
    '\n'
    'Once the array is created, it is automatically managed via a '
    'reference-counting mechanism. If the\n'
    'array header is built on top of user-allocated data, you should handle '
    'the data by yourself. The\n'
    'array data is deallocated when no one points to it. If you want to '
    'release the data pointed by a\n'
    'array header before the array destructor is called, use Mat::release().\n'
    '\n'
    'The next important thing to learn about the array class is element '
    'access. This manual already\n'
    'described how to compute an address of each array element. Normally, you '
    'are not required to use the\n'
    'formula directly in the code. If you know the array element type (which '
    'can be retrieved using the\n'
    'method Mat::type() ), you can access the element \\f$M_{ij}\\f$ of a '
    '2-dimensional array as:\n'
    '@code\n'
    'M.at<double>(i,j) += 1.f;\n'
    '@endcode\n'
    'assuming that `M` is a double-precision floating-point array. There are '
    'several variants of the method\n'
    'at for a different number of dimensions.\n'
    '\n'
    'If you need to process a whole row of a 2D array, the most efficient way '
    'is to get the pointer to\n'
    'the row first, and then just use the plain C operator [] :\n'
    '@code\n'
    '// compute sum of positive matrix elements\n'
    '// (assuming that M is a double-precision matrix)\n'
    'double sum=0;\n'
    'for(int i = 0; i < M.rows; i++)\n'
    '{\n'
    'const double* Mi = M.ptr<double>(i);\n'
    'for(int j = 0; j < M.cols; j++)\n'
    'sum += std::max(Mi[j], 0.);\n'
    '}\n'
    '@endcode\n'
    'Some operations, like the one above, do not actually depend on the array '
    'shape. They just process\n'
    'elements of an array one by one (or elements from multiple arrays that '
    'have the same coordinates,\n'
    'for example, array addition). Such operations are called *element-wise*. '
    'It makes sense to check\n'
    'whether all the input/output arrays are continuous, namely, have no gaps '
    'at the end of each row. If\n'
    'yes, process them as a long single row:\n'
    '@code\n'
    '// compute the sum of positive matrix elements, optimized variant\n'
    'double sum=0;\n'
    'int cols = M.cols, rows = M.rows;\n'
    'if(M.isContinuous())\n'
    '{\n'
    'cols *= rows;\n'
    'rows = 1;\n'
    '}\n'
    'for(int i = 0; i < rows; i++)\n'
    '{\n'
    'const double* Mi = M.ptr<double>(i);\n'
    'for(int j = 0; j < cols; j++)\n'
    'sum += std::max(Mi[j], 0.);\n'
    '}\n'
    '@endcode\n'
    'In case of the continuous matrix, the outer loop body is executed just '
    'once. So, the overhead is\n'
    'smaller, which is especially noticeable in case of small matrices.\n'
    '\n'
    'Finally, there are STL-style iterators that are smart enough to skip gaps '
    'between successive rows:\n'
    '@code\n'
    '// compute sum of positive matrix elements, iterator-based variant\n'
    'double sum=0;\n'
    'MatConstIterator_<double> it = M.begin<double>(), it_end = '
    'M.end<double>();\n'
    'for(; it != it_end; ++it)\n'
    'sum += std::max(*it, 0.);\n'
    '@endcode\n'
    'The matrix iterators are random-access iterators, so they can be passed '
    'to any STL algorithm,\n'
    'including std::sort().\n'
    '\n'
    '@note Matrix Expressions and arithmetic see MatExpr']
parse_name: class cv.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (['class cv.Mat', '', [], [['int', 'flags', '', []], ['int', 'dims', 'the matrix dimensionality, >= 2', []], ['int', 'rows', 'the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions', []], ['int', 'cols', 'the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions', []], ['uchar*', 'data', 'pointer to the data', []], ['uchar*', 'datastart', 'helper fields used in locateROI and adjustROI', ['/C']], ['uchar*', 'dataend', '', ['/C']], ['uchar*', 'datalimit', '', ['/C']], ['MatAllocator*', 'allocator', 'custom allocator', []], ['UMatData*', 'u', 'interaction with UMat', []], ['MatSize', 'size', '', []], ['MatStep', 'step', '', []]], None, '@brief n-dimensional dense array class \\anchor CVMat_Details\n\nThe class Mat represents an n-dimensional dense numerical single-channel or multi-channel array. It\ncan be used to store real or complex-valued vectors and matrices, grayscale or color images, voxel\nvolumes, vector fields, point clouds, tensors, histograms (though, very high-dimensional histograms\nmay be better stored in a SparseMat ). The data layout of the array `M` is defined by the array\n`M.step[]`, so that the address of element \\f$(i_0,...,i_{M.dims-1})\\f$, where \\f$0\\leq i_k<M.size[k]\\f$, is\ncomputed as:\n\\f[addr(M_{i_0,...,i_{M.dims-1}}) = M.data + M.step[0]*i_0 + M.step[1]*i_1 + ... + M.step[M.dims-1]*i_{M.dims-1}\\f]\nIn case of a 2-dimensional array, the above formula is reduced to:\n\\f[addr(M_{i,j}) = M.data + M.step[0]*i + M.step[1]*j\\f]\nNote that `M.step[i] >= M.step[i+1]` (in fact, `M.step[i] >= M.step[i+1]*M.size[i+1]` ). This means\nthat 2-dimensional matrices are stored row-by-row, 3-dimensional matrices are stored plane-by-plane,\nand so on. M.step[M.dims-1] is minimal and always equal to the element size M.elemSize() .\n\nSo, the data layout in Mat is compatible with the majority of dense array types from the standard\ntoolkits and SDKs, such as Numpy (ndarray), Win32 (independent device bitmaps), and others,\nthat is, with any array that uses *steps* (or *strides*) to compute the position of a pixel.\nDue to this compatibility, it is possible to make a Mat header for user-allocated data and process\nit in-place using OpenCV functions.\n\nThere are many different ways to create a Mat object. The most popular options are listed below:\n\n- Use the create(nrows, ncols, type) method or the similar Mat(nrows, ncols, type[, fillValue])\nconstructor. A new array of the specified size and type is allocated. type has the same meaning as\nin the cvCreateMat method. For example, CV_8UC1 means a 8-bit single-channel array, CV_32FC2\nmeans a 2-channel (complex) floating-point array, and so on.\n@code\n// make a 7x7 complex matrix filled with 1+3j.\nMat M(7,7,CV_32FC2,Scalar(1,3));\n// and now turn M to a 100x60 15-channel 8-bit matrix.\n// The old content will be deallocated\nM.create(100,60,CV_8UC(15));\n@endcode\nAs noted in the introduction to this chapter, create() allocates only a new array when the shape\nor type of the current array are different from the specified ones.\n\n- Create a multi-dimensional array:\n@code\n// create a 100x100x100 8-bit array\nint sz[] = {100, 100, 100};\nMat bigCube(3, sz, CV_8U, Scalar::all(0));\n@endcode\nIt passes the number of dimensions =1 to the Mat constructor but the created array will be\n2-dimensional with the number of columns set to 1. So, Mat::dims is always \\>= 2 (can also be 0\nwhen the array is empty).\n\n- Use a copy constructor or assignment operator where there can be an array or expression on the\nright side (see below). As noted in the introduction, the array assignment is an O(1) operation\nbecause it only copies the header and increases the reference counter. The Mat::clone() method can\nbe used to get a full (deep) copy of the array when you need it.\n\n- Construct a header for a part of another array. It can be a single row, single column, several\nrows, several columns, rectangular region in the array (called a *minor* in algebra) or a\ndiagonal. Such operations are also O(1) because the new header references the same data. You can\nactually modify a part of the array using this feature, for example:\n@code\n// add the 5-th row, multiplied by 3 to the 3rd row\nM.row(3) = M.row(3) + M.row(5)*3;\n// now copy the 7-th column to the 1-st column\n// M.col(1) = M.col(7); // this will not work\nMat M1 = M.col(1);\nM.col(7).copyTo(M1);\n// create a new 320x240 image\nMat img(Size(320,240),CV_8UC3);\n// select a ROI\nMat roi(img, Rect(10,10,100,100));\n// fill the ROI with (0,255,0) (which is green in RGB space);\n// the original 320x240 image will be modified\nroi = Scalar(0,255,0);\n@endcode\nDue to the additional datastart and dataend members, it is possible to compute a relative\nsub-array position in the main *container* array using locateROI():\n@code\nMat A = Mat::eye(10, 10, CV_32S);\n// extracts A columns, 1 (inclusive) to 3 (exclusive).\nMat B = A(Range::all(), Range(1, 3));\n// extracts B rows, 5 (inclusive) to 9 (exclusive).\n// that is, C \\~ A(Range(5, 9), Range(1, 3))\nMat C = B(Range(5, 9), Range::all());\nSize size; Point ofs;\nC.locateROI(size, ofs);\n// size will be (width=10,height=10) and the ofs will be (x=1, y=5)\n@endcode\nAs in case of whole matrices, if you need a deep copy, use the `clone()` method of the extracted\nsub-matrices.\n\n- Make a header for user-allocated data. It can be useful to do the following:\n-# Process "foreign" data using OpenCV (for example, when you implement a DirectShow\\* filter or\na processing module for gstreamer, and so on). For example:\n@code\nvoid process_video_frame(const unsigned char* pixels,\nint width, int height, int step)\n{\nMat img(height, width, CV_8UC3, pixels, step);\nGaussianBlur(img, img, Size(7,7), 1.5, 1.5);\n}\n@endcode\n-# Quickly initialize small matrices and/or get a super-fast element access.\n@code\ndouble m[3][3] = {{a, b, c}, {d, e, f}, {g, h, i}};\nMat M = Mat(3, 3, CV_64F, m).inv();\n@endcode\n.\n\n- Use MATLAB-style array initializers, zeros(), ones(), eye(), for example:\n@code\n// create a double-precision identity matrix and add it to M.\nM += Mat::eye(M.rows, M.cols, CV_64F);\n@endcode\n\n- Use a comma-separated initializer:\n@code\n// create a 3x3 double-precision identity matrix\nMat M = (Mat_<double>(3,3) << 1, 0, 0, 0, 1, 0, 0, 0, 1);\n@endcode\nWith this approach, you first call a constructor of the Mat class with the proper parameters, and\nthen you just put `<< operator` followed by comma-separated values that can be constants,\nvariables, expressions, and so on. Also, note the extra parentheses required to avoid compilation\nerrors.\n\nOnce the array is created, it is automatically managed via a reference-counting mechanism. If the\narray header is built on top of user-allocated data, you should handle the data by yourself. The\narray data is deallocated when no one points to it. If you want to release the data pointed by a\narray header before the array destructor is called, use Mat::release().\n\nThe next important thing to learn about the array class is element access. This manual already\ndescribed how to compute an address of each array element. Normally, you are not required to use the\nformula directly in the code. If you know the array element type (which can be retrieved using the\nmethod Mat::type() ), you can access the element \\f$M_{ij}\\f$ of a 2-dimensional array as:\n@code\nM.at<double>(i,j) += 1.f;\n@endcode\nassuming that `M` is a double-precision floating-point array. There are several variants of the method\nat for a different number of dimensions.\n\nIf you need to process a whole row of a 2D array, the most efficient way is to get the pointer to\nthe row first, and then just use the plain C operator [] :\n@code\n// compute sum of positive matrix elements\n// (assuming that M is a double-precision matrix)\ndouble sum=0;\nfor(int i = 0; i < M.rows; i++)\n{\nconst double* Mi = M.ptr<double>(i);\nfor(int j = 0; j < M.cols; j++)\nsum += std::max(Mi[j], 0.);\n}\n@endcode\nSome operations, like the one above, do not actually depend on the array shape. They just process\nelements of an array one by one (or elements from multiple arrays that have the same coordinates,\nfor example, array addition). Such operations are called *element-wise*. It makes sense to check\nwhether all the input/output arrays are continuous, namely, have no gaps at the end of each row. If\nyes, process them as a long single row:\n@code\n// compute the sum of positive matrix elements, optimized variant\ndouble sum=0;\nint cols = M.cols, rows = M.rows;\nif(M.isContinuous())\n{\ncols *= rows;\nrows = 1;\n}\nfor(int i = 0; i < rows; i++)\n{\nconst double* Mi = M.ptr<double>(i);\nfor(int j = 0; j < cols; j++)\nsum += std::max(Mi[j], 0.);\n}\n@endcode\nIn case of the continuous matrix, the outer loop body is executed just once. So, the overhead is\nsmaller, which is especially noticeable in case of small matrices.\n\nFinally, there are STL-style iterators that are smart enough to skip gaps between successive rows:\n@code\n// compute sum of positive matrix elements, iterator-based variant\ndouble sum=0;\nMatConstIterator_<double> it = M.begin<double>(), it_end = M.end<double>();\nfor(; it != it_end; ++it)\nsum += std::max(*it, 0.);\n@endcode\nThe matrix iterators are random-access iterators, so they can be passed to any STL algorithm,\nincluding std::sort().\n\n@note Matrix Expressions and arithmetic see MatExpr'])
parse_name: cv.Mat.flags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::flags namespace:cv classpath:Mat classname:Mat name:flags
register (method) flags in cv::Mat (cv_Mat_flags_const)
parse_name: cv.Mat.dims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::dims namespace:cv classpath:Mat classname:Mat name:dims
register (method) dims in cv::Mat (cv_Mat_dims_const)
parse_name: cv.Mat.rows with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::rows namespace:cv classpath:Mat classname:Mat name:rows
register (method) rows in cv::Mat (cv_Mat_rows_const)
parse_name: cv.Mat.cols with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::cols namespace:cv classpath:Mat classname:Mat name:cols
register (method) cols in cv::Mat (cv_Mat_cols_const)
parse_name: cv.Mat.data with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::data namespace:cv classpath:Mat classname:Mat name:data
register (method) data in cv::Mat (cv_Mat_data)
parse_name: cv.Mat.set_data with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::set_data namespace:cv classpath:Mat classname:Mat name:set_data
register (method) set_data in cv::Mat (cv_Mat_set_data_uchar_X)
parse_name: cv.Mat.datastart with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::datastart namespace:cv classpath:Mat classname:Mat name:datastart
register (method) datastart in cv::Mat (cv_Mat_datastart_const)
parse_name: cv.Mat.dataend with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::dataend namespace:cv classpath:Mat classname:Mat name:dataend
register (method) dataend in cv::Mat (cv_Mat_dataend_const)
parse_name: cv.Mat.datalimit with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::datalimit namespace:cv classpath:Mat classname:Mat name:datalimit
register (method) datalimit in cv::Mat (cv_Mat_datalimit_const)
parse_name: cv.Mat.allocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::allocator namespace:cv classpath:Mat classname:Mat name:allocator
register (method) allocator in cv::Mat (cv_Mat_allocator)
parse_name: cv.Mat.u with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::u namespace:cv classpath:Mat classname:Mat name:u
register (method) u in cv::Mat (cv_Mat_u)
parse_name: cv.Mat.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::size namespace:cv classpath:Mat classname:Mat name:size
register (method) size in cv::Mat (cv_Mat_size_const)
parse_name: cv.Mat.set_size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::set_size namespace:cv classpath:Mat classname:Mat name:set_size
register (method) set_size in cv::Mat (cv_Mat_set_size_MatSize)
parse_name: cv.Mat.step with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::step namespace:cv classpath:Mat classname:Mat name:step
register (method) step in cv::Mat (cv_Mat_step_const)
parse_name: cv.Mat.set_step with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::set_step namespace:cv classpath:Mat classname:Mat name:set_step
register (method) set_step in cv::Mat (cv_Mat_set_step_MatStep)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [],
    None,
    'These are various constructors that form a matrix. As noted in the '
    'AutomaticAllocation, often\n'
    'the default constructor is enough, and the proper matrix will be '
    'allocated by an OpenCV function.\n'
    'The constructed matrix can further be assigned to another matrix or '
    'matrix expression or can be\n'
    'allocated with Mat::create . In the former case, the old content is '
    'de-referenced.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) default in cv::Mat (cv_Mat_Mat)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param rows Number of rows in a 2D array.\n'
    '@param cols Number of columns in a 2D array.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_int_int_int)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param size 2D array size: Size(cols, rows) . In the Size() constructor, '
    'the number of rows and the\n'
    'number of columns go in the reverse order.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Size_int)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []]],
    None,
    '@overload\n'
    '@param rows Number of rows in a 2D array.\n'
    '@param cols Number of columns in a 2D array.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param s An optional value to initialize each matrix element with. To set '
    'all the matrix elements to\n'
    'the particular value after the construction, use the assignment operator\n'
    'Mat::operator=(const Scalar& value) .']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_int_int_int_Scalar)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['Size', 'size', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []]],
    None,
    '@overload\n'
    '@param size 2D array size: Size(cols, rows) . In the Size() constructor, '
    'the number of rows and the\n'
    'number of columns go in the reverse order.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param s An optional value to initialize each matrix element with. To set '
    'all the matrix elements to\n'
    'the particular value after the construction, use the assignment operator\n'
    'Mat::operator=(const Scalar& value) .']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Size_int_Scalar)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param ndims Array dimensionality.\n'
    '@param sizes Array of integers specifying an n-dimensional array shape.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_int_const_int_X_int)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [['const std::vector<int>&', 'sizes', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param sizes Array of integers specifying an n-dimensional array shape.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_VectorOfint_int)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []]],
    None,
    '@overload\n'
    '@param ndims Array dimensionality.\n'
    '@param sizes Array of integers specifying an n-dimensional array shape.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param s An optional value to initialize each matrix element with. To set '
    'all the matrix elements to\n'
    'the particular value after the construction, use the assignment operator\n'
    'Mat::operator=(const Scalar& value) .']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_int_const_int_X_int_Scalar)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['const std::vector<int>&', 'sizes', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []]],
    None,
    '@overload\n'
    '@param sizes Array of integers specifying an n-dimensional array shape.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param s An optional value to initialize each matrix element with. To set '
    'all the matrix elements to\n'
    'the particular value after the construction, use the assignment operator\n'
    'Mat::operator=(const Scalar& value) .']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_VectorOfint_int_Scalar)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    '@overload\n'
    '@param m Array that (as a whole or partly) is assigned to the constructed '
    'matrix. No data is copied\n'
    'by these constructors. Instead, the header pointing to m data or its '
    'sub-array is constructed and\n'
    'associated with it. The reference counter, if any, is incremented. So, '
    'when you modify the matrix\n'
    'formed using such a constructor, you also modify the corresponding '
    'elements of m . If you want to\n'
    'have an independent copy of the sub-array, use Mat::clone() .']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) copy in cv::Mat (cv_Mat_Mat_Mat)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['void*', 'data', '', []],
        ['size_t', 'step', 'AUTO_STEP', []]],
    None,
    '@overload\n'
    '@param rows Number of rows in a 2D array.\n'
    '@param cols Number of columns in a 2D array.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param data Pointer to the user data. Matrix constructors that take data '
    'and step parameters do not\n'
    'allocate matrix data. Instead, they just initialize the matrix header '
    'that points to the specified\n'
    'data, which means that no data is copied. This operation is very '
    'efficient and can be used to\n'
    'process external data using OpenCV functions. The external data is not '
    'automatically deallocated, so\n'
    'you should take care of it.\n'
    '@param step Number of bytes each matrix row occupies. The value should '
    'include the padding bytes at\n'
    'the end of each row, if any. If the parameter is missing (set to '
    'AUTO_STEP ), no padding is assumed\n'
    'and the actual step is calculated as cols*elemSize(). See Mat::elemSize.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_int_int_int_void_X_size_t)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['Size', 'size', '', []],
        ['int', 'type', '', []],
        ['void*', 'data', '', []],
        ['size_t', 'step', 'AUTO_STEP', []]],
    None,
    '@overload\n'
    '@param size 2D array size: Size(cols, rows) . In the Size() constructor, '
    'the number of rows and the\n'
    'number of columns go in the reverse order.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param data Pointer to the user data. Matrix constructors that take data '
    'and step parameters do not\n'
    'allocate matrix data. Instead, they just initialize the matrix header '
    'that points to the specified\n'
    'data, which means that no data is copied. This operation is very '
    'efficient and can be used to\n'
    'process external data using OpenCV functions. The external data is not '
    'automatically deallocated, so\n'
    'you should take care of it.\n'
    '@param step Number of bytes each matrix row occupies. The value should '
    'include the padding bytes at\n'
    'the end of each row, if any. If the parameter is missing (set to '
    'AUTO_STEP ), no padding is assumed\n'
    'and the actual step is calculated as cols*elemSize(). See Mat::elemSize.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Size_int_void_X_size_t)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []],
        ['void*', 'data', '', []],
        ['const size_t*', 'steps', '0', []]],
    None,
    '@overload\n'
    '@param ndims Array dimensionality.\n'
    '@param sizes Array of integers specifying an n-dimensional array shape.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param data Pointer to the user data. Matrix constructors that take data '
    'and step parameters do not\n'
    'allocate matrix data. Instead, they just initialize the matrix header '
    'that points to the specified\n'
    'data, which means that no data is copied. This operation is very '
    'efficient and can be used to\n'
    'process external data using OpenCV functions. The external data is not '
    'automatically deallocated, so\n'
    'you should take care of it.\n'
    '@param steps Array of ndims-1 steps in case of a multi-dimensional array '
    '(the last step is always\n'
    'set to the element size). If not specified, the matrix is assumed to be '
    'continuous.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_int_const_int_X_int_void_X_const_size_t_X)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['const std::vector<int>&', 'sizes', '', []],
        ['int', 'type', '', []],
        ['void*', 'data', '', []],
        ['const size_t*', 'steps', '0', []]],
    None,
    '@overload\n'
    '@param sizes Array of integers specifying an n-dimensional array shape.\n'
    '@param type Array type. Use CV_8UC1, ..., CV_64FC4 to create 1-4 channel '
    'matrices, or\n'
    'CV_8UC(n), ..., CV_64FC(n) to create multi-channel (up to CV_CN_MAX '
    'channels) matrices.\n'
    '@param data Pointer to the user data. Matrix constructors that take data '
    'and step parameters do not\n'
    'allocate matrix data. Instead, they just initialize the matrix header '
    'that points to the specified\n'
    'data, which means that no data is copied. This operation is very '
    'efficient and can be used to\n'
    'process external data using OpenCV functions. The external data is not '
    'automatically deallocated, so\n'
    'you should take care of it.\n'
    '@param steps Array of ndims-1 steps in case of a multi-dimensional array '
    '(the last step is always\n'
    'set to the element size). If not specified, the matrix is assumed to be '
    'continuous.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_VectorOfint_int_void_X_const_size_t_X)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['const Mat&', 'm', '', []],
        ['const Range&', 'rowRange', '', []],
        ['const Range&', 'colRange', 'Range::all()', []]],
    None,
    '@overload\n'
    '@param m Array that (as a whole or partly) is assigned to the constructed '
    'matrix. No data is copied\n'
    'by these constructors. Instead, the header pointing to m data or its '
    'sub-array is constructed and\n'
    'associated with it. The reference counter, if any, is incremented. So, '
    'when you modify the matrix\n'
    'formed using such a constructor, you also modify the corresponding '
    'elements of m . If you want to\n'
    'have an independent copy of the sub-array, use Mat::clone() .\n'
    '@param rowRange Range of the m rows to take. As usual, the range start is '
    'inclusive and the range\n'
    'end is exclusive. Use Range::all() to take all the rows.\n'
    '@param colRange Range of the m columns to take. Use Range::all() to take '
    'all the columns.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Mat_Range_Range)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [['const Mat&', 'm', '', []], ['const Rect&', 'roi', '', []]],
    None,
    '@overload\n'
    '@param m Array that (as a whole or partly) is assigned to the constructed '
    'matrix. No data is copied\n'
    'by these constructors. Instead, the header pointing to m data or its '
    'sub-array is constructed and\n'
    'associated with it. The reference counter, if any, is incremented. So, '
    'when you modify the matrix\n'
    'formed using such a constructor, you also modify the corresponding '
    'elements of m . If you want to\n'
    'have an independent copy of the sub-array, use Mat::clone() .\n'
    '@param roi Region of interest.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Mat_Rect)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [['const Mat&', 'm', '', []], ['const Range*', 'ranges', '', []]],
    None,
    '@overload\n'
    '@param m Array that (as a whole or partly) is assigned to the constructed '
    'matrix. No data is copied\n'
    'by these constructors. Instead, the header pointing to m data or its '
    'sub-array is constructed and\n'
    'associated with it. The reference counter, if any, is incremented. So, '
    'when you modify the matrix\n'
    'formed using such a constructor, you also modify the corresponding '
    'elements of m . If you want to\n'
    'have an independent copy of the sub-array, use Mat::clone() .\n'
    '@param ranges Array of selected ranges of m along each dimensionality.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Mat_const_Range)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    [],
    [   ['const Mat&', 'm', '', []],
        ['const std::vector<Range>&', 'ranges', '', []]],
    None,
    '@overload\n'
    '@param m Array that (as a whole or partly) is assigned to the constructed '
    'matrix. No data is copied\n'
    'by these constructors. Instead, the header pointing to m data or its '
    'sub-array is constructed and\n'
    'associated with it. The reference counter, if any, is incremented. So, '
    'when you modify the matrix\n'
    'formed using such a constructor, you also modify the corresponding '
    'elements of m . If you want to\n'
    'have an independent copy of the sub-array, use Mat::clone() .\n'
    '@param ranges Array of selected ranges of m along each dimensionality.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Mat_VectorOfRange)

--- Incoming ---
[   'cv.Mat.Mat',
    'template<typename _Tp> explicit',
    [],
    [   ['const std::vector<_Tp>&', 'vec', '', []],
        ['bool', 'copyData', 'false', []]],
    None,
    '@overload\n'
    '@param vec STL vector whose elements form the matrix. The matrix has a '
    'single column and the number\n'
    'of rows equal to the number of vector elements. Type of the matrix '
    'matches the type of vector\n'
    'elements. The constructor can handle arbitrary types, for which there is '
    'a properly declared\n'
    'DataType . This means that the vector elements must be primitive numbers '
    'or uni-type numerical\n'
    'tuples of numbers. Mixed-type structures are not supported. The '
    'corresponding constructor is\n'
    'explicit. Since STL vectors are not automatically converted to Mat '
    'instances, you should write\n'
    'Mat(vec) explicitly. Unless you copy the data into the matrix ( '
    'copyData=true ), no new elements\n'
    'will be added to the vector because it can potentially yield vector data '
    'reallocation, and, thus,\n'
    'the matrix data pointer will be invalid.\n'
    '@param copyData Flag to specify whether the underlying data of the STL '
    'vector should be copied\n'
    'to (true) or shared with (false) the newly constructed matrix. When the '
    'data is copied, the\n'
    'allocated buffer is managed using Mat reference counting mechanism. While '
    'the data is shared,\n'
    'the reference counter is NULL, and you should not deallocate the data '
    'until the matrix is not\n'
    'destructed.']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_std_vector<_Tp>_bool)

--- Incoming ---
[   'cv.Mat.Mat',
    'template<typename _Tp> explicit',
    [],
    [['const Point_<_Tp>&', 'pt', '', []], ['bool', 'copyData', 'true', []]],
    None,
    '@overload']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Point_<_Tp>_bool)

--- Incoming ---
[   'cv.Mat.Mat',
    'template<typename _Tp> explicit',
    [],
    [['const Point3_<_Tp>&', 'pt', '', []], ['bool', 'copyData', 'true', []]],
    None,
    '@overload']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) new in cv::Mat (cv_Mat_Mat_Point3_<_Tp>_bool)

--- Incoming ---
[   'cv.Mat.Mat',
    'template<typename _Tp> explicit',
    [],
    [['const MatCommaInitializer_<_Tp>&', 'commaInitializer', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
Registering an unknown type: MatCommaInitializer_<_Tp>
register (constructor) new in cv::Mat (cv_Mat_Mat_MatCommaInitializer_<_Tp>)

--- Incoming ---
[   'cv.Mat.Mat',
    'M',
    ['/E'],
    [['const cuda::GpuMat&', 'm', '', []]],
    None,
    'download data from GpuMat']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
register (constructor) copy in cv::Mat (cv_Mat_Mat_cuda_GpuMat)

--- Incoming ---
['cv.Mat.~Mat', '~', [], [], None, 'destructor - calls release()']
parse_name: cv.Mat.~Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::~Mat namespace:cv classpath:Mat classname:Mat name:~Mat
ignore destructor (method) ~Mat in cv::Mat

--- Incoming ---
[   'cv.Mat.operator =',
    'Mat&',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    '@brief assignment operators\n'
    '\n'
    'These are available assignment operators. Since they all are very '
    'different, make sure to read the\n'
    'operator parameters description.\n'
    '@param m Assigned, right-hand-side matrix. Matrix assignment is an O(1) '
    'operation. This means that\n'
    'no data is copied but the data is shared and the reference counter, if '
    'any, is incremented. Before\n'
    'assigning new data, the old data is de-referenced via Mat::release .']
parse_name: cv.Mat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator = namespace:cv classpath:Mat classname:Mat name:operator =
ignore (method) operator = in cv::Mat

--- Incoming ---
[   'cv.Mat.operator =',
    'Mat&',
    [],
    [['const MatExpr&', 'expr', '', []]],
    None,
    '@overload\n'
    '@param expr Assigned matrix expression object. As opposite to the first '
    'form of the assignment\n'
    'operation, the second form can reuse already allocated matrix if it has '
    'the right size and type to\n'
    'fit the matrix expression result. It is automatically handled by the real '
    'function that the matrix\n'
    'expressions is expanded to. For example, C=A+B is expanded to add(A, B, '
    'C), and add takes care of\n'
    'automatic C reallocation.']
parse_name: cv.Mat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator = namespace:cv classpath:Mat classname:Mat name:operator =
ignore (method) operator = in cv::Mat

--- Incoming ---
[   'cv.Mat.getUMat',
    'UMat',
    ['/C'],
    [   ['AccessFlag', 'accessFlags', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    'retrieve UMat from Mat']
parse_name: cv.Mat.getUMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::getUMat namespace:cv classpath:Mat classname:Mat name:getUMat
register (method) getUMat in cv::Mat (cv_Mat_getUMat_const_AccessFlag_UMatUsageFlags)

--- Incoming ---
[   'cv.Mat.row',
    'Mat',
    ['/C'],
    [['int', 'y', '', []]],
    None,
    '@brief Creates a matrix header for the specified matrix row.\n'
    '\n'
    'The method makes a new header for the specified matrix row and returns '
    'it. This is an O(1)\n'
    'operation, regardless of the matrix size. The underlying data of the new '
    'matrix is shared with the\n'
    'original matrix. Here is the example of one of the classical basic matrix '
    'processing operations,\n'
    'axpy, used by LU and many other algorithms:\n'
    '@code\n'
    'inline void matrix_axpy(Mat& A, int i, int j, double alpha)\n'
    '{\n'
    'A.row(i) += A.row(j)*alpha;\n'
    '}\n'
    '@endcode\n'
    '@note In the current implementation, the following code does not work as '
    'expected:\n'
    '@code\n'
    'Mat A;\n'
    '...\n'
    'A.row(i) = A.row(j); // will not work\n'
    '@endcode\n'
    'This happens because A.row(i) forms a temporary header that is further '
    'assigned to another header.\n'
    'Remember that each of these operations is O(1), that is, no data is '
    'copied. Thus, the above\n'
    'assignment is not true if you may have expected the j-th row to be copied '
    'to the i-th row. To\n'
    'achieve that, you should either turn this simple assignment into an '
    'expression or use the\n'
    'Mat::copyTo method:\n'
    '@code\n'
    'Mat A;\n'
    '...\n'
    '// works, but looks a bit obscure.\n'
    'A.row(i) = A.row(j) + 0;\n'
    '// this is a bit longer, but the recommended method.\n'
    'A.row(j).copyTo(A.row(i));\n'
    '@endcode\n'
    '@param y A 0-based row index.']
parse_name: cv.Mat.row with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::row namespace:cv classpath:Mat classname:Mat name:row
register (method) row in cv::Mat (cv_Mat_row_const_int)

--- Incoming ---
[   'cv.Mat.col',
    'Mat',
    ['/C'],
    [['int', 'x', '', []]],
    None,
    '@brief Creates a matrix header for the specified matrix column.\n'
    '\n'
    'The method makes a new header for the specified matrix column and returns '
    'it. This is an O(1)\n'
    'operation, regardless of the matrix size. The underlying data of the new '
    'matrix is shared with the\n'
    'original matrix. See also the Mat::row description.\n'
    '@param x A 0-based column index.']
parse_name: cv.Mat.col with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::col namespace:cv classpath:Mat classname:Mat name:col
register (method) col in cv::Mat (cv_Mat_col_const_int)

--- Incoming ---
[   'cv.Mat.rowRange',
    'Mat',
    ['/C'],
    [['int', 'startrow', '', []], ['int', 'endrow', '', []]],
    None,
    '@brief Creates a matrix header for the specified row span.\n'
    '\n'
    'The method makes a new header for the specified row span of the matrix. '
    'Similarly to Mat::row and\n'
    'Mat::col , this is an O(1) operation.\n'
    '@param startrow An inclusive 0-based start index of the row span.\n'
    '@param endrow An exclusive 0-based ending index of the row span.']
parse_name: cv.Mat.rowRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::rowRange namespace:cv classpath:Mat classname:Mat name:rowRange
register (method) rowRange in cv::Mat (cv_Mat_rowRange_const_int_int)

--- Incoming ---
[   'cv.Mat.rowRange',
    'Mat',
    ['/C'],
    [['const Range&', 'r', '', []]],
    None,
    '@overload\n'
    '@param r Range structure containing both the start and the end indices.']
parse_name: cv.Mat.rowRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::rowRange namespace:cv classpath:Mat classname:Mat name:rowRange
register (method) rowRange in cv::Mat (cv_Mat_rowRange_const_Range)

--- Incoming ---
[   'cv.Mat.colRange',
    'Mat',
    ['/C'],
    [['int', 'startcol', '', []], ['int', 'endcol', '', []]],
    None,
    '@brief Creates a matrix header for the specified column span.\n'
    '\n'
    'The method makes a new header for the specified column span of the '
    'matrix. Similarly to Mat::row and\n'
    'Mat::col , this is an O(1) operation.\n'
    '@param startcol An inclusive 0-based start index of the column span.\n'
    '@param endcol An exclusive 0-based ending index of the column span.']
parse_name: cv.Mat.colRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::colRange namespace:cv classpath:Mat classname:Mat name:colRange
register (method) colRange in cv::Mat (cv_Mat_colRange_const_int_int)

--- Incoming ---
[   'cv.Mat.colRange',
    'Mat',
    ['/C'],
    [['const Range&', 'r', '', []]],
    None,
    '@overload\n'
    '@param r Range structure containing both the start and the end indices.']
parse_name: cv.Mat.colRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::colRange namespace:cv classpath:Mat classname:Mat name:colRange
register (method) colRange in cv::Mat (cv_Mat_colRange_const_Range)

--- Incoming ---
[   'cv.Mat.diag',
    'Mat',
    ['/C'],
    [['int', 'd', '0', []]],
    None,
    '@brief Extracts a diagonal from a matrix\n'
    '\n'
    'The method makes a new header for the specified matrix diagonal. The new '
    'matrix is represented as a\n'
    'single-column matrix. Similarly to Mat::row and Mat::col, this is an O(1) '
    'operation.\n'
    '@param d index of the diagonal, with the following values:\n'
    '- `d=0` is the main diagonal.\n'
    '- `d<0` is a diagonal from the lower half. For example, d=-1 means the '
    'diagonal is set\n'
    'immediately below the main one.\n'
    '- `d>0` is a diagonal from the upper half. For example, d=1 means the '
    'diagonal is set\n'
    'immediately above the main one.\n'
    'For example:\n'
    '@code\n'
    'Mat m = (Mat_<int>(3,3) <<\n'
    '1,2,3,\n'
    '4,5,6,\n'
    '7,8,9);\n'
    'Mat d0 = m.diag(0);\n'
    'Mat d1 = m.diag(1);\n'
    'Mat d_1 = m.diag(-1);\n'
    '@endcode\n'
    'The resulting matrices are\n'
    '@code\n'
    'd0 =\n'
    '[1;\n'
    '5;\n'
    '9]\n'
    'd1 =\n'
    '[2;\n'
    '6]\n'
    'd_1 =\n'
    '[4;\n'
    '8]\n'
    '@endcode']
parse_name: cv.Mat.diag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::diag namespace:cv classpath:Mat classname:Mat name:diag
register (method) diag in cv::Mat (cv_Mat_diag_const_int)

--- Incoming ---
[   'cv.Mat.diag',
    'Mat',
    ['/S'],
    [['const Mat&', 'd', '', []]],
    None,
    '@brief creates a diagonal matrix\n'
    '\n'
    'The method creates a square diagonal matrix from specified main '
    'diagonal.\n'
    '@param d One-dimensional matrix that represents the main diagonal.']
parse_name: cv.Mat.diag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::diag namespace:cv classpath:Mat classname:Mat name:diag
register (method) diag in cv::Mat (cv_Mat_diag_Mat)

--- Incoming ---
[   'cv.Mat.clone',
    'Mat',
    ['/C'],
    [],
    None,
    '@brief Creates a full copy of the array and the underlying data.\n'
    '\n'
    'The method creates a full copy of the array. The original step[] is not '
    'taken into account. So, the\n'
    'array copy is a continuous array occupying total()*elemSize() bytes.']
parse_name: cv.Mat.clone with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::clone namespace:cv classpath:Mat classname:Mat name:clone
register (method) clone in cv::Mat (cv_Mat_clone_const)

--- Incoming ---
[   'cv.Mat.copyTo',
    'void',
    ['/C'],
    [['OutputArray', 'm', '', []]],
    None,
    '@brief Copies the matrix to another one.\n'
    '\n'
    'The method copies the matrix data to another matrix. Before copying the '
    'data, the method invokes :\n'
    '@code\n'
    'm.create(this->size(), this->type());\n'
    '@endcode\n'
    'so that the destination matrix is reallocated if needed. While '
    'm.copyTo(m); works flawlessly, the\n'
    'function does not handle the case of a partial overlap between the source '
    'and the destination\n'
    'matrices.\n'
    '\n'
    'When the operation mask is specified, if the Mat::create call shown above '
    'reallocates the matrix,\n'
    'the newly allocated matrix is initialized with all zeros before copying '
    'the data.\n'
    '@param m Destination matrix. If it does not have a proper size or type '
    'before the operation, it is\n'
    'reallocated.']
parse_name: cv.Mat.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::copyTo namespace:cv classpath:Mat classname:Mat name:copyTo
register (method) copyTo in cv::Mat (cv_Mat_copyTo_const__OutputArray)

--- Incoming ---
[   'cv.Mat.copyTo',
    'void',
    ['/C'],
    [['OutputArray', 'm', '', []], ['InputArray', 'mask', '', []]],
    None,
    '@overload\n'
    '@param m Destination matrix. If it does not have a proper size or type '
    'before the operation, it is\n'
    'reallocated.\n'
    '@param mask Operation mask of the same size as \\*this. Its non-zero '
    'elements indicate which matrix\n'
    'elements need to be copied. The mask has to be of type CV_8U and can have '
    '1 or multiple channels.']
parse_name: cv.Mat.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::copyTo namespace:cv classpath:Mat classname:Mat name:copyTo
register (method) copyTo in cv::Mat (cv_Mat_copyTo_const__OutputArray__InputArray)

--- Incoming ---
[   'cv.Mat.convertTo',
    'void',
    ['/C'],
    [   ['OutputArray', 'm', '', []],
        ['int', 'rtype', '', []],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]],
    None,
    '@brief Converts an array to another data type with optional scaling.\n'
    '\n'
    'The method converts source pixel values to the target data type. '
    'saturate_cast\\<\\> is applied at\n'
    'the end to avoid possible overflows:\n'
    '\n'
    '\\f[m(x,y) = saturate \\_ cast<rType>( \\alpha (*this)(x,y) +  \\beta '
    ')\\f]\n'
    '@param m output matrix; if it does not have a proper size or type before '
    'the operation, it is\n'
    'reallocated.\n'
    '@param rtype desired output matrix type or, rather, the depth since the '
    'number of channels are the\n'
    'same as the input has; if rtype is negative, the output matrix will have '
    'the same type as the input.\n'
    '@param alpha optional scale factor.\n'
    '@param beta optional delta added to the scaled values.']
parse_name: cv.Mat.convertTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::convertTo namespace:cv classpath:Mat classname:Mat name:convertTo
register (method) convertTo in cv::Mat (cv_Mat_convertTo_const__OutputArray_int_double_double)

--- Incoming ---
[   'cv.Mat.assignTo',
    'void',
    ['/C'],
    [['Mat&', 'm', '', []], ['int', 'type', '-1', []]],
    None,
    '@brief Provides a functional form of convertTo.\n'
    '\n'
    'This is an internally used method called by the @ref MatrixExpressions '
    'engine.\n'
    '@param m Destination array.\n'
    '@param type Desired destination array depth (or -1 if it should be the '
    'same as the source type).']
parse_name: cv.Mat.assignTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::assignTo namespace:cv classpath:Mat classname:Mat name:assignTo
register (method) assignTo in cv::Mat (cv_Mat_assignTo_const_Mat_int)

--- Incoming ---
[   'cv.Mat.operator =',
    'Mat&',
    [],
    [['const Scalar&', 's', '', []]],
    None,
    '@brief Sets all or some of the array elements to the specified value.\n'
    '@param s Assigned scalar converted to the actual array type.']
parse_name: cv.Mat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator = namespace:cv classpath:Mat classname:Mat name:operator =
ignore (method) operator = in cv::Mat

--- Incoming ---
[   'cv.Mat.setTo',
    'Mat&',
    [],
    [['InputArray', 'value', '', []], ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Sets all or some of the array elements to the specified value.\n'
    '\n'
    'This is an advanced variant of the Mat::operator=(const Scalar& s) '
    'operator.\n'
    '@param value Assigned scalar converted to the actual array type.\n'
    '@param mask Operation mask of the same size as \\*this. Its non-zero '
    'elements indicate which matrix\n'
    'elements need to be copied. The mask has to be of type CV_8U and can have '
    '1 or multiple channels']
parse_name: cv.Mat.setTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::setTo namespace:cv classpath:Mat classname:Mat name:setTo
register (method) setTo in cv::Mat (cv_Mat_setTo__InputArray__InputArray)

--- Incoming ---
[   'cv.Mat.reshape',
    'Mat',
    ['/C'],
    [['int', 'cn', '', []], ['int', 'rows', '0', []]],
    None,
    '@brief Changes the shape and/or the number of channels of a 2D matrix '
    'without copying the data.\n'
    '\n'
    'The method makes a new matrix header for \\*this elements. The new matrix '
    'may have a different size\n'
    'and/or different number of channels. Any combination is possible if:\n'
    '-   No extra elements are included into the new matrix and no elements '
    'are excluded. Consequently,\n'
    'the product rows\\*cols\\*channels() must stay the same after the '
    'transformation.\n'
    '-   No data is copied. That is, this is an O(1) operation. Consequently, '
    'if you change the number of\n'
    'rows, or the operation changes the indices of elements row in some other '
    'way, the matrix must be\n'
    'continuous. See Mat::isContinuous .\n'
    '\n'
    'For example, if there is a set of 3D points stored as an STL vector, and '
    'you want to represent the\n'
    'points as a 3xN matrix, do the following:\n'
    '@code\n'
    'std::vector<Point3f> vec;\n'
    '...\n'
    'Mat pointMat = Mat(vec). // convert vector to Mat, O(1) operation\n'
    'reshape(1). // make Nx3 1-channel matrix out of Nx1 3-channel.\n'
    '// Also, an O(1) operation\n'
    't(); // finally, transpose the Nx3 matrix.\n'
    '// This involves copying all the elements\n'
    '@endcode\n'
    '@param cn New number of channels. If the parameter is 0, the number of '
    'channels remains the same.\n'
    '@param rows New number of rows. If the parameter is 0, the number of rows '
    'remains the same.']
parse_name: cv.Mat.reshape with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::reshape namespace:cv classpath:Mat classname:Mat name:reshape
register (method) reshape in cv::Mat (cv_Mat_reshape_const_int_int)

--- Incoming ---
[   'cv.Mat.reshape',
    'Mat',
    ['/C'],
    [   ['int', 'cn', '', []],
        ['int', 'newndims', '', []],
        ['const int*', 'newsz', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.reshape with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::reshape namespace:cv classpath:Mat classname:Mat name:reshape
register (method) reshape in cv::Mat (cv_Mat_reshape_const_int_int_const_int_X)

--- Incoming ---
[   'cv.Mat.reshape',
    'Mat',
    ['/C'],
    [['int', 'cn', '', []], ['const std::vector<int>&', 'newshape', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.reshape with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::reshape namespace:cv classpath:Mat classname:Mat name:reshape
register (method) reshape in cv::Mat (cv_Mat_reshape_const_int_VectorOfint)

--- Incoming ---
[   'cv.Mat.t',
    'MatExpr',
    ['/C'],
    [],
    None,
    '@brief Transposes a matrix.\n'
    '\n'
    'The method performs matrix transposition by means of matrix expressions. '
    'It does not perform the\n'
    'actual transposition but returns a temporary matrix transposition object '
    'that can be further used as\n'
    'a part of more complex matrix expressions or can be assigned to a '
    'matrix:\n'
    '@code\n'
    'Mat A1 = A + Mat::eye(A.size(), A.type())*lambda;\n'
    'Mat C = A1.t()*A1; // compute (A + lambda*I)^t * (A + lamda*I)\n'
    '@endcode']
parse_name: cv.Mat.t with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::t namespace:cv classpath:Mat classname:Mat name:t
register (method) t in cv::Mat (cv_Mat_t_const)

--- Incoming ---
[   'cv.Mat.inv',
    'MatExpr',
    ['/C'],
    [['int', 'method', 'DECOMP_LU', []]],
    None,
    '@brief Inverses a matrix.\n'
    '\n'
    'The method performs a matrix inversion by means of matrix expressions. '
    'This means that a temporary\n'
    'matrix inversion object is returned by the method and can be used further '
    'as a part of more complex\n'
    'matrix expressions or can be assigned to a matrix.\n'
    '@param method Matrix inversion method. One of cv::DecompTypes']
parse_name: cv.Mat.inv with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::inv namespace:cv classpath:Mat classname:Mat name:inv
register (method) inv in cv::Mat (cv_Mat_inv_const_int)

--- Incoming ---
[   'cv.Mat.mul',
    'MatExpr',
    ['/C'],
    [['InputArray', 'm', '', []], ['double', 'scale', '1', []]],
    None,
    '@brief Performs an element-wise multiplication or division of the two '
    'matrices.\n'
    '\n'
    'The method returns a temporary object encoding per-element array '
    'multiplication, with optional\n'
    'scale. Note that this is not a matrix multiplication that corresponds to '
    'a simpler "\\*" operator.\n'
    '\n'
    'Example:\n'
    '@code\n'
    'Mat C = A.mul(5/B); // equivalent to divide(A, B, C, 5)\n'
    '@endcode\n'
    '@param m Another array of the same type and the same size as \\*this, or '
    'a matrix expression.\n'
    '@param scale Optional scale factor.']
parse_name: cv.Mat.mul with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::mul namespace:cv classpath:Mat classname:Mat name:mul
register (method) mul in cv::Mat (cv_Mat_mul_const__InputArray_double)

--- Incoming ---
[   'cv.Mat.cross',
    'Mat',
    ['/C'],
    [['InputArray', 'm', '', []]],
    None,
    '@brief Computes a cross-product of two 3-element vectors.\n'
    '\n'
    'The method computes a cross-product of two 3-element vectors. The vectors '
    'must be 3-element\n'
    'floating-point vectors of the same shape and size. The result is another '
    '3-element vector of the\n'
    'same shape and type as operands.\n'
    '@param m Another cross-product operand.']
parse_name: cv.Mat.cross with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::cross namespace:cv classpath:Mat classname:Mat name:cross
register (method) cross in cv::Mat (cv_Mat_cross_const__InputArray)

--- Incoming ---
[   'cv.Mat.dot',
    'double',
    ['/C'],
    [['InputArray', 'm', '', []]],
    None,
    '@brief Computes a dot-product of two vectors.\n'
    '\n'
    'The method computes a dot-product of two matrices. If the matrices are '
    'not single-column or\n'
    'single-row vectors, the top-to-bottom left-to-right scan ordering is used '
    'to treat them as 1D\n'
    'vectors. The vectors must have the same size and type. If the matrices '
    'have more than one channel,\n'
    'the dot products from all the channels are summed together.\n'
    '@param m another dot-product operand.']
parse_name: cv.Mat.dot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::dot namespace:cv classpath:Mat classname:Mat name:dot
register (method) dot in cv::Mat (cv_Mat_dot_const__InputArray)

--- Incoming ---
[   'cv.Mat.zeros',
    'MatExpr',
    ['/S'],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    '@brief Returns a zero array of the specified size and type.\n'
    '\n'
    'The method returns a Matlab-style zero array initializer. It can be used '
    'to quickly form a constant\n'
    'array as a function parameter, part of a matrix expression, or as a '
    'matrix initializer:\n'
    '@code\n'
    'Mat A;\n'
    'A = Mat::zeros(3, 3, CV_32F);\n'
    '@endcode\n'
    'In the example above, a new matrix is allocated only if A is not a 3x3 '
    'floating-point matrix.\n'
    'Otherwise, the existing matrix A is filled with zeros.\n'
    '@param rows Number of rows.\n'
    '@param cols Number of columns.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.zeros with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::zeros namespace:cv classpath:Mat classname:Mat name:zeros
register (method) zeros in cv::Mat (cv_Mat_zeros_int_int_int)

--- Incoming ---
[   'cv.Mat.zeros',
    'MatExpr',
    ['/S'],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param size Alternative to the matrix size specification Size(cols, rows) '
    '.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.zeros with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::zeros namespace:cv classpath:Mat classname:Mat name:zeros
register (method) zeros in cv::Mat (cv_Mat_zeros_Size_int)

--- Incoming ---
[   'cv.Mat.zeros',
    'MatExpr',
    ['/S'],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sz', '', []],
        ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param ndims Array dimensionality.\n'
    '@param sz Array of integers specifying the array shape.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.zeros with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::zeros namespace:cv classpath:Mat classname:Mat name:zeros
register (method) zeros in cv::Mat (cv_Mat_zeros_int_const_int_X_int)

--- Incoming ---
[   'cv.Mat.ones',
    'MatExpr',
    ['/S'],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    "@brief Returns an array of all 1's of the specified size and type.\n"
    '\n'
    "The method returns a Matlab-style 1's array initializer, similarly to "
    'Mat::zeros. Note that using\n'
    'this method you can initialize an array with an arbitrary value, using '
    'the following Matlab idiom:\n'
    '@code\n'
    'Mat A = Mat::ones(100, 100, CV_8U)*3; // make 100x100 matrix filled with '
    '3.\n'
    '@endcode\n'
    "The above operation does not form a 100x100 matrix of 1's and then "
    'multiply it by 3. Instead, it\n'
    'just remembers the scale factor (3 in this case) and use it when actually '
    'invoking the matrix\n'
    'initializer.\n'
    '@note In case of multi-channels type, only the first channel will be '
    "initialized with 1's, the\n"
    "others will be set to 0's.\n"
    '@param rows Number of rows.\n'
    '@param cols Number of columns.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.ones with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ones namespace:cv classpath:Mat classname:Mat name:ones
register (method) ones in cv::Mat (cv_Mat_ones_int_int_int)

--- Incoming ---
[   'cv.Mat.ones',
    'MatExpr',
    ['/S'],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param size Alternative to the matrix size specification Size(cols, rows) '
    '.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.ones with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ones namespace:cv classpath:Mat classname:Mat name:ones
register (method) ones in cv::Mat (cv_Mat_ones_Size_int)

--- Incoming ---
[   'cv.Mat.ones',
    'MatExpr',
    ['/S'],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sz', '', []],
        ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param ndims Array dimensionality.\n'
    '@param sz Array of integers specifying the array shape.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.ones with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ones namespace:cv classpath:Mat classname:Mat name:ones
register (method) ones in cv::Mat (cv_Mat_ones_int_const_int_X_int)

--- Incoming ---
[   'cv.Mat.eye',
    'MatExpr',
    ['/S'],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    '@brief Returns an identity matrix of the specified size and type.\n'
    '\n'
    'The method returns a Matlab-style identity matrix initializer, similarly '
    'to Mat::zeros. Similarly to\n'
    'Mat::ones, you can use a scale operation to create a scaled identity '
    'matrix efficiently:\n'
    '@code\n'
    "// make a 4x4 diagonal matrix with 0.1's on the diagonal.\n"
    'Mat A = Mat::eye(4, 4, CV_32F)*0.1;\n'
    '@endcode\n'
    '@note In case of multi-channels type, identity matrix will be initialized '
    'only for the first channel,\n'
    "the others will be set to 0's\n"
    '@param rows Number of rows.\n'
    '@param cols Number of columns.\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.eye with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::eye namespace:cv classpath:Mat classname:Mat name:eye
register (method) eye in cv::Mat (cv_Mat_eye_int_int_int)

--- Incoming ---
[   'cv.Mat.eye',
    'MatExpr',
    ['/S'],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param size Alternative matrix size specification as Size(cols, rows) .\n'
    '@param type Created matrix type.']
parse_name: cv.Mat.eye with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::eye namespace:cv classpath:Mat classname:Mat name:eye
register (method) eye in cv::Mat (cv_Mat_eye_Size_int)

--- Incoming ---
[   'cv.Mat.create',
    'void',
    [],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    '@brief Allocates new array data if needed.\n'
    '\n'
    'This is one of the key Mat methods. Most new-style OpenCV functions and '
    'methods that produce arrays\n'
    'call this method for each output array. The method uses the following '
    'algorithm:\n'
    '\n'
    '-# If the current array shape and the type match the new ones, return '
    'immediately. Otherwise,\n'
    'de-reference the previous data by calling Mat::release.\n'
    '-# Initialize the new header.\n'
    '-# Allocate the new data of total()\\*elemSize() bytes.\n'
    '-# Allocate the new, associated with the data, reference counter and set '
    'it to 1.\n'
    '\n'
    'Such a scheme makes the memory management robust and efficient at the '
    'same time and helps avoid\n'
    'extra typing for you. This means that usually there is no need to '
    'explicitly allocate output arrays.\n'
    'That is, instead of writing:\n'
    '@code\n'
    'Mat color;\n'
    '...\n'
    'Mat gray(color.rows, color.cols, color.depth());\n'
    'cvtColor(color, gray, COLOR_BGR2GRAY);\n'
    '@endcode\n'
    'you can simply write:\n'
    '@code\n'
    'Mat color;\n'
    '...\n'
    'Mat gray;\n'
    'cvtColor(color, gray, COLOR_BGR2GRAY);\n'
    '@endcode\n'
    'because cvtColor, as well as the most of OpenCV functions, calls '
    'Mat::create() for the output array\n'
    'internally.\n'
    '@param rows New number of rows.\n'
    '@param cols New number of columns.\n'
    '@param type New matrix type.']
parse_name: cv.Mat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::create namespace:cv classpath:Mat classname:Mat name:create
register (method) create in cv::Mat (cv_Mat_create_int_int_int)

--- Incoming ---
[   'cv.Mat.create',
    'void',
    [],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param size Alternative new matrix size specification: Size(cols, rows)\n'
    '@param type New matrix type.']
parse_name: cv.Mat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::create namespace:cv classpath:Mat classname:Mat name:create
register (method) create in cv::Mat (cv_Mat_create_Size_int)

--- Incoming ---
[   'cv.Mat.create',
    'void',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param ndims New array dimensionality.\n'
    '@param sizes Array of integers specifying a new array shape.\n'
    '@param type New matrix type.']
parse_name: cv.Mat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::create namespace:cv classpath:Mat classname:Mat name:create
register (method) create in cv::Mat (cv_Mat_create_int_const_int_X_int)

--- Incoming ---
[   'cv.Mat.create',
    'void',
    [],
    [['const std::vector<int>&', 'sizes', '', []], ['int', 'type', '', []]],
    None,
    '@overload\n'
    '@param sizes Array of integers specifying a new array shape.\n'
    '@param type New matrix type.']
parse_name: cv.Mat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::create namespace:cv classpath:Mat classname:Mat name:create
register (method) create in cv::Mat (cv_Mat_create_VectorOfint_int)

--- Incoming ---
[   'cv.Mat.addref',
    'void',
    [],
    [],
    None,
    '@brief Increments the reference counter.\n'
    '\n'
    'The method increments the reference counter associated with the matrix '
    'data. If the matrix header\n'
    'points to an external data set (see Mat::Mat ), the reference counter is '
    'NULL, and the method has no\n'
    'effect in this case. Normally, to avoid memory leaks, the method should '
    'not be called explicitly. It\n'
    'is called implicitly by the matrix assignment operator. The reference '
    'counter increment is an atomic\n'
    'operation on the platforms that support it. Thus, it is safe to operate '
    'on the same matrices\n'
    'asynchronously in different threads.']
parse_name: cv.Mat.addref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::addref namespace:cv classpath:Mat classname:Mat name:addref
register (method) addref in cv::Mat (cv_Mat_addref)

--- Incoming ---
[   'cv.Mat.release',
    'void',
    [],
    [],
    None,
    '@brief Decrements the reference counter and deallocates the matrix if '
    'needed.\n'
    '\n'
    'The method decrements the reference counter associated with the matrix '
    'data. When the reference\n'
    'counter reaches 0, the matrix data is deallocated and the data and the '
    'reference counter pointers\n'
    "are set to NULL's. If the matrix header points to an external data set "
    '(see Mat::Mat ), the\n'
    'reference counter is NULL, and the method has no effect in this case.\n'
    '\n'
    'This method can be called manually to force the matrix data deallocation. '
    'But since this method is\n'
    'automatically called in the destructor, or by any other method that '
    'changes the data pointer, it is\n'
    'usually not needed. The reference counter decrement and check for 0 is an '
    'atomic operation on the\n'
    'platforms that support it. Thus, it is safe to operate on the same '
    'matrices asynchronously in\n'
    'different threads.']
parse_name: cv.Mat.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::release namespace:cv classpath:Mat classname:Mat name:release
register (method) release in cv::Mat (cv_Mat_release)

--- Incoming ---
[   'cv.Mat.deallocate',
    'void',
    [],
    [],
    None,
    "internal use function, consider to use 'release' method instead; "
    'deallocates the matrix data']
parse_name: cv.Mat.deallocate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::deallocate namespace:cv classpath:Mat classname:Mat name:deallocate
register (method) deallocate in cv::Mat (cv_Mat_deallocate)

--- Incoming ---
[   'cv.Mat.copySize',
    'void',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    'internal use function; properly re-allocates _size, _step arrays']
parse_name: cv.Mat.copySize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::copySize namespace:cv classpath:Mat classname:Mat name:copySize
register (method) copySize in cv::Mat (cv_Mat_copySize_Mat)

--- Incoming ---
[   'cv.Mat.reserve',
    'void',
    [],
    [['size_t', 'sz', '', []]],
    None,
    '@brief Reserves space for the certain number of rows.\n'
    '\n'
    'The method reserves space for sz rows. If the matrix already has enough '
    'space to store sz rows,\n'
    'nothing happens. If the matrix is reallocated, the first Mat::rows rows '
    'are preserved. The method\n'
    'emulates the corresponding method of the STL vector class.\n'
    '@param sz Number of rows.']
parse_name: cv.Mat.reserve with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::reserve namespace:cv classpath:Mat classname:Mat name:reserve
register (method) reserve in cv::Mat (cv_Mat_reserve_size_t)

--- Incoming ---
[   'cv.Mat.reserveBuffer',
    'void',
    [],
    [['size_t', 'sz', '', []]],
    None,
    '@brief Reserves space for the certain number of bytes.\n'
    '\n'
    'The method reserves space for sz bytes. If the matrix already has enough '
    'space to store sz bytes,\n'
    'nothing happens. If matrix has to be reallocated its previous content '
    'could be lost.\n'
    '@param sz Number of bytes.']
parse_name: cv.Mat.reserveBuffer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::reserveBuffer namespace:cv classpath:Mat classname:Mat name:reserveBuffer
register (method) reserveBuffer in cv::Mat (cv_Mat_reserveBuffer_size_t)

--- Incoming ---
[   'cv.Mat.resize',
    'void',
    [],
    [['size_t', 'sz', '', []]],
    None,
    '@brief Changes the number of matrix rows.\n'
    '\n'
    'The methods change the number of matrix rows. If the matrix is '
    'reallocated, the first\n'
    'min(Mat::rows, sz) rows are preserved. The methods emulate the '
    'corresponding methods of the STL\n'
    'vector class.\n'
    '@param sz New number of rows.']
parse_name: cv.Mat.resize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::resize namespace:cv classpath:Mat classname:Mat name:resize
register (method) resize in cv::Mat (cv_Mat_resize_size_t)

--- Incoming ---
[   'cv.Mat.resize',
    'void',
    [],
    [['size_t', 'sz', '', []], ['const Scalar&', 's', '', []]],
    None,
    '@overload\n'
    '@param sz New number of rows.\n'
    '@param s Value assigned to the newly added elements.']
parse_name: cv.Mat.resize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::resize namespace:cv classpath:Mat classname:Mat name:resize
register (method) resize in cv::Mat (cv_Mat_resize_size_t_Scalar)

--- Incoming ---
[   'cv.Mat.push_back_',
    'void',
    [],
    [['const void*', 'elem', '', []]],
    None,
    'internal function']
parse_name: cv.Mat.push_back_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::push_back_ namespace:cv classpath:Mat classname:Mat name:push_back_
register (method) push_back_ in cv::Mat (cv_Mat_push_back__const_void_X)

--- Incoming ---
[   'cv.Mat.push_back',
    'template<typename _Tp> void',
    [],
    [['const _Tp&', 'elem', '', []]],
    None,
    '@brief Adds elements to the bottom of the matrix.\n'
    '\n'
    'The methods add one or more elements to the bottom of the matrix. They '
    'emulate the corresponding\n'
    'method of the STL vector class. When elem is Mat , its type and the '
    'number of columns must be the\n'
    'same as in the container matrix.\n'
    '@param elem Added element(s).']
parse_name: cv.Mat.push_back with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::push_back namespace:cv classpath:Mat classname:Mat name:push_back
Registering an unknown type: template<typename _Tp> void
Registering an unknown type: _Tp
register (method) push_back in cv::Mat (cv_Mat_push_back__Tp)

--- Incoming ---
[   'cv.Mat.push_back',
    'template<typename _Tp> void',
    [],
    [['const Mat_<_Tp>&', 'elem', '', []]],
    None,
    '@overload\n@param elem Added element(s).']
parse_name: cv.Mat.push_back with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::push_back namespace:cv classpath:Mat classname:Mat name:push_back
register (method) push_back in cv::Mat (cv_Mat_push_back_Mat_<_Tp>)

--- Incoming ---
[   'cv.Mat.push_back',
    'template<typename _Tp> void',
    [],
    [['const std::vector<_Tp>&', 'elem', '', []]],
    None,
    '@overload\n@param elem Added element(s).']
parse_name: cv.Mat.push_back with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::push_back namespace:cv classpath:Mat classname:Mat name:push_back
register (method) push_back in cv::Mat (cv_Mat_push_back_std_vector<_Tp>)

--- Incoming ---
[   'cv.Mat.push_back',
    'void',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    '@overload\n@param m Added line(s).']
parse_name: cv.Mat.push_back with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::push_back namespace:cv classpath:Mat classname:Mat name:push_back
register (method) push_back in cv::Mat (cv_Mat_push_back_Mat)

--- Incoming ---
[   'cv.Mat.pop_back',
    'void',
    [],
    [['size_t', 'nelems', '1', []]],
    None,
    '@brief Removes elements from the bottom of the matrix.\n'
    '\n'
    'The method removes one or more rows from the bottom of the matrix.\n'
    '@param nelems Number of removed rows. If it is greater than the total '
    'number of rows, an exception\n'
    'is thrown.']
parse_name: cv.Mat.pop_back with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::pop_back namespace:cv classpath:Mat classname:Mat name:pop_back
register (method) pop_back in cv::Mat (cv_Mat_pop_back_size_t)

--- Incoming ---
[   'cv.Mat.locateROI',
    'void',
    ['/C'],
    [['Size&', 'wholeSize', '', []], ['Point&', 'ofs', '', []]],
    None,
    '@brief Locates the matrix header within a parent matrix.\n'
    '\n'
    'After you extracted a submatrix from a matrix using Mat::row, Mat::col, '
    'Mat::rowRange,\n'
    'Mat::colRange, and others, the resultant submatrix points just to the '
    'part of the original big\n'
    'matrix. However, each submatrix contains information (represented by '
    'datastart and dataend\n'
    'fields) that helps reconstruct the original matrix size and the position '
    'of the extracted\n'
    'submatrix within the original matrix. The method locateROI does exactly '
    'that.\n'
    '@param wholeSize Output parameter that contains the size of the whole '
    'matrix containing *this*\n'
    'as a part.\n'
    '@param ofs Output parameter that contains an offset of *this* inside the '
    'whole matrix.']
parse_name: cv.Mat.locateROI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::locateROI namespace:cv classpath:Mat classname:Mat name:locateROI
register (method) locateROI in cv::Mat (cv_Mat_locateROI_const_Size_Point)

--- Incoming ---
[   'cv.Mat.adjustROI',
    'Mat&',
    [],
    [   ['int', 'dtop', '', []],
        ['int', 'dbottom', '', []],
        ['int', 'dleft', '', []],
        ['int', 'dright', '', []]],
    None,
    '@brief Adjusts a submatrix size and position within the parent matrix.\n'
    '\n'
    'The method is complimentary to Mat::locateROI . The typical use of these '
    'functions is to determine\n'
    'the submatrix position within the parent matrix and then shift the '
    'position somehow. Typically, it\n'
    'can be required for filtering operations when pixels outside of the ROI '
    'should be taken into\n'
    'account. When all the method parameters are positive, the ROI needs to '
    'grow in all directions by the\n'
    'specified amount, for example:\n'
    '@code\n'
    'A.adjustROI(2, 2, 2, 2);\n'
    '@endcode\n'
    'In this example, the matrix size is increased by 4 elements in each '
    'direction. The matrix is shifted\n'
    'by 2 elements to the left and 2 elements up, which brings in all the '
    'necessary pixels for the\n'
    'filtering with the 5x5 kernel.\n'
    '\n'
    'adjustROI forces the adjusted ROI to be inside of the parent matrix that '
    'is boundaries of the\n'
    'adjusted ROI are constrained by boundaries of the parent matrix. For '
    'example, if the submatrix A is\n'
    'located in the first row of a parent matrix and you called A.adjustROI(2, '
    '2, 2, 2) then A will not\n'
    'be increased in the upward direction.\n'
    '\n'
    'The function is used internally by the OpenCV filtering functions, like '
    'filter2D , morphological\n'
    'operations, and so on.\n'
    '@param dtop Shift of the top submatrix boundary upwards.\n'
    '@param dbottom Shift of the bottom submatrix boundary downwards.\n'
    '@param dleft Shift of the left submatrix boundary to the left.\n'
    '@param dright Shift of the right submatrix boundary to the right.\n'
    '@sa copyMakeBorder']
parse_name: cv.Mat.adjustROI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::adjustROI namespace:cv classpath:Mat classname:Mat name:adjustROI
register (method) adjustROI in cv::Mat (cv_Mat_adjustROI_int_int_int_int)

--- Incoming ---
[   'cv.Mat.operator ()',
    'Mat',
    ['/C'],
    [['Range', 'rowRange', '', []], ['Range', 'colRange', '', []]],
    None,
    '@brief Extracts a rectangular submatrix.\n'
    '\n'
    'The operators make a new header for the specified sub-array of \\*this . '
    'They are the most\n'
    'generalized forms of Mat::row, Mat::col, Mat::rowRange, and Mat::colRange '
    '. For example,\n'
    '`A(Range(0, 10), Range::all())` is equivalent to `A.rowRange(0, 10)`. '
    'Similarly to all of the above,\n'
    'the operators are O(1) operations, that is, no matrix data is copied.\n'
    '@param rowRange Start and end row of the extracted submatrix. The upper '
    'boundary is not included. To\n'
    'select all the rows, use Range::all().\n'
    '@param colRange Start and end column of the extracted submatrix. The '
    'upper boundary is not included.\n'
    'To select all the columns, use Range::all().']
parse_name: cv.Mat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator () namespace:cv classpath:Mat classname:Mat name:operator ()
ignore (method) operator () in cv::Mat

--- Incoming ---
[   'cv.Mat.operator ()',
    'Mat',
    ['/C'],
    [['const Rect&', 'roi', '', []]],
    None,
    '@overload\n@param roi Extracted submatrix specified as a rectangle.']
parse_name: cv.Mat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator () namespace:cv classpath:Mat classname:Mat name:operator ()
ignore (method) operator () in cv::Mat

--- Incoming ---
[   'cv.Mat.operator ()',
    'Mat',
    ['/C'],
    [['const Range*', 'ranges', '', []]],
    None,
    '@overload\n'
    '@param ranges Array of selected ranges along each array dimension.']
parse_name: cv.Mat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator () namespace:cv classpath:Mat classname:Mat name:operator ()
ignore (method) operator () in cv::Mat

--- Incoming ---
[   'cv.Mat.operator ()',
    'Mat',
    ['/C'],
    [['const std::vector<Range>&', 'ranges', '', []]],
    None,
    '@overload\n'
    '@param ranges Array of selected ranges along each array dimension.']
parse_name: cv.Mat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator () namespace:cv classpath:Mat classname:Mat name:operator ()
ignore (method) operator () in cv::Mat

--- Incoming ---
['cv.operator std.vector<_Tp>', 'template<typename _Tp>', ['/C'], [], None, '']
parse_name: cv.operator std.vector<_Tp> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator std::vector<_Tp> namespace:cv classpath:operator std classname:operator std name:vector<_Tp>
register (function) vector<_Tp> (cv_operator_std_vector<_Tp>_const)

--- Incoming ---
[   'cv.Mat.isContinuous',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Reports whether the matrix is continuous or not.\n'
    '\n'
    'The method returns true if the matrix elements are stored continuously '
    'without gaps at the end of\n'
    'each row. Otherwise, it returns false. Obviously, 1x1 or 1xN matrices are '
    'always continuous.\n'
    'Matrices created with Mat::create are always continuous. But if you '
    'extract a part of the matrix\n'
    'using Mat::col, Mat::diag, and so on, or constructed a matrix header for '
    'externally allocated data,\n'
    'such matrices may no longer have this property.\n'
    '\n'
    'The continuity flag is stored as a bit in the Mat::flags field and is '
    'computed automatically when\n'
    'you construct a matrix header. Thus, the continuity check is a very fast '
    'operation, though\n'
    'theoretically it could be done as follows:\n'
    '@code\n'
    '// alternative implementation of Mat::isContinuous()\n'
    'bool myCheckMatContinuity(const Mat& m)\n'
    '{\n'
    '//return (m.flags & Mat::CONTINUOUS_FLAG) != 0;\n'
    'return m.rows == 1 || m.step == m.cols*m.elemSize();\n'
    '}\n'
    '@endcode\n'
    'The method is used in quite a few of OpenCV functions. The point is that '
    'element-wise operations\n'
    '(such as arithmetic and logical operations, math functions, alpha '
    'blending, color space\n'
    'transformations, and others) do not depend on the image geometry. Thus, '
    'if all the input and output\n'
    'arrays are continuous, the functions can process them as very long '
    'single-row vectors. The example\n'
    'below illustrates how an alpha-blending function can be implemented:\n'
    '@code\n'
    'template<typename T>\n'
    'void alphaBlendRGBA(const Mat& src1, const Mat& src2, Mat& dst)\n'
    '{\n'
    'const float alpha_scale = (float)std::numeric_limits<T>::max(),\n'
    'inv_scale = 1.f/alpha_scale;\n'
    '\n'
    'CV_Assert( src1.type() == src2.type() &&\n'
    'src1.type() == CV_MAKETYPE(traits::Depth<T>::value, 4) &&\n'
    'src1.size() == src2.size());\n'
    'Size size = src1.size();\n'
    'dst.create(size, src1.type());\n'
    '\n'
    '// here is the idiom: check the arrays for continuity and,\n'
    '// if this is the case,\n'
    '// treat the arrays as 1D vectors\n'
    'if( src1.isContinuous() && src2.isContinuous() && dst.isContinuous() )\n'
    '{\n'
    'size.width *= size.height;\n'
    'size.height = 1;\n'
    '}\n'
    'size.width *= 4;\n'
    '\n'
    'for( int i = 0; i < size.height; i++ )\n'
    '{\n'
    '// when the arrays are continuous,\n'
    '// the outer loop is executed only once\n'
    'const T* ptr1 = src1.ptr<T>(i);\n'
    'const T* ptr2 = src2.ptr<T>(i);\n'
    'T* dptr = dst.ptr<T>(i);\n'
    '\n'
    'for( int j = 0; j < size.width; j += 4 )\n'
    '{\n'
    'float alpha = ptr1[j+3]*inv_scale, beta = ptr2[j+3]*inv_scale;\n'
    'dptr[j] = saturate_cast<T>(ptr1[j]*alpha + ptr2[j]*beta);\n'
    'dptr[j+1] = saturate_cast<T>(ptr1[j+1]*alpha + ptr2[j+1]*beta);\n'
    'dptr[j+2] = saturate_cast<T>(ptr1[j+2]*alpha + ptr2[j+2]*beta);\n'
    'dptr[j+3] = saturate_cast<T>((1 - (1-alpha)*(1-beta))*alpha_scale);\n'
    '}\n'
    '}\n'
    '}\n'
    '@endcode\n'
    'This approach, while being very simple, can boost the performance of a '
    'simple element-operation by\n'
    '10-20 percents, especially if the image is rather small and the operation '
    'is quite simple.\n'
    '\n'
    'Another OpenCV idiom in this function, a call of Mat::create for the '
    'destination array, that\n'
    'allocates the destination array unless it already has the proper size and '
    'type. And while the newly\n'
    'allocated arrays are always continuous, you still need to check the '
    'destination array because\n'
    'Mat::create does not always allocate a new matrix.']
parse_name: cv.Mat.isContinuous with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::isContinuous namespace:cv classpath:Mat classname:Mat name:isContinuous
register (method) isContinuous in cv::Mat (cv_Mat_isContinuous_const)

--- Incoming ---
[   'cv.Mat.isSubmatrix',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the matrix is a submatrix of another matrix']
parse_name: cv.Mat.isSubmatrix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::isSubmatrix namespace:cv classpath:Mat classname:Mat name:isSubmatrix
register (method) isSubmatrix in cv::Mat (cv_Mat_isSubmatrix_const)

--- Incoming ---
[   'cv.Mat.elemSize',
    'size_t',
    ['/C'],
    [],
    None,
    '@brief Returns the matrix element size in bytes.\n'
    '\n'
    'The method returns the matrix element size in bytes. For example, if the '
    'matrix type is CV_16SC3 ,\n'
    'the method returns 3\\*sizeof(short) or 6.']
parse_name: cv.Mat.elemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::elemSize namespace:cv classpath:Mat classname:Mat name:elemSize
register (method) elemSize in cv::Mat (cv_Mat_elemSize_const)

--- Incoming ---
[   'cv.Mat.elemSize1',
    'size_t',
    ['/C'],
    [],
    None,
    '@brief Returns the size of each matrix element channel in bytes.\n'
    '\n'
    'The method returns the matrix element channel size in bytes, that is, it '
    'ignores the number of\n'
    'channels. For example, if the matrix type is CV_16SC3 , the method '
    'returns sizeof(short) or 2.']
parse_name: cv.Mat.elemSize1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::elemSize1 namespace:cv classpath:Mat classname:Mat name:elemSize1
register (method) elemSize1 in cv::Mat (cv_Mat_elemSize1_const)

--- Incoming ---
[   'cv.Mat.type',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns the type of a matrix element.\n'
    '\n'
    'The method returns a matrix element type. This is an identifier '
    'compatible with the CvMat type\n'
    'system, like CV_16SC3 or 16-bit signed 3-channel array, and so on.']
parse_name: cv.Mat.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::type namespace:cv classpath:Mat classname:Mat name:type
register (method) type in cv::Mat (cv_Mat_type_const)

--- Incoming ---
[   'cv.Mat.depth',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns the depth of a matrix element.\n'
    '\n'
    'The method returns the identifier of the matrix element depth (the type '
    'of each individual channel).\n'
    'For example, for a 16-bit signed element array, the method returns CV_16S '
    '. A complete list of\n'
    'matrix types contains the following values:\n'
    '-   CV_8U - 8-bit unsigned integers ( 0..255 )\n'
    '-   CV_8S - 8-bit signed integers ( -128..127 )\n'
    '-   CV_16U - 16-bit unsigned integers ( 0..65535 )\n'
    '-   CV_16S - 16-bit signed integers ( -32768..32767 )\n'
    '-   CV_32S - 32-bit signed integers ( -2147483648..2147483647 )\n'
    '-   CV_32F - 32-bit floating-point numbers ( -FLT_MAX..FLT_MAX, INF, NAN '
    ')\n'
    '-   CV_64F - 64-bit floating-point numbers ( -DBL_MAX..DBL_MAX, INF, NAN '
    ')']
parse_name: cv.Mat.depth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::depth namespace:cv classpath:Mat classname:Mat name:depth
register (method) depth in cv::Mat (cv_Mat_depth_const)

--- Incoming ---
[   'cv.Mat.channels',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns the number of matrix channels.\n'
    '\n'
    'The method returns the number of matrix channels.']
parse_name: cv.Mat.channels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::channels namespace:cv classpath:Mat classname:Mat name:channels
register (method) channels in cv::Mat (cv_Mat_channels_const)

--- Incoming ---
[   'cv.Mat.step1',
    'size_t',
    ['/C'],
    [['int', 'i', '0', []]],
    None,
    '@brief Returns a normalized step.\n'
    '\n'
    'The method returns a matrix step divided by Mat::elemSize1() . It can be '
    'useful to quickly access an\n'
    'arbitrary matrix element.']
parse_name: cv.Mat.step1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::step1 namespace:cv classpath:Mat classname:Mat name:step1
register (method) step1 in cv::Mat (cv_Mat_step1_const_int)

--- Incoming ---
[   'cv.Mat.empty',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Returns true if the array has no elements.\n'
    '\n'
    'The method returns true if Mat::total() is 0 or if Mat::data is NULL. '
    'Because of pop_back() and\n'
    'resize() methods `M.total() == 0` does not imply that `M.data == NULL`.']
parse_name: cv.Mat.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::empty namespace:cv classpath:Mat classname:Mat name:empty
register (method) empty in cv::Mat (cv_Mat_empty_const)

--- Incoming ---
[   'cv.Mat.total',
    'size_t',
    ['/C'],
    [],
    None,
    '@brief Returns the total number of array elements.\n'
    '\n'
    'The method returns the number of array elements (a number of pixels if '
    'the array represents an\n'
    'image).']
parse_name: cv.Mat.total with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::total namespace:cv classpath:Mat classname:Mat name:total
register (method) total in cv::Mat (cv_Mat_total_const)

--- Incoming ---
[   'cv.Mat.total',
    'size_t',
    ['/C'],
    [['int', 'startDim', '', []], ['int', 'endDim', 'INT_MAX', []]],
    None,
    '@brief Returns the total number of array elements.\n'
    '\n'
    'The method returns the number of elements within a certain sub-array '
    'slice with startDim <= dim < endDim']
parse_name: cv.Mat.total with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::total namespace:cv classpath:Mat classname:Mat name:total
register (method) total in cv::Mat (cv_Mat_total_const_int_int)

--- Incoming ---
[   'cv.Mat.checkVector',
    'int',
    ['/C'],
    [   ['int', 'elemChannels', '', []],
        ['int', 'depth', '-1', []],
        ['bool', 'requireContinuous', 'true', []]],
    None,
    '* @param elemChannels Number of channels or number of columns the matrix '
    'should have.\n'
    '*                     For a 2-D matrix, when the matrix has only 1 '
    'column, then it should have\n'
    '*                     elemChannels channels; When the matrix has only 1 '
    'channel,\n'
    '*                     then it should have elemChannels columns.\n'
    '*                     For a 3-D matrix, it should have only one channel. '
    'Furthermore,\n'
    '*                     if the number of planes is not one, then the number '
    'of rows\n'
    '*                     within every plane has to be 1; if the number of '
    'rows within\n'
    '*                     every plane is not 1, then the number of planes has '
    'to be 1.\n'
    '* @param depth The depth the matrix should have. Set it to -1 when any '
    'depth is fine.\n'
    '* @param requireContinuous Set it to true to require the matrix to be '
    'continuous\n'
    '* @return -1 if the requirement is not satisfied.\n'
    '*         Otherwise, it returns the number of elements in the matrix. '
    'Note\n'
    '*         that an element may have multiple channels.\n'
    '*\n'
    '* The following code demonstrates its usage for a 2-d matrix:\n'
    '* @snippet snippets/core_mat_checkVector.cpp example-2d\n'
    '*\n'
    '* The following code demonstrates its usage for a 3-d matrix:\n'
    '* @snippet snippets/core_mat_checkVector.cpp example-3d']
parse_name: cv.Mat.checkVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::checkVector namespace:cv classpath:Mat classname:Mat name:checkVector
register (method) checkVector in cv::Mat (cv_Mat_checkVector_const_int_int_bool)

--- Incoming ---
[   'cv.Mat.ptr',
    'uchar*',
    [],
    [['int', 'i0', '0', []]],
    None,
    '@brief Returns a pointer to the specified matrix row.\n'
    '\n'
    'The methods return `uchar*` or typed pointer to the specified matrix row. '
    'See the sample in\n'
    'Mat::isContinuous to know how to use these methods.\n'
    '@param i0 A 0-based row index.']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'const uchar*',
    ['/C'],
    [['int', 'i0', '0', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'uchar*',
    [],
    [['int', 'row', '', []], ['int', 'col', '', []]],
    None,
    '@overload\n'
    '@param row Index along the dimension 0\n'
    '@param col Index along the dimension 1']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'const uchar*',
    ['/C'],
    [['int', 'row', '', []], ['int', 'col', '', []]],
    None,
    '@overload\n'
    '@param row Index along the dimension 0\n'
    '@param col Index along the dimension 1']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'uchar*',
    [],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_int_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'const uchar*',
    ['/C'],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int_int_int)

--- Incoming ---
['cv.Mat.ptr', 'uchar*', [], [['const int*', 'idx', '', []]], None, '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int_X)

--- Incoming ---
[   'cv.Mat.ptr',
    'const uchar*',
    ['/C'],
    [['const int*', 'idx', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_const_int_X)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> _Tp*',
    [],
    [['int', 'i0', '0', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [['int', 'i0', '0', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
Registering an unknown type: template<typename _Tp> _Tp
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> _Tp*',
    [],
    [['int', 'row', '', []], ['int', 'col', '', []]],
    None,
    '@overload\n'
    '@param row Index along the dimension 0\n'
    '@param col Index along the dimension 1']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [['int', 'row', '', []], ['int', 'col', '', []]],
    None,
    '@overload\n'
    '@param row Index along the dimension 0\n'
    '@param col Index along the dimension 1']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> _Tp*',
    [],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_int_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int_int_int)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> _Tp*',
    [],
    [['const int*', 'idx', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_int_X)

--- Incoming ---
[   'cv.Mat.ptr',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [['const int*', 'idx', '', []]],
    None,
    '@overload']
parse_name: cv.Mat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::ptr namespace:cv classpath:Mat classname:Mat name:ptr
register (method) ptr in cv::Mat (cv_Mat_ptr_const_const_int_X)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> _Tp&',
    [],
    [['int', 'i0', '0', []]],
    None,
    '@brief Returns a reference to the specified array element.\n'
    '\n'
    'The template methods return a reference to the specified array element. '
    'For the sake of higher\n'
    'performance, the index range checks are only performed in the Debug '
    'configuration.\n'
    '\n'
    'Note that the variants with a single index (i) can be used to access '
    'elements of single-row or\n'
    'single-column 2-dimensional arrays. That is, if, for example, A is a 1 x '
    'N floating-point matrix and\n'
    'B is an M x 1 integer matrix, you can simply write `A.at<float>(k+4)` and '
    '`B.at<int>(2*i+1)`\n'
    'instead of `A.at<float>(0,k+4)` and `B.at<int>(2*i+1,0)`, respectively.\n'
    '\n'
    'The example below initializes a Hilbert matrix:\n'
    '@code\n'
    'Mat H(100, 100, CV_64F);\n'
    'for(int i = 0; i < H.rows; i++)\n'
    'for(int j = 0; j < H.cols; j++)\n'
    'H.at<double>(i,j)=1./(i+j+1);\n'
    '@endcode\n'
    '\n'
    'Keep in mind that the size identifier used in the at operator cannot be '
    'chosen at random. It depends\n'
    'on the image from which you are trying to retrieve the data. The table '
    'below gives a better insight in this:\n'
    '- If matrix is of type `CV_8U` then use `Mat.at<uchar>(y,x)`.\n'
    '- If matrix is of type `CV_8S` then use `Mat.at<schar>(y,x)`.\n'
    '- If matrix is of type `CV_16U` then use `Mat.at<ushort>(y,x)`.\n'
    '- If matrix is of type `CV_16S` then use `Mat.at<short>(y,x)`.\n'
    '- If matrix is of type `CV_32S`  then use `Mat.at<int>(y,x)`.\n'
    '- If matrix is of type `CV_32F`  then use `Mat.at<float>(y,x)`.\n'
    '- If matrix is of type `CV_64F` then use `Mat.at<double>(y,x)`.\n'
    '\n'
    '@param i0 Index along the dimension 0']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
Registering an unknown type: template<typename _Tp> _Tp
register (method) at in cv::Mat (cv_Mat_at_int)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [['int', 'i0', '0', []]],
    None,
    '@overload\n@param i0 Index along the dimension 0']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
Registering an unknown type: template<typename _Tp> _Tp
register (method) at in cv::Mat (cv_Mat_at_const_int)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> _Tp&',
    [],
    [['int', 'row', '', []], ['int', 'col', '', []]],
    None,
    '@overload\n'
    '@param row Index along the dimension 0\n'
    '@param col Index along the dimension 1']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_int_int)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [['int', 'row', '', []], ['int', 'col', '', []]],
    None,
    '@overload\n'
    '@param row Index along the dimension 0\n'
    '@param col Index along the dimension 1']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_const_int_int)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> _Tp&',
    [],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    '@overload\n'
    '@param i0 Index along the dimension 0\n'
    '@param i1 Index along the dimension 1\n'
    '@param i2 Index along the dimension 2']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_int_int_int)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    '@overload\n'
    '@param i0 Index along the dimension 0\n'
    '@param i1 Index along the dimension 1\n'
    '@param i2 Index along the dimension 2']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_const_int_int_int)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> _Tp&',
    [],
    [['const int*', 'idx', '', []]],
    None,
    '@overload\n@param idx Array of Mat::dims indices.']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_const_int_X)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [['const int*', 'idx', '', []]],
    None,
    '@overload\n@param idx Array of Mat::dims indices.']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_const_const_int_X)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> _Tp&',
    [],
    [['Point', 'pt', '', []]],
    None,
    '@overload\n'
    'special versions for 2D arrays (especially convenient for referencing '
    'image pixels)\n'
    '@param pt Element position specified as Point(j,i) .']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_Point)

--- Incoming ---
[   'cv.Mat.at',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [['Point', 'pt', '', []]],
    None,
    '@overload\n'
    'special versions for 2D arrays (especially convenient for referencing '
    'image pixels)\n'
    '@param pt Element position specified as Point(j,i) .']
parse_name: cv.Mat.at with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::at namespace:cv classpath:Mat classname:Mat name:at
register (method) at in cv::Mat (cv_Mat_at_const_Point)

--- Incoming ---
[   'cv.Mat.begin',
    'template<typename _Tp> MatIterator_<_Tp>',
    [],
    [],
    None,
    '@brief Returns the matrix iterator and sets it to the first matrix '
    'element.\n'
    '\n'
    'The methods return the matrix read-only or read-write iterators. The use '
    'of matrix iterators is very\n'
    'similar to the use of bi-directional STL iterators. In the example below, '
    'the alpha blending\n'
    'function is rewritten using the matrix iterators:\n'
    '@code\n'
    'template<typename T>\n'
    'void alphaBlendRGBA(const Mat& src1, const Mat& src2, Mat& dst)\n'
    '{\n'
    'typedef Vec<T, 4> VT;\n'
    '\n'
    'const float alpha_scale = (float)std::numeric_limits<T>::max(),\n'
    'inv_scale = 1.f/alpha_scale;\n'
    '\n'
    'CV_Assert( src1.type() == src2.type() &&\n'
    'src1.type() == traits::Type<VT>::value &&\n'
    'src1.size() == src2.size());\n'
    'Size size = src1.size();\n'
    'dst.create(size, src1.type());\n'
    '\n'
    'MatConstIterator_<VT> it1 = src1.begin<VT>(), it1_end = src1.end<VT>();\n'
    'MatConstIterator_<VT> it2 = src2.begin<VT>();\n'
    'MatIterator_<VT> dst_it = dst.begin<VT>();\n'
    '\n'
    'for( ; it1 != it1_end; ++it1, ++it2, ++dst_it )\n'
    '{\n'
    'VT pix1 = *it1, pix2 = *it2;\n'
    'float alpha = pix1[3]*inv_scale, beta = pix2[3]*inv_scale;\n'
    '*dst_it = VT(saturate_cast<T>(pix1[0]*alpha + pix2[0]*beta),\n'
    'saturate_cast<T>(pix1[1]*alpha + pix2[1]*beta),\n'
    'saturate_cast<T>(pix1[2]*alpha + pix2[2]*beta),\n'
    'saturate_cast<T>((1 - (1-alpha)*(1-beta))*alpha_scale));\n'
    '}\n'
    '}\n'
    '@endcode']
parse_name: cv.Mat.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::begin namespace:cv classpath:Mat classname:Mat name:begin
Registering an unknown type: template<typename _Tp> MatIterator_<_Tp>
register (method) begin in cv::Mat (cv_Mat_begin)

--- Incoming ---
[   'cv.Mat.begin',
    'template<typename _Tp> MatConstIterator_<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Mat.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::begin namespace:cv classpath:Mat classname:Mat name:begin
Registering an unknown type: template<typename _Tp> MatConstIterator_<_Tp>
register (method) begin in cv::Mat (cv_Mat_begin_const)

--- Incoming ---
[   'cv.Mat.end',
    'template<typename _Tp> MatIterator_<_Tp>',
    [],
    [],
    None,
    '@brief Returns the matrix iterator and sets it to the after-last matrix '
    'element.\n'
    '\n'
    'The methods return the matrix read-only or read-write iterators, set to '
    'the point following the last\n'
    'matrix element.']
parse_name: cv.Mat.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::end namespace:cv classpath:Mat classname:Mat name:end
register (method) end in cv::Mat (cv_Mat_end)

--- Incoming ---
[   'cv.Mat.end',
    'template<typename _Tp> MatConstIterator_<_Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Mat.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::end namespace:cv classpath:Mat classname:Mat name:end
register (method) end in cv::Mat (cv_Mat_end_const)

--- Incoming ---
['cv.Mat.Mat', 'M', [], [['Mat&&', 'm', '', []]], None, '']
parse_name: cv.Mat.Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::Mat namespace:cv classpath:Mat classname:Mat name:Mat
Registering an unknown type: Mat&
register (constructor) new in cv::Mat (cv_Mat_Mat_Mat&)

--- Incoming ---
['cv.Mat.operator =', 'Mat&', [], [['Mat&&', 'm', '', []]], None, '']
parse_name: cv.Mat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::operator = namespace:cv classpath:Mat classname:Mat name:operator =
ignore (method) operator = in cv::Mat

--- Incoming ---
[   'enum cv.Mat.<unnamed>',
    '',
    [],
    [   ['const cv.Mat.MAGIC_VAL', '0x42FF0000', [], [], None, ''],
        ['const cv.Mat.AUTO_STEP', '0', [], [], None, ''],
        ['const cv.Mat.CONTINUOUS_FLAG', 'CV_MAT_CONT_FLAG', [], [], None, ''],
        ['const cv.Mat.SUBMATRIX_FLAG', 'CV_SUBMAT_FLAG', [], [], None, '']],
    None,
    '']
parse_name: const cv.Mat.MAGIC_VAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::MAGIC_VAL namespace:cv classpath:Mat classname:Mat name:MAGIC_VAL
parse_name: const cv.Mat.AUTO_STEP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::AUTO_STEP namespace:cv classpath:Mat classname:Mat name:AUTO_STEP
parse_name: const cv.Mat.CONTINUOUS_FLAG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::CONTINUOUS_FLAG namespace:cv classpath:Mat classname:Mat name:CONTINUOUS_FLAG
parse_name: const cv.Mat.SUBMATRIX_FLAG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::SUBMATRIX_FLAG namespace:cv classpath:Mat classname:Mat name:SUBMATRIX_FLAG

--- Incoming ---
[   'enum cv.Mat.<unnamed>',
    '',
    [],
    [   ['const cv.Mat.MAGIC_MASK', '0xFFFF0000', [], [], None, ''],
        ['const cv.Mat.TYPE_MASK', '0x00000FFF', [], [], None, ''],
        ['const cv.Mat.DEPTH_MASK', '7', [], [], None, '']],
    None,
    '']
parse_name: const cv.Mat.MAGIC_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::MAGIC_MASK namespace:cv classpath:Mat classname:Mat name:MAGIC_MASK
parse_name: const cv.Mat.TYPE_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::TYPE_MASK namespace:cv classpath:Mat classname:Mat name:TYPE_MASK
parse_name: const cv.Mat.DEPTH_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::DEPTH_MASK namespace:cv classpath:Mat classname:Mat name:DEPTH_MASK

--- Incoming ---
[   'cv.Mat.getStdAllocator',
    'MatAllocator*',
    ['/S'],
    [],
    None,
    'and the standard allocator']
parse_name: cv.Mat.getStdAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::getStdAllocator namespace:cv classpath:Mat classname:Mat name:getStdAllocator
register (method) getStdAllocator in cv::Mat (cv_Mat_getStdAllocator)

--- Incoming ---
['cv.Mat.getDefaultAllocator', 'MatAllocator*', ['/S'], [], None, '']
parse_name: cv.Mat.getDefaultAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::getDefaultAllocator namespace:cv classpath:Mat classname:Mat name:getDefaultAllocator
register (method) getDefaultAllocator in cv::Mat (cv_Mat_getDefaultAllocator)

--- Incoming ---
[   'cv.Mat.setDefaultAllocator',
    'void',
    ['/S'],
    [['MatAllocator*', 'allocator', '', []]],
    None,
    '']
parse_name: cv.Mat.setDefaultAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::setDefaultAllocator namespace:cv classpath:Mat classname:Mat name:setDefaultAllocator
register (method) setDefaultAllocator in cv::Mat (cv_Mat_setDefaultAllocator_MatAllocator*)

--- Incoming ---
[   'cv.Mat.updateContinuityFlag',
    'void',
    [],
    [],
    None,
    'internal use method: updates the continuity flag']
parse_name: cv.Mat.updateContinuityFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat::updateContinuityFlag namespace:cv classpath:Mat classname:Mat name:updateContinuityFlag
register (method) updateContinuityFlag in cv::Mat (cv_Mat_updateContinuityFlag)

--- Incoming ---
['typedef cv.Mat1b', 'Mat_<uchar>', '', [], None, '']
parse_name: typedef cv.Mat1b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat1b namespace:cv classpath: classname: name:Mat1b
Registering an unknown type: Mat_<uchar>

--- Incoming ---
['typedef cv.Mat2b', 'Mat_<Vec2b>', '', [], None, '']
parse_name: typedef cv.Mat2b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat2b namespace:cv classpath: classname: name:Mat2b
Registering an unknown type: Mat_<Vec2b>

--- Incoming ---
['typedef cv.Mat3b', 'Mat_<Vec3b>', '', [], None, '']
parse_name: typedef cv.Mat3b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat3b namespace:cv classpath: classname: name:Mat3b
Registering an unknown type: Mat_<Vec3b>

--- Incoming ---
['typedef cv.Mat4b', 'Mat_<Vec4b>', '', [], None, '']
parse_name: typedef cv.Mat4b with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat4b namespace:cv classpath: classname: name:Mat4b
Registering an unknown type: Mat_<Vec4b>

--- Incoming ---
['typedef cv.Mat1s', 'Mat_<short>', '', [], None, '']
parse_name: typedef cv.Mat1s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat1s namespace:cv classpath: classname: name:Mat1s
Registering an unknown type: Mat_<short>

--- Incoming ---
['typedef cv.Mat2s', 'Mat_<Vec2s>', '', [], None, '']
parse_name: typedef cv.Mat2s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat2s namespace:cv classpath: classname: name:Mat2s
Registering an unknown type: Mat_<Vec2s>

--- Incoming ---
['typedef cv.Mat3s', 'Mat_<Vec3s>', '', [], None, '']
parse_name: typedef cv.Mat3s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat3s namespace:cv classpath: classname: name:Mat3s
Registering an unknown type: Mat_<Vec3s>

--- Incoming ---
['typedef cv.Mat4s', 'Mat_<Vec4s>', '', [], None, '']
parse_name: typedef cv.Mat4s with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat4s namespace:cv classpath: classname: name:Mat4s
Registering an unknown type: Mat_<Vec4s>

--- Incoming ---
['typedef cv.Mat1w', 'Mat_<ushort>', '', [], None, '']
parse_name: typedef cv.Mat1w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat1w namespace:cv classpath: classname: name:Mat1w
Registering an unknown type: Mat_<ushort>

--- Incoming ---
['typedef cv.Mat2w', 'Mat_<Vec2w>', '', [], None, '']
parse_name: typedef cv.Mat2w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat2w namespace:cv classpath: classname: name:Mat2w
Registering an unknown type: Mat_<Vec2w>

--- Incoming ---
['typedef cv.Mat3w', 'Mat_<Vec3w>', '', [], None, '']
parse_name: typedef cv.Mat3w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat3w namespace:cv classpath: classname: name:Mat3w
Registering an unknown type: Mat_<Vec3w>

--- Incoming ---
['typedef cv.Mat4w', 'Mat_<Vec4w>', '', [], None, '']
parse_name: typedef cv.Mat4w with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat4w namespace:cv classpath: classname: name:Mat4w
Registering an unknown type: Mat_<Vec4w>

--- Incoming ---
['typedef cv.Mat1i', 'Mat_<int>', '', [], None, '']
parse_name: typedef cv.Mat1i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat1i namespace:cv classpath: classname: name:Mat1i
Registering an unknown type: Mat_<int>

--- Incoming ---
['typedef cv.Mat2i', 'Mat_<Vec2i>', '', [], None, '']
parse_name: typedef cv.Mat2i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat2i namespace:cv classpath: classname: name:Mat2i
Registering an unknown type: Mat_<Vec2i>

--- Incoming ---
['typedef cv.Mat3i', 'Mat_<Vec3i>', '', [], None, '']
parse_name: typedef cv.Mat3i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat3i namespace:cv classpath: classname: name:Mat3i
Registering an unknown type: Mat_<Vec3i>

--- Incoming ---
['typedef cv.Mat4i', 'Mat_<Vec4i>', '', [], None, '']
parse_name: typedef cv.Mat4i with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat4i namespace:cv classpath: classname: name:Mat4i
Registering an unknown type: Mat_<Vec4i>

--- Incoming ---
['typedef cv.Mat1f', 'Mat_<float>', '', [], None, '']
parse_name: typedef cv.Mat1f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat1f namespace:cv classpath: classname: name:Mat1f
Registering an unknown type: Mat_<float>

--- Incoming ---
['typedef cv.Mat2f', 'Mat_<Vec2f>', '', [], None, '']
parse_name: typedef cv.Mat2f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat2f namespace:cv classpath: classname: name:Mat2f
Registering an unknown type: Mat_<Vec2f>

--- Incoming ---
['typedef cv.Mat3f', 'Mat_<Vec3f>', '', [], None, '']
parse_name: typedef cv.Mat3f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat3f namespace:cv classpath: classname: name:Mat3f
Registering an unknown type: Mat_<Vec3f>

--- Incoming ---
['typedef cv.Mat4f', 'Mat_<Vec4f>', '', [], None, '']
parse_name: typedef cv.Mat4f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat4f namespace:cv classpath: classname: name:Mat4f
Registering an unknown type: Mat_<Vec4f>

--- Incoming ---
['typedef cv.Mat1d', 'Mat_<double>', '', [], None, '']
parse_name: typedef cv.Mat1d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat1d namespace:cv classpath: classname: name:Mat1d
Registering an unknown type: Mat_<double>

--- Incoming ---
['typedef cv.Mat2d', 'Mat_<Vec2d>', '', [], None, '']
parse_name: typedef cv.Mat2d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat2d namespace:cv classpath: classname: name:Mat2d
Registering an unknown type: Mat_<Vec2d>

--- Incoming ---
['typedef cv.Mat3d', 'Mat_<Vec3d>', '', [], None, '']
parse_name: typedef cv.Mat3d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat3d namespace:cv classpath: classname: name:Mat3d
Registering an unknown type: Mat_<Vec3d>

--- Incoming ---
['typedef cv.Mat4d', 'Mat_<Vec4d>', '', [], None, '']
parse_name: typedef cv.Mat4d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mat4d namespace:cv classpath: classname: name:Mat4d
Registering an unknown type: Mat_<Vec4d>

--- Incoming ---
[   'class cv.UMat',
    '',
    [],
    [   ['int', 'flags', '', []],
        ['int', 'dims', 'the matrix dimensionality, >= 2', []],
        [   'int',
            'rows',
            'the number of rows and columns or (-1, -1) when the matrix has '
            'more than 2 dimensions',
            []],
        [   'int',
            'cols',
            'the number of rows and columns or (-1, -1) when the matrix has '
            'more than 2 dimensions',
            []],
        ['MatAllocator*', 'allocator', 'custom allocator', []],
        ['UMatUsageFlags', 'usageFlags', '', []],
        ['UMatData*', 'u', '', []],
        ['size_t', 'offset', '', []],
        ['MatSize', 'size', '', []],
        ['MatStep', 'step', '', []]],
    None,
    '@todo document']
parse_name: class cv.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (['class cv.UMat', '', [], [['int', 'flags', '', []], ['int', 'dims', 'the matrix dimensionality, >= 2', []], ['int', 'rows', 'the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions', []], ['int', 'cols', 'the number of rows and columns or (-1, -1) when the matrix has more than 2 dimensions', []], ['MatAllocator*', 'allocator', 'custom allocator', []], ['UMatUsageFlags', 'usageFlags', '', []], ['UMatData*', 'u', '', []], ['size_t', 'offset', '', []], ['MatSize', 'size', '', []], ['MatStep', 'step', '', []]], None, '@todo document'])
parse_name: cv.UMat.flags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::flags namespace:cv classpath:UMat classname:UMat name:flags
register (method) flags in cv::UMat (cv_UMat_flags_const)
parse_name: cv.UMat.dims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::dims namespace:cv classpath:UMat classname:UMat name:dims
register (method) dims in cv::UMat (cv_UMat_dims_const)
parse_name: cv.UMat.rows with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::rows namespace:cv classpath:UMat classname:UMat name:rows
register (method) rows in cv::UMat (cv_UMat_rows_const)
parse_name: cv.UMat.cols with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::cols namespace:cv classpath:UMat classname:UMat name:cols
register (method) cols in cv::UMat (cv_UMat_cols_const)
parse_name: cv.UMat.allocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::allocator namespace:cv classpath:UMat classname:UMat name:allocator
register (method) allocator in cv::UMat (cv_UMat_allocator)
parse_name: cv.UMat.usageFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::usageFlags namespace:cv classpath:UMat classname:UMat name:usageFlags
register (method) usageFlags in cv::UMat (cv_UMat_usageFlags_const)
parse_name: cv.UMat.u with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::u namespace:cv classpath:UMat classname:UMat name:u
register (method) u in cv::UMat (cv_UMat_u)
parse_name: cv.UMat.offset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::offset namespace:cv classpath:UMat classname:UMat name:offset
register (method) offset in cv::UMat (cv_UMat_offset_const)
parse_name: cv.UMat.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::size namespace:cv classpath:UMat classname:UMat name:size
register (method) size in cv::UMat (cv_UMat_size_const)
parse_name: cv.UMat.set_size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::set_size namespace:cv classpath:UMat classname:UMat name:set_size
register (method) set_size in cv::UMat (cv_UMat_set_size_MatSize)
parse_name: cv.UMat.step with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::step namespace:cv classpath:UMat classname:UMat name:step
register (method) step in cv::UMat (cv_UMat_step_const)
parse_name: cv.UMat.set_step with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::set_step namespace:cv classpath:UMat classname:UMat name:set_step
register (method) set_step in cv::UMat (cv_UMat_set_step_MatStep)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    'default constructor']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    'constructs 2D matrix of the specified size and type']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_int_int_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['Size', 'size', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_Size_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    'constucts 2D matrix and fills it with the specified value _s.']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_int_int_int_Scalar_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['Size', 'size', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_Size_int_Scalar_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    'constructs n-dimensional matrix']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_int_const_int_X_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []],
        ['const Scalar&', 's', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_int_const_int_X_int_Scalar_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [['const UMat&', 'm', '', []]],
    None,
    'copy constructor']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) copy in cv::UMat (cv_UMat_UMat_UMat)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['const UMat&', 'm', '', []],
        ['const Range&', 'rowRange', '', []],
        ['const Range&', 'colRange', 'Range::all()', []]],
    None,
    'creates a matrix header for a part of the bigger matrix']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_UMat_Range_Range)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [['const UMat&', 'm', '', []], ['const Rect&', 'roi', '', []]],
    None,
    '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_UMat_Rect)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [['const UMat&', 'm', '', []], ['const Range*', 'ranges', '', []]],
    None,
    '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_UMat_const_Range)

--- Incoming ---
[   'cv.UMat.UMat',
    'U',
    [],
    [   ['const UMat&', 'm', '', []],
        ['const std::vector<Range>&', 'ranges', '', []]],
    None,
    '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_UMat_VectorOfRange)

--- Incoming ---
[   'cv.UMat.UMat',
    'template<typename _Tp> explicit',
    [],
    [   ['const std::vector<_Tp>&', 'vec', '', []],
        ['bool', 'copyData', 'false', []]],
    None,
    'builds matrix from std::vector with or without copying the data']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_std_vector<_Tp>_bool)

--- Incoming ---
[   'cv.UMat.UMat',
    'template<typename _Tp> explicit',
    [],
    [['const Point_<_Tp>&', 'pt', '', []], ['bool', 'copyData', 'true', []]],
    None,
    'builds matrix from a 2D point']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_Point_<_Tp>_bool)

--- Incoming ---
[   'cv.UMat.UMat',
    'template<typename _Tp> explicit',
    [],
    [['const Point3_<_Tp>&', 'pt', '', []], ['bool', 'copyData', 'true', []]],
    None,
    'builds matrix from a 3D point']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_Point3_<_Tp>_bool)

--- Incoming ---
[   'cv.UMat.UMat',
    'template<typename _Tp> explicit',
    [],
    [['const MatCommaInitializer_<_Tp>&', 'commaInitializer', '', []]],
    None,
    'builds matrix from comma initializer']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
register (constructor) new in cv::UMat (cv_UMat_UMat_MatCommaInitializer_<_Tp>)

--- Incoming ---
['cv.UMat.~UMat', '~', [], [], None, 'destructor - calls release()']
parse_name: cv.UMat.~UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::~UMat namespace:cv classpath:UMat classname:UMat name:~UMat
ignore destructor (method) ~UMat in cv::UMat

--- Incoming ---
[   'cv.UMat.operator =',
    'UMat&',
    [],
    [['const UMat&', 'm', '', []]],
    None,
    'assignment operators']
parse_name: cv.UMat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator = namespace:cv classpath:UMat classname:UMat name:operator =
ignore (method) operator = in cv::UMat

--- Incoming ---
['cv.UMat.getMat', 'Mat', ['/C'], [['AccessFlag', 'flags', '', []]], None, '']
parse_name: cv.UMat.getMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::getMat namespace:cv classpath:UMat classname:UMat name:getMat
register (method) getMat in cv::UMat (cv_UMat_getMat_const_AccessFlag)

--- Incoming ---
[   'cv.UMat.row',
    'UMat',
    ['/C'],
    [['int', 'y', '', []]],
    None,
    'returns a new matrix header for the specified row']
parse_name: cv.UMat.row with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::row namespace:cv classpath:UMat classname:UMat name:row
register (method) row in cv::UMat (cv_UMat_row_const_int)

--- Incoming ---
[   'cv.UMat.col',
    'UMat',
    ['/C'],
    [['int', 'x', '', []]],
    None,
    'returns a new matrix header for the specified column']
parse_name: cv.UMat.col with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::col namespace:cv classpath:UMat classname:UMat name:col
register (method) col in cv::UMat (cv_UMat_col_const_int)

--- Incoming ---
[   'cv.UMat.rowRange',
    'UMat',
    ['/C'],
    [['int', 'startrow', '', []], ['int', 'endrow', '', []]],
    None,
    '... for the specified row span']
parse_name: cv.UMat.rowRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::rowRange namespace:cv classpath:UMat classname:UMat name:rowRange
register (method) rowRange in cv::UMat (cv_UMat_rowRange_const_int_int)

--- Incoming ---
['cv.UMat.rowRange', 'UMat', ['/C'], [['const Range&', 'r', '', []]], None, '']
parse_name: cv.UMat.rowRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::rowRange namespace:cv classpath:UMat classname:UMat name:rowRange
register (method) rowRange in cv::UMat (cv_UMat_rowRange_const_Range)

--- Incoming ---
[   'cv.UMat.colRange',
    'UMat',
    ['/C'],
    [['int', 'startcol', '', []], ['int', 'endcol', '', []]],
    None,
    '... for the specified column span']
parse_name: cv.UMat.colRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::colRange namespace:cv classpath:UMat classname:UMat name:colRange
register (method) colRange in cv::UMat (cv_UMat_colRange_const_int_int)

--- Incoming ---
['cv.UMat.colRange', 'UMat', ['/C'], [['const Range&', 'r', '', []]], None, '']
parse_name: cv.UMat.colRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::colRange namespace:cv classpath:UMat classname:UMat name:colRange
register (method) colRange in cv::UMat (cv_UMat_colRange_const_Range)

--- Incoming ---
[   'cv.UMat.diag',
    'UMat',
    ['/C'],
    [['int', 'd', '0', []]],
    None,
    '... for the specified diagonal\n'
    '(d=0 - the main diagonal,\n'
    '>0 - a diagonal from the upper half,\n'
    '<0 - a diagonal from the lower half)']
parse_name: cv.UMat.diag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::diag namespace:cv classpath:UMat classname:UMat name:diag
register (method) diag in cv::UMat (cv_UMat_diag_const_int)

--- Incoming ---
[   'cv.UMat.diag',
    'UMat',
    ['/S'],
    [['const UMat&', 'd', '', []]],
    None,
    'constructs a square diagonal matrix which main diagonal is vector "d"']
parse_name: cv.UMat.diag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::diag namespace:cv classpath:UMat classname:UMat name:diag
register (method) diag in cv::UMat (cv_UMat_diag_UMat)

--- Incoming ---
[   'cv.UMat.clone',
    'UMat',
    ['/C'],
    [],
    None,
    'returns deep copy of the matrix, i.e. the data is copied']
parse_name: cv.UMat.clone with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::clone namespace:cv classpath:UMat classname:UMat name:clone
register (method) clone in cv::UMat (cv_UMat_clone_const)

--- Incoming ---
[   'cv.UMat.copyTo',
    'void',
    ['/C'],
    [['OutputArray', 'm', '', []]],
    None,
    'copies the matrix content to "m".']
parse_name: cv.UMat.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::copyTo namespace:cv classpath:UMat classname:UMat name:copyTo
register (method) copyTo in cv::UMat (cv_UMat_copyTo_const__OutputArray)

--- Incoming ---
[   'cv.UMat.copyTo',
    'void',
    ['/C'],
    [['OutputArray', 'm', '', []], ['InputArray', 'mask', '', []]],
    None,
    'copies those matrix elements to "m" that are marked with non-zero mask '
    'elements.']
parse_name: cv.UMat.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::copyTo namespace:cv classpath:UMat classname:UMat name:copyTo
register (method) copyTo in cv::UMat (cv_UMat_copyTo_const__OutputArray__InputArray)

--- Incoming ---
[   'cv.UMat.convertTo',
    'void',
    ['/C'],
    [   ['OutputArray', 'm', '', []],
        ['int', 'rtype', '', []],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]],
    None,
    'converts matrix to another datatype with optional scaling. See '
    'cvConvertScale.']
parse_name: cv.UMat.convertTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::convertTo namespace:cv classpath:UMat classname:UMat name:convertTo
register (method) convertTo in cv::UMat (cv_UMat_convertTo_const__OutputArray_int_double_double)

--- Incoming ---
[   'cv.UMat.assignTo',
    'void',
    ['/C'],
    [['UMat&', 'm', '', []], ['int', 'type', '-1', []]],
    None,
    '']
parse_name: cv.UMat.assignTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::assignTo namespace:cv classpath:UMat classname:UMat name:assignTo
register (method) assignTo in cv::UMat (cv_UMat_assignTo_const_UMat_int)

--- Incoming ---
[   'cv.UMat.operator =',
    'UMat&',
    [],
    [['const Scalar&', 's', '', []]],
    None,
    'sets every matrix element to s']
parse_name: cv.UMat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator = namespace:cv classpath:UMat classname:UMat name:operator =
ignore (method) operator = in cv::UMat

--- Incoming ---
[   'cv.UMat.setTo',
    'UMat&',
    [],
    [['InputArray', 'value', '', []], ['InputArray', 'mask', 'noArray()', []]],
    None,
    'sets some of the matrix elements to s, according to the mask']
parse_name: cv.UMat.setTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::setTo namespace:cv classpath:UMat classname:UMat name:setTo
register (method) setTo in cv::UMat (cv_UMat_setTo__InputArray__InputArray)

--- Incoming ---
[   'cv.UMat.reshape',
    'UMat',
    ['/C'],
    [['int', 'cn', '', []], ['int', 'rows', '0', []]],
    None,
    'creates alternative matrix header for the same data, with different']
parse_name: cv.UMat.reshape with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::reshape namespace:cv classpath:UMat classname:UMat name:reshape
register (method) reshape in cv::UMat (cv_UMat_reshape_const_int_int)

--- Incoming ---
[   'cv.UMat.reshape',
    'UMat',
    ['/C'],
    [   ['int', 'cn', '', []],
        ['int', 'newndims', '', []],
        ['const int*', 'newsz', '', []]],
    None,
    '']
parse_name: cv.UMat.reshape with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::reshape namespace:cv classpath:UMat classname:UMat name:reshape
register (method) reshape in cv::UMat (cv_UMat_reshape_const_int_int_const_int_X)

--- Incoming ---
[   'cv.UMat.t',
    'UMat',
    ['/C'],
    [],
    None,
    'matrix transposition by means of matrix expressions']
parse_name: cv.UMat.t with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::t namespace:cv classpath:UMat classname:UMat name:t
register (method) t in cv::UMat (cv_UMat_t_const)

--- Incoming ---
[   'cv.UMat.inv',
    'UMat',
    ['/C'],
    [['int', 'method', 'DECOMP_LU', []]],
    None,
    'matrix inversion by means of matrix expressions']
parse_name: cv.UMat.inv with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::inv namespace:cv classpath:UMat classname:UMat name:inv
register (method) inv in cv::UMat (cv_UMat_inv_const_int)

--- Incoming ---
[   'cv.UMat.mul',
    'UMat',
    ['/C'],
    [['InputArray', 'm', '', []], ['double', 'scale', '1', []]],
    None,
    'per-element matrix multiplication by means of matrix expressions']
parse_name: cv.UMat.mul with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::mul namespace:cv classpath:UMat classname:UMat name:mul
register (method) mul in cv::UMat (cv_UMat_mul_const__InputArray_double)

--- Incoming ---
[   'cv.UMat.dot',
    'double',
    ['/C'],
    [['InputArray', 'm', '', []]],
    None,
    'computes dot-product']
parse_name: cv.UMat.dot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::dot namespace:cv classpath:UMat classname:UMat name:dot
register (method) dot in cv::UMat (cv_UMat_dot_const__InputArray)

--- Incoming ---
[   'cv.UMat.zeros',
    'UMat',
    ['/S'],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    'Matlab-style matrix initialization']
parse_name: cv.UMat.zeros with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::zeros namespace:cv classpath:UMat classname:UMat name:zeros
register (method) zeros in cv::UMat (cv_UMat_zeros_int_int_int)

--- Incoming ---
[   'cv.UMat.zeros',
    'UMat',
    ['/S'],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.zeros with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::zeros namespace:cv classpath:UMat classname:UMat name:zeros
register (method) zeros in cv::UMat (cv_UMat_zeros_Size_int)

--- Incoming ---
[   'cv.UMat.zeros',
    'UMat',
    ['/S'],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sz', '', []],
        ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.zeros with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::zeros namespace:cv classpath:UMat classname:UMat name:zeros
register (method) zeros in cv::UMat (cv_UMat_zeros_int_const_int_X_int)

--- Incoming ---
[   'cv.UMat.ones',
    'UMat',
    ['/S'],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.ones with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::ones namespace:cv classpath:UMat classname:UMat name:ones
register (method) ones in cv::UMat (cv_UMat_ones_int_int_int)

--- Incoming ---
[   'cv.UMat.ones',
    'UMat',
    ['/S'],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.ones with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::ones namespace:cv classpath:UMat classname:UMat name:ones
register (method) ones in cv::UMat (cv_UMat_ones_Size_int)

--- Incoming ---
[   'cv.UMat.ones',
    'UMat',
    ['/S'],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sz', '', []],
        ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.ones with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::ones namespace:cv classpath:UMat classname:UMat name:ones
register (method) ones in cv::UMat (cv_UMat_ones_int_const_int_X_int)

--- Incoming ---
[   'cv.UMat.eye',
    'UMat',
    ['/S'],
    [['int', 'rows', '', []], ['int', 'cols', '', []], ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.eye with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::eye namespace:cv classpath:UMat classname:UMat name:eye
register (method) eye in cv::UMat (cv_UMat_eye_int_int_int)

--- Incoming ---
[   'cv.UMat.eye',
    'UMat',
    ['/S'],
    [['Size', 'size', '', []], ['int', 'type', '', []]],
    None,
    '']
parse_name: cv.UMat.eye with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::eye namespace:cv classpath:UMat classname:UMat name:eye
register (method) eye in cv::UMat (cv_UMat_eye_Size_int)

--- Incoming ---
[   'cv.UMat.create',
    'void',
    [],
    [   ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    'allocates new matrix data unless the matrix already has specified size '
    'and type.']
parse_name: cv.UMat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::create namespace:cv classpath:UMat classname:UMat name:create
register (method) create in cv::UMat (cv_UMat_create_int_int_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.create',
    'void',
    [],
    [   ['Size', 'size', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    '']
parse_name: cv.UMat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::create namespace:cv classpath:UMat classname:UMat name:create
register (method) create in cv::UMat (cv_UMat_create_Size_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.create',
    'void',
    [],
    [   ['int', 'ndims', '', []],
        ['const int*', 'sizes', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    '']
parse_name: cv.UMat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::create namespace:cv classpath:UMat classname:UMat name:create
register (method) create in cv::UMat (cv_UMat_create_int_const_int_X_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.create',
    'void',
    [],
    [   ['const std::vector<int>&', 'sizes', '', []],
        ['int', 'type', '', []],
        ['UMatUsageFlags', 'usageFlags', 'USAGE_DEFAULT', []]],
    None,
    '']
parse_name: cv.UMat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::create namespace:cv classpath:UMat classname:UMat name:create
register (method) create in cv::UMat (cv_UMat_create_VectorOfint_int_UMatUsageFlags)

--- Incoming ---
[   'cv.UMat.addref',
    'void',
    [],
    [],
    None,
    'increases the reference counter; use with care to avoid memleaks']
parse_name: cv.UMat.addref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::addref namespace:cv classpath:UMat classname:UMat name:addref
register (method) addref in cv::UMat (cv_UMat_addref)

--- Incoming ---
['cv.UMat.release', 'void', [], [], None, 'decreases reference counter;']
parse_name: cv.UMat.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::release namespace:cv classpath:UMat classname:UMat name:release
register (method) release in cv::UMat (cv_UMat_release)

--- Incoming ---
['cv.UMat.deallocate', 'void', [], [], None, 'deallocates the matrix data']
parse_name: cv.UMat.deallocate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::deallocate namespace:cv classpath:UMat classname:UMat name:deallocate
register (method) deallocate in cv::UMat (cv_UMat_deallocate)

--- Incoming ---
[   'cv.UMat.copySize',
    'void',
    [],
    [['const UMat&', 'm', '', []]],
    None,
    'internal use function; properly re-allocates _size, _step arrays']
parse_name: cv.UMat.copySize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::copySize namespace:cv classpath:UMat classname:UMat name:copySize
register (method) copySize in cv::UMat (cv_UMat_copySize_UMat)

--- Incoming ---
[   'cv.UMat.locateROI',
    'void',
    ['/C'],
    [['Size&', 'wholeSize', '', []], ['Point&', 'ofs', '', []]],
    None,
    'locates matrix header within a parent matrix. See below']
parse_name: cv.UMat.locateROI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::locateROI namespace:cv classpath:UMat classname:UMat name:locateROI
register (method) locateROI in cv::UMat (cv_UMat_locateROI_const_Size_Point)

--- Incoming ---
[   'cv.UMat.adjustROI',
    'UMat&',
    [],
    [   ['int', 'dtop', '', []],
        ['int', 'dbottom', '', []],
        ['int', 'dleft', '', []],
        ['int', 'dright', '', []]],
    None,
    'moves/resizes the current matrix ROI inside the parent matrix.']
parse_name: cv.UMat.adjustROI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::adjustROI namespace:cv classpath:UMat classname:UMat name:adjustROI
register (method) adjustROI in cv::UMat (cv_UMat_adjustROI_int_int_int_int)

--- Incoming ---
[   'cv.UMat.operator ()',
    'UMat',
    ['/C'],
    [['Range', 'rowRange', '', []], ['Range', 'colRange', '', []]],
    None,
    'extracts a rectangular sub-matrix']
parse_name: cv.UMat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator () namespace:cv classpath:UMat classname:UMat name:operator ()
ignore (method) operator () in cv::UMat

--- Incoming ---
[   'cv.UMat.operator ()',
    'UMat',
    ['/C'],
    [['const Rect&', 'roi', '', []]],
    None,
    '']
parse_name: cv.UMat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator () namespace:cv classpath:UMat classname:UMat name:operator ()
ignore (method) operator () in cv::UMat

--- Incoming ---
[   'cv.UMat.operator ()',
    'UMat',
    ['/C'],
    [['const Range*', 'ranges', '', []]],
    None,
    '']
parse_name: cv.UMat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator () namespace:cv classpath:UMat classname:UMat name:operator ()
ignore (method) operator () in cv::UMat

--- Incoming ---
[   'cv.UMat.operator ()',
    'UMat',
    ['/C'],
    [['const std::vector<Range>&', 'ranges', '', []]],
    None,
    '']
parse_name: cv.UMat.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator () namespace:cv classpath:UMat classname:UMat name:operator ()
ignore (method) operator () in cv::UMat

--- Incoming ---
[   'cv.UMat.isContinuous',
    'bool',
    ['/C'],
    [],
    None,
    'returns true iff the matrix data is continuous']
parse_name: cv.UMat.isContinuous with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::isContinuous namespace:cv classpath:UMat classname:UMat name:isContinuous
register (method) isContinuous in cv::UMat (cv_UMat_isContinuous_const)

--- Incoming ---
[   'cv.UMat.isSubmatrix',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the matrix is a submatrix of another matrix']
parse_name: cv.UMat.isSubmatrix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::isSubmatrix namespace:cv classpath:UMat classname:UMat name:isSubmatrix
register (method) isSubmatrix in cv::UMat (cv_UMat_isSubmatrix_const)

--- Incoming ---
[   'cv.UMat.elemSize',
    'size_t',
    ['/C'],
    [],
    None,
    'returns element size in bytes,']
parse_name: cv.UMat.elemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::elemSize namespace:cv classpath:UMat classname:UMat name:elemSize
register (method) elemSize in cv::UMat (cv_UMat_elemSize_const)

--- Incoming ---
[   'cv.UMat.elemSize1',
    'size_t',
    ['/C'],
    [],
    None,
    'returns the size of element channel in bytes.']
parse_name: cv.UMat.elemSize1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::elemSize1 namespace:cv classpath:UMat classname:UMat name:elemSize1
register (method) elemSize1 in cv::UMat (cv_UMat_elemSize1_const)

--- Incoming ---
[   'cv.UMat.type',
    'int',
    ['/C'],
    [],
    None,
    'returns element type, similar to CV_MAT_TYPE(cvmat->type)']
parse_name: cv.UMat.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::type namespace:cv classpath:UMat classname:UMat name:type
register (method) type in cv::UMat (cv_UMat_type_const)

--- Incoming ---
[   'cv.UMat.depth',
    'int',
    ['/C'],
    [],
    None,
    'returns element type, similar to CV_MAT_DEPTH(cvmat->type)']
parse_name: cv.UMat.depth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::depth namespace:cv classpath:UMat classname:UMat name:depth
register (method) depth in cv::UMat (cv_UMat_depth_const)

--- Incoming ---
[   'cv.UMat.channels',
    'int',
    ['/C'],
    [],
    None,
    'returns element type, similar to CV_MAT_CN(cvmat->type)']
parse_name: cv.UMat.channels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::channels namespace:cv classpath:UMat classname:UMat name:channels
register (method) channels in cv::UMat (cv_UMat_channels_const)

--- Incoming ---
[   'cv.UMat.step1',
    'size_t',
    ['/C'],
    [['int', 'i', '0', []]],
    None,
    'returns step/elemSize1()']
parse_name: cv.UMat.step1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::step1 namespace:cv classpath:UMat classname:UMat name:step1
register (method) step1 in cv::UMat (cv_UMat_step1_const_int)

--- Incoming ---
[   'cv.UMat.empty',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if matrix data is NULL']
parse_name: cv.UMat.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::empty namespace:cv classpath:UMat classname:UMat name:empty
register (method) empty in cv::UMat (cv_UMat_empty_const)

--- Incoming ---
[   'cv.UMat.total',
    'size_t',
    ['/C'],
    [],
    None,
    'returns the total number of matrix elements']
parse_name: cv.UMat.total with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::total namespace:cv classpath:UMat classname:UMat name:total
register (method) total in cv::UMat (cv_UMat_total_const)

--- Incoming ---
[   'cv.UMat.checkVector',
    'int',
    ['/C'],
    [   ['int', 'elemChannels', '', []],
        ['int', 'depth', '-1', []],
        ['bool', 'requireContinuous', 'true', []]],
    None,
    'returns N if the matrix is 1-channel (N x ptdim) or ptdim-channel (1 x N) '
    'or (N x 1); negative number otherwise']
parse_name: cv.UMat.checkVector with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::checkVector namespace:cv classpath:UMat classname:UMat name:checkVector
register (method) checkVector in cv::UMat (cv_UMat_checkVector_const_int_int_bool)

--- Incoming ---
['cv.UMat.UMat', 'U', [], [['UMat&&', 'm', '', []]], None, '']
parse_name: cv.UMat.UMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::UMat namespace:cv classpath:UMat classname:UMat name:UMat
Registering an unknown type: UMat&
register (constructor) new in cv::UMat (cv_UMat_UMat_UMat&)

--- Incoming ---
['cv.UMat.operator =', 'UMat&', [], [['UMat&&', 'm', '', []]], None, '']
parse_name: cv.UMat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::operator = namespace:cv classpath:UMat classname:UMat name:operator =
ignore (method) operator = in cv::UMat

--- Incoming ---
[   'cv.UMat.handle',
    'void*',
    ['/C'],
    [['AccessFlag', 'accessFlags', '', []]],
    None,
    '']
parse_name: cv.UMat.handle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::handle namespace:cv classpath:UMat classname:UMat name:handle
register (method) handle in cv::UMat (cv_UMat_handle_const_AccessFlag)

--- Incoming ---
['cv.UMat.ndoffset', 'void', ['/C'], [['size_t*', 'ofs', '', []]], None, '']
parse_name: cv.UMat.ndoffset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::ndoffset namespace:cv classpath:UMat classname:UMat name:ndoffset
register (method) ndoffset in cv::UMat (cv_UMat_ndoffset_const_size_t_X)

--- Incoming ---
[   'enum cv.UMat.<unnamed>',
    '',
    [],
    [   ['const cv.UMat.MAGIC_VAL', '0x42FF0000', [], [], None, ''],
        ['const cv.UMat.AUTO_STEP', '0', [], [], None, ''],
        ['const cv.UMat.CONTINUOUS_FLAG', 'CV_MAT_CONT_FLAG', [], [], None, ''],
        ['const cv.UMat.SUBMATRIX_FLAG', 'CV_SUBMAT_FLAG', [], [], None, '']],
    None,
    '']
parse_name: const cv.UMat.MAGIC_VAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::MAGIC_VAL namespace:cv classpath:UMat classname:UMat name:MAGIC_VAL
parse_name: const cv.UMat.AUTO_STEP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::AUTO_STEP namespace:cv classpath:UMat classname:UMat name:AUTO_STEP
parse_name: const cv.UMat.CONTINUOUS_FLAG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::CONTINUOUS_FLAG namespace:cv classpath:UMat classname:UMat name:CONTINUOUS_FLAG
parse_name: const cv.UMat.SUBMATRIX_FLAG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::SUBMATRIX_FLAG namespace:cv classpath:UMat classname:UMat name:SUBMATRIX_FLAG

--- Incoming ---
[   'enum cv.UMat.<unnamed>',
    '',
    [],
    [   ['const cv.UMat.MAGIC_MASK', '0xFFFF0000', [], [], None, ''],
        ['const cv.UMat.TYPE_MASK', '0x00000FFF', [], [], None, ''],
        ['const cv.UMat.DEPTH_MASK', '7', [], [], None, '']],
    None,
    '']
parse_name: const cv.UMat.MAGIC_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::MAGIC_MASK namespace:cv classpath:UMat classname:UMat name:MAGIC_MASK
parse_name: const cv.UMat.TYPE_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::TYPE_MASK namespace:cv classpath:UMat classname:UMat name:TYPE_MASK
parse_name: const cv.UMat.DEPTH_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::DEPTH_MASK namespace:cv classpath:UMat classname:UMat name:DEPTH_MASK

--- Incoming ---
[   'cv.UMat.getStdAllocator',
    'MatAllocator*',
    ['/S'],
    [],
    None,
    'and the standard allocator']
parse_name: cv.UMat.getStdAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::getStdAllocator namespace:cv classpath:UMat classname:UMat name:getStdAllocator
register (method) getStdAllocator in cv::UMat (cv_UMat_getStdAllocator)

--- Incoming ---
[   'cv.UMat.updateContinuityFlag',
    'void',
    [],
    [],
    None,
    'internal use method: updates the continuity flag']
parse_name: cv.UMat.updateContinuityFlag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::UMat::updateContinuityFlag namespace:cv classpath:UMat classname:UMat name:updateContinuityFlag
register (method) updateContinuityFlag in cv::UMat (cv_UMat_updateContinuityFlag)

--- Incoming ---
[   'class cv.SparseMat',
    '',
    [],
    [],
    None,
    '@brief The class SparseMat represents multi-dimensional sparse numerical '
    'arrays.\n'
    '\n'
    'Such a sparse array can store elements of any type that Mat can store. '
    '*Sparse* means that only\n'
    'non-zero elements are stored (though, as a result of operations on a '
    'sparse matrix, some of its\n'
    'stored elements can actually become 0. It is up to you to detect such '
    'elements and delete them\n'
    'using SparseMat::erase ). The non-zero elements are stored in a hash '
    'table that grows when it is\n'
    'filled so that the search time is O(1) in average (regardless of whether '
    'element is there or not).\n'
    'Elements can be accessed using the following methods:\n'
    '-   Query operations (SparseMat::ptr and the higher-level SparseMat::ref, '
    'SparseMat::value and\n'
    'SparseMat::find), for example:\n'
    '@code\n'
    'const int dims = 5;\n'
    'int size[5] = {10, 10, 10, 10, 10};\n'
    'SparseMat sparse_mat(dims, size, CV_32F);\n'
    'for(int i = 0; i < 1000; i++)\n'
    '{\n'
    'int idx[dims];\n'
    'for(int k = 0; k < dims; k++)\n'
    'idx[k] = rand() % size[k];\n'
    'sparse_mat.ref<float>(idx) += 1.f;\n'
    '}\n'
    'cout << "nnz = " << sparse_mat.nzcount() << endl;\n'
    '@endcode\n'
    '-   Sparse matrix iterators. They are similar to MatIterator but '
    'different from NAryMatIterator.\n'
    'That is, the iteration loop is familiar to STL users:\n'
    '@code\n'
    '// prints elements of a sparse floating-point matrix\n'
    '// and the sum of elements.\n'
    'SparseMatConstIterator_<float>\n'
    'it = sparse_mat.begin<float>(),\n'
    'it_end = sparse_mat.end<float>();\n'
    'double s = 0;\n'
    'int dims = sparse_mat.dims();\n'
    'for(; it != it_end; ++it)\n'
    '{\n'
    '// print element indices and the element value\n'
    'const SparseMat::Node* n = it.node();\n'
    'printf("(");\n'
    'for(int i = 0; i < dims; i++)\n'
    'printf("%d%s", n->idx[i], i < dims-1 ? ", " : ")");\n'
    'printf(": %g\\n", it.value<float>());\n'
    's += *it;\n'
    '}\n'
    'printf("Element sum is %g\\n", s);\n'
    '@endcode\n'
    'If you run this loop, you will notice that elements are not enumerated in '
    'a logical order\n'
    '(lexicographical, and so on). They come in the same order as they are '
    'stored in the hash table\n'
    '(semi-randomly). You may collect pointers to the nodes and sort them to '
    'get the proper ordering.\n'
    'Note, however, that pointers to the nodes may become invalid when you add '
    'more elements to the\n'
    'matrix. This may happen due to possible buffer reallocation.\n'
    '-   Combination of the above 2 methods when you need to process 2 or more '
    'sparse matrices\n'
    'simultaneously. For example, this is how you can compute unnormalized '
    'cross-correlation of the 2\n'
    'floating-point sparse matrices:\n'
    '@code\n'
    'double cross_corr(const SparseMat& a, const SparseMat& b)\n'
    '{\n'
    'const SparseMat *_a = &a, *_b = &b;\n'
    '// if b contains less elements than a,\n'
    '// it is faster to iterate through b\n'
    'if(_a->nzcount() > _b->nzcount())\n'
    'std::swap(_a, _b);\n'
    'SparseMatConstIterator_<float> it = _a->begin<float>(),\n'
    'it_end = _a->end<float>();\n'
    'double ccorr = 0;\n'
    'for(; it != it_end; ++it)\n'
    '{\n'
    '// take the next element from the first matrix\n'
    'float avalue = *it;\n'
    'const Node* anode = it.node();\n'
    '// and try to find an element with the same index in the second matrix.\n'
    '// since the hash value depends only on the element index,\n'
    '// reuse the hash value stored in the node\n'
    'float bvalue = _b->value<float>(anode->idx,&anode->hashval);\n'
    'ccorr += avalue*bvalue;\n'
    '}\n'
    'return ccorr;\n'
    '}\n'
    '@endcode']
parse_name: class cv.SparseMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat namespace:cv classpath: classname: name:SparseMat
register class cv::SparseMat (['class cv.SparseMat', '', [], [], None, '@brief The class SparseMat represents multi-dimensional sparse numerical arrays.\n\nSuch a sparse array can store elements of any type that Mat can store. *Sparse* means that only\nnon-zero elements are stored (though, as a result of operations on a sparse matrix, some of its\nstored elements can actually become 0. It is up to you to detect such elements and delete them\nusing SparseMat::erase ). The non-zero elements are stored in a hash table that grows when it is\nfilled so that the search time is O(1) in average (regardless of whether element is there or not).\nElements can be accessed using the following methods:\n-   Query operations (SparseMat::ptr and the higher-level SparseMat::ref, SparseMat::value and\nSparseMat::find), for example:\n@code\nconst int dims = 5;\nint size[5] = {10, 10, 10, 10, 10};\nSparseMat sparse_mat(dims, size, CV_32F);\nfor(int i = 0; i < 1000; i++)\n{\nint idx[dims];\nfor(int k = 0; k < dims; k++)\nidx[k] = rand() % size[k];\nsparse_mat.ref<float>(idx) += 1.f;\n}\ncout << "nnz = " << sparse_mat.nzcount() << endl;\n@endcode\n-   Sparse matrix iterators. They are similar to MatIterator but different from NAryMatIterator.\nThat is, the iteration loop is familiar to STL users:\n@code\n// prints elements of a sparse floating-point matrix\n// and the sum of elements.\nSparseMatConstIterator_<float>\nit = sparse_mat.begin<float>(),\nit_end = sparse_mat.end<float>();\ndouble s = 0;\nint dims = sparse_mat.dims();\nfor(; it != it_end; ++it)\n{\n// print element indices and the element value\nconst SparseMat::Node* n = it.node();\nprintf("(");\nfor(int i = 0; i < dims; i++)\nprintf("%d%s", n->idx[i], i < dims-1 ? ", " : ")");\nprintf(": %g\\n", it.value<float>());\ns += *it;\n}\nprintf("Element sum is %g\\n", s);\n@endcode\nIf you run this loop, you will notice that elements are not enumerated in a logical order\n(lexicographical, and so on). They come in the same order as they are stored in the hash table\n(semi-randomly). You may collect pointers to the nodes and sort them to get the proper ordering.\nNote, however, that pointers to the nodes may become invalid when you add more elements to the\nmatrix. This may happen due to possible buffer reallocation.\n-   Combination of the above 2 methods when you need to process 2 or more sparse matrices\nsimultaneously. For example, this is how you can compute unnormalized cross-correlation of the 2\nfloating-point sparse matrices:\n@code\ndouble cross_corr(const SparseMat& a, const SparseMat& b)\n{\nconst SparseMat *_a = &a, *_b = &b;\n// if b contains less elements than a,\n// it is faster to iterate through b\nif(_a->nzcount() > _b->nzcount())\nstd::swap(_a, _b);\nSparseMatConstIterator_<float> it = _a->begin<float>(),\nit_end = _a->end<float>();\ndouble ccorr = 0;\nfor(; it != it_end; ++it)\n{\n// take the next element from the first matrix\nfloat avalue = *it;\nconst Node* anode = it.node();\n// and try to find an element with the same index in the second matrix.\n// since the hash value depends only on the element index,\n// reuse the hash value stored in the node\nfloat bvalue = _b->value<float>(anode->idx,&anode->hashval);\nccorr += avalue*bvalue;\n}\nreturn ccorr;\n}\n@endcode'])

--- Incoming ---
['typedef cv.SparseMat.iterator', 'SparseMatIterator', '', [], None, '']
parse_name: typedef cv.SparseMat.iterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::iterator namespace:cv classpath:SparseMat classname:SparseMat name:iterator
Registering an unknown type: SparseMatIterator

--- Incoming ---
[   'typedef cv.SparseMat.const_iterator',
    'SparseMatConstIterator',
    '',
    [],
    None,
    '']
parse_name: typedef cv.SparseMat.const_iterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::const_iterator namespace:cv classpath:SparseMat classname:SparseMat name:const_iterator
Registering an unknown type: SparseMatConstIterator

--- Incoming ---
[   'enum cv.SparseMat.<unnamed>',
    '',
    [],
    [   ['const cv.SparseMat.MAGIC_VAL', '0x42FD0000', [], [], None, ''],
        ['const cv.SparseMat.MAX_DIM', '32', [], [], None, ''],
        ['const cv.SparseMat.HASH_SCALE', '0x5bd1e995', [], [], None, ''],
        ['const cv.SparseMat.HASH_BIT', '0x80000000', [], [], None, '']],
    None,
    '']
parse_name: const cv.SparseMat.MAGIC_VAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::MAGIC_VAL namespace:cv classpath:SparseMat classname:SparseMat name:MAGIC_VAL
parse_name: const cv.SparseMat.MAX_DIM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::MAX_DIM namespace:cv classpath:SparseMat classname:SparseMat name:MAX_DIM
parse_name: const cv.SparseMat.HASH_SCALE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::HASH_SCALE namespace:cv classpath:SparseMat classname:SparseMat name:HASH_SCALE
parse_name: const cv.SparseMat.HASH_BIT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::HASH_BIT namespace:cv classpath:SparseMat classname:SparseMat name:HASH_BIT

--- Incoming ---
['struct cv.SparseMat.Hdr', '', [], [], None, 'the sparse matrix header']
parse_name: struct cv.SparseMat.Hdr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::Hdr namespace:cv classpath:SparseMat classname:SparseMat name:Hdr
register class cv::SparseMat::Hdr (['struct cv.SparseMat.Hdr', '', [], [], None, 'the sparse matrix header'])

--- Incoming ---
[   'cv.SparseMat.Hdr.Hdr',
    'H',
    [],
    [   ['int', '_dims', '', []],
        ['const int*', '_sizes', '', []],
        ['int', '_type', '', []]],
    None,
    '']
parse_name: cv.SparseMat.Hdr.Hdr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::Hdr::Hdr namespace:cv classpath:SparseMat::Hdr classname:Hdr name:Hdr
register (constructor) new in cv::SparseMat::Hdr (cv_SparseMat_Hdr_Hdr_int_const_int_X_int)

--- Incoming ---
['cv.SparseMat.Hdr.clear', 'void', [], [], None, '']
parse_name: cv.SparseMat.Hdr.clear with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::Hdr::clear namespace:cv classpath:SparseMat::Hdr classname:Hdr name:clear
register (method) clear in cv::SparseMat::Hdr (cv_SparseMat_Hdr_clear)

--- Incoming ---
[   'struct cv.SparseMat.Node',
    '',
    [],
    [],
    None,
    'sparse matrix node - element of a hash table']
parse_name: struct cv.SparseMat.Node with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::Node namespace:cv classpath:SparseMat classname:SparseMat name:Node
register class cv::SparseMat::Node (['struct cv.SparseMat.Node', '', [], [], None, 'sparse matrix node - element of a hash table'])

--- Incoming ---
[   'cv.SparseMat.SparseMat',
    'S',
    [],
    [],
    None,
    '@brief Various SparseMat constructors.']
parse_name: cv.SparseMat.SparseMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::SparseMat namespace:cv classpath:SparseMat classname:SparseMat name:SparseMat
register (constructor) default in cv::SparseMat (cv_SparseMat_SparseMat)

--- Incoming ---
[   'cv.SparseMat.SparseMat',
    'S',
    [],
    [   ['int', 'dims', '', []],
        ['const int*', '_sizes', '', []],
        ['int', '_type', '', []]],
    None,
    '@overload\n'
    '@param dims Array dimensionality.\n'
    '@param _sizes Sparce matrix size on all dementions.\n'
    '@param _type Sparse matrix data type.']
parse_name: cv.SparseMat.SparseMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::SparseMat namespace:cv classpath:SparseMat classname:SparseMat name:SparseMat
register (constructor) new in cv::SparseMat (cv_SparseMat_SparseMat_int_const_int_X_int)

--- Incoming ---
[   'cv.SparseMat.SparseMat',
    'S',
    [],
    [['const SparseMat&', 'm', '', []]],
    None,
    '@overload\n'
    '@param m Source matrix for copy constructor. If m is dense matrix '
    '(ocvMat) then it will be converted\n'
    'to sparse representation.']
parse_name: cv.SparseMat.SparseMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::SparseMat namespace:cv classpath:SparseMat classname:SparseMat name:SparseMat
register (constructor) copy in cv::SparseMat (cv_SparseMat_SparseMat_SparseMat)

--- Incoming ---
[   'cv.SparseMat.SparseMat',
    'S',
    ['/E'],
    [['const Mat&', 'm', '', []]],
    None,
    '@overload\n'
    '@param m Source matrix for copy constructor. If m is dense matrix '
    '(ocvMat) then it will be converted\n'
    'to sparse representation.']
parse_name: cv.SparseMat.SparseMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::SparseMat namespace:cv classpath:SparseMat classname:SparseMat name:SparseMat
register (constructor) new in cv::SparseMat (cv_SparseMat_SparseMat_Mat)

--- Incoming ---
['cv.SparseMat.~SparseMat', '~', [], [], None, 'the destructor']
parse_name: cv.SparseMat.~SparseMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::~SparseMat namespace:cv classpath:SparseMat classname:SparseMat name:~SparseMat
ignore destructor (method) ~SparseMat in cv::SparseMat

--- Incoming ---
[   'cv.SparseMat.operator =',
    'SparseMat&',
    [],
    [['const SparseMat&', 'm', '', []]],
    None,
    'assignment operator. This is O(1) operation, i.e. no data is copied']
parse_name: cv.SparseMat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::operator = namespace:cv classpath:SparseMat classname:SparseMat name:operator =
ignore (method) operator = in cv::SparseMat

--- Incoming ---
[   'cv.SparseMat.operator =',
    'SparseMat&',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    'equivalent to the corresponding constructor']
parse_name: cv.SparseMat.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::operator = namespace:cv classpath:SparseMat classname:SparseMat name:operator =
ignore (method) operator = in cv::SparseMat

--- Incoming ---
[   'cv.SparseMat.clone',
    'SparseMat',
    ['/C'],
    [],
    None,
    'creates full copy of the matrix']
parse_name: cv.SparseMat.clone with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::clone namespace:cv classpath:SparseMat classname:SparseMat name:clone
register (method) clone in cv::SparseMat (cv_SparseMat_clone_const)

--- Incoming ---
[   'cv.SparseMat.copyTo',
    'void',
    ['/C'],
    [['SparseMat&', 'm', '', []]],
    None,
    'copies all the data to the destination matrix. All the previous content '
    'of m is erased']
parse_name: cv.SparseMat.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::copyTo namespace:cv classpath:SparseMat classname:SparseMat name:copyTo
register (method) copyTo in cv::SparseMat (cv_SparseMat_copyTo_const_SparseMat)

--- Incoming ---
[   'cv.SparseMat.copyTo',
    'void',
    ['/C'],
    [['Mat&', 'm', '', []]],
    None,
    'converts sparse matrix to dense matrix.']
parse_name: cv.SparseMat.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::copyTo namespace:cv classpath:SparseMat classname:SparseMat name:copyTo
register (method) copyTo in cv::SparseMat (cv_SparseMat_copyTo_const_Mat)

--- Incoming ---
[   'cv.SparseMat.convertTo',
    'void',
    ['/C'],
    [   ['SparseMat&', 'm', '', []],
        ['int', 'rtype', '', []],
        ['double', 'alpha', '1', []]],
    None,
    'multiplies all the matrix elements by the specified scale factor alpha '
    'and converts the results to the specified data type']
parse_name: cv.SparseMat.convertTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::convertTo namespace:cv classpath:SparseMat classname:SparseMat name:convertTo
register (method) convertTo in cv::SparseMat (cv_SparseMat_convertTo_const_SparseMat_int_double)

--- Incoming ---
[   'cv.SparseMat.convertTo',
    'void',
    ['/C'],
    [   ['Mat&', 'm', '', []],
        ['int', 'rtype', '', []],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]],
    None,
    'converts sparse matrix to dense n-dim matrix with optional type '
    'conversion and scaling.']
parse_name: cv.SparseMat.convertTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::convertTo namespace:cv classpath:SparseMat classname:SparseMat name:convertTo
register (method) convertTo in cv::SparseMat (cv_SparseMat_convertTo_const_Mat_int_double_double)

--- Incoming ---
[   'cv.SparseMat.assignTo',
    'void',
    ['/C'],
    [['SparseMat&', 'm', '', []], ['int', 'type', '-1', []]],
    None,
    '']
parse_name: cv.SparseMat.assignTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::assignTo namespace:cv classpath:SparseMat classname:SparseMat name:assignTo
register (method) assignTo in cv::SparseMat (cv_SparseMat_assignTo_const_SparseMat_int)

--- Incoming ---
[   'cv.SparseMat.create',
    'void',
    [],
    [   ['int', 'dims', '', []],
        ['const int*', '_sizes', '', []],
        ['int', '_type', '', []]],
    None,
    'reallocates sparse matrix.']
parse_name: cv.SparseMat.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::create namespace:cv classpath:SparseMat classname:SparseMat name:create
register (method) create in cv::SparseMat (cv_SparseMat_create_int_const_int_X_int)

--- Incoming ---
[   'cv.SparseMat.clear',
    'void',
    [],
    [],
    None,
    'sets all the sparse matrix elements to 0, which means clearing the hash '
    'table.']
parse_name: cv.SparseMat.clear with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::clear namespace:cv classpath:SparseMat classname:SparseMat name:clear
register (method) clear in cv::SparseMat (cv_SparseMat_clear)

--- Incoming ---
[   'cv.SparseMat.addref',
    'void',
    [],
    [],
    None,
    'manually increments the reference counter to the header.']
parse_name: cv.SparseMat.addref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::addref namespace:cv classpath:SparseMat classname:SparseMat name:addref
register (method) addref in cv::SparseMat (cv_SparseMat_addref)

--- Incoming ---
['cv.SparseMat.release', 'void', [], [], None, '']
parse_name: cv.SparseMat.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::release namespace:cv classpath:SparseMat classname:SparseMat name:release
register (method) release in cv::SparseMat (cv_SparseMat_release)

--- Incoming ---
[   'cv.SparseMat.elemSize',
    'size_t',
    ['/C'],
    [],
    None,
    'converts sparse matrix to the old-style representation; all the elements '
    'are copied.\n'
    'returns the size of each element in bytes (not including the overhead - '
    'the space occupied by SparseMat::Node elements)']
parse_name: cv.SparseMat.elemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::elemSize namespace:cv classpath:SparseMat classname:SparseMat name:elemSize
register (method) elemSize in cv::SparseMat (cv_SparseMat_elemSize_const)

--- Incoming ---
[   'cv.SparseMat.elemSize1',
    'size_t',
    ['/C'],
    [],
    None,
    'returns elemSize()/channels()']
parse_name: cv.SparseMat.elemSize1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::elemSize1 namespace:cv classpath:SparseMat classname:SparseMat name:elemSize1
register (method) elemSize1 in cv::SparseMat (cv_SparseMat_elemSize1_const)

--- Incoming ---
[   'cv.SparseMat.type',
    'int',
    ['/C'],
    [],
    None,
    'returns type of sparse matrix elements']
parse_name: cv.SparseMat.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::type namespace:cv classpath:SparseMat classname:SparseMat name:type
register (method) type in cv::SparseMat (cv_SparseMat_type_const)

--- Incoming ---
[   'cv.SparseMat.depth',
    'int',
    ['/C'],
    [],
    None,
    'returns the depth of sparse matrix elements']
parse_name: cv.SparseMat.depth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::depth namespace:cv classpath:SparseMat classname:SparseMat name:depth
register (method) depth in cv::SparseMat (cv_SparseMat_depth_const)

--- Incoming ---
[   'cv.SparseMat.channels',
    'int',
    ['/C'],
    [],
    None,
    'returns the number of channels']
parse_name: cv.SparseMat.channels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::channels namespace:cv classpath:SparseMat classname:SparseMat name:channels
register (method) channels in cv::SparseMat (cv_SparseMat_channels_const)

--- Incoming ---
[   'cv.SparseMat.size',
    'const int*',
    ['/C'],
    [],
    None,
    'returns the array of sizes, or NULL if the matrix is not allocated']
parse_name: cv.SparseMat.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::size namespace:cv classpath:SparseMat classname:SparseMat name:size
register (method) size in cv::SparseMat (cv_SparseMat_size_const)

--- Incoming ---
[   'cv.SparseMat.size',
    'int',
    ['/C'],
    [['int', 'i', '', []]],
    None,
    'returns the size of i-th matrix dimension (or 0)']
parse_name: cv.SparseMat.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::size namespace:cv classpath:SparseMat classname:SparseMat name:size
register (method) size in cv::SparseMat (cv_SparseMat_size_const_int)

--- Incoming ---
[   'cv.SparseMat.dims',
    'int',
    ['/C'],
    [],
    None,
    'returns the matrix dimensionality']
parse_name: cv.SparseMat.dims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::dims namespace:cv classpath:SparseMat classname:SparseMat name:dims
register (method) dims in cv::SparseMat (cv_SparseMat_dims_const)

--- Incoming ---
[   'cv.SparseMat.nzcount',
    'size_t',
    ['/C'],
    [],
    None,
    'returns the number of non-zero elements (=the number of hash table nodes)']
parse_name: cv.SparseMat.nzcount with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::nzcount namespace:cv classpath:SparseMat classname:SparseMat name:nzcount
register (method) nzcount in cv::SparseMat (cv_SparseMat_nzcount_const)

--- Incoming ---
[   'cv.SparseMat.hash',
    'size_t',
    ['/C'],
    [['int', 'i0', '', []]],
    None,
    'computes the element hash value (1D case)']
parse_name: cv.SparseMat.hash with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::hash namespace:cv classpath:SparseMat classname:SparseMat name:hash
register (method) hash in cv::SparseMat (cv_SparseMat_hash_const_int)

--- Incoming ---
[   'cv.SparseMat.hash',
    'size_t',
    ['/C'],
    [['int', 'i0', '', []], ['int', 'i1', '', []]],
    None,
    'computes the element hash value (2D case)']
parse_name: cv.SparseMat.hash with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::hash namespace:cv classpath:SparseMat classname:SparseMat name:hash
register (method) hash in cv::SparseMat (cv_SparseMat_hash_const_int_int)

--- Incoming ---
[   'cv.SparseMat.hash',
    'size_t',
    ['/C'],
    [['int', 'i0', '', []], ['int', 'i1', '', []], ['int', 'i2', '', []]],
    None,
    'computes the element hash value (3D case)']
parse_name: cv.SparseMat.hash with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::hash namespace:cv classpath:SparseMat classname:SparseMat name:hash
register (method) hash in cv::SparseMat (cv_SparseMat_hash_const_int_int_int)

--- Incoming ---
[   'cv.SparseMat.hash',
    'size_t',
    ['/C'],
    [['const int*', 'idx', '', []]],
    None,
    'computes the element hash value (nD case)']
parse_name: cv.SparseMat.hash with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::hash namespace:cv classpath:SparseMat classname:SparseMat name:hash
register (method) hash in cv::SparseMat (cv_SparseMat_hash_const_const_int_X)

--- Incoming ---
[   'cv.SparseMat.ptr',
    'uchar*',
    [],
    [   ['int', 'i0', '', []],
        ['bool', 'createMissing', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    '@{\nreturns pointer to the specified element (1D case)']
parse_name: cv.SparseMat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ptr namespace:cv classpath:SparseMat classname:SparseMat name:ptr
register (method) ptr in cv::SparseMat (cv_SparseMat_ptr_int_bool_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ptr',
    'uchar*',
    [],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['bool', 'createMissing', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns pointer to the specified element (2D case)']
parse_name: cv.SparseMat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ptr namespace:cv classpath:SparseMat classname:SparseMat name:ptr
register (method) ptr in cv::SparseMat (cv_SparseMat_ptr_int_int_bool_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ptr',
    'uchar*',
    [],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['int', 'i2', '', []],
        ['bool', 'createMissing', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns pointer to the specified element (3D case)']
parse_name: cv.SparseMat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ptr namespace:cv classpath:SparseMat classname:SparseMat name:ptr
register (method) ptr in cv::SparseMat (cv_SparseMat_ptr_int_int_int_bool_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ptr',
    'uchar*',
    [],
    [   ['const int*', 'idx', '', []],
        ['bool', 'createMissing', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns pointer to the specified element (nD case)']
parse_name: cv.SparseMat.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ptr namespace:cv classpath:SparseMat classname:SparseMat name:ptr
register (method) ptr in cv::SparseMat (cv_SparseMat_ptr_const_int_X_bool_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ref',
    'template<typename _Tp> _Tp&',
    [],
    [['int', 'i0', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    '@}\n@{\nreturns reference to the specified element (1D case)']
parse_name: cv.SparseMat.ref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ref namespace:cv classpath:SparseMat classname:SparseMat name:ref
register (method) ref in cv::SparseMat (cv_SparseMat_ref_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ref',
    'template<typename _Tp> _Tp&',
    [],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns reference to the specified element (2D case)']
parse_name: cv.SparseMat.ref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ref namespace:cv classpath:SparseMat classname:SparseMat name:ref
register (method) ref in cv::SparseMat (cv_SparseMat_ref_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ref',
    'template<typename _Tp> _Tp&',
    [],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['int', 'i2', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns reference to the specified element (3D case)']
parse_name: cv.SparseMat.ref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ref namespace:cv classpath:SparseMat classname:SparseMat name:ref
register (method) ref in cv::SparseMat (cv_SparseMat_ref_int_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.ref',
    'template<typename _Tp> _Tp&',
    [],
    [['const int*', 'idx', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    'returns reference to the specified element (nD case)']
parse_name: cv.SparseMat.ref with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::ref namespace:cv classpath:SparseMat classname:SparseMat name:ref
register (method) ref in cv::SparseMat (cv_SparseMat_ref_const_int_X_size_t_X)

--- Incoming ---
[   'cv.SparseMat.value',
    'template<typename _Tp> _Tp',
    ['/C'],
    [['int', 'i0', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    '@}\n@{\nreturns value of the specified element (1D case)']
parse_name: cv.SparseMat.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::value namespace:cv classpath:SparseMat classname:SparseMat name:value
register (method) value in cv::SparseMat (cv_SparseMat_value_const_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.value',
    'template<typename _Tp> _Tp',
    ['/C'],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns value of the specified element (2D case)']
parse_name: cv.SparseMat.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::value namespace:cv classpath:SparseMat classname:SparseMat name:value
register (method) value in cv::SparseMat (cv_SparseMat_value_const_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.value',
    'template<typename _Tp> _Tp',
    ['/C'],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['int', 'i2', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns value of the specified element (3D case)']
parse_name: cv.SparseMat.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::value namespace:cv classpath:SparseMat classname:SparseMat name:value
register (method) value in cv::SparseMat (cv_SparseMat_value_const_int_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.value',
    'template<typename _Tp> _Tp',
    ['/C'],
    [['const int*', 'idx', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    'returns value of the specified element (nD case)']
parse_name: cv.SparseMat.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::value namespace:cv classpath:SparseMat classname:SparseMat name:value
register (method) value in cv::SparseMat (cv_SparseMat_value_const_const_int_X_size_t_X)

--- Incoming ---
[   'cv.SparseMat.find',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [['int', 'i0', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    '@}\n@{\nreturns pointer to the specified element (1D case)']
parse_name: cv.SparseMat.find with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::find namespace:cv classpath:SparseMat classname:SparseMat name:find
register (method) find in cv::SparseMat (cv_SparseMat_find_const_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.find',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns pointer to the specified element (2D case)']
parse_name: cv.SparseMat.find with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::find namespace:cv classpath:SparseMat classname:SparseMat name:find
register (method) find in cv::SparseMat (cv_SparseMat_find_const_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.find',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['int', 'i2', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'returns pointer to the specified element (3D case)']
parse_name: cv.SparseMat.find with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::find namespace:cv classpath:SparseMat classname:SparseMat name:find
register (method) find in cv::SparseMat (cv_SparseMat_find_const_int_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.find',
    'template<typename _Tp> const _Tp*',
    ['/C'],
    [['const int*', 'idx', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    'returns pointer to the specified element (nD case)']
parse_name: cv.SparseMat.find with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::find namespace:cv classpath:SparseMat classname:SparseMat name:find
register (method) find in cv::SparseMat (cv_SparseMat_find_const_const_int_X_size_t_X)

--- Incoming ---
[   'cv.SparseMat.erase',
    'void',
    [],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    '@}\nerases the specified element (2D case)']
parse_name: cv.SparseMat.erase with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::erase namespace:cv classpath:SparseMat classname:SparseMat name:erase
register (method) erase in cv::SparseMat (cv_SparseMat_erase_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.erase',
    'void',
    [],
    [   ['int', 'i0', '', []],
        ['int', 'i1', '', []],
        ['int', 'i2', '', []],
        ['size_t*', 'hashval', '0', []]],
    None,
    'erases the specified element (3D case)']
parse_name: cv.SparseMat.erase with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::erase namespace:cv classpath:SparseMat classname:SparseMat name:erase
register (method) erase in cv::SparseMat (cv_SparseMat_erase_int_int_int_size_t_X)

--- Incoming ---
[   'cv.SparseMat.erase',
    'void',
    [],
    [['const int*', 'idx', '', []], ['size_t*', 'hashval', '0', []]],
    None,
    'erases the specified element (nD case)']
parse_name: cv.SparseMat.erase with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::erase namespace:cv classpath:SparseMat classname:SparseMat name:erase
register (method) erase in cv::SparseMat (cv_SparseMat_erase_const_int_X_size_t_X)

--- Incoming ---
[   'cv.SparseMat.begin',
    'SparseMatIterator',
    [],
    [],
    None,
    '@{\nreturns the sparse matrix iterator at the matrix beginning']
parse_name: cv.SparseMat.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::begin namespace:cv classpath:SparseMat classname:SparseMat name:begin
register (method) begin in cv::SparseMat (cv_SparseMat_begin)

--- Incoming ---
[   'cv.SparseMat.begin',
    'template<typename _Tp> SparseMatIterator_<_Tp>',
    [],
    [],
    None,
    'returns the sparse matrix iterator at the matrix beginning']
parse_name: cv.SparseMat.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::begin namespace:cv classpath:SparseMat classname:SparseMat name:begin
Registering an unknown type: template<typename _Tp> SparseMatIterator_<_Tp>
register (method) begin in cv::SparseMat (cv_SparseMat_begin)

--- Incoming ---
[   'cv.SparseMat.begin',
    'SparseMatConstIterator',
    ['/C'],
    [],
    None,
    'returns the read-only sparse matrix iterator at the matrix beginning']
parse_name: cv.SparseMat.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::begin namespace:cv classpath:SparseMat classname:SparseMat name:begin
register (method) begin in cv::SparseMat (cv_SparseMat_begin_const)

--- Incoming ---
[   'cv.SparseMat.begin',
    'template<typename _Tp> SparseMatConstIterator_<_Tp>',
    ['/C'],
    [],
    None,
    'returns the read-only sparse matrix iterator at the matrix beginning']
parse_name: cv.SparseMat.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::begin namespace:cv classpath:SparseMat classname:SparseMat name:begin
Registering an unknown type: template<typename _Tp> SparseMatConstIterator_<_Tp>
register (method) begin in cv::SparseMat (cv_SparseMat_begin_const)

--- Incoming ---
[   'cv.SparseMat.end',
    'SparseMatIterator',
    [],
    [],
    None,
    '@}\nreturns the sparse matrix iterator at the matrix end']
parse_name: cv.SparseMat.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::end namespace:cv classpath:SparseMat classname:SparseMat name:end
register (method) end in cv::SparseMat (cv_SparseMat_end)

--- Incoming ---
[   'cv.SparseMat.end',
    'SparseMatConstIterator',
    ['/C'],
    [],
    None,
    'returns the read-only sparse matrix iterator at the matrix end']
parse_name: cv.SparseMat.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::end namespace:cv classpath:SparseMat classname:SparseMat name:end
register (method) end in cv::SparseMat (cv_SparseMat_end_const)

--- Incoming ---
[   'cv.SparseMat.end',
    'template<typename _Tp> SparseMatIterator_<_Tp>',
    [],
    [],
    None,
    'returns the typed sparse matrix iterator at the matrix end']
parse_name: cv.SparseMat.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::end namespace:cv classpath:SparseMat classname:SparseMat name:end
register (method) end in cv::SparseMat (cv_SparseMat_end)

--- Incoming ---
[   'cv.SparseMat.end',
    'template<typename _Tp> SparseMatConstIterator_<_Tp>',
    ['/C'],
    [],
    None,
    'returns the typed read-only sparse matrix iterator at the matrix end']
parse_name: cv.SparseMat.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::end namespace:cv classpath:SparseMat classname:SparseMat name:end
register (method) end in cv::SparseMat (cv_SparseMat_end_const)

--- Incoming ---
[   'cv.SparseMat.value',
    'template<typename _Tp> _Tp&',
    [],
    [['Node*', 'n', '', []]],
    None,
    'returns the value stored in the sparse martix node']
parse_name: cv.SparseMat.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::value namespace:cv classpath:SparseMat classname:SparseMat name:value
register (method) value in cv::SparseMat (cv_SparseMat_value_Node)

--- Incoming ---
[   'cv.SparseMat.value',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [['const Node*', 'n', '', []]],
    None,
    'returns the value stored in the sparse martix node']
parse_name: cv.SparseMat.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::value namespace:cv classpath:SparseMat classname:SparseMat name:value
register (method) value in cv::SparseMat (cv_SparseMat_value_const_const_Node)

--- Incoming ---
['cv.SparseMat.node', 'Node*', [], [['size_t', 'nidx', '', []]], None, '']
parse_name: cv.SparseMat.node with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::node namespace:cv classpath:SparseMat classname:SparseMat name:node
register (method) node in cv::SparseMat (cv_SparseMat_node_size_t)

--- Incoming ---
[   'cv.SparseMat.node',
    'const Node*',
    ['/C'],
    [['size_t', 'nidx', '', []]],
    None,
    '']
parse_name: cv.SparseMat.node with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::node namespace:cv classpath:SparseMat classname:SparseMat name:node
register (method) node in cv::SparseMat (cv_SparseMat_node_const_size_t)

--- Incoming ---
[   'cv.SparseMat.newNode',
    'uchar*',
    [],
    [['const int*', 'idx', '', []], ['size_t', 'hashval', '', []]],
    None,
    '']
parse_name: cv.SparseMat.newNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::newNode namespace:cv classpath:SparseMat classname:SparseMat name:newNode
register (method) newNode in cv::SparseMat (cv_SparseMat_newNode_const_int_X_size_t)

--- Incoming ---
[   'cv.SparseMat.removeNode',
    'void',
    [],
    [   ['size_t', 'hidx', '', []],
        ['size_t', 'nidx', '', []],
        ['size_t', 'previdx', '', []]],
    None,
    '']
parse_name: cv.SparseMat.removeNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::removeNode namespace:cv classpath:SparseMat classname:SparseMat name:removeNode
register (method) removeNode in cv::SparseMat (cv_SparseMat_removeNode_size_t_size_t_size_t)

--- Incoming ---
[   'cv.SparseMat.resizeHashTab',
    'void',
    [],
    [['size_t', 'newsize', '', []]],
    None,
    '']
parse_name: cv.SparseMat.resizeHashTab with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMat::resizeHashTab namespace:cv classpath:SparseMat classname:SparseMat name:resizeHashTab
register (method) resizeHashTab in cv::SparseMat (cv_SparseMat_resizeHashTab_size_t)

--- Incoming ---
['class cv.MatConstIterator', '', [], [], None, '']
parse_name: class cv.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator namespace:cv classpath: classname: name:MatConstIterator
register class cv::MatConstIterator (['class cv.MatConstIterator', '', [], [], None, ''])

--- Incoming ---
['typedef cv.MatConstIterator.value_type', 'uchar*', '', [], None, '']
parse_name: typedef cv.MatConstIterator.value_type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::value_type namespace:cv classpath:MatConstIterator classname:MatConstIterator name:value_type
Registering an unknown type: value_type

--- Incoming ---
['typedef cv.MatConstIterator.difference_type', 'ptrdiff_t', '', [], None, '']
parse_name: typedef cv.MatConstIterator.difference_type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::difference_type namespace:cv classpath:MatConstIterator classname:MatConstIterator name:difference_type
Registering an unknown type: difference_type

--- Incoming ---
['typedef cv.MatConstIterator.pointer', 'const uchar**', '', [], None, '']
parse_name: typedef cv.MatConstIterator.pointer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::pointer namespace:cv classpath:MatConstIterator classname:MatConstIterator name:pointer
Registering an unknown type: pointer

--- Incoming ---
['typedef cv.MatConstIterator.reference', 'uchar*', '', [], None, '']
parse_name: typedef cv.MatConstIterator.reference with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::reference namespace:cv classpath:MatConstIterator classname:MatConstIterator name:reference
Registering an unknown type: reference

--- Incoming ---
[   'typedef cv.MatConstIterator.iterator_category',
    'std::random_access_iterator_tag',
    '',
    [],
    None,
    '']
parse_name: typedef cv.MatConstIterator.iterator_category with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::iterator_category namespace:cv classpath:MatConstIterator classname:MatConstIterator name:iterator_category
Registering an unknown type: std::random_access_iterator_tag

--- Incoming ---
[   'cv.MatConstIterator.MatConstIterator',
    'M',
    [],
    [],
    None,
    'default constructor']
parse_name: cv.MatConstIterator.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::MatConstIterator namespace:cv classpath:MatConstIterator classname:MatConstIterator name:MatConstIterator
register (constructor) default in cv::MatConstIterator (cv_MatConstIterator_MatConstIterator)

--- Incoming ---
[   'cv.MatConstIterator.MatConstIterator',
    'M',
    [],
    [['const Mat*', '_m', '', []]],
    None,
    'constructor that sets the iterator to the beginning of the matrix']
parse_name: cv.MatConstIterator.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::MatConstIterator namespace:cv classpath:MatConstIterator classname:MatConstIterator name:MatConstIterator
register (constructor) new in cv::MatConstIterator (cv_MatConstIterator_MatConstIterator_const_Mat)

--- Incoming ---
[   'cv.MatConstIterator.MatConstIterator',
    'M',
    [],
    [   ['const Mat*', '_m', '', []],
        ['int', '_row', '', []],
        ['int', '_col', '0', []]],
    None,
    'constructor that sets the iterator to the specified element of the matrix']
parse_name: cv.MatConstIterator.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::MatConstIterator namespace:cv classpath:MatConstIterator classname:MatConstIterator name:MatConstIterator
register (constructor) new in cv::MatConstIterator (cv_MatConstIterator_MatConstIterator_const_Mat_int_int)

--- Incoming ---
[   'cv.MatConstIterator.MatConstIterator',
    'M',
    [],
    [['const Mat*', '_m', '', []], ['Point', '_pt', '', []]],
    None,
    'constructor that sets the iterator to the specified element of the matrix']
parse_name: cv.MatConstIterator.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::MatConstIterator namespace:cv classpath:MatConstIterator classname:MatConstIterator name:MatConstIterator
register (constructor) new in cv::MatConstIterator (cv_MatConstIterator_MatConstIterator_const_Mat_Point)

--- Incoming ---
[   'cv.MatConstIterator.MatConstIterator',
    'M',
    [],
    [['const Mat*', '_m', '', []], ['const int*', '_idx', '', []]],
    None,
    'constructor that sets the iterator to the specified element of the matrix']
parse_name: cv.MatConstIterator.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::MatConstIterator namespace:cv classpath:MatConstIterator classname:MatConstIterator name:MatConstIterator
register (constructor) new in cv::MatConstIterator (cv_MatConstIterator_MatConstIterator_const_Mat_const_int_X)

--- Incoming ---
[   'cv.MatConstIterator.MatConstIterator',
    'M',
    [],
    [['const MatConstIterator&', 'it', '', []]],
    None,
    'copy constructor']
parse_name: cv.MatConstIterator.MatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::MatConstIterator namespace:cv classpath:MatConstIterator classname:MatConstIterator name:MatConstIterator
register (constructor) copy in cv::MatConstIterator (cv_MatConstIterator_MatConstIterator_MatConstIterator)

--- Incoming ---
[   'cv.MatConstIterator.operator =',
    'MatConstIterator&',
    [],
    [['const MatConstIterator&', 'it', '', []]],
    None,
    'copy operator']
parse_name: cv.MatConstIterator.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator = namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator =
ignore (method) operator = in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator *',
    'const uchar* operator *',
    ['/C'],
    [],
    None,
    'returns the current matrix element']
parse_name: cv.MatConstIterator.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator * namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator *
Registering an unknown type: uchar* operator
ignore (method) operator * in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator []',
    'const uchar*',
    ['/C'],
    [['ptrdiff_t', 'i', '', []]],
    None,
    'returns the i-th matrix element, relative to the current']
parse_name: cv.MatConstIterator.operator [] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator [] namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator []
ignore (method) operator [] in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator +=',
    'MatConstIterator&',
    [],
    [['ptrdiff_t', 'ofs', '', []]],
    None,
    'shifts the iterator forward by the specified number of elements']
parse_name: cv.MatConstIterator.operator += with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator += namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator +=
ignore (method) operator += in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator -=',
    'MatConstIterator&',
    [],
    [['ptrdiff_t', 'ofs', '', []]],
    None,
    'shifts the iterator backward by the specified number of elements']
parse_name: cv.MatConstIterator.operator -= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator -= namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator -=
ignore (method) operator -= in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator --',
    'MatConstIterator&',
    [],
    [],
    None,
    'decrements the iterator']
parse_name: cv.MatConstIterator.operator -- with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator -- namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator --
ignore (method) operator -- in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator --',
    'MatConstIterator',
    [],
    [['int', '', '', []]],
    None,
    'decrements the iterator']
parse_name: cv.MatConstIterator.operator -- with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator -- namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator --
ignore (method) operator -- in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator ++',
    'MatConstIterator&',
    [],
    [],
    None,
    'increments the iterator']
parse_name: cv.MatConstIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator ++ namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator ++
ignore (method) operator ++ in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.operator ++',
    'MatConstIterator',
    [],
    [['int', '', '', []]],
    None,
    'increments the iterator']
parse_name: cv.MatConstIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::operator ++ namespace:cv classpath:MatConstIterator classname:MatConstIterator name:operator ++
ignore (method) operator ++ in cv::MatConstIterator

--- Incoming ---
[   'cv.MatConstIterator.pos',
    'Point',
    ['/C'],
    [],
    None,
    'returns the current iterator position']
parse_name: cv.MatConstIterator.pos with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::pos namespace:cv classpath:MatConstIterator classname:MatConstIterator name:pos
register (method) pos in cv::MatConstIterator (cv_MatConstIterator_pos_const)

--- Incoming ---
[   'cv.MatConstIterator.pos',
    'void',
    ['/C'],
    [['int*', '_idx', '', []]],
    None,
    'returns the current iterator position']
parse_name: cv.MatConstIterator.pos with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::pos namespace:cv classpath:MatConstIterator classname:MatConstIterator name:pos
register (method) pos in cv::MatConstIterator (cv_MatConstIterator_pos_const_int_X)

--- Incoming ---
['cv.MatConstIterator.lpos', 'ptrdiff_t', ['/C'], [], None, '']
parse_name: cv.MatConstIterator.lpos with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::lpos namespace:cv classpath:MatConstIterator classname:MatConstIterator name:lpos
register (method) lpos in cv::MatConstIterator (cv_MatConstIterator_lpos_const)

--- Incoming ---
[   'cv.MatConstIterator.seek',
    'void',
    [],
    [['ptrdiff_t', 'ofs', '', []], ['bool', 'relative', 'false', []]],
    None,
    '']
parse_name: cv.MatConstIterator.seek with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::seek namespace:cv classpath:MatConstIterator classname:MatConstIterator name:seek
register (method) seek in cv::MatConstIterator (cv_MatConstIterator_seek_ptrdiff_t_bool)

--- Incoming ---
[   'cv.MatConstIterator.seek',
    'void',
    [],
    [['const int*', '_idx', '', []], ['bool', 'relative', 'false', []]],
    None,
    '']
parse_name: cv.MatConstIterator.seek with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatConstIterator::seek namespace:cv classpath:MatConstIterator classname:MatConstIterator name:seek
register (method) seek in cv::MatConstIterator (cv_MatConstIterator_seek_const_int_X_bool)

--- Incoming ---
[   'class cv.SparseMatConstIterator',
    '',
    [],
    [],
    None,
    '@brief Read-Only Sparse Matrix Iterator.\n'
    '\n'
    'Here is how to use the iterator to compute the sum of floating-point '
    'sparse matrix elements:\n'
    '\n'
    '\\code\n'
    'SparseMatConstIterator it = m.begin(), it_end = m.end();\n'
    'double s = 0;\n'
    'CV_Assert( m.type() == CV_32F );\n'
    'for( ; it != it_end; ++it )\n'
    's += it.value<float>();\n'
    '\\endcode']
parse_name: class cv.SparseMatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator namespace:cv classpath: classname: name:SparseMatConstIterator
register class cv::SparseMatConstIterator (['class cv.SparseMatConstIterator', '', [], [], None, '@brief Read-Only Sparse Matrix Iterator.\n\nHere is how to use the iterator to compute the sum of floating-point sparse matrix elements:\n\n\\code\nSparseMatConstIterator it = m.begin(), it_end = m.end();\ndouble s = 0;\nCV_Assert( m.type() == CV_32F );\nfor( ; it != it_end; ++it )\ns += it.value<float>();\n\\endcode'])

--- Incoming ---
[   'cv.SparseMatConstIterator.SparseMatConstIterator',
    'S',
    [],
    [],
    None,
    'the default constructor']
parse_name: cv.SparseMatConstIterator.SparseMatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::SparseMatConstIterator namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:SparseMatConstIterator
register (constructor) default in cv::SparseMatConstIterator (cv_SparseMatConstIterator_SparseMatConstIterator)

--- Incoming ---
[   'cv.SparseMatConstIterator.SparseMatConstIterator',
    'S',
    [],
    [['const SparseMat*', '_m', '', []]],
    None,
    'the full constructor setting the iterator to the first sparse matrix '
    'element']
parse_name: cv.SparseMatConstIterator.SparseMatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::SparseMatConstIterator namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:SparseMatConstIterator
register (constructor) new in cv::SparseMatConstIterator (cv_SparseMatConstIterator_SparseMatConstIterator_const_SparseMat)

--- Incoming ---
[   'cv.SparseMatConstIterator.SparseMatConstIterator',
    'S',
    [],
    [['const SparseMatConstIterator&', 'it', '', []]],
    None,
    'the copy constructor']
parse_name: cv.SparseMatConstIterator.SparseMatConstIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::SparseMatConstIterator namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:SparseMatConstIterator
register (constructor) copy in cv::SparseMatConstIterator (cv_SparseMatConstIterator_SparseMatConstIterator_SparseMatConstIterator)

--- Incoming ---
[   'cv.SparseMatConstIterator.operator =',
    'SparseMatConstIterator&',
    [],
    [['const SparseMatConstIterator&', 'it', '', []]],
    None,
    'the assignment operator']
parse_name: cv.SparseMatConstIterator.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::operator = namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:operator =
ignore (method) operator = in cv::SparseMatConstIterator

--- Incoming ---
[   'cv.SparseMatConstIterator.value',
    'template<typename _Tp> const _Tp&',
    ['/C'],
    [],
    None,
    'template method returning the current matrix element']
parse_name: cv.SparseMatConstIterator.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::value namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:value
register (method) value in cv::SparseMatConstIterator (cv_SparseMatConstIterator_value_const)

--- Incoming ---
[   'cv.SparseMatConstIterator.node',
    'const SparseMat::Node*',
    ['/C'],
    [],
    None,
    'returns the current node of the sparse matrix. it.node->idx is the '
    'current element index']
parse_name: cv.SparseMatConstIterator.node with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::node namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:node
register (method) node in cv::SparseMatConstIterator (cv_SparseMatConstIterator_node_const)

--- Incoming ---
[   'cv.SparseMatConstIterator.operator --',
    'SparseMatConstIterator&',
    [],
    [],
    None,
    'moves iterator to the previous element']
parse_name: cv.SparseMatConstIterator.operator -- with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::operator -- namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:operator --
ignore (method) operator -- in cv::SparseMatConstIterator

--- Incoming ---
[   'cv.SparseMatConstIterator.operator --',
    'SparseMatConstIterator',
    [],
    [['int', '', '', []]],
    None,
    'moves iterator to the previous element']
parse_name: cv.SparseMatConstIterator.operator -- with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::operator -- namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:operator --
ignore (method) operator -- in cv::SparseMatConstIterator

--- Incoming ---
[   'cv.SparseMatConstIterator.operator ++',
    'SparseMatConstIterator&',
    [],
    [],
    None,
    'moves iterator to the next element']
parse_name: cv.SparseMatConstIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::operator ++ namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:operator ++
ignore (method) operator ++ in cv::SparseMatConstIterator

--- Incoming ---
[   'cv.SparseMatConstIterator.operator ++',
    'SparseMatConstIterator',
    [],
    [['int', '', '', []]],
    None,
    'moves iterator to the next element']
parse_name: cv.SparseMatConstIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::operator ++ namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:operator ++
ignore (method) operator ++ in cv::SparseMatConstIterator

--- Incoming ---
[   'cv.SparseMatConstIterator.seekEnd',
    'void',
    [],
    [],
    None,
    'moves iterator to the element after the last element']
parse_name: cv.SparseMatConstIterator.seekEnd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatConstIterator::seekEnd namespace:cv classpath:SparseMatConstIterator classname:SparseMatConstIterator name:seekEnd
register (method) seekEnd in cv::SparseMatConstIterator (cv_SparseMatConstIterator_seekEnd)

--- Incoming ---
[   'class cv.SparseMatIterator',
    ': cv::SparseMatConstIterator',
    [],
    [],
    None,
    '@brief  Read-write Sparse Matrix Iterator\n'
    '\n'
    'The class is similar to cv::SparseMatConstIterator,\n'
    'but can be used for in-place modification of the matrix elements.']
parse_name: class cv.SparseMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator namespace:cv classpath: classname: name:SparseMatIterator
register class cv::SparseMatIterator (['class cv.SparseMatIterator', ': cv::SparseMatConstIterator', [], [], None, '@brief  Read-write Sparse Matrix Iterator\n\nThe class is similar to cv::SparseMatConstIterator,\nbut can be used for in-place modification of the matrix elements.']) impl:cv::SparseMatConstIterator

--- Incoming ---
[   'cv.SparseMatIterator.SparseMatIterator',
    'S',
    [],
    [],
    None,
    'the default constructor']
parse_name: cv.SparseMatIterator.SparseMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::SparseMatIterator namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:SparseMatIterator
register (constructor) default in cv::SparseMatIterator (cv_SparseMatIterator_SparseMatIterator)

--- Incoming ---
[   'cv.SparseMatIterator.SparseMatIterator',
    'S',
    [],
    [['SparseMat*', '_m', '', []]],
    None,
    'the full constructor setting the iterator to the first sparse matrix '
    'element']
parse_name: cv.SparseMatIterator.SparseMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::SparseMatIterator namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:SparseMatIterator
register (constructor) new in cv::SparseMatIterator (cv_SparseMatIterator_SparseMatIterator_SparseMat)

--- Incoming ---
[   'cv.SparseMatIterator.SparseMatIterator',
    'S',
    [],
    [['SparseMat*', '_m', '', []], ['const int*', 'idx', '', []]],
    None,
    'the full constructor setting the iterator to the specified sparse matrix '
    'element']
parse_name: cv.SparseMatIterator.SparseMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::SparseMatIterator namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:SparseMatIterator
register (constructor) new in cv::SparseMatIterator (cv_SparseMatIterator_SparseMatIterator_SparseMat_const_int_X)

--- Incoming ---
[   'cv.SparseMatIterator.SparseMatIterator',
    'S',
    [],
    [['const SparseMatIterator&', 'it', '', []]],
    None,
    'the copy constructor']
parse_name: cv.SparseMatIterator.SparseMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::SparseMatIterator namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:SparseMatIterator
register (constructor) copy in cv::SparseMatIterator (cv_SparseMatIterator_SparseMatIterator_SparseMatIterator)

--- Incoming ---
[   'cv.SparseMatIterator.operator =',
    'SparseMatIterator&',
    [],
    [['const SparseMatIterator&', 'it', '', []]],
    None,
    'the assignment operator']
parse_name: cv.SparseMatIterator.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::operator = namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:operator =
ignore (method) operator = in cv::SparseMatIterator

--- Incoming ---
[   'cv.SparseMatIterator.value',
    'template<typename _Tp> _Tp&',
    ['/C'],
    [],
    None,
    'returns read-write reference to the current sparse matrix element']
parse_name: cv.SparseMatIterator.value with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::value namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:value
register (method) value in cv::SparseMatIterator (cv_SparseMatIterator_value_const)

--- Incoming ---
[   'cv.SparseMatIterator.node',
    'SparseMat::Node*',
    ['/C'],
    [],
    None,
    'returns pointer to the current sparse matrix node. it.node->idx is the '
    'index of the current element (do not modify it!)']
parse_name: cv.SparseMatIterator.node with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::node namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:node
register (method) node in cv::SparseMatIterator (cv_SparseMatIterator_node_const)

--- Incoming ---
[   'cv.SparseMatIterator.operator ++',
    'SparseMatIterator&',
    [],
    [],
    None,
    'moves iterator to the next element']
parse_name: cv.SparseMatIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::operator ++ namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:operator ++
ignore (method) operator ++ in cv::SparseMatIterator

--- Incoming ---
[   'cv.SparseMatIterator.operator ++',
    'SparseMatIterator',
    [],
    [['int', '', '', []]],
    None,
    'moves iterator to the next element']
parse_name: cv.SparseMatIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SparseMatIterator::operator ++ namespace:cv classpath:SparseMatIterator classname:SparseMatIterator name:operator ++
ignore (method) operator ++ in cv::SparseMatIterator

--- Incoming ---
[   'class cv.NAryMatIterator',
    '',
    [],
    [],
    None,
    '@brief n-ary multi-dimensional array iterator.\n'
    '\n'
    'Use the class to implement unary, binary, and, generally, n-ary '
    'element-wise operations on\n'
    'multi-dimensional arrays. Some of the arguments of an n-ary function may '
    'be continuous arrays, some\n'
    "may be not. It is possible to use conventional MatIterator 's for each "
    'array but incrementing all of\n'
    'the iterators after each small operations may be a big overhead. In this '
    'case consider using\n'
    'NAryMatIterator to iterate through several matrices simultaneously as '
    'long as they have the same\n'
    'geometry (dimensionality and all the dimension sizes are the same). On '
    'each iteration `it.planes[0]`,\n'
    '`it.planes[1]`,... will be the slices of the corresponding matrices.\n'
    '\n'
    'The example below illustrates how you can compute a normalized and '
    'threshold 3D color histogram:\n'
    '@code\n'
    'void computeNormalizedColorHist(const Mat& image, Mat& hist, int N, '
    'double minProb)\n'
    '{\n'
    'const int histSize[] = {N, N, N};\n'
    '\n'
    '// make sure that the histogram has a proper size and type\n'
    'hist.create(3, histSize, CV_32F);\n'
    '\n'
    '// and clear it\n'
    'hist = Scalar(0);\n'
    '\n'
    '// the loop below assumes that the image\n'
    '// is a 8-bit 3-channel. check it.\n'
    'CV_Assert(image.type() == CV_8UC3);\n'
    'MatConstIterator_<Vec3b> it = image.begin<Vec3b>(),\n'
    'it_end = image.end<Vec3b>();\n'
    'for( ; it != it_end; ++it )\n'
    '{\n'
    'const Vec3b& pix = *it;\n'
    'hist.at<float>(pix[0]*N/256, pix[1]*N/256, pix[2]*N/256) += 1.f;\n'
    '}\n'
    '\n'
    'minProb *= image.rows*image.cols;\n'
    '\n'
    '// initialize iterator (the style is different from STL).\n'
    '// after initialization the iterator will contain\n'
    '// the number of slices or planes the iterator will go through.\n'
    '// it simultaneously increments iterators for several matrices\n'
    '// supplied as a null terminated list of pointers\n'
    'const Mat* arrays[] = {&hist, 0};\n'
    'Mat planes[1];\n'
    'NAryMatIterator itNAry(arrays, planes, 1);\n'
    'double s = 0;\n'
    '// iterate through the matrix. on each iteration\n'
    '// itNAry.planes[i] (of type Mat) will be set to the current plane\n'
    '// of the i-th n-dim matrix passed to the iterator constructor.\n'
    'for(int p = 0; p < itNAry.nplanes; p++, ++itNAry)\n'
    '{\n'
    'threshold(itNAry.planes[0], itNAry.planes[0], minProb, 0, '
    'THRESH_TOZERO);\n'
    's += sum(itNAry.planes[0])[0];\n'
    '}\n'
    '\n'
    's = 1./s;\n'
    'itNAry = NAryMatIterator(arrays, planes, 1);\n'
    'for(int p = 0; p < itNAry.nplanes; p++, ++itNAry)\n'
    'itNAry.planes[0] *= s;\n'
    '}\n'
    '@endcode']
parse_name: class cv.NAryMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator namespace:cv classpath: classname: name:NAryMatIterator
register class cv::NAryMatIterator (['class cv.NAryMatIterator', '', [], [], None, "@brief n-ary multi-dimensional array iterator.\n\nUse the class to implement unary, binary, and, generally, n-ary element-wise operations on\nmulti-dimensional arrays. Some of the arguments of an n-ary function may be continuous arrays, some\nmay be not. It is possible to use conventional MatIterator 's for each array but incrementing all of\nthe iterators after each small operations may be a big overhead. In this case consider using\nNAryMatIterator to iterate through several matrices simultaneously as long as they have the same\ngeometry (dimensionality and all the dimension sizes are the same). On each iteration `it.planes[0]`,\n`it.planes[1]`,... will be the slices of the corresponding matrices.\n\nThe example below illustrates how you can compute a normalized and threshold 3D color histogram:\n@code\nvoid computeNormalizedColorHist(const Mat& image, Mat& hist, int N, double minProb)\n{\nconst int histSize[] = {N, N, N};\n\n// make sure that the histogram has a proper size and type\nhist.create(3, histSize, CV_32F);\n\n// and clear it\nhist = Scalar(0);\n\n// the loop below assumes that the image\n// is a 8-bit 3-channel. check it.\nCV_Assert(image.type() == CV_8UC3);\nMatConstIterator_<Vec3b> it = image.begin<Vec3b>(),\nit_end = image.end<Vec3b>();\nfor( ; it != it_end; ++it )\n{\nconst Vec3b& pix = *it;\nhist.at<float>(pix[0]*N/256, pix[1]*N/256, pix[2]*N/256) += 1.f;\n}\n\nminProb *= image.rows*image.cols;\n\n// initialize iterator (the style is different from STL).\n// after initialization the iterator will contain\n// the number of slices or planes the iterator will go through.\n// it simultaneously increments iterators for several matrices\n// supplied as a null terminated list of pointers\nconst Mat* arrays[] = {&hist, 0};\nMat planes[1];\nNAryMatIterator itNAry(arrays, planes, 1);\ndouble s = 0;\n// iterate through the matrix. on each iteration\n// itNAry.planes[i] (of type Mat) will be set to the current plane\n// of the i-th n-dim matrix passed to the iterator constructor.\nfor(int p = 0; p < itNAry.nplanes; p++, ++itNAry)\n{\nthreshold(itNAry.planes[0], itNAry.planes[0], minProb, 0, THRESH_TOZERO);\ns += sum(itNAry.planes[0])[0];\n}\n\ns = 1./s;\nitNAry = NAryMatIterator(arrays, planes, 1);\nfor(int p = 0; p < itNAry.nplanes; p++, ++itNAry)\nitNAry.planes[0] *= s;\n}\n@endcode"])

--- Incoming ---
[   'cv.NAryMatIterator.NAryMatIterator',
    'N',
    [],
    [],
    None,
    'the default constructor']
parse_name: cv.NAryMatIterator.NAryMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator::NAryMatIterator namespace:cv classpath:NAryMatIterator classname:NAryMatIterator name:NAryMatIterator
register (constructor) default in cv::NAryMatIterator (cv_NAryMatIterator_NAryMatIterator)

--- Incoming ---
[   'cv.NAryMatIterator.NAryMatIterator',
    'N',
    [],
    [   ['const Mat**', 'arrays', '', []],
        ['uchar**', 'ptrs', '', []],
        ['int', 'narrays', '-1', []]],
    None,
    'the full constructor taking arbitrary number of n-dim matrices']
parse_name: cv.NAryMatIterator.NAryMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator::NAryMatIterator namespace:cv classpath:NAryMatIterator classname:NAryMatIterator name:NAryMatIterator
register (constructor) new in cv::NAryMatIterator (cv_NAryMatIterator_NAryMatIterator_Mat**_uchar**_int)

--- Incoming ---
[   'cv.NAryMatIterator.NAryMatIterator',
    'N',
    [],
    [   ['const Mat**', 'arrays', '', []],
        ['Mat*', 'planes', '', []],
        ['int', 'narrays', '-1', []]],
    None,
    'the full constructor taking arbitrary number of n-dim matrices']
parse_name: cv.NAryMatIterator.NAryMatIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator::NAryMatIterator namespace:cv classpath:NAryMatIterator classname:NAryMatIterator name:NAryMatIterator
register (constructor) new in cv::NAryMatIterator (cv_NAryMatIterator_NAryMatIterator_Mat**_Mat_int)

--- Incoming ---
[   'cv.NAryMatIterator.init',
    'void',
    [],
    [   ['const Mat**', 'arrays', '', []],
        ['Mat*', 'planes', '', []],
        ['uchar**', 'ptrs', '', []],
        ['int', 'narrays', '-1', []]],
    None,
    'the separate iterator initialization method']
parse_name: cv.NAryMatIterator.init with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator::init namespace:cv classpath:NAryMatIterator classname:NAryMatIterator name:init
register (method) init in cv::NAryMatIterator (cv_NAryMatIterator_init_Mat**_Mat_uchar**_int)

--- Incoming ---
[   'cv.NAryMatIterator.operator ++',
    'NAryMatIterator&',
    [],
    [],
    None,
    'proceeds to the next plane of every iterated matrix']
parse_name: cv.NAryMatIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator::operator ++ namespace:cv classpath:NAryMatIterator classname:NAryMatIterator name:operator ++
ignore (method) operator ++ in cv::NAryMatIterator

--- Incoming ---
[   'cv.NAryMatIterator.operator ++',
    'NAryMatIterator',
    [],
    [['int', '', '', []]],
    None,
    'proceeds to the next plane of every iterated matrix (postfix increment '
    'operator)']
parse_name: cv.NAryMatIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::NAryMatIterator::operator ++ namespace:cv classpath:NAryMatIterator classname:NAryMatIterator name:operator ++
ignore (method) operator ++ in cv::NAryMatIterator

--- Incoming ---
['class cv.MatOp', '', [], [], None, '']
parse_name: class cv.MatOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp namespace:cv classpath: classname: name:MatOp
register class cv::MatOp (['class cv.MatOp', '', [], [], None, ''])

--- Incoming ---
['cv.MatOp.MatOp', 'M', [], [], None, '']
parse_name: cv.MatOp.MatOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::MatOp namespace:cv classpath:MatOp classname:MatOp name:MatOp
register (constructor) default in cv::MatOp (trait) (cv_MatOp_MatOp)

--- Incoming ---
['cv.MatOp.~MatOp', '~', [], [], None, '']
parse_name: cv.MatOp.~MatOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::~MatOp namespace:cv classpath:MatOp classname:MatOp name:~MatOp
ignore destructor (method) ~MatOp in cv::MatOp (trait)

--- Incoming ---
[   'cv.MatOp.elementWise',
    'bool',
    ['/C'],
    [['const MatExpr&', 'expr', '', []]],
    None,
    '']
parse_name: cv.MatOp.elementWise with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::elementWise namespace:cv classpath:MatOp classname:MatOp name:elementWise
register (method) elementWise in cv::MatOp (trait) (cv_MatOp_elementWise_const_MatExpr)

--- Incoming ---
[   'cv.MatOp.assign',
    'void',
    ['/A', '/C'],
    [   ['const MatExpr&', 'expr', '', []],
        ['Mat&', 'm', '', []],
        ['int', 'type', '-1', []]],
    None,
    '']
parse_name: cv.MatOp.assign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::assign namespace:cv classpath:MatOp classname:MatOp name:assign
register (method) assign in cv::MatOp (trait) (cv_MatOp_assign_const_MatExpr_Mat_int)

--- Incoming ---
[   'cv.MatOp.roi',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr', '', []],
        ['const Range&', 'rowRange', '', []],
        ['const Range&', 'colRange', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.roi with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::roi namespace:cv classpath:MatOp classname:MatOp name:roi
register (method) roi in cv::MatOp (trait) (cv_MatOp_roi_const_MatExpr_Range_Range_MatExpr)

--- Incoming ---
[   'cv.MatOp.diag',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr', '', []],
        ['int', 'd', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.diag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::diag namespace:cv classpath:MatOp classname:MatOp name:diag
register (method) diag in cv::MatOp (trait) (cv_MatOp_diag_const_MatExpr_int_MatExpr)

--- Incoming ---
[   'cv.MatOp.augAssignAdd',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignAdd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignAdd namespace:cv classpath:MatOp classname:MatOp name:augAssignAdd
register (method) augAssignAdd in cv::MatOp (trait) (cv_MatOp_augAssignAdd_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.augAssignSubtract',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignSubtract with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignSubtract namespace:cv classpath:MatOp classname:MatOp name:augAssignSubtract
register (method) augAssignSubtract in cv::MatOp (trait) (cv_MatOp_augAssignSubtract_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.augAssignMultiply',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignMultiply with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignMultiply namespace:cv classpath:MatOp classname:MatOp name:augAssignMultiply
register (method) augAssignMultiply in cv::MatOp (trait) (cv_MatOp_augAssignMultiply_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.augAssignDivide',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignDivide with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignDivide namespace:cv classpath:MatOp classname:MatOp name:augAssignDivide
register (method) augAssignDivide in cv::MatOp (trait) (cv_MatOp_augAssignDivide_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.augAssignAnd',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignAnd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignAnd namespace:cv classpath:MatOp classname:MatOp name:augAssignAnd
register (method) augAssignAnd in cv::MatOp (trait) (cv_MatOp_augAssignAnd_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.augAssignOr',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignOr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignOr namespace:cv classpath:MatOp classname:MatOp name:augAssignOr
register (method) augAssignOr in cv::MatOp (trait) (cv_MatOp_augAssignOr_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.augAssignXor',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.MatOp.augAssignXor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::augAssignXor namespace:cv classpath:MatOp classname:MatOp name:augAssignXor
register (method) augAssignXor in cv::MatOp (trait) (cv_MatOp_augAssignXor_const_MatExpr_Mat)

--- Incoming ---
[   'cv.MatOp.add',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['const MatExpr&', 'expr2', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.add with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::add namespace:cv classpath:MatOp classname:MatOp name:add
register (method) add in cv::MatOp (trait) (cv_MatOp_add_const_MatExpr_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.add',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['const Scalar&', 's', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.add with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::add namespace:cv classpath:MatOp classname:MatOp name:add
register (method) add in cv::MatOp (trait) (cv_MatOp_add_const_MatExpr_Scalar_MatExpr)

--- Incoming ---
[   'cv.MatOp.subtract',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['const MatExpr&', 'expr2', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.subtract with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::subtract namespace:cv classpath:MatOp classname:MatOp name:subtract
register (method) subtract in cv::MatOp (trait) (cv_MatOp_subtract_const_MatExpr_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.subtract',
    'void',
    ['/C'],
    [   ['const Scalar&', 's', '', []],
        ['const MatExpr&', 'expr', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.subtract with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::subtract namespace:cv classpath:MatOp classname:MatOp name:subtract
register (method) subtract in cv::MatOp (trait) (cv_MatOp_subtract_const_Scalar_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.multiply',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['const MatExpr&', 'expr2', '', []],
        ['MatExpr&', 'res', '', []],
        ['double', 'scale', '1', []]],
    None,
    '']
parse_name: cv.MatOp.multiply with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::multiply namespace:cv classpath:MatOp classname:MatOp name:multiply
register (method) multiply in cv::MatOp (trait) (cv_MatOp_multiply_const_MatExpr_MatExpr_MatExpr_double)

--- Incoming ---
[   'cv.MatOp.multiply',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['double', 's', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.multiply with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::multiply namespace:cv classpath:MatOp classname:MatOp name:multiply
register (method) multiply in cv::MatOp (trait) (cv_MatOp_multiply_const_MatExpr_double_MatExpr)

--- Incoming ---
[   'cv.MatOp.divide',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['const MatExpr&', 'expr2', '', []],
        ['MatExpr&', 'res', '', []],
        ['double', 'scale', '1', []]],
    None,
    '']
parse_name: cv.MatOp.divide with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::divide namespace:cv classpath:MatOp classname:MatOp name:divide
register (method) divide in cv::MatOp (trait) (cv_MatOp_divide_const_MatExpr_MatExpr_MatExpr_double)

--- Incoming ---
[   'cv.MatOp.divide',
    'void',
    ['/C'],
    [   ['double', 's', '', []],
        ['const MatExpr&', 'expr', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.divide with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::divide namespace:cv classpath:MatOp classname:MatOp name:divide
register (method) divide in cv::MatOp (trait) (cv_MatOp_divide_const_double_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.abs',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::abs namespace:cv classpath:MatOp classname:MatOp name:abs
register (method) abs in cv::MatOp (trait) (cv_MatOp_abs_const_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.transpose',
    'void',
    ['/C'],
    [['const MatExpr&', 'expr', '', []], ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.transpose with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::transpose namespace:cv classpath:MatOp classname:MatOp name:transpose
register (method) transpose in cv::MatOp (trait) (cv_MatOp_transpose_const_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.matmul',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr1', '', []],
        ['const MatExpr&', 'expr2', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.matmul with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::matmul namespace:cv classpath:MatOp classname:MatOp name:matmul
register (method) matmul in cv::MatOp (trait) (cv_MatOp_matmul_const_MatExpr_MatExpr_MatExpr)

--- Incoming ---
[   'cv.MatOp.invert',
    'void',
    ['/C'],
    [   ['const MatExpr&', 'expr', '', []],
        ['int', 'method', '', []],
        ['MatExpr&', 'res', '', []]],
    None,
    '']
parse_name: cv.MatOp.invert with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::invert namespace:cv classpath:MatOp classname:MatOp name:invert
register (method) invert in cv::MatOp (trait) (cv_MatOp_invert_const_MatExpr_int_MatExpr)

--- Incoming ---
[   'cv.MatOp.size',
    'Size',
    ['/C'],
    [['const MatExpr&', 'expr', '', []]],
    None,
    '']
parse_name: cv.MatOp.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::size namespace:cv classpath:MatOp classname:MatOp name:size
register (method) size in cv::MatOp (trait) (cv_MatOp_size_const_MatExpr)

--- Incoming ---
['cv.MatOp.type', 'int', ['/C'], [['const MatExpr&', 'expr', '', []]], None, '']
parse_name: cv.MatOp.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatOp::type namespace:cv classpath:MatOp classname:MatOp name:type
register (method) type in cv::MatOp (trait) (cv_MatOp_type_const_MatExpr)

--- Incoming ---
[   'class cv.MatExpr',
    '',
    [],
    [],
    None,
    '@brief Matrix expression representation\n'
    '@anchor MatrixExpressions\n'
    'This is a list of implemented matrix operations that can be combined in '
    'arbitrary complex\n'
    'expressions (here A, B stand for matrices ( Mat ), s for a scalar ( '
    'Scalar ), alpha for a\n'
    'real-valued scalar ( double )):\n'
    '-   Addition, subtraction, negation: `A+B`, `A-B`, `A+s`, `A-s`, `s+A`, '
    '`s-A`, `-A`\n'
    '-   Scaling: `A*alpha`\n'
    '-   Per-element multiplication and division: `A.mul(B)`, `A/B`, '
    '`alpha/A`\n'
    '-   Matrix multiplication: `A*B`\n'
    '-   Transposition: `A.t()` (means A<sup>T</sup>)\n'
    '-   Matrix inversion and pseudo-inversion, solving linear systems and '
    'least-squares problems:\n'
    '`A.inv([method]) (~ A<sup>-1</sup>)`,   `A.inv([method])*B (~ X: AX=B)`\n'
    '-   Comparison: `A cmpop B`, `A cmpop alpha`, `alpha cmpop A`, where '
    '*cmpop* is one of\n'
    '`>`, `>=`, `==`, `!=`, `<=`, `<`. The result of comparison is an 8-bit '
    'single channel mask whose\n'
    'elements are set to 255 (if the particular element or pair of elements '
    'satisfy the condition) or\n'
    '0.\n'
    '-   Bitwise logical operations: `A logicop B`, `A logicop s`, `s logicop '
    'A`, `~A`, where *logicop* is one of\n'
    '`&`, `|`, `^`.\n'
    '-   Element-wise minimum and maximum: `min(A, B)`, `min(A, alpha)`, '
    '`max(A, B)`, `max(A, alpha)`\n'
    '-   Element-wise absolute value: `abs(A)`\n'
    '-   Cross-product, dot-product: `A.cross(B)`, `A.dot(B)`\n'
    '-   Any function of matrix or matrices and scalars that returns a matrix '
    'or a scalar, such as norm,\n'
    'mean, sum, countNonZero, trace, determinant, repeat, and others.\n'
    '-   Matrix initializers ( Mat::eye(), Mat::zeros(), Mat::ones() ), matrix '
    'comma-separated\n'
    'initializers, matrix constructors and operators that extract sub-matrices '
    '(see Mat description).\n'
    '-   Mat_<destination_type>() constructors to cast the result to the '
    'proper type.\n'
    '@note Comma-separated initializers and probably some other operations may '
    'require additional\n'
    'explicit Mat() or Mat_<T>() constructor calls to resolve a possible '
    'ambiguity.\n'
    '\n'
    'Here are examples of matrix expressions:\n'
    '@code\n'
    '// compute pseudo-inverse of A, equivalent to A.inv(DECOMP_SVD)\n'
    'SVD svd(A);\n'
    'Mat pinvA = svd.vt.t()*Mat::diag(1./svd.w)*svd.u.t();\n'
    '\n'
    '// compute the new vector of parameters in the Levenberg-Marquardt '
    'algorithm\n'
    'x -= (A.t()*A + '
    'lambda*Mat::eye(A.cols,A.cols,A.type())).inv(DECOMP_CHOLESKY)*(A.t()*err);\n'
    '\n'
    '// sharpen image using "unsharp mask" algorithm\n'
    'Mat blurred; double sigma = 1, threshold = 5, amount = 1;\n'
    'GaussianBlur(img, blurred, Size(), sigma, sigma);\n'
    'Mat lowContrastMask = abs(img - blurred) < threshold;\n'
    'Mat sharpened = img*(1+amount) + blurred*(-amount);\n'
    'img.copyTo(sharpened, lowContrastMask);\n'
    '@endcode']
parse_name: class cv.MatExpr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (['class cv.MatExpr', '', [], [], None, '@brief Matrix expression representation\n@anchor MatrixExpressions\nThis is a list of implemented matrix operations that can be combined in arbitrary complex\nexpressions (here A, B stand for matrices ( Mat ), s for a scalar ( Scalar ), alpha for a\nreal-valued scalar ( double )):\n-   Addition, subtraction, negation: `A+B`, `A-B`, `A+s`, `A-s`, `s+A`, `s-A`, `-A`\n-   Scaling: `A*alpha`\n-   Per-element multiplication and division: `A.mul(B)`, `A/B`, `alpha/A`\n-   Matrix multiplication: `A*B`\n-   Transposition: `A.t()` (means A<sup>T</sup>)\n-   Matrix inversion and pseudo-inversion, solving linear systems and least-squares problems:\n`A.inv([method]) (~ A<sup>-1</sup>)`,   `A.inv([method])*B (~ X: AX=B)`\n-   Comparison: `A cmpop B`, `A cmpop alpha`, `alpha cmpop A`, where *cmpop* is one of\n`>`, `>=`, `==`, `!=`, `<=`, `<`. The result of comparison is an 8-bit single channel mask whose\nelements are set to 255 (if the particular element or pair of elements satisfy the condition) or\n0.\n-   Bitwise logical operations: `A logicop B`, `A logicop s`, `s logicop A`, `~A`, where *logicop* is one of\n`&`, `|`, `^`.\n-   Element-wise minimum and maximum: `min(A, B)`, `min(A, alpha)`, `max(A, B)`, `max(A, alpha)`\n-   Element-wise absolute value: `abs(A)`\n-   Cross-product, dot-product: `A.cross(B)`, `A.dot(B)`\n-   Any function of matrix or matrices and scalars that returns a matrix or a scalar, such as norm,\nmean, sum, countNonZero, trace, determinant, repeat, and others.\n-   Matrix initializers ( Mat::eye(), Mat::zeros(), Mat::ones() ), matrix comma-separated\ninitializers, matrix constructors and operators that extract sub-matrices (see Mat description).\n-   Mat_<destination_type>() constructors to cast the result to the proper type.\n@note Comma-separated initializers and probably some other operations may require additional\nexplicit Mat() or Mat_<T>() constructor calls to resolve a possible ambiguity.\n\nHere are examples of matrix expressions:\n@code\n// compute pseudo-inverse of A, equivalent to A.inv(DECOMP_SVD)\nSVD svd(A);\nMat pinvA = svd.vt.t()*Mat::diag(1./svd.w)*svd.u.t();\n\n// compute the new vector of parameters in the Levenberg-Marquardt algorithm\nx -= (A.t()*A + lambda*Mat::eye(A.cols,A.cols,A.type())).inv(DECOMP_CHOLESKY)*(A.t()*err);\n\n// sharpen image using "unsharp mask" algorithm\nMat blurred; double sigma = 1, threshold = 5, amount = 1;\nGaussianBlur(img, blurred, Size(), sigma, sigma);\nMat lowContrastMask = abs(img - blurred) < threshold;\nMat sharpened = img*(1+amount) + blurred*(-amount);\nimg.copyTo(sharpened, lowContrastMask);\n@endcode'])

--- Incoming ---
['cv.MatExpr.MatExpr', 'M', [], [], None, '']
parse_name: cv.MatExpr.MatExpr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::MatExpr namespace:cv classpath:MatExpr classname:MatExpr name:MatExpr
register (constructor) default in cv::MatExpr (cv_MatExpr_MatExpr)

--- Incoming ---
['cv.MatExpr.MatExpr', 'M', ['/E'], [['const Mat&', 'm', '', []]], None, '']
parse_name: cv.MatExpr.MatExpr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::MatExpr namespace:cv classpath:MatExpr classname:MatExpr name:MatExpr
register (constructor) new in cv::MatExpr (cv_MatExpr_MatExpr_Mat)

--- Incoming ---
[   'cv.MatExpr.MatExpr',
    'M',
    [],
    [   ['const MatOp*', '_op', '', []],
        ['int', '_flags', '', []],
        ['const Mat&', '_a', 'Mat()', []],
        ['const Mat&', '_b', 'Mat()', []],
        ['const Mat&', '_c', 'Mat()', []],
        ['double', '_alpha', '1', []],
        ['double', '_beta', '1', []],
        ['const Scalar&', '_s', 'Scalar()', []]],
    None,
    '']
parse_name: cv.MatExpr.MatExpr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::MatExpr namespace:cv classpath:MatExpr classname:MatExpr name:MatExpr
register (constructor) new in cv::MatExpr (cv_MatExpr_MatExpr_const_MatOp_int_Mat_Mat_Mat_double_double_Scalar)

--- Incoming ---
['cv.MatExpr.operator Mat', '', ['/C'], [], None, '']
parse_name: cv.MatExpr.operator Mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::operator Mat namespace:cv classpath:MatExpr classname:MatExpr name:operator Mat
register (convertor method) operator Mat in cv::MatExpr (cv_MatExpr_operator_Mat_const)

--- Incoming ---
[   'cv.MatExpr.operator Mat_<_Tp>',
    'template<typename _Tp>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.MatExpr.operator Mat_<_Tp> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::operator Mat_<_Tp> namespace:cv classpath:MatExpr classname:MatExpr name:operator Mat_<_Tp>
ignore (method) operator Mat_<_Tp> in cv::MatExpr

--- Incoming ---
['cv.MatExpr.size', 'Size', ['/C'], [], None, '']
parse_name: cv.MatExpr.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::size namespace:cv classpath:MatExpr classname:MatExpr name:size
register (method) size in cv::MatExpr (cv_MatExpr_size_const)

--- Incoming ---
['cv.MatExpr.type', 'int', ['/C'], [], None, '']
parse_name: cv.MatExpr.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::type namespace:cv classpath:MatExpr classname:MatExpr name:type
register (method) type in cv::MatExpr (cv_MatExpr_type_const)

--- Incoming ---
['cv.MatExpr.row', 'MatExpr', ['/C'], [['int', 'y', '', []]], None, '']
parse_name: cv.MatExpr.row with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::row namespace:cv classpath:MatExpr classname:MatExpr name:row
register (method) row in cv::MatExpr (cv_MatExpr_row_const_int)

--- Incoming ---
['cv.MatExpr.col', 'MatExpr', ['/C'], [['int', 'x', '', []]], None, '']
parse_name: cv.MatExpr.col with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::col namespace:cv classpath:MatExpr classname:MatExpr name:col
register (method) col in cv::MatExpr (cv_MatExpr_col_const_int)

--- Incoming ---
['cv.MatExpr.diag', 'MatExpr', ['/C'], [['int', 'd', '0', []]], None, '']
parse_name: cv.MatExpr.diag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::diag namespace:cv classpath:MatExpr classname:MatExpr name:diag
register (method) diag in cv::MatExpr (cv_MatExpr_diag_const_int)

--- Incoming ---
[   'cv.MatExpr.operator ()',
    'MatExpr',
    ['/C'],
    [   ['const Range&', 'rowRange', '', []],
        ['const Range&', 'colRange', '', []]],
    None,
    '']
parse_name: cv.MatExpr.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::operator () namespace:cv classpath:MatExpr classname:MatExpr name:operator ()
ignore (method) operator () in cv::MatExpr

--- Incoming ---
[   'cv.MatExpr.operator ()',
    'MatExpr',
    ['/C'],
    [['const Rect&', 'roi', '', []]],
    None,
    '']
parse_name: cv.MatExpr.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::operator () namespace:cv classpath:MatExpr classname:MatExpr name:operator ()
ignore (method) operator () in cv::MatExpr

--- Incoming ---
['cv.MatExpr.t', 'MatExpr', ['/C'], [], None, '']
parse_name: cv.MatExpr.t with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::t namespace:cv classpath:MatExpr classname:MatExpr name:t
register (method) t in cv::MatExpr (cv_MatExpr_t_const)

--- Incoming ---
[   'cv.MatExpr.inv',
    'MatExpr',
    ['/C'],
    [['int', 'method', 'DECOMP_LU', []]],
    None,
    '']
parse_name: cv.MatExpr.inv with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::inv namespace:cv classpath:MatExpr classname:MatExpr name:inv
register (method) inv in cv::MatExpr (cv_MatExpr_inv_const_int)

--- Incoming ---
[   'cv.MatExpr.mul',
    'MatExpr',
    ['/C'],
    [['const MatExpr&', 'e', '', []], ['double', 'scale', '1', []]],
    None,
    '']
parse_name: cv.MatExpr.mul with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::mul namespace:cv classpath:MatExpr classname:MatExpr name:mul
register (method) mul in cv::MatExpr (cv_MatExpr_mul_const_MatExpr_double)

--- Incoming ---
[   'cv.MatExpr.mul',
    'MatExpr',
    ['/C'],
    [['const Mat&', 'm', '', []], ['double', 'scale', '1', []]],
    None,
    '']
parse_name: cv.MatExpr.mul with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::mul namespace:cv classpath:MatExpr classname:MatExpr name:mul
register (method) mul in cv::MatExpr (cv_MatExpr_mul_const_Mat_double)

--- Incoming ---
['cv.MatExpr.cross', 'Mat', ['/C'], [['const Mat&', 'm', '', []]], None, '']
parse_name: cv.MatExpr.cross with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::cross namespace:cv classpath:MatExpr classname:MatExpr name:cross
register (method) cross in cv::MatExpr (cv_MatExpr_cross_const_Mat)

--- Incoming ---
['cv.MatExpr.dot', 'double', ['/C'], [['const Mat&', 'm', '', []]], None, '']
parse_name: cv.MatExpr.dot with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::MatExpr::dot namespace:cv classpath:MatExpr classname:MatExpr name:dot
register (method) dot in cv::MatExpr (cv_MatExpr_dot_const_Mat)

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '@} core_basic\n@relates cv::MatExpr\n@{']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const Scalar&', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []], ['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const Mat&', 'm', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const Scalar&', 's', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator +',
    'MatExpr',
    [],
    [['const MatExpr&', 'e1', '', []], ['const MatExpr&', 'e2', '', []]],
    None,
    '']
parse_name: cv.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator + namespace:cv classpath: classname: name:operator +
ignore (function) operator + in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const Scalar&', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []], ['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const Mat&', 'm', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const Scalar&', 's', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator -',
    'MatExpr',
    [],
    [['const MatExpr&', 'e1', '', []], ['const MatExpr&', 'e2', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
['cv.operator -', 'MatExpr', [], [['const Mat&', 'm', '', []]], None, '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
['cv.operator -', 'MatExpr', [], [['const MatExpr&', 'e', '', []]], None, '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: MatExpr operator
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['const MatExpr&', 'e', '', []], ['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['const Mat&', 'm', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['const MatExpr&', 'e', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['double', 's', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'MatExpr operator *',
    [],
    [['const MatExpr&', 'e1', '', []], ['const MatExpr&', 'e2', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []], ['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['const Mat&', 'm', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const MatExpr&', 'e', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator /',
    'MatExpr',
    [],
    [['const MatExpr&', 'e1', '', []], ['const MatExpr&', 'e2', '', []]],
    None,
    '']
parse_name: cv.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator / namespace:cv classpath: classname: name:operator /
ignore (function) operator / in None

--- Incoming ---
[   'cv.operator <',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator < namespace:cv classpath: classname: name:operator <
ignore (function) operator < in None

--- Incoming ---
[   'cv.operator <',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator < namespace:cv classpath: classname: name:operator <
ignore (function) operator < in None

--- Incoming ---
[   'cv.operator <',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator < namespace:cv classpath: classname: name:operator <
ignore (function) operator < in None

--- Incoming ---
[   'cv.operator <=',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator <= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator <= namespace:cv classpath: classname: name:operator <=
ignore (function) operator <= in None

--- Incoming ---
[   'cv.operator <=',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator <= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator <= namespace:cv classpath: classname: name:operator <=
ignore (function) operator <= in None

--- Incoming ---
[   'cv.operator <=',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator <= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator <= namespace:cv classpath: classname: name:operator <=
ignore (function) operator <= in None

--- Incoming ---
[   'cv.operator ==',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator == namespace:cv classpath: classname: name:operator ==
ignore (function) operator == in None

--- Incoming ---
[   'cv.operator ==',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator == namespace:cv classpath: classname: name:operator ==
ignore (function) operator == in None

--- Incoming ---
[   'cv.operator ==',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator == namespace:cv classpath: classname: name:operator ==
ignore (function) operator == in None

--- Incoming ---
[   'cv.operator !=',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator != namespace:cv classpath: classname: name:operator !=
ignore (function) operator != in None

--- Incoming ---
[   'cv.operator !=',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator != namespace:cv classpath: classname: name:operator !=
ignore (function) operator != in None

--- Incoming ---
[   'cv.operator !=',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator != namespace:cv classpath: classname: name:operator !=
ignore (function) operator != in None

--- Incoming ---
[   'cv.operator >=',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator >= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >= namespace:cv classpath: classname: name:operator >=
ignore (function) operator >= in None

--- Incoming ---
[   'cv.operator >=',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator >= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >= namespace:cv classpath: classname: name:operator >=
ignore (function) operator >= in None

--- Incoming ---
[   'cv.operator >=',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator >= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >= namespace:cv classpath: classname: name:operator >=
ignore (function) operator >= in None

--- Incoming ---
[   'cv.operator >',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator > namespace:cv classpath: classname: name:operator >
ignore (function) operator > in None

--- Incoming ---
[   'cv.operator >',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.operator > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator > namespace:cv classpath: classname: name:operator >
ignore (function) operator > in None

--- Incoming ---
[   'cv.operator >',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator > namespace:cv classpath: classname: name:operator >
ignore (function) operator > in None

--- Incoming ---
[   'cv.operator &',
    'MatExpr operator &',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator & with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator & namespace:cv classpath: classname: name:operator &
Registering an unknown type: MatExpr operator
ignore (function) operator & in None

--- Incoming ---
[   'cv.operator &',
    'MatExpr operator &',
    [],
    [['const Mat&', 'a', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator & with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator & namespace:cv classpath: classname: name:operator &
ignore (function) operator & in None

--- Incoming ---
[   'cv.operator &',
    'MatExpr operator &',
    [],
    [['const Scalar&', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator & with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator & namespace:cv classpath: classname: name:operator &
ignore (function) operator & in None

--- Incoming ---
[   'cv.operator |',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator | with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator | namespace:cv classpath: classname: name:operator |
ignore (function) operator | in None

--- Incoming ---
[   'cv.operator |',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator | with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator | namespace:cv classpath: classname: name:operator |
ignore (function) operator | in None

--- Incoming ---
[   'cv.operator |',
    'MatExpr',
    [],
    [['const Scalar&', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator | with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator | namespace:cv classpath: classname: name:operator |
ignore (function) operator | in None

--- Incoming ---
[   'cv.operator ^',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.operator ^ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator ^ namespace:cv classpath: classname: name:operator ^
ignore (function) operator ^ in None

--- Incoming ---
[   'cv.operator ^',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Scalar&', 's', '', []]],
    None,
    '']
parse_name: cv.operator ^ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator ^ namespace:cv classpath: classname: name:operator ^
ignore (function) operator ^ in None

--- Incoming ---
[   'cv.operator ^',
    'MatExpr',
    [],
    [['const Scalar&', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.operator ^ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator ^ namespace:cv classpath: classname: name:operator ^
ignore (function) operator ^ in None

--- Incoming ---
['cv.operator ~', 'MatExpr', [], [['const Mat&', 'm', '', []]], None, '']
parse_name: cv.operator ~ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator ~ namespace:cv classpath: classname: name:operator ~
ignore (function) operator ~ in None

--- Incoming ---
[   'cv.min',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_Mat_Mat)

--- Incoming ---
[   'cv.min',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_Mat_double)

--- Incoming ---
[   'cv.min',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_double_Mat)

--- Incoming ---
[   'cv.max',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['const Mat&', 'b', '', []]],
    None,
    '']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_Mat_Mat)

--- Incoming ---
[   'cv.max',
    'MatExpr',
    [],
    [['const Mat&', 'a', '', []], ['double', 's', '', []]],
    None,
    '']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_Mat_double)

--- Incoming ---
[   'cv.max',
    'MatExpr',
    [],
    [['double', 's', '', []], ['const Mat&', 'a', '', []]],
    None,
    '']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_double_Mat)

--- Incoming ---
[   'cv.abs',
    'MatExpr',
    [],
    [['const Mat&', 'm', '', []]],
    None,
    '@brief Calculates an absolute value of each matrix element.\n'
    '\n'
    'abs is a meta-function that is expanded to one of absdiff or '
    'convertScaleAbs forms:\n'
    '- C = abs(A-B) is equivalent to `absdiff(A, B, C)`\n'
    '- C = abs(A) is equivalent to `absdiff(A, Scalar::all(0), C)`\n'
    '- C = `Mat_<Vec<uchar,n> >(abs(A*alpha + beta))` is equivalent to '
    '`convertScaleAbs(A, C, alpha,\n'
    'beta)`\n'
    '\n'
    'The output matrix has the same size and the same type as the input one '
    'except for the last case,\n'
    'where C is depth=CV_8U .\n'
    '@param m matrix.\n'
    '@sa @ref MatrixExpressions, absdiff, convertScaleAbs']
parse_name: cv.abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::abs namespace:cv classpath: classname: name:abs
register (function) abs (cv_abs_Mat)

--- Incoming ---
[   'cv.abs',
    'MatExpr',
    [],
    [['const MatExpr&', 'e', '', []]],
    None,
    '@overload\n@param e matrix expression.']
parse_name: cv.abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::abs namespace:cv classpath: classname: name:abs
register (function) abs (cv_abs_MatExpr)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/persistence.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {}

--- Incoming ---
[   'class cv.FileStorage',
    '',
    [],
    [],
    None,
    '@brief XML/YAML/JSON file storage class that encapsulates all the '
    'information necessary for writing or\n'
    'reading data to/from a file.']
parse_name: class cv.FileStorage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (['class cv.FileStorage', '', [], [], None, '@brief XML/YAML/JSON file storage class that encapsulates all the information necessary for writing or\nreading data to/from a file.'])

--- Incoming ---
[   'enum cv.FileStorage.Mode',
    '',
    [],
    [   [   'const cv.FileStorage.READ',
            '0',
            [],
            [],
            None,
            'value, open the file for reading\n'],
        [   'const cv.FileStorage.WRITE',
            '1',
            [],
            [],
            None,
            'value, open the file for writing\n'],
        [   'const cv.FileStorage.APPEND',
            '2',
            [],
            [],
            None,
            'value, open the file for appending\n'],
        [   'const cv.FileStorage.MEMORY',
            '4',
            [],
            [],
            None,
            'flag, read data from source or write data to the internal buffer '
            '(which is\n'],
        [   'const cv.FileStorage.FORMAT_MASK',
            '(7<<3)',
            [],
            [],
            None,
            'mask for format flags\n'],
        [   'const cv.FileStorage.FORMAT_AUTO',
            '0',
            [],
            [],
            None,
            'flag, auto format\n'],
        [   'const cv.FileStorage.FORMAT_XML',
            '(1<<3)',
            [],
            [],
            None,
            'flag, XML format\n'],
        [   'const cv.FileStorage.FORMAT_YAML',
            '(2<<3)',
            [],
            [],
            None,
            'flag, YAML format\n'],
        [   'const cv.FileStorage.FORMAT_JSON',
            '(3<<3)',
            [],
            [],
            None,
            'flag, JSON format\n'],
        [   'const cv.FileStorage.BASE64',
            '64',
            [],
            [],
            None,
            'flag, write rawdata in Base64 by default. (consider using '
            'WRITE_BASE64)\n'],
        [   'const cv.FileStorage.WRITE_BASE64',
            'BASE64 | WRITE',
            [],
            [],
            None,
            'flag, enable both WRITE and BASE64\n']],
    None,
    'file storage mode']
parse_name: const cv.FileStorage.READ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::READ namespace:cv classpath:FileStorage classname:FileStorage name:READ
parse_name: const cv.FileStorage.WRITE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::WRITE namespace:cv classpath:FileStorage classname:FileStorage name:WRITE
parse_name: const cv.FileStorage.APPEND with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::APPEND namespace:cv classpath:FileStorage classname:FileStorage name:APPEND
parse_name: const cv.FileStorage.MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::MEMORY namespace:cv classpath:FileStorage classname:FileStorage name:MEMORY
parse_name: const cv.FileStorage.FORMAT_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_MASK namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_MASK
parse_name: const cv.FileStorage.FORMAT_AUTO with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_AUTO namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_AUTO
parse_name: const cv.FileStorage.FORMAT_XML with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_XML namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_XML
parse_name: const cv.FileStorage.FORMAT_YAML with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_YAML namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_YAML
parse_name: const cv.FileStorage.FORMAT_JSON with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_JSON namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_JSON
parse_name: const cv.FileStorage.BASE64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::BASE64 namespace:cv classpath:FileStorage classname:FileStorage name:BASE64
parse_name: const cv.FileStorage.WRITE_BASE64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::WRITE_BASE64 namespace:cv classpath:FileStorage classname:FileStorage name:WRITE_BASE64
parse_name: enum cv.FileStorage.Mode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::Mode namespace:cv classpath:FileStorage classname:FileStorage name:Mode
parse_name: const cv.FileStorage.READ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::READ namespace:cv classpath:FileStorage classname:FileStorage name:READ
parse_name: const cv.FileStorage.WRITE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::WRITE namespace:cv classpath:FileStorage classname:FileStorage name:WRITE
parse_name: const cv.FileStorage.APPEND with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::APPEND namespace:cv classpath:FileStorage classname:FileStorage name:APPEND
parse_name: const cv.FileStorage.MEMORY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::MEMORY namespace:cv classpath:FileStorage classname:FileStorage name:MEMORY
parse_name: const cv.FileStorage.FORMAT_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_MASK namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_MASK
parse_name: const cv.FileStorage.FORMAT_AUTO with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_AUTO namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_AUTO
parse_name: const cv.FileStorage.FORMAT_XML with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_XML namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_XML
parse_name: const cv.FileStorage.FORMAT_YAML with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_YAML namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_YAML
parse_name: const cv.FileStorage.FORMAT_JSON with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FORMAT_JSON namespace:cv classpath:FileStorage classname:FileStorage name:FORMAT_JSON
parse_name: const cv.FileStorage.BASE64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::BASE64 namespace:cv classpath:FileStorage classname:FileStorage name:BASE64
parse_name: const cv.FileStorage.WRITE_BASE64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::WRITE_BASE64 namespace:cv classpath:FileStorage classname:FileStorage name:WRITE_BASE64

--- Incoming ---
[   'enum cv.FileStorage.State',
    '',
    [],
    [   ['const cv.FileStorage.UNDEFINED', '0', [], [], None, ''],
        ['const cv.FileStorage.VALUE_EXPECTED', '1', [], [], None, ''],
        ['const cv.FileStorage.NAME_EXPECTED', '2', [], [], None, ''],
        ['const cv.FileStorage.INSIDE_MAP', '4', [], [], None, '']],
    None,
    '']
parse_name: const cv.FileStorage.UNDEFINED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::UNDEFINED namespace:cv classpath:FileStorage classname:FileStorage name:UNDEFINED
parse_name: const cv.FileStorage.VALUE_EXPECTED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::VALUE_EXPECTED namespace:cv classpath:FileStorage classname:FileStorage name:VALUE_EXPECTED
parse_name: const cv.FileStorage.NAME_EXPECTED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::NAME_EXPECTED namespace:cv classpath:FileStorage classname:FileStorage name:NAME_EXPECTED
parse_name: const cv.FileStorage.INSIDE_MAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::INSIDE_MAP namespace:cv classpath:FileStorage classname:FileStorage name:INSIDE_MAP
parse_name: enum cv.FileStorage.State with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::State namespace:cv classpath:FileStorage classname:FileStorage name:State
parse_name: const cv.FileStorage.UNDEFINED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::UNDEFINED namespace:cv classpath:FileStorage classname:FileStorage name:UNDEFINED
parse_name: const cv.FileStorage.VALUE_EXPECTED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::VALUE_EXPECTED namespace:cv classpath:FileStorage classname:FileStorage name:VALUE_EXPECTED
parse_name: const cv.FileStorage.NAME_EXPECTED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::NAME_EXPECTED namespace:cv classpath:FileStorage classname:FileStorage name:NAME_EXPECTED
parse_name: const cv.FileStorage.INSIDE_MAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::INSIDE_MAP namespace:cv classpath:FileStorage classname:FileStorage name:INSIDE_MAP

--- Incoming ---
[   'cv.FileStorage.FileStorage',
    'F',
    [],
    [],
    None,
    '@brief The constructors.\n'
    '\n'
    'The full constructor opens the file. Alternatively you can use the '
    'default constructor and then\n'
    'call FileStorage::open.']
parse_name: cv.FileStorage.FileStorage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FileStorage namespace:cv classpath:FileStorage classname:FileStorage name:FileStorage
register (constructor) default in cv::FileStorage (cv_FileStorage_FileStorage)

--- Incoming ---
[   'cv.FileStorage.FileStorage',
    'F',
    [],
    [   ['const String&', 'filename', '', []],
        ['int', 'flags', '', []],
        ['const String&', 'encoding', 'String()', []]],
    None,
    '@overload\n@copydoc open()']
parse_name: cv.FileStorage.FileStorage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::FileStorage namespace:cv classpath:FileStorage classname:FileStorage name:FileStorage
register (constructor) new in cv::FileStorage (cv_FileStorage_FileStorage_String_int_String)

--- Incoming ---
[   'cv.FileStorage.~FileStorage',
    '~',
    [],
    [],
    None,
    'the destructor. calls release()']
parse_name: cv.FileStorage.~FileStorage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::~FileStorage namespace:cv classpath:FileStorage classname:FileStorage name:~FileStorage
ignore destructor (method) ~FileStorage in cv::FileStorage

--- Incoming ---
[   'cv.FileStorage.open',
    'bool',
    [],
    [   ['const String&', 'filename', '', []],
        ['int', 'flags', '', []],
        ['const String&', 'encoding', 'String()', []]],
    None,
    '@brief Opens a file.\n'
    '\n'
    'See description of parameters in FileStorage::FileStorage. The method '
    'calls FileStorage::release\n'
    'before opening the file.\n'
    '@param filename Name of the file to open or the text string to read the '
    'data from.\n'
    'Extension of the file (.xml, .yml/.yaml or .json) determines its format '
    '(XML, YAML or JSON\n'
    'respectively). Also you can append .gz to work with compressed files, for '
    'example myHugeMatrix.xml.gz. If both\n'
    'FileStorage::WRITE and FileStorage::MEMORY flags are specified, source is '
    'used just to specify\n'
    'the output file format (e.g. mydata.xml, .yml etc.). A file name can also '
    'contain parameters.\n'
    'You can use this format, "*?base64" (e.g. "file.json?base64" (case '
    'sensitive)), as an alternative to\n'
    'FileStorage::BASE64 flag.\n'
    '@param flags Mode of operation. One of FileStorage::Mode\n'
    '@param encoding Encoding of the file. Note that UTF-16 XML encoding is '
    'not supported currently and\n'
    'you should use 8-bit encoding instead of it.']
parse_name: cv.FileStorage.open with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::open namespace:cv classpath:FileStorage classname:FileStorage name:open
register (method) open in cv::FileStorage (cv_FileStorage_open_String_int_String)

--- Incoming ---
[   'cv.FileStorage.isOpened',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Checks whether the file is opened.\n'
    '\n'
    '@returns true if the object is associated with the current file and false '
    'otherwise. It is a\n'
    'good practice to call this method after you tried to open a file.']
parse_name: cv.FileStorage.isOpened with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::isOpened namespace:cv classpath:FileStorage classname:FileStorage name:isOpened
register (method) isOpened in cv::FileStorage (cv_FileStorage_isOpened_const)

--- Incoming ---
[   'cv.FileStorage.release',
    'void',
    [],
    [],
    None,
    '@brief Closes the file and releases all the memory buffers.\n'
    '\n'
    'Call this method after all I/O operations with the storage are finished.']
parse_name: cv.FileStorage.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::release namespace:cv classpath:FileStorage classname:FileStorage name:release
register (method) release in cv::FileStorage (cv_FileStorage_release)

--- Incoming ---
[   'cv.FileStorage.releaseAndGetString',
    'String',
    [],
    [],
    None,
    '@brief Closes the file and releases all the memory buffers.\n'
    '\n'
    'Call this method after all I/O operations with the storage are finished. '
    'If the storage was\n'
    'opened for writing data and FileStorage::WRITE was specified']
parse_name: cv.FileStorage.releaseAndGetString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::releaseAndGetString namespace:cv classpath:FileStorage classname:FileStorage name:releaseAndGetString
register (method) releaseAndGetString in cv::FileStorage (cv_FileStorage_releaseAndGetString)

--- Incoming ---
[   'cv.FileStorage.getFirstTopLevelNode',
    'FileNode',
    ['/C'],
    [],
    None,
    '@brief Returns the first element of the top-level mapping.\n'
    '@returns The first element of the top-level mapping.']
parse_name: cv.FileStorage.getFirstTopLevelNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::getFirstTopLevelNode namespace:cv classpath:FileStorage classname:FileStorage name:getFirstTopLevelNode
register (method) getFirstTopLevelNode in cv::FileStorage (cv_FileStorage_getFirstTopLevelNode_const)

--- Incoming ---
[   'cv.FileStorage.root',
    'FileNode',
    ['/C'],
    [['int', 'streamidx', '0', []]],
    None,
    '@brief Returns the top-level mapping\n'
    '@param streamidx Zero-based index of the stream. In most cases there is '
    'only one stream in the file.\n'
    'However, YAML supports multiple streams and so there can be several.\n'
    '@returns The top-level mapping.']
parse_name: cv.FileStorage.root with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::root namespace:cv classpath:FileStorage classname:FileStorage name:root
register (method) root in cv::FileStorage (cv_FileStorage_root_const_int)

--- Incoming ---
[   'cv.FileStorage.operator[]',
    'FileNode',
    ['/C'],
    [['const String&', 'nodename', '', []]],
    None,
    '@brief Returns the specified element of the top-level mapping.\n'
    '@param nodename Name of the file node.\n'
    '@returns Node with the given name.']
parse_name: cv.FileStorage.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::operator[] namespace:cv classpath:FileStorage classname:FileStorage name:operator[]
ignore (method) operator[] in cv::FileStorage

--- Incoming ---
[   'cv.FileStorage.operator[]',
    'FileNode',
    ['/C'],
    [['const char*', 'nodename', '', []]],
    None,
    '@overload']
parse_name: cv.FileStorage.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::operator[] namespace:cv classpath:FileStorage classname:FileStorage name:operator[]
ignore (method) operator[] in cv::FileStorage

--- Incoming ---
[   'cv.FileStorage.write',
    'void',
    [],
    [['const String&', 'name', '', []], ['int', 'val', '', []]],
    None,
    '* @brief Simplified writing API to use with bindings.\n'
    '* @param name Name of the written object\n'
    '* @param val Value of the written object']
parse_name: cv.FileStorage.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::write namespace:cv classpath:FileStorage classname:FileStorage name:write
register (method) write in cv::FileStorage (cv_FileStorage_write_String_int)

--- Incoming ---
[   'cv.FileStorage.write',
    'void',
    [],
    [['const String&', 'name', '', []], ['double', 'val', '', []]],
    None,
    '']
parse_name: cv.FileStorage.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::write namespace:cv classpath:FileStorage classname:FileStorage name:write
register (method) write in cv::FileStorage (cv_FileStorage_write_String_double)

--- Incoming ---
[   'cv.FileStorage.write',
    'void',
    [],
    [['const String&', 'name', '', []], ['const String&', 'val', '', []]],
    None,
    '']
parse_name: cv.FileStorage.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::write namespace:cv classpath:FileStorage classname:FileStorage name:write
register (method) write in cv::FileStorage (cv_FileStorage_write_String_String)

--- Incoming ---
[   'cv.FileStorage.write',
    'void',
    [],
    [['const String&', 'name', '', []], ['const Mat&', 'val', '', []]],
    None,
    '']
parse_name: cv.FileStorage.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::write namespace:cv classpath:FileStorage classname:FileStorage name:write
register (method) write in cv::FileStorage (cv_FileStorage_write_String_Mat)

--- Incoming ---
[   'cv.FileStorage.write',
    'void',
    [],
    [   ['const String&', 'name', '', []],
        ['const std::vector<String>&', 'val', '', []]],
    None,
    '']
parse_name: cv.FileStorage.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::write namespace:cv classpath:FileStorage classname:FileStorage name:write
register (method) write in cv::FileStorage (cv_FileStorage_write_String_VectorOfString)

--- Incoming ---
[   'cv.FileStorage.writeRaw',
    'void',
    [],
    [   ['const String&', 'fmt', '', []],
        ['const void*', 'vec', '', []],
        ['size_t', 'len', '', []]],
    None,
    '@brief Writes multiple numbers.\n'
    '\n'
    'Writes one or more numbers of the specified format to the currently '
    'written structure. Usually it is\n'
    'more convenient to use operator `<<` instead of this method.\n'
    '@param fmt Specification of each array element, see @ref format_spec '
    '"format specification"\n'
    '@param vec Pointer to the written array.\n'
    '@param len Number of the uchar elements to write.']
parse_name: cv.FileStorage.writeRaw with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::writeRaw namespace:cv classpath:FileStorage classname:FileStorage name:writeRaw
register (method) writeRaw in cv::FileStorage (cv_FileStorage_writeRaw_String_const_void_X_size_t)

--- Incoming ---
[   'cv.FileStorage.writeComment',
    'void',
    [],
    [['const String&', 'comment', '', []], ['bool', 'append', 'false', []]],
    None,
    '@brief Writes a comment.\n'
    '\n'
    'The function writes a comment into file storage. The comments are skipped '
    'when the storage is read.\n'
    '@param comment The written comment, single-line or multi-line\n'
    '@param append If true, the function tries to put the comment at the end '
    'of current line.\n'
    'Else if the comment is multi-line, or if it does not fit at the end of '
    'the current\n'
    'line, the comment starts a new line.']
parse_name: cv.FileStorage.writeComment with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::writeComment namespace:cv classpath:FileStorage classname:FileStorage name:writeComment
register (method) writeComment in cv::FileStorage (cv_FileStorage_writeComment_String_bool)

--- Incoming ---
[   'cv.FileStorage.startWriteStruct',
    'void',
    [],
    [   ['const String&', 'name', '', []],
        ['int', 'flags', '', []],
        ['const String&', 'typeName', '', []]],
    None,
    '']
parse_name: cv.FileStorage.startWriteStruct with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::startWriteStruct namespace:cv classpath:FileStorage classname:FileStorage name:startWriteStruct
register (method) startWriteStruct in cv::FileStorage (cv_FileStorage_startWriteStruct_String_int_String)

--- Incoming ---
['cv.FileStorage.endWriteStruct', 'void', [], [], None, '']
parse_name: cv.FileStorage.endWriteStruct with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::endWriteStruct namespace:cv classpath:FileStorage classname:FileStorage name:endWriteStruct
register (method) endWriteStruct in cv::FileStorage (cv_FileStorage_endWriteStruct)

--- Incoming ---
[   'cv.FileStorage.getDefaultObjectName',
    'String',
    ['/S'],
    [['const String&', 'filename', '', []]],
    None,
    '@brief Returns the normalized object name for the specified name of a '
    'file.\n'
    '@param filename Name of a file\n'
    '@returns The normalized object name.']
parse_name: cv.FileStorage.getDefaultObjectName with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::getDefaultObjectName namespace:cv classpath:FileStorage classname:FileStorage name:getDefaultObjectName
register (method) getDefaultObjectName in cv::FileStorage (cv_FileStorage_getDefaultObjectName_String)

--- Incoming ---
[   'cv.FileStorage.getFormat',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns the current format.\n'
    '* @returns The current format, see FileStorage::Mode']
parse_name: cv.FileStorage.getFormat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileStorage::getFormat namespace:cv classpath:FileStorage classname:FileStorage name:getFormat
register (method) getFormat in cv::FileStorage (cv_FileStorage_getFormat_const)

--- Incoming ---
[   'class cv.FileNode',
    '',
    ['/Simple'],
    [],
    None,
    '@brief File Storage Node class.\n'
    '\n'
    'The node is used to store each and every element of the file storage '
    'opened for reading. When\n'
    'XML/YAML file is read, it is first parsed and stored in the memory as a '
    'hierarchical collection of\n'
    'nodes. Each node can be a "leaf" that is contain a single number or a '
    'string, or be a collection of\n'
    'other nodes. There can be named collections (mappings) where each element '
    'has a name and it is\n'
    'accessed by a name, and ordered collections (sequences) where elements do '
    'not have names but rather\n'
    'accessed by index. Type of the file node can be determined using '
    'FileNode::type method.\n'
    '\n'
    'Note that file nodes are only used for navigating file storages opened '
    'for reading. When a file\n'
    'storage is opened for writing, no data is stored in memory after it is '
    'written.']
parse_name: class cv.FileNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (['class cv.FileNode', '', [], [], None, '@brief File Storage Node class.\n\nThe node is used to store each and every element of the file storage opened for reading. When\nXML/YAML file is read, it is first parsed and stored in the memory as a hierarchical collection of\nnodes. Each node can be a "leaf" that is contain a single number or a string, or be a collection of\nother nodes. There can be named collections (mappings) where each element has a name and it is\naccessed by a name, and ordered collections (sequences) where elements do not have names but rather\naccessed by index. Type of the file node can be determined using FileNode::type method.\n\nNote that file nodes are only used for navigating file storages opened for reading. When a file\nstorage is opened for writing, no data is stored in memory after it is written.'])

--- Incoming ---
[   'enum cv.FileNode.<unnamed>',
    '',
    [],
    [   ['const cv.FileNode.NONE', '0', [], [], None, 'empty node\n'],
        ['const cv.FileNode.INT', '1', [], [], None, 'an integer\n'],
        [   'const cv.FileNode.REAL',
            '2',
            [],
            [],
            None,
            'floating-point number\n'],
        ['const cv.FileNode.FLOAT', 'REAL', [], [], None, 'synonym or REAL\n'],
        [   'const cv.FileNode.STR',
            '3',
            [],
            [],
            None,
            'text string in UTF-8 encoding\n'],
        ['const cv.FileNode.STRING', 'STR', [], [], None, 'synonym for STR\n'],
        ['const cv.FileNode.SEQ', '4', [], [], None, 'sequence\n'],
        ['const cv.FileNode.MAP', '5', [], [], None, 'mapping\n'],
        ['const cv.FileNode.TYPE_MASK', '7', [], [], None, ''],
        [   'const cv.FileNode.FLOW',
            '8',
            [],
            [],
            None,
            'compact representation of a sequence or mapping. Used only by '
            'YAML writer\n'],
        [   'const cv.FileNode.UNIFORM',
            '8',
            [],
            [],
            None,
            'if set, means that all the collection elements are numbers of the '
            "same type (real's or int's).\n"],
        [   'const cv.FileNode.EMPTY',
            '16',
            [],
            [],
            None,
            'empty structure (sequence or mapping)\n'],
        [   'const cv.FileNode.NAMED',
            '32',
            [],
            [],
            None,
            'the node has a name (i.e. it is element of a mapping).\n']],
    None,
    'type of the file storage node']
parse_name: const cv.FileNode.NONE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::NONE namespace:cv classpath:FileNode classname:FileNode name:NONE
parse_name: const cv.FileNode.INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::INT namespace:cv classpath:FileNode classname:FileNode name:INT
parse_name: const cv.FileNode.REAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::REAL namespace:cv classpath:FileNode classname:FileNode name:REAL
parse_name: const cv.FileNode.FLOAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::FLOAT namespace:cv classpath:FileNode classname:FileNode name:FLOAT
parse_name: const cv.FileNode.STR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::STR namespace:cv classpath:FileNode classname:FileNode name:STR
parse_name: const cv.FileNode.STRING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::STRING namespace:cv classpath:FileNode classname:FileNode name:STRING
parse_name: const cv.FileNode.SEQ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::SEQ namespace:cv classpath:FileNode classname:FileNode name:SEQ
parse_name: const cv.FileNode.MAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::MAP namespace:cv classpath:FileNode classname:FileNode name:MAP
parse_name: const cv.FileNode.TYPE_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::TYPE_MASK namespace:cv classpath:FileNode classname:FileNode name:TYPE_MASK
parse_name: const cv.FileNode.FLOW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::FLOW namespace:cv classpath:FileNode classname:FileNode name:FLOW
parse_name: const cv.FileNode.UNIFORM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::UNIFORM namespace:cv classpath:FileNode classname:FileNode name:UNIFORM
parse_name: const cv.FileNode.EMPTY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::EMPTY namespace:cv classpath:FileNode classname:FileNode name:EMPTY
parse_name: const cv.FileNode.NAMED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::NAMED namespace:cv classpath:FileNode classname:FileNode name:NAMED

--- Incoming ---
[   'cv.FileNode.FileNode',
    'F',
    [],
    [],
    None,
    '@brief The constructors.\n'
    '\n'
    'These constructors are used to create a default file node, construct it '
    'from obsolete structures or\n'
    'from the another file node.']
parse_name: cv.FileNode.FileNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::FileNode namespace:cv classpath:FileNode classname:FileNode name:FileNode
register (constructor) default in cv::FileNode (cv_FileNode_FileNode)

--- Incoming ---
[   'cv.FileNode.FileNode',
    'F',
    [],
    [   ['const FileStorage*', 'fs', '', []],
        ['size_t', 'blockIdx', '', []],
        ['size_t', 'ofs', '', []]],
    None,
    '@overload\n'
    '@param fs Pointer to the file storage structure.\n'
    '@param blockIdx Index of the memory block where the file node is stored\n'
    '@param ofs Offset in bytes from the beginning of the serialized storage']
parse_name: cv.FileNode.FileNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::FileNode namespace:cv classpath:FileNode classname:FileNode name:FileNode
register (constructor) new in cv::FileNode (cv_FileNode_FileNode_const_FileStorage_size_t_size_t)

--- Incoming ---
[   'cv.FileNode.FileNode',
    'F',
    [],
    [['const FileNode&', 'node', '', []]],
    None,
    '@overload\n'
    '@param node File node to be used as initialization for the created file '
    'node.']
parse_name: cv.FileNode.FileNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::FileNode namespace:cv classpath:FileNode classname:FileNode name:FileNode
register (constructor) copy in cv::FileNode (cv_FileNode_FileNode_FileNode)

--- Incoming ---
[   'cv.FileNode.operator[]',
    'FileNode',
    ['/C'],
    [['const String&', 'nodename', '', []]],
    None,
    '@brief Returns element of a mapping node or a sequence node.\n'
    '@param nodename Name of an element in the mapping node.\n'
    '@returns Returns the element with the given identifier.']
parse_name: cv.FileNode.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::operator[] namespace:cv classpath:FileNode classname:FileNode name:operator[]
ignore (method) operator[] in cv::FileNode

--- Incoming ---
[   'cv.FileNode.operator[]',
    'FileNode',
    ['/C'],
    [['const char*', 'nodename', '', []]],
    None,
    '@overload\n@param nodename Name of an element in the mapping node.']
parse_name: cv.FileNode.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::operator[] namespace:cv classpath:FileNode classname:FileNode name:operator[]
ignore (method) operator[] in cv::FileNode

--- Incoming ---
[   'cv.FileNode.operator[]',
    'FileNode',
    ['/C'],
    [['int', 'i', '', []]],
    None,
    '@overload\n@param i Index of an element in the sequence node.']
parse_name: cv.FileNode.operator[] with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::operator[] namespace:cv classpath:FileNode classname:FileNode name:operator[]
ignore (method) operator[] in cv::FileNode

--- Incoming ---
[   'cv.FileNode.keys',
    'std::vector<String>',
    ['/C'],
    [],
    None,
    '@brief Returns keys of a mapping node.\n@returns Keys of a mapping node.']
parse_name: cv.FileNode.keys with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::keys namespace:cv classpath:FileNode classname:FileNode name:keys
register (method) keys in cv::FileNode (cv_FileNode_keys_const)

--- Incoming ---
[   'cv.FileNode.type',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns type of the node.\n'
    '@returns Type of the node. See FileNode::Type']
parse_name: cv.FileNode.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::type namespace:cv classpath:FileNode classname:FileNode name:type
register (method) type in cv::FileNode (cv_FileNode_type_const)

--- Incoming ---
[   'cv.FileNode.empty',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is empty']
parse_name: cv.FileNode.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::empty namespace:cv classpath:FileNode classname:FileNode name:empty
register (method) empty in cv::FileNode (cv_FileNode_empty_const)

--- Incoming ---
[   'cv.FileNode.isNone',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is a "none" object']
parse_name: cv.FileNode.isNone with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isNone namespace:cv classpath:FileNode classname:FileNode name:isNone
register (method) isNone in cv::FileNode (cv_FileNode_isNone_const)

--- Incoming ---
[   'cv.FileNode.isSeq',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is a sequence']
parse_name: cv.FileNode.isSeq with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isSeq namespace:cv classpath:FileNode classname:FileNode name:isSeq
register (method) isSeq in cv::FileNode (cv_FileNode_isSeq_const)

--- Incoming ---
[   'cv.FileNode.isMap',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is a mapping']
parse_name: cv.FileNode.isMap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isMap namespace:cv classpath:FileNode classname:FileNode name:isMap
register (method) isMap in cv::FileNode (cv_FileNode_isMap_const)

--- Incoming ---
[   'cv.FileNode.isInt',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is an integer']
parse_name: cv.FileNode.isInt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isInt namespace:cv classpath:FileNode classname:FileNode name:isInt
register (method) isInt in cv::FileNode (cv_FileNode_isInt_const)

--- Incoming ---
[   'cv.FileNode.isReal',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is a floating-point number']
parse_name: cv.FileNode.isReal with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isReal namespace:cv classpath:FileNode classname:FileNode name:isReal
register (method) isReal in cv::FileNode (cv_FileNode_isReal_const)

--- Incoming ---
[   'cv.FileNode.isString',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node is a text string']
parse_name: cv.FileNode.isString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isString namespace:cv classpath:FileNode classname:FileNode name:isString
register (method) isString in cv::FileNode (cv_FileNode_isString_const)

--- Incoming ---
[   'cv.FileNode.isNamed',
    'bool',
    ['/C'],
    [],
    None,
    'returns true if the node has a name']
parse_name: cv.FileNode.isNamed with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isNamed namespace:cv classpath:FileNode classname:FileNode name:isNamed
register (method) isNamed in cv::FileNode (cv_FileNode_isNamed_const)

--- Incoming ---
[   'cv.FileNode.name',
    'std::string',
    ['/C'],
    [],
    None,
    'returns the node name or an empty string if the node is nameless']
parse_name: cv.FileNode.name with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::name namespace:cv classpath:FileNode classname:FileNode name:name
register (method) name in cv::FileNode (cv_FileNode_name_const)

--- Incoming ---
[   'cv.FileNode.size',
    'size_t',
    ['/C'],
    [],
    None,
    'returns the number of elements in the node, if it is a sequence or '
    'mapping, or 1 otherwise.']
parse_name: cv.FileNode.size with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::size namespace:cv classpath:FileNode classname:FileNode name:size
register (method) size in cv::FileNode (cv_FileNode_size_const)

--- Incoming ---
[   'cv.FileNode.rawSize',
    'size_t',
    ['/C'],
    [],
    None,
    'returns raw size of the FileNode in bytes']
parse_name: cv.FileNode.rawSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::rawSize namespace:cv classpath:FileNode classname:FileNode name:rawSize
register (method) rawSize in cv::FileNode (cv_FileNode_rawSize_const)

--- Incoming ---
[   'cv.FileNode.operator int',
    '',
    ['/C'],
    [],
    None,
    'returns the node content as an integer. If the node stores floating-point '
    'number, it is rounded.']
parse_name: cv.FileNode.operator int with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::operator int namespace:cv classpath:FileNode classname:FileNode name:operator int
register (convertor method) operator int in cv::FileNode (cv_FileNode_operator_int_const)

--- Incoming ---
[   'cv.FileNode.operator float',
    '',
    ['/C'],
    [],
    None,
    'returns the node content as float']
parse_name: cv.FileNode.operator float with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::operator float namespace:cv classpath:FileNode classname:FileNode name:operator float
register (convertor method) operator float in cv::FileNode (cv_FileNode_operator_float_const)

--- Incoming ---
[   'cv.FileNode.operator double',
    '',
    ['/C'],
    [],
    None,
    'returns the node content as double']
parse_name: cv.FileNode.operator double with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::operator double namespace:cv classpath:FileNode classname:FileNode name:operator double
register (convertor method) operator double in cv::FileNode (cv_FileNode_operator_double_const)

--- Incoming ---
[   'cv.operator std.string',
    '',
    ['/C'],
    [],
    None,
    'returns the node content as text string']
parse_name: cv.operator std.string with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator std::string namespace:cv classpath:operator std classname:operator std name:string
register (function) string (cv_operator_std_string_const)

--- Incoming ---
['cv.FileNode.isMap', 'bool', ['/S'], [['int', 'flags', '', []]], None, '']
parse_name: cv.FileNode.isMap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isMap namespace:cv classpath:FileNode classname:FileNode name:isMap
register (method) isMap in cv::FileNode (cv_FileNode_isMap_int)

--- Incoming ---
['cv.FileNode.isSeq', 'bool', ['/S'], [['int', 'flags', '', []]], None, '']
parse_name: cv.FileNode.isSeq with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isSeq namespace:cv classpath:FileNode classname:FileNode name:isSeq
register (method) isSeq in cv::FileNode (cv_FileNode_isSeq_int)

--- Incoming ---
[   'cv.FileNode.isCollection',
    'bool',
    ['/S'],
    [['int', 'flags', '', []]],
    None,
    '']
parse_name: cv.FileNode.isCollection with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isCollection namespace:cv classpath:FileNode classname:FileNode name:isCollection
register (method) isCollection in cv::FileNode (cv_FileNode_isCollection_int)

--- Incoming ---
[   'cv.FileNode.isEmptyCollection',
    'bool',
    ['/S'],
    [['int', 'flags', '', []]],
    None,
    '']
parse_name: cv.FileNode.isEmptyCollection with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isEmptyCollection namespace:cv classpath:FileNode classname:FileNode name:isEmptyCollection
register (method) isEmptyCollection in cv::FileNode (cv_FileNode_isEmptyCollection_int)

--- Incoming ---
['cv.FileNode.isFlow', 'bool', ['/S'], [['int', 'flags', '', []]], None, '']
parse_name: cv.FileNode.isFlow with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::isFlow namespace:cv classpath:FileNode classname:FileNode name:isFlow
register (method) isFlow in cv::FileNode (cv_FileNode_isFlow_int)

--- Incoming ---
['cv.FileNode.ptr', 'uchar*', [], [], None, '']
parse_name: cv.FileNode.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::ptr namespace:cv classpath:FileNode classname:FileNode name:ptr
register (method) ptr in cv::FileNode (cv_FileNode_ptr)

--- Incoming ---
['cv.FileNode.ptr', 'const uchar*', ['/C'], [], None, '']
parse_name: cv.FileNode.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::ptr namespace:cv classpath:FileNode classname:FileNode name:ptr
register (method) ptr in cv::FileNode (cv_FileNode_ptr_const)

--- Incoming ---
[   'cv.FileNode.begin',
    'FileNodeIterator',
    ['/C'],
    [],
    None,
    'returns iterator pointing to the first node element']
parse_name: cv.FileNode.begin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::begin namespace:cv classpath:FileNode classname:FileNode name:begin
Registering an unknown type: FileNodeIterator
register (method) begin in cv::FileNode (cv_FileNode_begin_const)

--- Incoming ---
[   'cv.FileNode.end',
    'FileNodeIterator',
    ['/C'],
    [],
    None,
    'returns iterator pointing to the element following the last node element']
parse_name: cv.FileNode.end with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::end namespace:cv classpath:FileNode classname:FileNode name:end
register (method) end in cv::FileNode (cv_FileNode_end_const)

--- Incoming ---
[   'cv.FileNode.readRaw',
    'void',
    ['/C'],
    [   ['const String&', 'fmt', '', []],
        ['void*', 'vec', '', []],
        ['size_t', 'len', '', []]],
    None,
    '@brief Reads node elements to the buffer with the specified format.\n'
    '\n'
    'Usually it is more convenient to use operator `>>` instead of this '
    'method.\n'
    '@param fmt Specification of each array element. See @ref format_spec '
    '"format specification"\n'
    '@param vec Pointer to the destination array.\n'
    '@param len Number of bytes to read (buffer size limit). If it is greater '
    'than number of\n'
    'remaining elements then all of them will be read.']
parse_name: cv.FileNode.readRaw with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::readRaw namespace:cv classpath:FileNode classname:FileNode name:readRaw
register (method) readRaw in cv::FileNode (cv_FileNode_readRaw_const_String_void_X_size_t)

--- Incoming ---
[   'cv.FileNode.setValue',
    'void',
    [],
    [   ['int', 'type', '', []],
        ['const void*', 'value', '', []],
        ['int', 'len', '-1', []]],
    None,
    'Internal method used when reading FileStorage.\n'
    'Sets the type (int, real or string) and value of the previously created '
    'node.']
parse_name: cv.FileNode.setValue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::setValue namespace:cv classpath:FileNode classname:FileNode name:setValue
register (method) setValue in cv::FileNode (cv_FileNode_setValue_int_const_void_X_int)

--- Incoming ---
[   'cv.FileNode.real',
    'double',
    ['/C'],
    [],
    None,
    'Simplified reading API to use with bindings.']
parse_name: cv.FileNode.real with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::real namespace:cv classpath:FileNode classname:FileNode name:real
register (method) real in cv::FileNode (cv_FileNode_real_const)

--- Incoming ---
[   'cv.FileNode.string',
    'std::string',
    ['/C'],
    [],
    None,
    'Simplified reading API to use with bindings.']
parse_name: cv.FileNode.string with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::string namespace:cv classpath:FileNode classname:FileNode name:string
register (method) string in cv::FileNode (cv_FileNode_string_const)

--- Incoming ---
[   'cv.FileNode.mat',
    'Mat',
    ['/C'],
    [],
    None,
    'Simplified reading API to use with bindings.']
parse_name: cv.FileNode.mat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNode::mat namespace:cv classpath:FileNode classname:FileNode name:mat
register (method) mat in cv::FileNode (cv_FileNode_mat_const)

--- Incoming ---
[   'class cv.FileNodeIterator',
    '',
    [],
    [],
    None,
    '@brief used to iterate through sequences and mappings.\n'
    '\n'
    'A standard STL notation, with node.begin(), node.end() denoting the '
    'beginning and the end of a\n'
    'sequence, stored in node. See the data reading sample in the beginning of '
    'the section.']
parse_name: class cv.FileNodeIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator namespace:cv classpath: classname: name:FileNodeIterator
register class cv::FileNodeIterator (['class cv.FileNodeIterator', '', [], [], None, '@brief used to iterate through sequences and mappings.\n\nA standard STL notation, with node.begin(), node.end() denoting the beginning and the end of a\nsequence, stored in node. See the data reading sample in the beginning of the section.'])

--- Incoming ---
[   'cv.FileNodeIterator.FileNodeIterator',
    'F',
    [],
    [],
    None,
    '@brief The constructors.\n'
    '\n'
    'These constructors are used to create a default iterator, set it to '
    'specific element in a file node\n'
    'or construct it from another iterator.']
parse_name: cv.FileNodeIterator.FileNodeIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::FileNodeIterator namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:FileNodeIterator
register (constructor) default in cv::FileNodeIterator (cv_FileNodeIterator_FileNodeIterator)

--- Incoming ---
[   'cv.FileNodeIterator.FileNodeIterator',
    'F',
    [],
    [['const FileNode&', 'node', '', []], ['bool', 'seekEnd', '', []]],
    None,
    '@overload\n'
    '@param node File node - the collection to iterate over;\n'
    'it can be a scalar (equivalent to 1-element collection) or "none" '
    '(equivalent to empty collection).\n'
    '@param seekEnd - true if iterator needs to be set after the last element '
    'of the node;\n'
    'that is:\n'
    '* node.begin() => FileNodeIterator(node, false)\n'
    '* node.end() => FileNodeIterator(node, true)']
parse_name: cv.FileNodeIterator.FileNodeIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::FileNodeIterator namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:FileNodeIterator
register (constructor) new in cv::FileNodeIterator (cv_FileNodeIterator_FileNodeIterator_FileNode_bool)

--- Incoming ---
[   'cv.FileNodeIterator.FileNodeIterator',
    'F',
    [],
    [['const FileNodeIterator&', 'it', '', []]],
    None,
    '@overload\n'
    '@param it Iterator to be used as initialization for the created iterator.']
parse_name: cv.FileNodeIterator.FileNodeIterator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::FileNodeIterator namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:FileNodeIterator
register (constructor) copy in cv::FileNodeIterator (cv_FileNodeIterator_FileNodeIterator_FileNodeIterator)

--- Incoming ---
[   'cv.FileNodeIterator.operator *',
    'FileNode operator *',
    ['/C'],
    [],
    None,
    'returns the currently observed element']
parse_name: cv.FileNodeIterator.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::operator * namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:operator *
Registering an unknown type: FileNode operator
ignore (method) operator * in cv::FileNodeIterator

--- Incoming ---
[   'cv.FileNodeIterator.operator ++',
    'FileNodeIterator&',
    [],
    [],
    None,
    'moves iterator to the next node']
parse_name: cv.FileNodeIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::operator ++ namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:operator ++
ignore (method) operator ++ in cv::FileNodeIterator

--- Incoming ---
[   'cv.FileNodeIterator.operator ++',
    'FileNodeIterator',
    [],
    [['int', '', '', []]],
    None,
    'moves iterator to the next node']
parse_name: cv.FileNodeIterator.operator ++ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::operator ++ namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:operator ++
ignore (method) operator ++ in cv::FileNodeIterator

--- Incoming ---
[   'cv.FileNodeIterator.operator +=',
    'FileNodeIterator&',
    [],
    [['int', 'ofs', '', []]],
    None,
    'moves iterator forward by the specified offset (possibly negative)']
parse_name: cv.FileNodeIterator.operator += with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::operator += namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:operator +=
ignore (method) operator += in cv::FileNodeIterator

--- Incoming ---
[   'cv.FileNodeIterator.readRaw',
    'FileNodeIterator&',
    [],
    [   ['const String&', 'fmt', '', []],
        ['void*', 'vec', '', []],
        ['size_t', 'len', '(size_t)INT_MAX', []]],
    None,
    '@brief Reads node elements to the buffer with the specified format.\n'
    '\n'
    'Usually it is more convenient to use operator `>>` instead of this '
    'method.\n'
    '@param fmt Specification of each array element. See @ref format_spec '
    '"format specification"\n'
    '@param vec Pointer to the destination array.\n'
    '@param len Number of bytes to read (buffer size limit). If it is greater '
    'than number of\n'
    'remaining elements then all of them will be read.']
parse_name: cv.FileNodeIterator.readRaw with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::readRaw namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:readRaw
register (method) readRaw in cv::FileNodeIterator (cv_FileNodeIterator_readRaw_String_void_X_size_t)

--- Incoming ---
[   'cv.FileNodeIterator.remaining',
    'size_t',
    ['/C'],
    [],
    None,
    'returns the number of remaining (not read yet) elements']
parse_name: cv.FileNodeIterator.remaining with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::remaining namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:remaining
register (method) remaining in cv::FileNodeIterator (cv_FileNodeIterator_remaining_const)

--- Incoming ---
[   'cv.FileNodeIterator.equalTo',
    'bool',
    ['/C'],
    [['const FileNodeIterator&', 'it', '', []]],
    None,
    '']
parse_name: cv.FileNodeIterator.equalTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::FileNodeIterator::equalTo namespace:cv classpath:FileNodeIterator classname:FileNodeIterator name:equalTo
register (method) equalTo in cv::FileNodeIterator (cv_FileNodeIterator_equalTo_const_FileNodeIterator)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['int', 'value', '', []]],
    None,
    '@} core_xml\n@relates cv::FileStorage\n@{']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_int)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['float', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_float)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['double', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_double)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const String&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_String)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const Mat&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_Mat)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const SparseMat&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_SparseMat)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const std::vector<KeyPoint>&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_VectorOfKeyPoint)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const std::vector<DMatch>&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_VectorOfDMatch)

--- Incoming ---
[   'cv.writeScalar',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['int', 'value', '', []]],
    None,
    '']
parse_name: cv.writeScalar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::writeScalar namespace:cv classpath: classname: name:writeScalar
register (function) writeScalar (cv_writeScalar_FileStorage_int)

--- Incoming ---
[   'cv.writeScalar',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['float', 'value', '', []]],
    None,
    '']
parse_name: cv.writeScalar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::writeScalar namespace:cv classpath: classname: name:writeScalar
register (function) writeScalar (cv_writeScalar_FileStorage_float)

--- Incoming ---
[   'cv.writeScalar',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['double', 'value', '', []]],
    None,
    '']
parse_name: cv.writeScalar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::writeScalar namespace:cv classpath: classname: name:writeScalar
register (function) writeScalar (cv_writeScalar_FileStorage_double)

--- Incoming ---
[   'cv.writeScalar',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['const String&', 'value', '', []]],
    None,
    '']
parse_name: cv.writeScalar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::writeScalar namespace:cv classpath: classname: name:writeScalar
register (function) writeScalar (cv_writeScalar_FileStorage_String)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['int&', 'value', '', []],
        ['int', 'default_value', '', []]],
    None,
    '@}\n@relates cv::FileNode\n@{']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_int_int)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['float&', 'value', '', []],
        ['float', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_float_float)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['double&', 'value', '', []],
        ['double', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_double_double)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['std::string&', 'value', '', []],
        ['const std::string&', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_std_string_std_string)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['Mat&', 'mat', '', []],
        ['const Mat&', 'default_mat', 'Mat()', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_Mat_Mat)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['SparseMat&', 'mat', '', []],
        ['const SparseMat&', 'default_mat', 'SparseMat()', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_SparseMat_SparseMat)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_VectorOfKeyPoint)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['std::vector<DMatch>&', 'matches', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_VectorOfDMatch)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['KeyPoint&', 'value', '', []],
        ['const KeyPoint&', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_KeyPoint_KeyPoint)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['DMatch&', 'value', '', []],
        ['const DMatch&', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_DMatch_DMatch)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['Range&', 'value', '', []],
        ['const Range&', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_Range_Range)

--- Incoming ---
[   'cv.operator <<',
    'FileStorage&',
    [],
    [['FileStorage&', 'fs', '', []], ['const String&', 'str', '', []]],
    None,
    '@brief Writes string to a file storage.\n@relates cv::FileStorage']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
ignore (function) operator << in None

--- Incoming ---
['class cv.internal.WriteStructContext', '', [], [], None, '']
parse_name: class cv.internal.WriteStructContext with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::internal::WriteStructContext namespace:cv::internal classpath: classname: name:WriteStructContext
register class cv::internal::WriteStructContext (['class cv.internal.WriteStructContext', '', [], [], None, ''])

--- Incoming ---
[   'cv.internal.WriteStructContext.WriteStructContext',
    'W',
    [],
    [   ['FileStorage&', '_fs', '', []],
        ['const String&', 'name', '', []],
        ['int', 'flags', '', []],
        ['const String&', 'typeName', 'String()', []]],
    None,
    '']
parse_name: cv.internal.WriteStructContext.WriteStructContext with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::internal::WriteStructContext::WriteStructContext namespace:cv::internal classpath:WriteStructContext classname:WriteStructContext name:WriteStructContext
register (constructor) new in cv::internal::WriteStructContext (cv_internal_WriteStructContext_WriteStructContext_FileStorage_String_int_String)

--- Incoming ---
['cv.internal.WriteStructContext.~WriteStructContext', '~', [], [], None, '']
parse_name: cv.internal.WriteStructContext.~WriteStructContext with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::internal::WriteStructContext::~WriteStructContext namespace:cv::internal classpath:WriteStructContext classname:WriteStructContext name:~WriteStructContext
ignore destructor (method) ~WriteStructContext in cv::internal::WriteStructContext

--- Incoming ---
[   'cv.write',
    'template<typename _Tp> void',
    [],
    [['FileStorage&', 'fs', '', []], ['const _Tp&', 'value', '', []]],
    None,
    '@endcond\n@relates cv::FileStorage\n@{']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage__Tp)

--- Incoming ---
[   'cv.write',
    'template<> void',
    [],
    [['FileStorage&', 'fs', '', []], ['const int&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
Registering an unknown type: template<> void
register (function) write (cv_write_FileStorage_int)

--- Incoming ---
[   'cv.write',
    'template<> void',
    [],
    [['FileStorage&', 'fs', '', []], ['const float&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_float)

--- Incoming ---
[   'cv.write',
    'template<> void',
    [],
    [['FileStorage&', 'fs', '', []], ['const double&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_double)

--- Incoming ---
[   'cv.write',
    'template<> void',
    [],
    [['FileStorage&', 'fs', '', []], ['const String&', 'value', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['const Range&', 'r', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_Range)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const Range&', 'r', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_Range)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const KeyPoint&', 'kpt', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_KeyPoint)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const String&', 'name', '', []],
        ['const DMatch&', 'm', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_String_DMatch)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['const KeyPoint&', 'kpt', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_KeyPoint)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [['FileStorage&', 'fs', '', []], ['const DMatch&', 'm', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_DMatch)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const std::vector<KeyPoint>&', 'vec', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_VectorOfKeyPoint)

--- Incoming ---
[   'cv.write',
    'void',
    [],
    [   ['FileStorage&', 'fs', '', []],
        ['const std::vector<DMatch>&', 'vec', '', []]],
    None,
    '']
parse_name: cv.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::write namespace:cv classpath: classname: name:write
register (function) write (cv_write_FileStorage_VectorOfDMatch)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['bool&', 'value', '', []],
        ['bool', 'default_value', '', []]],
    None,
    '@} FileStorage\n@relates cv::FileNode\n@{']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_bool_bool)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['uchar&', 'value', '', []],
        ['uchar', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_uchar_uchar)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['schar&', 'value', '', []],
        ['schar', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_schar_schar)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['ushort&', 'value', '', []],
        ['ushort', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_ushort_ushort)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['short&', 'value', '', []],
        ['short', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_short_short)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['std::vector<KeyPoint>&', 'vec', '', []],
        ['const std::vector<KeyPoint>&', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_VectorOfKeyPoint_VectorOfKeyPoint)

--- Incoming ---
[   'cv.read',
    'void',
    [],
    [   ['const FileNode&', 'node', '', []],
        ['std::vector<DMatch>&', 'vec', '', []],
        ['const std::vector<DMatch>&', 'default_value', '', []]],
    None,
    '']
parse_name: cv.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::read namespace:cv classpath: classname: name:read
register (function) read (cv_read_FileNode_VectorOfDMatch_VectorOfDMatch)

--- Incoming ---
[   'cv.operator <<',
    'template<typename _Tp> FileStorage&',
    [],
    [['FileStorage&', 'fs', '', []], ['const _Tp&', 'value', '', []]],
    None,
    '@brief Writes data to a file storage.']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
Registering an unknown type: template<typename _Tp> FileStorage
ignore (function) operator << in None

--- Incoming ---
[   'cv.operator <<',
    'FileStorage&',
    [],
    [['FileStorage&', 'fs', '', []], ['const char*', 'str', '', []]],
    None,
    '@brief Writes data to a file storage.']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
ignore (function) operator << in None

--- Incoming ---
[   'cv.operator <<',
    'FileStorage&',
    [],
    [['FileStorage&', 'fs', '', []], ['char*', 'value', '', []]],
    None,
    '@brief Writes data to a file storage.']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
ignore (function) operator << in None

--- Incoming ---
[   'cv.operator >>',
    'template<typename _Tp> FileNodeIterator&',
    [],
    [['FileNodeIterator&', 'it', '', []], ['_Tp&', 'value', '', []]],
    None,
    '@brief Reads data from a file storage.']
parse_name: cv.operator >> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >> namespace:cv classpath: classname: name:operator >>
Registering an unknown type: template<typename _Tp> FileNodeIterator
ignore (function) operator >> in None

--- Incoming ---
[   'cv.operator >>',
    'template<typename _Tp> void',
    [],
    [['const FileNode&', 'n', '', []], ['_Tp&', 'value', '', []]],
    None,
    '@brief Reads data from a file storage.']
parse_name: cv.operator >> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >> namespace:cv classpath: classname: name:operator >>
ignore (function) operator >> in None

--- Incoming ---
[   'cv.operator >>',
    'void',
    [],
    [['const FileNode&', 'n', '', []], ['KeyPoint&', 'kpt', '', []]],
    None,
    '@brief Reads KeyPoint from a file storage.']
parse_name: cv.operator >> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >> namespace:cv classpath: classname: name:operator >>
ignore (function) operator >> in None

--- Incoming ---
[   'cv.operator >>',
    'void',
    [],
    [   ['const FileNode&', 'n', '', []],
        ['std::vector<KeyPoint>&', 'vec', '', []]],
    None,
    '']
parse_name: cv.operator >> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >> namespace:cv classpath: classname: name:operator >>
ignore (function) operator >> in None

--- Incoming ---
[   'cv.operator >>',
    'void',
    [],
    [['const FileNode&', 'n', '', []], ['std::vector<DMatch>&', 'vec', '', []]],
    None,
    '']
parse_name: cv.operator >> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >> namespace:cv classpath: classname: name:operator >>
ignore (function) operator >> in None

--- Incoming ---
[   'cv.operator >>',
    'void',
    [],
    [['const FileNode&', 'n', '', []], ['DMatch&', 'm', '', []]],
    None,
    '@brief Reads DMatch from a file storage.']
parse_name: cv.operator >> with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator >> namespace:cv classpath: classname: name:operator >>
ignore (function) operator >> in None

--- Incoming ---
[   'cv.operator ==',
    'bool',
    [],
    [   ['const FileNodeIterator&', 'it1', '', []],
        ['const FileNodeIterator&', 'it2', '', []]],
    None,
    '@} FileNode\n@relates cv::FileNodeIterator\n@{']
parse_name: cv.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator == namespace:cv classpath: classname: name:operator ==
ignore (function) operator == in None

--- Incoming ---
[   'cv.operator !=',
    'bool',
    [],
    [   ['const FileNodeIterator&', 'it1', '', []],
        ['const FileNodeIterator&', 'it2', '', []]],
    None,
    '']
parse_name: cv.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator != namespace:cv classpath: classname: name:operator !=
ignore (function) operator != in None

--- Incoming ---
[   'cv.operator -',
    'ptrdiff_t',
    [],
    [   ['const FileNodeIterator&', 'it1', '', []],
        ['const FileNodeIterator&', 'it2', '', []]],
    None,
    '']
parse_name: cv.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator - namespace:cv classpath: classname: name:operator -
ignore (function) operator - in None

--- Incoming ---
[   'cv.operator <',
    'bool',
    [],
    [   ['const FileNodeIterator&', 'it1', '', []],
        ['const FileNodeIterator&', 'it2', '', []]],
    None,
    '']
parse_name: cv.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator < namespace:cv classpath: classname: name:operator <
ignore (function) operator < in None


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'class cv.Exception',
    ': cv::std::exception',
    [],
    [],
    None,
    '@addtogroup core_utils\n@{']
parse_name: class cv.Exception with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Exception namespace:cv classpath: classname: name:Exception
register class cv::Exception (['class cv.Exception', ': cv::std::exception', [], [], None, '@addtogroup core_utils\n@{']) [ignored] impl:cv::std::exception

--- Incoming ---
['cv.Exception.Exception', 'E', [], [], None, '']
parse_name: cv.Exception.Exception with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Exception::Exception namespace:cv classpath:Exception classname:Exception name:Exception
Registering an unknown type: Exception
register (constructor) default in cv::Exception (ignored) (cv_Exception_Exception)

--- Incoming ---
[   'cv.Exception.Exception',
    'E',
    [],
    [   ['int', '_code', '', []],
        ['const String&', '_err', '', []],
        ['const String&', '_func', '', []],
        ['const String&', '_file', '', []],
        ['int', '_line', '', []]],
    None,
    '']
parse_name: cv.Exception.Exception with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Exception::Exception namespace:cv classpath:Exception classname:Exception name:Exception
register (constructor) new in cv::Exception (ignored) (cv_Exception_Exception_int_String_String_String_int)

--- Incoming ---
['cv.Exception.~Exception', '~', [], [[') throw(', '', '', []]], None, '']

--- Incoming ---
[   'cv.Exception.what',
    'const char *',
    ['/C'],
    [[') const throw(', '', '', []]],
    None,
    '']
parse_name: cv.Exception.what with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Exception::what namespace:cv classpath:Exception classname:Exception name:what
Registering an unknown type: ) throw(
register (method) what in cv::Exception (ignored) (cv_Exception_what_const_) throw()

--- Incoming ---
['cv.Exception.formatMessage', 'void', [], [], None, '']
parse_name: cv.Exception.formatMessage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Exception::formatMessage namespace:cv classpath:Exception classname:Exception name:formatMessage
register (method) formatMessage in cv::Exception (ignored) (cv_Exception_formatMessage)

--- Incoming ---
['cv.error', 'void', [], [['const Exception&', 'exc', '', []]], None, '']
parse_name: cv.error with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::error namespace:cv classpath: classname: name:error
Registering an unknown type: Exception
register (function) error (cv_error_Exception)

--- Incoming ---
[   'enum cv.SortFlags',
    '',
    [],
    [   [   'const cv.SORT_EVERY_ROW',
            '0',
            [],
            [],
            None,
            'each matrix row is sorted independently\n'],
        [   'const cv.SORT_EVERY_COLUMN',
            '1',
            [],
            [],
            None,
            'each matrix column is sorted\n'],
        [   'const cv.SORT_ASCENDING',
            '0',
            [],
            [],
            None,
            'each matrix row is sorted in the ascending\n'],
        [   'const cv.SORT_DESCENDING',
            '16',
            [],
            [],
            None,
            'each matrix row is sorted in the\n']],
    None,
    '']
parse_name: const cv.SORT_EVERY_ROW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_EVERY_ROW namespace:cv classpath: classname: name:SORT_EVERY_ROW
parse_name: const cv.SORT_EVERY_COLUMN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_EVERY_COLUMN namespace:cv classpath: classname: name:SORT_EVERY_COLUMN
parse_name: const cv.SORT_ASCENDING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_ASCENDING namespace:cv classpath: classname: name:SORT_ASCENDING
parse_name: const cv.SORT_DESCENDING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_DESCENDING namespace:cv classpath: classname: name:SORT_DESCENDING
parse_name: enum cv.SortFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SortFlags namespace:cv classpath: classname: name:SortFlags
parse_name: const cv.SORT_EVERY_ROW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_EVERY_ROW namespace:cv classpath: classname: name:SORT_EVERY_ROW
parse_name: const cv.SORT_EVERY_COLUMN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_EVERY_COLUMN namespace:cv classpath: classname: name:SORT_EVERY_COLUMN
parse_name: const cv.SORT_ASCENDING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_ASCENDING namespace:cv classpath: classname: name:SORT_ASCENDING
parse_name: const cv.SORT_DESCENDING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SORT_DESCENDING namespace:cv classpath: classname: name:SORT_DESCENDING

--- Incoming ---
[   'enum cv.CovarFlags',
    '',
    [],
    [   ['const cv.COVAR_SCRAMBLED', '0', [], [], None, ''],
        ['const cv.COVAR_NORMAL', '1', [], [], None, ''],
        ['const cv.COVAR_USE_AVG', '2', [], [], None, ''],
        ['const cv.COVAR_SCALE', '4', [], [], None, ''],
        ['const cv.COVAR_ROWS', '8', [], [], None, ''],
        ['const cv.COVAR_COLS', '16', [], [], None, '']],
    None,
    '@} core_utils\n@addtogroup core\n@{\nCovariation flags']
parse_name: const cv.COVAR_SCRAMBLED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_SCRAMBLED namespace:cv classpath: classname: name:COVAR_SCRAMBLED
parse_name: const cv.COVAR_NORMAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_NORMAL namespace:cv classpath: classname: name:COVAR_NORMAL
parse_name: const cv.COVAR_USE_AVG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_USE_AVG namespace:cv classpath: classname: name:COVAR_USE_AVG
parse_name: const cv.COVAR_SCALE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_SCALE namespace:cv classpath: classname: name:COVAR_SCALE
parse_name: const cv.COVAR_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_ROWS namespace:cv classpath: classname: name:COVAR_ROWS
parse_name: const cv.COVAR_COLS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_COLS namespace:cv classpath: classname: name:COVAR_COLS
parse_name: enum cv.CovarFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::CovarFlags namespace:cv classpath: classname: name:CovarFlags
parse_name: const cv.COVAR_SCRAMBLED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_SCRAMBLED namespace:cv classpath: classname: name:COVAR_SCRAMBLED
parse_name: const cv.COVAR_NORMAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_NORMAL namespace:cv classpath: classname: name:COVAR_NORMAL
parse_name: const cv.COVAR_USE_AVG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_USE_AVG namespace:cv classpath: classname: name:COVAR_USE_AVG
parse_name: const cv.COVAR_SCALE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_SCALE namespace:cv classpath: classname: name:COVAR_SCALE
parse_name: const cv.COVAR_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_ROWS namespace:cv classpath: classname: name:COVAR_ROWS
parse_name: const cv.COVAR_COLS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::COVAR_COLS namespace:cv classpath: classname: name:COVAR_COLS

--- Incoming ---
[   'enum cv.KmeansFlags',
    '',
    [],
    [   ['const cv.KMEANS_RANDOM_CENTERS', '0', [], [], None, ''],
        ['const cv.KMEANS_PP_CENTERS', '2', [], [], None, ''],
        ['const cv.KMEANS_USE_INITIAL_LABELS', '1', [], [], None, '']],
    None,
    'k-Means flags']
parse_name: const cv.KMEANS_RANDOM_CENTERS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KMEANS_RANDOM_CENTERS namespace:cv classpath: classname: name:KMEANS_RANDOM_CENTERS
parse_name: const cv.KMEANS_PP_CENTERS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KMEANS_PP_CENTERS namespace:cv classpath: classname: name:KMEANS_PP_CENTERS
parse_name: const cv.KMEANS_USE_INITIAL_LABELS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KMEANS_USE_INITIAL_LABELS namespace:cv classpath: classname: name:KMEANS_USE_INITIAL_LABELS
parse_name: enum cv.KmeansFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KmeansFlags namespace:cv classpath: classname: name:KmeansFlags
parse_name: const cv.KMEANS_RANDOM_CENTERS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KMEANS_RANDOM_CENTERS namespace:cv classpath: classname: name:KMEANS_RANDOM_CENTERS
parse_name: const cv.KMEANS_PP_CENTERS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KMEANS_PP_CENTERS namespace:cv classpath: classname: name:KMEANS_PP_CENTERS
parse_name: const cv.KMEANS_USE_INITIAL_LABELS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::KMEANS_USE_INITIAL_LABELS namespace:cv classpath: classname: name:KMEANS_USE_INITIAL_LABELS

--- Incoming ---
[   'enum cv.ReduceTypes',
    '',
    [],
    [   [   'const cv.REDUCE_SUM',
            '0',
            [],
            [],
            None,
            'the output is the sum of all rows/columns of the matrix.\n'],
        [   'const cv.REDUCE_AVG',
            '1',
            [],
            [],
            None,
            'the output is the mean vector of all rows/columns of the '
            'matrix.\n'],
        [   'const cv.REDUCE_MAX',
            '2',
            [],
            [],
            None,
            'the output is the maximum (column/row-wise) of all rows/columns '
            'of the matrix.\n'],
        [   'const cv.REDUCE_MIN',
            '3',
            [],
            [],
            None,
            'the output is the minimum (column/row-wise) of all rows/columns '
            'of the matrix.\n']],
    None,
    '']
parse_name: const cv.REDUCE_SUM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_SUM namespace:cv classpath: classname: name:REDUCE_SUM
parse_name: const cv.REDUCE_AVG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_AVG namespace:cv classpath: classname: name:REDUCE_AVG
parse_name: const cv.REDUCE_MAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_MAX namespace:cv classpath: classname: name:REDUCE_MAX
parse_name: const cv.REDUCE_MIN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_MIN namespace:cv classpath: classname: name:REDUCE_MIN
parse_name: enum cv.ReduceTypes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ReduceTypes namespace:cv classpath: classname: name:ReduceTypes
parse_name: const cv.REDUCE_SUM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_SUM namespace:cv classpath: classname: name:REDUCE_SUM
parse_name: const cv.REDUCE_AVG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_AVG namespace:cv classpath: classname: name:REDUCE_AVG
parse_name: const cv.REDUCE_MAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_MAX namespace:cv classpath: classname: name:REDUCE_MAX
parse_name: const cv.REDUCE_MIN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::REDUCE_MIN namespace:cv classpath: classname: name:REDUCE_MIN

--- Incoming ---
[   'cv.swap',
    'void',
    [],
    [['Mat&', 'a', '', []], ['Mat&', 'b', '', []]],
    None,
    '@brief Swaps two matrices']
parse_name: cv.swap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::swap namespace:cv classpath: classname: name:swap
register (function) swap (cv_swap_Mat_Mat)

--- Incoming ---
[   'cv.swap',
    'void',
    [],
    [['UMat&', 'a', '', []], ['UMat&', 'b', '', []]],
    None,
    '@overload']
parse_name: cv.swap with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::swap namespace:cv classpath: classname: name:swap
register (function) swap (cv_swap_UMat_UMat)

--- Incoming ---
[   'cv.borderInterpolate',
    'int',
    [],
    [   ['int', 'p', '', []],
        ['int', 'len', '', []],
        ['int', 'borderType', '', []]],
    None,
    '@brief Computes the source location of an extrapolated pixel.\n'
    '\n'
    'The function computes and returns the coordinate of a donor pixel '
    'corresponding to the specified\n'
    'extrapolated pixel when using the specified extrapolation border mode. '
    'For example, if you use\n'
    'cv::BORDER_WRAP mode in the horizontal direction, cv::BORDER_REFLECT_101 '
    'in the vertical direction and\n'
    'want to compute value of the "virtual" pixel Point(-5, 100) in a '
    'floating-point image img , it\n'
    'looks like:\n'
    '@code{.cpp}\n'
    'float val = img.at<float>(borderInterpolate(100, img.rows, '
    'cv::BORDER_REFLECT_101),\n'
    'borderInterpolate(-5, img.cols, cv::BORDER_WRAP));\n'
    '@endcode\n'
    'Normally, the function is not called directly. It is used inside '
    'filtering functions and also in\n'
    'copyMakeBorder.\n'
    '@param p 0-based coordinate of the extrapolated pixel along one of the '
    'axes, likely \\<0 or \\>= len\n'
    '@param len Length of the array along the corresponding axis.\n'
    '@param borderType Border type, one of the #BorderTypes, except for '
    '#BORDER_TRANSPARENT and\n'
    '#BORDER_ISOLATED . When borderType==#BORDER_CONSTANT , the function '
    'always returns -1, regardless\n'
    'of p and len.\n'
    '\n'
    '@sa copyMakeBorder']
parse_name: cv.borderInterpolate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::borderInterpolate namespace:cv classpath: classname: name:borderInterpolate
register (function) borderInterpolate (cv_borderInterpolate_int_int_int)

--- Incoming ---
[   'cv.copyMakeBorder',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'top', '', []],
        ['int', 'bottom', '', []],
        ['int', 'left', '', []],
        ['int', 'right', '', []],
        ['int', 'borderType', '', []],
        ['const Scalar&', 'value', 'Scalar()', []]],
    None,
    '@brief Forms a border around an image.\n'
    '\n'
    'The function copies the source image into the middle of the destination '
    'image. The areas to the\n'
    'left, to the right, above and below the copied source image will be '
    'filled with extrapolated\n'
    'pixels. This is not what filtering functions based on it do (they '
    'extrapolate pixels on-fly), but\n'
    'what other more complex functions, including your own, may do to simplify '
    'image boundary handling.\n'
    '\n'
    'The function supports the mode when src is already in the middle of dst . '
    'In this case, the\n'
    'function does not copy src itself but simply constructs the border, for '
    'example:\n'
    '\n'
    '@code{.cpp}\n'
    '// let border be the same in all directions\n'
    'int border=2;\n'
    '// constructs a larger image to fit both the image and the border\n'
    'Mat gray_buf(rgb.rows + border*2, rgb.cols + border*2, rgb.depth());\n'
    '// select the middle part of it w/o copying data\n'
    'Mat gray(gray_canvas, Rect(border, border, rgb.cols, rgb.rows));\n'
    '// convert image from RGB to grayscale\n'
    'cvtColor(rgb, gray, COLOR_RGB2GRAY);\n'
    '// form a border in-place\n'
    'copyMakeBorder(gray, gray_buf, border, border,\n'
    'border, border, BORDER_REPLICATE);\n'
    '// now do some custom filtering ...\n'
    '...\n'
    '@endcode\n'
    '@note When the source image is a part (ROI) of a bigger image, the '
    'function will try to use the\n'
    'pixels outside of the ROI to form a border. To disable this feature and '
    'always do extrapolation, as\n'
    'if src was not a ROI, use borderType | #BORDER_ISOLATED.\n'
    '\n'
    '@param src Source image.\n'
    '@param dst Destination image of the same type as src and the size '
    'Size(src.cols+left+right,\n'
    'src.rows+top+bottom) .\n'
    '@param top the top pixels\n'
    '@param bottom the bottom pixels\n'
    '@param left the left pixels\n'
    '@param right Parameter specifying how many pixels in each direction from '
    'the source image rectangle\n'
    'to extrapolate. For example, top=1, bottom=1, left=1, right=1 mean that 1 '
    'pixel-wide border needs\n'
    'to be built.\n'
    '@param borderType Border type. See borderInterpolate for details.\n'
    '@param value Border value if borderType==BORDER_CONSTANT .\n'
    '\n'
    '@sa  borderInterpolate']
parse_name: cv.copyMakeBorder with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::copyMakeBorder namespace:cv classpath: classname: name:copyMakeBorder
register (function) copyMakeBorder (cv_copyMakeBorder__InputArray__OutputArray_int_int_int_int_int_Scalar)

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', 'noArray()', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Calculates the per-element sum of two arrays or an array and a '
    'scalar.\n'
    '\n'
    'The function add calculates:\n'
    '- Sum of two arrays when both input arrays have the same size and the '
    'same number of channels:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) +  '
    '\\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    '- Sum of an array and a scalar when src2 is constructed from Scalar or '
    'has the same number of\n'
    'elements as `src1.channels()`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) +  '
    '\\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    '- Sum of a scalar and an array when src1 is constructed from Scalar or '
    'has the same number of\n'
    'elements as `src2.channels()`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1} +  '
    '\\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    'where `I` is a multi-dimensional index of array elements. In case of '
    'multi-channel arrays, each\n'
    'channel is processed independently.\n'
    '\n'
    'The first function in the list above can be replaced with matrix '
    'expressions:\n'
    '@code{.cpp}\n'
    'dst = src1 + src2;\n'
    'dst += src1; // equivalent to add(dst, src1, dst);\n'
    '@endcode\n'
    'The input arrays and the output array can all have the same or different '
    'depths. For example, you\n'
    'can add a 16-bit unsigned array to a 8-bit signed array and store the sum '
    'as a 32-bit\n'
    'floating-point array. Depth of the output array is determined by the '
    'dtype parameter. In the second\n'
    'and third cases above, as well as in the first case, when src1.depth() == '
    'src2.depth(), dtype can\n'
    'be set to the default -1. In this case, the output array will have the '
    'same depth as the input\n'
    'array, be it src1, src2 or both.\n'
    '@note Saturation is not applied when the output array has the depth '
    'CV_32S. You may even get\n'
    'result of an incorrect sign in the case of overflow.\n'
    '@param src1 first input array or a scalar.\n'
    '@param src2 second input array or a scalar.\n'
    '@param dst output array that has the same size and number of channels as '
    'the input array(s); the\n'
    'depth is defined by dtype or src1/src2.\n'
    '@param mask optional operation mask - 8-bit single channel array, that '
    'specifies elements of the\n'
    'output array to be changed.\n'
    '@param dtype optional depth of the output array (see the discussion '
    'below).\n'
    '@sa subtract, addWeighted, scaleAdd, Mat::convertTo']
parse_name: cv.add with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::add namespace:cv classpath: classname: name:add
register (function) add (cv_add__InputArray__InputArray__OutputArray__InputArray_int)

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', 'noArray()', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Calculates the per-element difference between two arrays or array '
    'and a scalar.\n'
    '\n'
    'The function subtract calculates:\n'
    '- Difference between two arrays, when both input arrays have the same '
    'size and the same number of\n'
    'channels:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) -  '
    '\\texttt{src2}(I)) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    '- Difference between an array and a scalar, when src2 is constructed from '
    'Scalar or has the same\n'
    'number of elements as `src1.channels()`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1}(I) -  '
    '\\texttt{src2} ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    '- Difference between a scalar and an array, when src1 is constructed from '
    'Scalar or has the same\n'
    'number of elements as `src2.channels()`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src1} -  '
    '\\texttt{src2}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    '- The reverse difference between a scalar and an array in the case of '
    '`SubRS`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} ( \\texttt{src2} -  '
    '\\texttt{src1}(I) ) \\quad \\texttt{if mask}(I) \\ne0\\f]\n'
    'where I is a multi-dimensional index of array elements. In case of '
    'multi-channel arrays, each\n'
    'channel is processed independently.\n'
    '\n'
    'The first function in the list above can be replaced with matrix '
    'expressions:\n'
    '@code{.cpp}\n'
    'dst = src1 - src2;\n'
    'dst -= src1; // equivalent to subtract(dst, src1, dst);\n'
    '@endcode\n'
    'The input arrays and the output array can all have the same or different '
    'depths. For example, you\n'
    'can subtract to 8-bit unsigned arrays and store the difference in a '
    '16-bit signed array. Depth of\n'
    'the output array is determined by dtype parameter. In the second and '
    'third cases above, as well as\n'
    'in the first case, when src1.depth() == src2.depth(), dtype can be set to '
    'the default -1. In this\n'
    'case the output array will have the same depth as the input array, be it '
    'src1, src2 or both.\n'
    '@note Saturation is not applied when the output array has the depth '
    'CV_32S. You may even get\n'
    'result of an incorrect sign in the case of overflow.\n'
    '@param src1 first input array or a scalar.\n'
    '@param src2 second input array or a scalar.\n'
    '@param dst output array of the same size and the same number of channels '
    'as the input array.\n'
    '@param mask optional operation mask; this is an 8-bit single channel '
    'array that specifies elements\n'
    'of the output array to be changed.\n'
    '@param dtype optional depth of the output array\n'
    '@sa  add, addWeighted, scaleAdd, Mat::convertTo']
parse_name: cv.subtract with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::subtract namespace:cv classpath: classname: name:subtract
register (function) subtract (cv_subtract__InputArray__InputArray__OutputArray__InputArray_int)

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Calculates the per-element scaled product of two arrays.\n'
    '\n'
    'The function multiply calculates the per-element product of two arrays:\n'
    '\n'
    '\\f[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{scale} \\cdot '
    '\\texttt{src1} (I)  \\cdot \\texttt{src2} (I))\\f]\n'
    '\n'
    'There is also a @ref MatrixExpressions -friendly variant of the first '
    'function. See Mat::mul .\n'
    '\n'
    'For a not-per-element matrix product, see gemm .\n'
    '\n'
    '@note Saturation is not applied when the output array has the depth\n'
    'CV_32S. You may even get result of an incorrect sign in the case of\n'
    'overflow.\n'
    '@param src1 first input array.\n'
    '@param src2 second input array of the same size and the same type as '
    'src1.\n'
    '@param dst output array of the same size and type as src1.\n'
    '@param scale optional scale factor.\n'
    '@param dtype optional depth of the output array\n'
    '@sa add, subtract, divide, scaleAdd, addWeighted, accumulate, '
    'accumulateProduct, accumulateSquare,\n'
    'Mat::convertTo']
parse_name: cv.multiply with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::multiply namespace:cv classpath: classname: name:multiply
register (function) multiply (cv_multiply__InputArray__InputArray__OutputArray_double_int)

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Performs per-element division of two arrays or a scalar by an '
    'array.\n'
    '\n'
    'The function cv::divide divides one array by another:\n'
    '\\f[\\texttt{dst(I) = saturate(src1(I)*scale/src2(I))}\\f]\n'
    'or a scalar by an array when there is no src1 :\n'
    '\\f[\\texttt{dst(I) = saturate(scale/src2(I))}\\f]\n'
    '\n'
    'Different channels of multi-channel arrays are processed independently.\n'
    '\n'
    'For integer types when src2(I) is zero, dst(I) will also be zero.\n'
    '\n'
    '@note In case of floating point data there is no special defined behavior '
    'for zero src2(I) values.\n'
    'Regular floating-point division is used.\n'
    'Expect correct IEEE-754 behaviour for floating-point data (with NaN, Inf '
    'result values).\n'
    '\n'
    '@note Saturation is not applied when the output array has the depth '
    'CV_32S. You may even get\n'
    'result of an incorrect sign in the case of overflow.\n'
    '@param src1 first input array.\n'
    '@param src2 second input array of the same size and type as src1.\n'
    '@param scale scalar factor.\n'
    '@param dst output array of the same size and type as src2.\n'
    '@param dtype optional depth of the output array; if -1, dst will have '
    'depth src2.depth(), but in\n'
    'case of an array-by-array division, you can only pass -1 when '
    'src1.depth()==src2.depth().\n'
    '@sa  multiply, add, subtract']
parse_name: cv.divide with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::divide namespace:cv classpath: classname: name:divide
register (function) divide (cv_divide__InputArray__InputArray__OutputArray_double_int)

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['double', 'scale', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@overload']
parse_name: cv.divide with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::divide namespace:cv classpath: classname: name:divide
register (function) divide (cv_divide_double__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.scaleAdd',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates the sum of a scaled array and another array.\n'
    '\n'
    'The function scaleAdd is one of the classical primitive linear algebra '
    'operations, known as DAXPY\n'
    'or SAXPY in '
    '[BLAS](http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms). It '
    'calculates\n'
    'the sum of a scaled array and another array:\n'
    '\\f[\\texttt{dst} (I)= \\texttt{scale} \\cdot \\texttt{src1} (I) +  '
    '\\texttt{src2} (I)\\f]\n'
    'The function can also be emulated with a matrix expression, for example:\n'
    '@code{.cpp}\n'
    'Mat A(3, 3, CV_64F);\n'
    '...\n'
    'A.row(0) = A.row(1)*2 + A.row(2);\n'
    '@endcode\n'
    '@param src1 first input array.\n'
    '@param alpha scale factor for the first array.\n'
    '@param src2 second input array of the same size and type as src1.\n'
    '@param dst output array of the same size and type as src1.\n'
    '@sa add, addWeighted, subtract, Mat::dot, Mat::convertTo']
parse_name: cv.scaleAdd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::scaleAdd namespace:cv classpath: classname: name:scaleAdd
register (function) scaleAdd (cv_scaleAdd__InputArray_double__InputArray__OutputArray)

--- Incoming ---
[   'cv.addWeighted',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['InputArray', 'src2', '', []],
        ['double', 'beta', '', []],
        ['double', 'gamma', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Calculates the weighted sum of two arrays.\n'
    '\n'
    'The function addWeighted calculates the weighted sum of two arrays as '
    'follows:\n'
    '\\f[\\texttt{dst} (I)= \\texttt{saturate} ( \\texttt{src1} (I)* '
    '\\texttt{alpha} +  \\texttt{src2} (I)* \\texttt{beta} +  \\texttt{gamma} '
    ')\\f]\n'
    'where I is a multi-dimensional index of array elements. In case of '
    'multi-channel arrays, each\n'
    'channel is processed independently.\n'
    'The function can be replaced with a matrix expression:\n'
    '@code{.cpp}\n'
    'dst = src1*alpha + src2*beta + gamma;\n'
    '@endcode\n'
    '@note Saturation is not applied when the output array has the depth '
    'CV_32S. You may even get\n'
    'result of an incorrect sign in the case of overflow.\n'
    '@param src1 first input array.\n'
    '@param alpha weight of the first array elements.\n'
    '@param src2 second input array of the same size and channel number as '
    'src1.\n'
    '@param beta weight of the second array elements.\n'
    '@param gamma scalar added to each sum.\n'
    '@param dst output array that has the same size and number of channels as '
    'the input arrays.\n'
    '@param dtype optional depth of the output array; when both input arrays '
    'have the same depth, dtype\n'
    'can be set to -1, which will be equivalent to src1.depth().\n'
    '@sa  add, subtract, scaleAdd, Mat::convertTo']
parse_name: cv.addWeighted with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::addWeighted namespace:cv classpath: classname: name:addWeighted
register (function) addWeighted (cv_addWeighted__InputArray_double__InputArray_double_double__OutputArray_int)

--- Incoming ---
[   'cv.convertScaleAbs',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]],
    None,
    '@brief Scales, calculates absolute values, and converts the result to '
    '8-bit.\n'
    '\n'
    'On each element of the input array, the function convertScaleAbs\n'
    'performs three operations sequentially: scaling, taking an absolute\n'
    'value, conversion to an unsigned 8-bit type:\n'
    '\\f[\\texttt{dst} (I)= \\texttt{saturate\\_cast<uchar>} (| \\texttt{src} '
    '(I)* \\texttt{alpha} +  \\texttt{beta} |)\\f]\n'
    'In case of multi-channel arrays, the function processes each channel\n'
    'independently. When the output is not 8-bit, the operation can be\n'
    'emulated by calling the Mat::convertTo method (or by using matrix\n'
    'expressions) and then by calculating an absolute value of the result.\n'
    'For example:\n'
    '@code{.cpp}\n'
    'Mat_<float> A(30,30);\n'
    'randu(A, Scalar(-100), Scalar(100));\n'
    'Mat_<float> B = A*5 + 3;\n'
    'B = abs(B);\n'
    '// Mat_<float> B = abs(A*5+3) will also do the job,\n'
    '// but it will allocate a temporary matrix\n'
    '@endcode\n'
    '@param src input array.\n'
    '@param dst output array.\n'
    '@param alpha optional scale factor.\n'
    '@param beta optional delta added to the scaled values.\n'
    '@sa  Mat::convertTo, cv::abs(const Mat&)']
parse_name: cv.convertScaleAbs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::convertScaleAbs namespace:cv classpath: classname: name:convertScaleAbs
register (function) convertScaleAbs (cv_convertScaleAbs__InputArray__OutputArray_double_double)

--- Incoming ---
[   'cv.convertFp16',
    'void',
    [],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief Converts an array to half precision floating number.\n'
    '\n'
    'This function converts FP32 (single precision floating point) from/to '
    'FP16 (half precision floating point). CV_16S format is used to represent '
    'FP16 data.\n'
    'There are two use modes (src -> dst): CV_32F -> CV_16S and CV_16S -> '
    'CV_32F. The input array has to have type of CV_32F or\n'
    'CV_16S to represent the bit depth. If the input array is neither of them, '
    'the function will raise an error.\n'
    'The format of half precision floating point is defined in IEEE 754-2008.\n'
    '\n'
    '@param src input array.\n'
    '@param dst output array.']
parse_name: cv.convertFp16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::convertFp16 namespace:cv classpath: classname: name:convertFp16
register (function) convertFp16 (cv_convertFp16__InputArray__OutputArray)

--- Incoming ---
[   'cv.LUT',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'lut', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Performs a look-up table transform of an array.\n'
    '\n'
    'The function LUT fills the output array with values from the look-up '
    'table. Indices of the entries\n'
    'are taken from the input array. That is, the function processes each '
    'element of src as follows:\n'
    '\\f[\\texttt{dst} (I)  \\leftarrow \\texttt{lut(src(I) + d)}\\f]\n'
    'where\n'
    '\\f[d =  \\fork{0}{if \\(\\texttt{src}\\) has depth '
    '\\(\\texttt{CV_8U}\\)}{128}{if \\(\\texttt{src}\\) has depth '
    '\\(\\texttt{CV_8S}\\)}\\f]\n'
    '@param src input array of 8-bit elements.\n'
    '@param lut look-up table of 256 elements; in case of multi-channel input '
    'array, the table should\n'
    'either have a single channel (in this case the same table is used for all '
    'channels) or the same\n'
    'number of channels as in the input array.\n'
    '@param dst output array of the same size and number of channels as src, '
    'and the same depth as lut.\n'
    '@sa  convertScaleAbs, Mat::convertTo']
parse_name: cv.LUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LUT namespace:cv classpath: classname: name:LUT
register (function) LUT (cv_LUT__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.sum',
    'Scalar',
    [],
    [['InputArray', 'src', '', []]],
    None,
    '@brief Calculates the sum of array elements.\n'
    '\n'
    'The function cv::sum calculates and returns the sum of array elements,\n'
    'independently for each channel.\n'
    '@param src input array that must have from 1 to 4 channels.\n'
    '@sa  countNonZero, mean, meanStdDev, norm, minMaxLoc, reduce']
parse_name: cv.sum with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::sum namespace:cv classpath: classname: name:sum
register (function) sum (cv_sum__InputArray)

--- Incoming ---
[   'cv.countNonZero',
    'int',
    [],
    [['InputArray', 'src', '', []]],
    None,
    '@brief Counts non-zero array elements.\n'
    '\n'
    'The function returns the number of non-zero elements in src :\n'
    '\\f[\\sum _{I: \\; \\texttt{src} (I) \\ne0 } 1\\f]\n'
    '@param src single-channel array.\n'
    '@sa  mean, meanStdDev, norm, minMaxLoc, calcCovarMatrix']
parse_name: cv.countNonZero with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::countNonZero namespace:cv classpath: classname: name:countNonZero
register (function) countNonZero (cv_countNonZero__InputArray)

--- Incoming ---
[   'cv.findNonZero',
    'void',
    [],
    [['InputArray', 'src', '', []], ['OutputArray', 'idx', '', []]],
    None,
    '@brief Returns the list of locations of non-zero pixels\n'
    '\n'
    'Given a binary matrix (likely returned from an operation such\n'
    'as threshold(), compare(), >, ==, etc, return all of\n'
    'the non-zero indices as a cv::Mat or std::vector<cv::Point> (x,y)\n'
    'For example:\n'
    '@code{.cpp}\n'
    'cv::Mat binaryImage; // input, binary image\n'
    'cv::Mat locations;   // output, locations of non-zero pixels\n'
    'cv::findNonZero(binaryImage, locations);\n'
    '\n'
    '// access pixel coordinates\n'
    'Point pnt = locations.at<Point>(i);\n'
    '@endcode\n'
    'or\n'
    '@code{.cpp}\n'
    'cv::Mat binaryImage; // input, binary image\n'
    'vector<Point> locations;   // output, locations of non-zero pixels\n'
    'cv::findNonZero(binaryImage, locations);\n'
    '\n'
    '// access pixel coordinates\n'
    'Point pnt = locations[i];\n'
    '@endcode\n'
    '@param src single-channel array\n'
    '@param idx the output array, type of cv::Mat or std::vector<Point>, '
    'corresponding to non-zero indices in the input']
parse_name: cv.findNonZero with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::findNonZero namespace:cv classpath: classname: name:findNonZero
register (function) findNonZero (cv_findNonZero__InputArray__OutputArray)

--- Incoming ---
[   'cv.mean',
    'Scalar',
    [],
    [['InputArray', 'src', '', []], ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Calculates an average (mean) of array elements.\n'
    '\n'
    'The function cv::mean calculates the mean value M of array elements,\n'
    'independently for each channel, and return it:\n'
    '\\f[\\begin{array}{l} N =  \\sum _{I: \\; \\texttt{mask} (I) \\ne 0} 1 '
    '\\\\ M_c =  \\left ( \\sum _{I: \\; \\texttt{mask} (I) \\ne 0}{ '
    '\\texttt{mtx} (I)_c} \\right )/N \\end{array}\\f]\n'
    "When all the mask elements are 0's, the function returns Scalar::all(0)\n"
    '@param src input array that should have from 1 to 4 channels so that the '
    'result can be stored in\n'
    'Scalar_ .\n'
    '@param mask optional operation mask.\n'
    '@sa  countNonZero, meanStdDev, norm, minMaxLoc']
parse_name: cv.mean with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::mean namespace:cv classpath: classname: name:mean
register (function) mean (cv_mean__InputArray__InputArray)

--- Incoming ---
[   'cv.meanStdDev',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'mean', '', []],
        ['OutputArray', 'stddev', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    'Calculates a mean and standard deviation of array elements.\n'
    '\n'
    'The function cv::meanStdDev calculates the mean and the standard '
    'deviation M\n'
    'of array elements independently for each channel and returns it via the\n'
    'output parameters:\n'
    '\\f[\\begin{array}{l} N =  \\sum _{I, \\texttt{mask} (I)  \\ne 0} 1 \\\\ '
    '\\texttt{mean} _c =  \\frac{\\sum_{ I: \\; \\texttt{mask}(I) \\ne 0} '
    '\\texttt{src} (I)_c}{N} \\\\ \\texttt{stddev} _c =  \\sqrt{\\frac{\\sum_{ '
    'I: \\; \\texttt{mask}(I) \\ne 0} \\left ( \\texttt{src} (I)_c -  '
    '\\texttt{mean} _c \\right )^2}{N}} \\end{array}\\f]\n'
    "When all the mask elements are 0's, the function returns\n"
    'mean=stddev=Scalar::all(0).\n'
    '@note The calculated standard deviation is only the diagonal of the\n'
    'complete normalized covariance matrix. If the full matrix is needed, you\n'
    'can reshape the multi-channel array M x N to the single-channel array\n'
    'M\\*N x mtx.channels() (only possible when the matrix is continuous) and\n'
    'then pass the matrix to calcCovarMatrix .\n'
    '@param src input array that should have from 1 to 4 channels so that the '
    'results can be stored in\n'
    "Scalar_ 's.\n"
    '@param mean output parameter: calculated mean value.\n'
    '@param stddev output parameter: calculated standard deviation.\n'
    '@param mask optional operation mask.\n'
    '@sa  countNonZero, mean, norm, minMaxLoc, calcCovarMatrix']
parse_name: cv.meanStdDev with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::meanStdDev namespace:cv classpath: classname: name:meanStdDev
register (function) meanStdDev (cv_meanStdDev__InputArray__OutputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['InputArray', 'src1', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Calculates the  absolute norm of an array.\n'
    '\n'
    'This version of #norm calculates the absolute norm of src1. The type of '
    'norm to calculate is specified using #NormTypes.\n'
    '\n'
    'As example for one array consider the function \\f$r(x)= \\begin{pmatrix} '
    'x \\\\ 1-x \\end{pmatrix}, x \\in [-1;1]\\f$.\n'
    'The \\f$ L_{1}, L_{2} \\f$ and \\f$ L_{\\infty} \\f$ norm for the sample '
    'value \\f$r(-1) = \\begin{pmatrix} -1 \\\\ 2 \\end{pmatrix}\\f$\n'
    'is calculated as follows\n'
    '\\f{align*}\n'
    '\\| r(-1) \\|_{L_1} &= |-1| + |2| = 3 \\\\\n'
    '\\| r(-1) \\|_{L_2} &= \\sqrt{(-1)^{2} + (2)^{2}} = \\sqrt{5} \\\\\n'
    '\\| r(-1) \\|_{L_\\infty} &= \\max(|-1|,|2|) = 2\n'
    '\\f}\n'
    'and for \\f$r(0.5) = \\begin{pmatrix} 0.5 \\\\ 0.5 \\end{pmatrix}\\f$ the '
    'calculation is\n'
    '\\f{align*}\n'
    '\\| r(0.5) \\|_{L_1} &= |0.5| + |0.5| = 1 \\\\\n'
    '\\| r(0.5) \\|_{L_2} &= \\sqrt{(0.5)^{2} + (0.5)^{2}} = \\sqrt{0.5} \\\\\n'
    '\\| r(0.5) \\|_{L_\\infty} &= \\max(|0.5|,|0.5|) = 0.5.\n'
    '\\f}\n'
    'The following graphic shows all values for the three norm functions '
    '\\f$\\| r(x) \\|_{L_1}, \\| r(x) \\|_{L_2}\\f$ and \\f$\\| r(x) '
    '\\|_{L_\\infty}\\f$.\n'
    'It is notable that the \\f$ L_{1} \\f$ norm forms the upper and the \\f$ '
    'L_{\\infty} \\f$ norm forms the lower border for the example function '
    '\\f$ r(x) \\f$.\n'
    '![Graphs for the different norm functions from the above '
    'example](pics/NormTypes_OneArray_1-2-INF.png)\n'
    '\n'
    'When the mask parameter is specified and it is not empty, the norm is\n'
    '\n'
    'If normType is not specified, #NORM_L2 is used.\n'
    'calculated only over the region specified by the mask.\n'
    '\n'
    'Multi-channel input arrays are treated as single-channel arrays, that '
    'is,\n'
    'the results for all channels are combined.\n'
    '\n'
    'Hamming norms can only be calculated with CV_8U depth arrays.\n'
    '\n'
    '@param src1 first input array.\n'
    '@param normType type of the norm (see #NormTypes).\n'
    '@param mask optional operation mask; it must have the same size as src1 '
    'and CV_8UC1 type.']
parse_name: cv.norm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::norm namespace:cv classpath: classname: name:norm
register (function) norm (cv_norm__InputArray_int__InputArray)

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Calculates an absolute difference norm or a relative difference '
    'norm.\n'
    '\n'
    'This version of cv::norm calculates the absolute difference norm\n'
    'or the relative difference norm of arrays src1 and src2.\n'
    'The type of norm to calculate is specified using #NormTypes.\n'
    '\n'
    '@param src1 first input array.\n'
    '@param src2 second input array of the same size and the same type as '
    'src1.\n'
    '@param normType type of the norm (see #NormTypes).\n'
    '@param mask optional operation mask; it must have the same size as src1 '
    'and CV_8UC1 type.']
parse_name: cv.norm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::norm namespace:cv classpath: classname: name:norm
register (function) norm (cv_norm__InputArray__InputArray_int__InputArray)

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [['const SparseMat&', 'src', '', []], ['int', 'normType', '', []]],
    None,
    '@overload\n'
    '@param src first input array.\n'
    '@param normType type of the norm (see #NormTypes).']
parse_name: cv.norm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::norm namespace:cv classpath: classname: name:norm
register (function) norm (cv_norm_SparseMat_int)

--- Incoming ---
[   'cv.PSNR',
    'double',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['double', 'R', '255.', []]],
    None,
    '@brief Computes the Peak Signal-to-Noise Ratio (PSNR) image quality '
    'metric.\n'
    '\n'
    'This function calculates the Peak Signal-to-Noise Ratio (PSNR) image '
    'quality metric in decibels (dB),\n'
    'between two input arrays src1 and src2. The arrays must have the same '
    'type.\n'
    '\n'
    'The PSNR is calculated as follows:\n'
    '\n'
    '\\f[\n'
    '\\texttt{PSNR} = 10 \\cdot \\log_{10}{\\left( \\frac{R^2}{MSE} \\right) '
    '}\n'
    '\\f]\n'
    '\n'
    'where R is the maximum integer value of depth (e.g. 255 in the case of '
    'CV_8U data)\n'
    'and MSE is the mean squared error between the two arrays.\n'
    '\n'
    '@param src1 first input array.\n'
    '@param src2 second input array of the same size as src1.\n'
    '@param R the maximum pixel value (255 by default)']
parse_name: cv.PSNR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PSNR namespace:cv classpath: classname: name:PSNR
register (function) PSNR (cv_PSNR__InputArray__InputArray_double)

--- Incoming ---
[   'cv.batchDistance',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dist', '', []],
        ['int', 'dtype', '', []],
        ['OutputArray', 'nidx', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['int', 'K', '0', []],
        ['InputArray', 'mask', 'noArray()', []],
        ['int', 'update', '0', []],
        ['bool', 'crosscheck', 'false', []]],
    None,
    '@brief naive nearest neighbor finder\n'
    '\n'
    'see http://en.wikipedia.org/wiki/Nearest_neighbor_search\n'
    '@todo document']
parse_name: cv.batchDistance with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::batchDistance namespace:cv classpath: classname: name:batchDistance
register (function) batchDistance (cv_batchDistance__InputArray__InputArray__OutputArray_int__OutputArray_int_int__InputArray_int_bool)

--- Incoming ---
[   'cv.normalize',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputOutputArray', 'dst', '', []],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []],
        ['int', 'norm_type', 'NORM_L2', []],
        ['int', 'dtype', '-1', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Normalizes the norm or value range of an array.\n'
    '\n'
    'The function cv::normalize normalizes scale and shift the input array '
    'elements so that\n'
    '\\f[\\| \\texttt{dst} \\| _{L_p}= \\texttt{alpha}\\f]\n'
    '(where p=Inf, 1 or 2) when normType=NORM_INF, NORM_L1, or NORM_L2, '
    'respectively; or so that\n'
    '\\f[\\min _I  \\texttt{dst} (I)= \\texttt{alpha} , \\, \\, \\max _I  '
    '\\texttt{dst} (I)= \\texttt{beta}\\f]\n'
    '\n'
    'when normType=NORM_MINMAX (for dense arrays only). The optional mask '
    'specifies a sub-array to be\n'
    'normalized. This means that the norm or min-n-max are calculated over the '
    'sub-array, and then this\n'
    'sub-array is modified to be normalized. If you want to only use the mask '
    'to calculate the norm or\n'
    'min-max but modify the whole array, you can use norm and Mat::convertTo.\n'
    '\n'
    'In case of sparse matrices, only the non-zero values are analyzed and '
    'transformed. Because of this,\n'
    'the range transformation for sparse matrices is not allowed since it can '
    'shift the zero level.\n'
    '\n'
    'Possible usage with some positive example data:\n'
    '@code{.cpp}\n'
    'vector<double> positiveData = { 2.0, 8.0, 10.0 };\n'
    'vector<double> normalizedData_l1, normalizedData_l2, normalizedData_inf, '
    'normalizedData_minmax;\n'
    '\n'
    '// Norm to probability (total count)\n'
    '// sum(numbers) = 20.0\n'
    '// 2.0      0.1     (2.0/20.0)\n'
    '// 8.0      0.4     (8.0/20.0)\n'
    '// 10.0     0.5     (10.0/20.0)\n'
    'normalize(positiveData, normalizedData_l1, 1.0, 0.0, NORM_L1);\n'
    '\n'
    '// Norm to unit vector: ||positiveData|| = 1.0\n'
    '// 2.0      0.15\n'
    '// 8.0      0.62\n'
    '// 10.0     0.77\n'
    'normalize(positiveData, normalizedData_l2, 1.0, 0.0, NORM_L2);\n'
    '\n'
    '// Norm to max element\n'
    '// 2.0      0.2     (2.0/10.0)\n'
    '// 8.0      0.8     (8.0/10.0)\n'
    '// 10.0     1.0     (10.0/10.0)\n'
    'normalize(positiveData, normalizedData_inf, 1.0, 0.0, NORM_INF);\n'
    '\n'
    '// Norm to range [0.0;1.0]\n'
    '// 2.0      0.0     (shift to left border)\n'
    '// 8.0      0.75    (6.0/8.0)\n'
    '// 10.0     1.0     (shift to right border)\n'
    'normalize(positiveData, normalizedData_minmax, 1.0, 0.0, NORM_MINMAX);\n'
    '@endcode\n'
    '\n'
    '@param src input array.\n'
    '@param dst output array of the same size as src .\n'
    '@param alpha norm value to normalize to or the lower range boundary in '
    'case of the range\n'
    'normalization.\n'
    '@param beta upper range boundary in case of the range normalization; it '
    'is not used for the norm\n'
    'normalization.\n'
    '@param norm_type normalization type (see cv::NormTypes).\n'
    '@param dtype when negative, the output array has the same type as src; '
    'otherwise, it has the same\n'
    'number of channels as src and the depth =CV_MAT_DEPTH(dtype).\n'
    '@param mask optional operation mask.\n'
    '@sa norm, Mat::convertTo, SparseMat::convertTo']
parse_name: cv.normalize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normalize namespace:cv classpath: classname: name:normalize
register (function) normalize (cv_normalize__InputArray__InputOutputArray_double_double_int_int__InputArray)

--- Incoming ---
[   'cv.normalize',
    'void',
    [],
    [   ['const SparseMat&', 'src', '', []],
        ['SparseMat&', 'dst', '', []],
        ['double', 'alpha', '', []],
        ['int', 'normType', '', []]],
    None,
    '@overload\n'
    '@param src input array.\n'
    '@param dst output array of the same size as src .\n'
    '@param alpha norm value to normalize to or the lower range boundary in '
    'case of the range\n'
    'normalization.\n'
    '@param normType normalization type (see cv::NormTypes).']
parse_name: cv.normalize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::normalize namespace:cv classpath: classname: name:normalize
register (function) normalize (cv_normalize_SparseMat_SparseMat_double_int)

--- Incoming ---
[   'cv.minMaxLoc',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['double*', 'minVal', '', []],
        ['double*', 'maxVal', '0', []],
        ['Point*', 'minLoc', '0', []],
        ['Point*', 'maxLoc', '0', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Finds the global minimum and maximum in an array.\n'
    '\n'
    'The function cv::minMaxLoc finds the minimum and maximum element values '
    'and their positions. The\n'
    'extremums are searched across the whole array or, if mask is not an empty '
    'array, in the specified\n'
    'array region.\n'
    '\n'
    'The function do not work with multi-channel arrays. If you need to find '
    'minimum or maximum\n'
    'elements across all the channels, use Mat::reshape first to reinterpret '
    'the array as\n'
    'single-channel. Or you may extract the particular channel using either '
    'extractImageCOI , or\n'
    'mixChannels , or split .\n'
    '@param src input single-channel array.\n'
    '@param minVal pointer to the returned minimum value; NULL is used if not '
    'required.\n'
    '@param maxVal pointer to the returned maximum value; NULL is used if not '
    'required.\n'
    '@param minLoc pointer to the returned minimum location (in 2D case); NULL '
    'is used if not required.\n'
    '@param maxLoc pointer to the returned maximum location (in 2D case); NULL '
    'is used if not required.\n'
    '@param mask optional mask used to select a sub-array.\n'
    '@sa max, min, compare, inRange, extractImageCOI, mixChannels, split, '
    'Mat::reshape']
parse_name: cv.minMaxLoc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::minMaxLoc namespace:cv classpath: classname: name:minMaxLoc
register (function) minMaxLoc (cv_minMaxLoc__InputArray_double_X_double_X_Point_X_Point_X__InputArray)

--- Incoming ---
[   'cv.minMaxIdx',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['double*', 'minVal', '', []],
        ['double*', 'maxVal', '0', []],
        ['int*', 'minIdx', '0', []],
        ['int*', 'maxIdx', '0', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Finds the global minimum and maximum in an array\n'
    '\n'
    'The function cv::minMaxIdx finds the minimum and maximum element values '
    'and their positions. The\n'
    'extremums are searched across the whole array or, if mask is not an empty '
    'array, in the specified\n'
    'array region. The function does not work with multi-channel arrays. If '
    'you need to find minimum or\n'
    'maximum elements across all the channels, use Mat::reshape first to '
    'reinterpret the array as\n'
    'single-channel. Or you may extract the particular channel using either '
    'extractImageCOI , or\n'
    'mixChannels , or split . In case of a sparse matrix, the minimum is found '
    'among non-zero elements\n'
    'only.\n'
    '@note When minIdx is not NULL, it must have at least 2 elements (as well '
    'as maxIdx), even if src is\n'
    'a single-row or single-column matrix. In OpenCV (following MATLAB) each '
    'array has at least 2\n'
    'dimensions, i.e. single-column matrix is Mx1 matrix (and therefore '
    'minIdx/maxIdx will be\n'
    '(i1,0)/(i2,0)) and single-row matrix is 1xN matrix (and therefore '
    'minIdx/maxIdx will be\n'
    '(0,j1)/(0,j2)).\n'
    '@param src input single-channel array.\n'
    '@param minVal pointer to the returned minimum value; NULL is used if not '
    'required.\n'
    '@param maxVal pointer to the returned maximum value; NULL is used if not '
    'required.\n'
    '@param minIdx pointer to the returned minimum location (in nD case); NULL '
    'is used if not required;\n'
    'Otherwise, it must point to an array of src.dims elements, the '
    'coordinates of the minimum element\n'
    'in each dimension are stored there sequentially.\n'
    '@param maxIdx pointer to the returned maximum location (in nD case). NULL '
    'is used if not required.\n'
    '@param mask specified array region']
parse_name: cv.minMaxIdx with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::minMaxIdx namespace:cv classpath: classname: name:minMaxIdx
register (function) minMaxIdx (cv_minMaxIdx__InputArray_double_X_double_X_int_X_int_X__InputArray)

--- Incoming ---
[   'cv.minMaxLoc',
    'void',
    [],
    [   ['const SparseMat&', 'a', '', []],
        ['double*', 'minVal', '', []],
        ['double*', 'maxVal', '', []],
        ['int*', 'minIdx', '0', []],
        ['int*', 'maxIdx', '0', []]],
    None,
    '@overload\n'
    '@param a input single-channel array.\n'
    '@param minVal pointer to the returned minimum value; NULL is used if not '
    'required.\n'
    '@param maxVal pointer to the returned maximum value; NULL is used if not '
    'required.\n'
    '@param minIdx pointer to the returned minimum location (in nD case); NULL '
    'is used if not required;\n'
    'Otherwise, it must point to an array of src.dims elements, the '
    'coordinates of the minimum element\n'
    'in each dimension are stored there sequentially.\n'
    '@param maxIdx pointer to the returned maximum location (in nD case). NULL '
    'is used if not required.']
parse_name: cv.minMaxLoc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::minMaxLoc namespace:cv classpath: classname: name:minMaxLoc
register (function) minMaxLoc (cv_minMaxLoc_SparseMat_double_X_double_X_int_X_int_X)

--- Incoming ---
[   'cv.reduce',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'dim', '', []],
        ['int', 'rtype', '', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Reduces a matrix to a vector.\n'
    '\n'
    'The function #reduce reduces the matrix to a vector by treating the '
    'matrix rows/columns as a set of\n'
    '1D vectors and performing the specified operation on the vectors until a '
    'single row/column is\n'
    'obtained. For example, the function can be used to compute horizontal and '
    'vertical projections of a\n'
    'raster image. In case of #REDUCE_MAX and #REDUCE_MIN , the output image '
    'should have the same type as the source one.\n'
    'In case of #REDUCE_SUM and #REDUCE_AVG , the output may have a larger '
    'element bit-depth to preserve accuracy.\n'
    'And multi-channel arrays are also supported in these two reduction '
    'modes.\n'
    '\n'
    'The following code demonstrates its usage for a single channel matrix.\n'
    '@snippet snippets/core_reduce.cpp example\n'
    '\n'
    'And the following code demonstrates its usage for a two-channel matrix.\n'
    '@snippet snippets/core_reduce.cpp example2\n'
    '\n'
    '@param src input 2D matrix.\n'
    '@param dst output vector. Its size and type is defined by dim and dtype '
    'parameters.\n'
    '@param dim dimension index along which the matrix is reduced. 0 means '
    'that the matrix is reduced to\n'
    'a single row. 1 means that the matrix is reduced to a single column.\n'
    '@param rtype reduction operation that could be one of #ReduceTypes\n'
    '@param dtype when negative, the output vector will have the same type as '
    'the input matrix,\n'
    'otherwise, its type will be CV_MAKE_TYPE(CV_MAT_DEPTH(dtype), '
    'src.channels()).\n'
    '@sa repeat']
parse_name: cv.reduce with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::reduce namespace:cv classpath: classname: name:reduce
register (function) reduce (cv_reduce__InputArray__OutputArray_int_int_int)

--- Incoming ---
[   'cv.merge',
    'void',
    [],
    [   ['const Mat*', 'mv', '', []],
        ['size_t', 'count', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Creates one multi-channel array out of several single-channel '
    'ones.\n'
    '\n'
    'The function cv::merge merges several arrays to make a single '
    'multi-channel array. That is, each\n'
    'element of the output array will be a concatenation of the elements of '
    'the input arrays, where\n'
    'elements of i-th input array are treated as mv[i].channels()-element '
    'vectors.\n'
    '\n'
    'The function cv::split does the reverse operation. If you need to shuffle '
    'channels in some other\n'
    'advanced way, use cv::mixChannels.\n'
    '\n'
    'The following example shows how to merge 3 single channel matrices into a '
    'single 3-channel matrix.\n'
    '@snippet snippets/core_merge.cpp example\n'
    '\n'
    '@param mv input array of matrices to be merged; all the matrices in mv '
    'must have the same\n'
    'size and the same depth.\n'
    '@param count number of input matrices when mv is a plain C array; it must '
    'be greater than zero.\n'
    '@param dst output array of the same size and the same depth as mv[0]; The '
    'number of channels will\n'
    'be equal to the parameter count.\n'
    '@sa  mixChannels, split, Mat::reshape']
parse_name: cv.merge with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::merge namespace:cv classpath: classname: name:merge
register (function) merge (cv_merge_const_Mat_size_t__OutputArray)

--- Incoming ---
[   'cv.merge',
    'void',
    [],
    [['InputArrayOfArrays', 'mv', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@overload\n'
    '@param mv input vector of matrices to be merged; all the matrices in mv '
    'must have the same\n'
    'size and the same depth.\n'
    '@param dst output array of the same size and the same depth as mv[0]; The '
    'number of channels will\n'
    'be the total number of channels in the matrix array.']
parse_name: cv.merge with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::merge namespace:cv classpath: classname: name:merge
register (function) merge (cv_merge__InputArray__OutputArray)

--- Incoming ---
[   'cv.split',
    'void',
    [],
    [['const Mat&', 'src', '', []], ['Mat*', 'mvbegin', '', []]],
    None,
    '@brief Divides a multi-channel array into several single-channel arrays.\n'
    '\n'
    'The function cv::split splits a multi-channel array into separate '
    'single-channel arrays:\n'
    '\\f[\\texttt{mv} [c](I) =  \\texttt{src} (I)_c\\f]\n'
    'If you need to extract a single channel or do some other sophisticated '
    'channel permutation, use\n'
    'mixChannels .\n'
    '\n'
    'The following example demonstrates how to split a 3-channel matrix into 3 '
    'single channel matrices.\n'
    '@snippet snippets/core_split.cpp example\n'
    '\n'
    '@param src input multi-channel array.\n'
    '@param mvbegin output array; the number of arrays must match '
    'src.channels(); the arrays themselves are\n'
    'reallocated, if needed.\n'
    '@sa merge, mixChannels, cvtColor']
parse_name: cv.split with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::split namespace:cv classpath: classname: name:split
register (function) split (cv_split_Mat_Mat)

--- Incoming ---
[   'cv.split',
    'void',
    [],
    [['InputArray', 'm', '', []], ['OutputArrayOfArrays', 'mv', '', []]],
    None,
    '@overload\n'
    '@param m input multi-channel array.\n'
    '@param mv output vector of arrays; the arrays themselves are reallocated, '
    'if needed.']
parse_name: cv.split with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::split namespace:cv classpath: classname: name:split
register (function) split (cv_split__InputArray__OutputArray)

--- Incoming ---
[   'cv.mixChannels',
    'void',
    [],
    [   ['const Mat*', 'src', '', []],
        ['size_t', 'nsrcs', '', []],
        ['Mat*', 'dst', '', []],
        ['size_t', 'ndsts', '', []],
        ['const int*', 'fromTo', '', []],
        ['size_t', 'npairs', '', []]],
    None,
    '@brief Copies specified channels from input arrays to the specified '
    'channels of\n'
    'output arrays.\n'
    '\n'
    'The function cv::mixChannels provides an advanced mechanism for shuffling '
    'image channels.\n'
    '\n'
    'cv::split,cv::merge,cv::extractChannel,cv::insertChannel and some forms '
    'of cv::cvtColor are partial cases of cv::mixChannels.\n'
    '\n'
    'In the example below, the code splits a 4-channel BGRA image into a '
    '3-channel BGR (with B and R\n'
    'channels swapped) and a separate alpha-channel image:\n'
    '@code{.cpp}\n'
    'Mat bgra( 100, 100, CV_8UC4, Scalar(255,0,0,255) );\n'
    'Mat bgr( bgra.rows, bgra.cols, CV_8UC3 );\n'
    'Mat alpha( bgra.rows, bgra.cols, CV_8UC1 );\n'
    '\n'
    '// forming an array of matrices is a quite efficient operation,\n'
    '// because the matrix data is not copied, only the headers\n'
    'Mat out[] = { bgr, alpha };\n'
    '// bgra[0] -> bgr[2], bgra[1] -> bgr[1],\n'
    '// bgra[2] -> bgr[0], bgra[3] -> alpha[0]\n'
    'int from_to[] = { 0,2, 1,1, 2,0, 3,3 };\n'
    'mixChannels( &bgra, 1, out, 2, from_to, 4 );\n'
    '@endcode\n'
    '@note Unlike many other new-style C++ functions in OpenCV (see the '
    'introduction section and\n'
    'Mat::create ), cv::mixChannels requires the output arrays to be '
    'pre-allocated before calling the\n'
    'function.\n'
    '@param src input array or vector of matrices; all of the matrices must '
    'have the same size and the\n'
    'same depth.\n'
    '@param nsrcs number of matrices in `src`.\n'
    '@param dst output array or vector of matrices; all the matrices **must be '
    'allocated**; their size and\n'
    'depth must be the same as in `src[0]`.\n'
    '@param ndsts number of matrices in `dst`.\n'
    '@param fromTo array of index pairs specifying which channels are copied '
    'and where; fromTo[k\\*2] is\n'
    'a 0-based index of the input channel in src, fromTo[k\\*2+1] is an index '
    'of the output channel in\n'
    'dst; the continuous channel numbering is used: the first input image '
    'channels are indexed from 0 to\n'
    'src[0].channels()-1, the second input image channels are indexed from '
    'src[0].channels() to\n'
    'src[0].channels() + src[1].channels()-1, and so on, the same scheme is '
    'used for the output image\n'
    'channels; as a special case, when fromTo[k\\*2] is negative, the '
    'corresponding output channel is\n'
    'filled with zero .\n'
    '@param npairs number of index pairs in `fromTo`.\n'
    '@sa split, merge, extractChannel, insertChannel, cvtColor']
parse_name: cv.mixChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::mixChannels namespace:cv classpath: classname: name:mixChannels
register (function) mixChannels (cv_mixChannels_const_Mat_size_t_Mat_size_t_const_int_X_size_t)

--- Incoming ---
[   'cv.mixChannels',
    'void',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['InputOutputArrayOfArrays', 'dst', '', []],
        ['const int*', 'fromTo', '', []],
        ['size_t', 'npairs', '', []]],
    None,
    '@overload\n'
    '@param src input array or vector of matrices; all of the matrices must '
    'have the same size and the\n'
    'same depth.\n'
    '@param dst output array or vector of matrices; all the matrices **must be '
    'allocated**; their size and\n'
    'depth must be the same as in src[0].\n'
    '@param fromTo array of index pairs specifying which channels are copied '
    'and where; fromTo[k\\*2] is\n'
    'a 0-based index of the input channel in src, fromTo[k\\*2+1] is an index '
    'of the output channel in\n'
    'dst; the continuous channel numbering is used: the first input image '
    'channels are indexed from 0 to\n'
    'src[0].channels()-1, the second input image channels are indexed from '
    'src[0].channels() to\n'
    'src[0].channels() + src[1].channels()-1, and so on, the same scheme is '
    'used for the output image\n'
    'channels; as a special case, when fromTo[k\\*2] is negative, the '
    'corresponding output channel is\n'
    'filled with zero .\n'
    '@param npairs number of index pairs in fromTo.']
parse_name: cv.mixChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::mixChannels namespace:cv classpath: classname: name:mixChannels
register (function) mixChannels (cv_mixChannels__InputArray__InputOutputArray_const_int_X_size_t)

--- Incoming ---
[   'cv.mixChannels',
    'void',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['InputOutputArrayOfArrays', 'dst', '', []],
        ['const std::vector<int>&', 'fromTo', '', []]],
    None,
    '@overload\n'
    '@param src input array or vector of matrices; all of the matrices must '
    'have the same size and the\n'
    'same depth.\n'
    '@param dst output array or vector of matrices; all the matrices **must be '
    'allocated**; their size and\n'
    'depth must be the same as in src[0].\n'
    '@param fromTo array of index pairs specifying which channels are copied '
    'and where; fromTo[k\\*2] is\n'
    'a 0-based index of the input channel in src, fromTo[k\\*2+1] is an index '
    'of the output channel in\n'
    'dst; the continuous channel numbering is used: the first input image '
    'channels are indexed from 0 to\n'
    'src[0].channels()-1, the second input image channels are indexed from '
    'src[0].channels() to\n'
    'src[0].channels() + src[1].channels()-1, and so on, the same scheme is '
    'used for the output image\n'
    'channels; as a special case, when fromTo[k\\*2] is negative, the '
    'corresponding output channel is\n'
    'filled with zero .']
parse_name: cv.mixChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::mixChannels namespace:cv classpath: classname: name:mixChannels
register (function) mixChannels (cv_mixChannels__InputArray__InputOutputArray_VectorOfint)

--- Incoming ---
[   'cv.extractChannel',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'coi', '', []]],
    None,
    '@brief Extracts a single channel from src (coi is 0-based index)\n'
    '@param src input array\n'
    '@param dst output array\n'
    '@param coi index of channel to extract\n'
    '@sa mixChannels, split']
parse_name: cv.extractChannel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::extractChannel namespace:cv classpath: classname: name:extractChannel
register (function) extractChannel (cv_extractChannel__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.insertChannel',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputOutputArray', 'dst', '', []],
        ['int', 'coi', '', []]],
    None,
    '@brief Inserts a single channel to dst (coi is 0-based index)\n'
    '@param src input array\n'
    '@param dst output array\n'
    '@param coi index of channel for insertion\n'
    '@sa mixChannels, merge']
parse_name: cv.insertChannel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::insertChannel namespace:cv classpath: classname: name:insertChannel
register (function) insertChannel (cv_insertChannel__InputArray__InputOutputArray_int)

--- Incoming ---
[   'cv.flip',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flipCode', '', []]],
    None,
    '@brief Flips a 2D array around vertical, horizontal, or both axes.\n'
    '\n'
    'The function cv::flip flips the array in one of three different ways '
    '(row\n'
    'and column indices are 0-based):\n'
    '\\f[\\texttt{dst} _{ij} =\n'
    '\\left\\{\n'
    '\\begin{array}{l l}\n'
    '\\texttt{src} _{\\texttt{src.rows}-i-1,j} & if\\;  \\texttt{flipCode} = 0 '
    '\\\\\n'
    '\\texttt{src} _{i, \\texttt{src.cols} -j-1} & if\\;  \\texttt{flipCode} > '
    '0 \\\\\n'
    '\\texttt{src} _{ \\texttt{src.rows} -i-1, \\texttt{src.cols} -j-1} & '
    'if\\; \\texttt{flipCode} < 0 \\\\\n'
    '\\end{array}\n'
    '\\right.\\f]\n'
    'The example scenarios of using the function are the following:\n'
    '*   Vertical flipping of the image (flipCode == 0) to switch between\n'
    'top-left and bottom-left image origin. This is a typical operation\n'
    'in video processing on Microsoft Windows\\* OS.\n'
    '*   Horizontal flipping of the image with the subsequent horizontal\n'
    'shift and absolute difference calculation to check for a\n'
    'vertical-axis symmetry (flipCode \\> 0).\n'
    '*   Simultaneous horizontal and vertical flipping of the image with\n'
    'the subsequent shift and absolute difference calculation to check\n'
    'for a central symmetry (flipCode \\< 0).\n'
    '*   Reversing the order of point arrays (flipCode \\> 0 or\n'
    'flipCode == 0).\n'
    '@param src input array.\n'
    '@param dst output array of the same size and type as src.\n'
    '@param flipCode a flag to specify how to flip the array; 0 means\n'
    'flipping around the x-axis and positive value (for example, 1) means\n'
    'flipping around y-axis. Negative value (for example, -1) means flipping\n'
    'around both axes.\n'
    '@sa transpose , repeat , completeSymm']
parse_name: cv.flip with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::flip namespace:cv classpath: classname: name:flip
register (function) flip (cv_flip__InputArray__OutputArray_int)

--- Incoming ---
[   'enum cv.RotateFlags',
    '',
    [],
    [   [   'const cv.ROTATE_90_CLOCKWISE',
            '0',
            [],
            [],
            None,
            'Rotate 90 degrees clockwise\n'],
        [   'const cv.ROTATE_180',
            '1',
            [],
            [],
            None,
            'Rotate 180 degrees clockwise\n'],
        [   'const cv.ROTATE_90_COUNTERCLOCKWISE',
            '2',
            [],
            [],
            None,
            'Rotate 270 degrees clockwise\n']],
    None,
    '']
parse_name: const cv.ROTATE_90_CLOCKWISE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ROTATE_90_CLOCKWISE namespace:cv classpath: classname: name:ROTATE_90_CLOCKWISE
parse_name: const cv.ROTATE_180 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ROTATE_180 namespace:cv classpath: classname: name:ROTATE_180
parse_name: const cv.ROTATE_90_COUNTERCLOCKWISE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ROTATE_90_COUNTERCLOCKWISE namespace:cv classpath: classname: name:ROTATE_90_COUNTERCLOCKWISE
parse_name: enum cv.RotateFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RotateFlags namespace:cv classpath: classname: name:RotateFlags
parse_name: const cv.ROTATE_90_CLOCKWISE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ROTATE_90_CLOCKWISE namespace:cv classpath: classname: name:ROTATE_90_CLOCKWISE
parse_name: const cv.ROTATE_180 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ROTATE_180 namespace:cv classpath: classname: name:ROTATE_180
parse_name: const cv.ROTATE_90_COUNTERCLOCKWISE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::ROTATE_90_COUNTERCLOCKWISE namespace:cv classpath: classname: name:ROTATE_90_COUNTERCLOCKWISE

--- Incoming ---
[   'cv.rotate',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'rotateCode', '', []]],
    None,
    '@brief Rotates a 2D array in multiples of 90 degrees.\n'
    'The function cv::rotate rotates the array in one of three different '
    'ways:\n'
    '*   Rotate by 90 degrees clockwise (rotateCode = ROTATE_90_CLOCKWISE).\n'
    '*   Rotate by 180 degrees clockwise (rotateCode = ROTATE_180).\n'
    '*   Rotate by 270 degrees clockwise (rotateCode = '
    'ROTATE_90_COUNTERCLOCKWISE).\n'
    '@param src input array.\n'
    '@param dst output array of the same type as src.  The size is the same '
    'with ROTATE_180,\n'
    'and the rows and cols are switched for ROTATE_90_CLOCKWISE and '
    'ROTATE_90_COUNTERCLOCKWISE.\n'
    '@param rotateCode an enum to specify how to rotate the array; see the '
    'enum #RotateFlags\n'
    '@sa transpose , repeat , completeSymm, flip, RotateFlags']
parse_name: cv.rotate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::rotate namespace:cv classpath: classname: name:rotate
register (function) rotate (cv_rotate__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.repeat',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['int', 'ny', '', []],
        ['int', 'nx', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Fills the output array with repeated copies of the input array.\n'
    '\n'
    'The function cv::repeat duplicates the input array one or more times '
    'along each of the two axes:\n'
    '\\f[\\texttt{dst} _{ij}= \\texttt{src} _{i\\mod src.rows, \\; j\\mod '
    'src.cols }\\f]\n'
    'The second variant of the function is more convenient to use with @ref '
    'MatrixExpressions.\n'
    '@param src input array to replicate.\n'
    '@param ny Flag to specify how many times the `src` is repeated along the\n'
    'vertical axis.\n'
    '@param nx Flag to specify how many times the `src` is repeated along the\n'
    'horizontal axis.\n'
    '@param dst output array of the same type as `src`.\n'
    '@sa cv::reduce']
parse_name: cv.repeat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::repeat namespace:cv classpath: classname: name:repeat
register (function) repeat (cv_repeat__InputArray_int_int__OutputArray)

--- Incoming ---
[   'cv.repeat',
    'Mat',
    [],
    [   ['const Mat&', 'src', '', []],
        ['int', 'ny', '', []],
        ['int', 'nx', '', []]],
    None,
    '@overload\n'
    '@param src input array to replicate.\n'
    '@param ny Flag to specify how many times the `src` is repeated along the\n'
    'vertical axis.\n'
    '@param nx Flag to specify how many times the `src` is repeated along the\n'
    'horizontal axis.']
parse_name: cv.repeat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::repeat namespace:cv classpath: classname: name:repeat
register (function) repeat (cv_repeat_Mat_int_int)

--- Incoming ---
[   'cv.hconcat',
    'void',
    [],
    [   ['const Mat*', 'src', '', []],
        ['size_t', 'nsrc', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Applies horizontal concatenation to given matrices.\n'
    '\n'
    'The function horizontally concatenates two or more cv::Mat matrices (with '
    'the same number of rows).\n'
    '@code{.cpp}\n'
    'cv::Mat matArray[] = { cv::Mat(4, 1, CV_8UC1, cv::Scalar(1)),\n'
    'cv::Mat(4, 1, CV_8UC1, cv::Scalar(2)),\n'
    'cv::Mat(4, 1, CV_8UC1, cv::Scalar(3)),};\n'
    '\n'
    'cv::Mat out;\n'
    'cv::hconcat( matArray, 3, out );\n'
    '//out:\n'
    '//[1, 2, 3;\n'
    '// 1, 2, 3;\n'
    '// 1, 2, 3;\n'
    '// 1, 2, 3]\n'
    '@endcode\n'
    '@param src input array or vector of matrices. all of the matrices must '
    'have the same number of rows and the same depth.\n'
    '@param nsrc number of matrices in src.\n'
    '@param dst output array. It has the same number of rows and depth as the '
    'src, and the sum of cols of the src.\n'
    '@sa cv::vconcat(const Mat*, size_t, OutputArray), @sa '
    'cv::vconcat(InputArrayOfArrays, OutputArray) and @sa '
    'cv::vconcat(InputArray, InputArray, OutputArray)']
parse_name: cv.hconcat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::hconcat namespace:cv classpath: classname: name:hconcat
register (function) hconcat (cv_hconcat_const_Mat_size_t__OutputArray)

--- Incoming ---
[   'cv.hconcat',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@overload\n'
    '@code{.cpp}\n'
    'cv::Mat_<float> A = (cv::Mat_<float>(3, 2) << 1, 4,\n'
    '2, 5,\n'
    '3, 6);\n'
    'cv::Mat_<float> B = (cv::Mat_<float>(3, 2) << 7, 10,\n'
    '8, 11,\n'
    '9, 12);\n'
    '\n'
    'cv::Mat C;\n'
    'cv::hconcat(A, B, C);\n'
    '//C:\n'
    '//[1, 4, 7, 10;\n'
    '// 2, 5, 8, 11;\n'
    '// 3, 6, 9, 12]\n'
    '@endcode\n'
    '@param src1 first input array to be considered for horizontal '
    'concatenation.\n'
    '@param src2 second input array to be considered for horizontal '
    'concatenation.\n'
    '@param dst output array. It has the same number of rows and depth as the '
    'src1 and src2, and the sum of cols of the src1 and src2.']
parse_name: cv.hconcat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::hconcat namespace:cv classpath: classname: name:hconcat
register (function) hconcat (cv_hconcat__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.hconcat',
    'void',
    [],
    [['InputArrayOfArrays', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@overload\n'
    '@code{.cpp}\n'
    'std::vector<cv::Mat> matrices = { cv::Mat(4, 1, CV_8UC1, cv::Scalar(1)),\n'
    'cv::Mat(4, 1, CV_8UC1, cv::Scalar(2)),\n'
    'cv::Mat(4, 1, CV_8UC1, cv::Scalar(3)),};\n'
    '\n'
    'cv::Mat out;\n'
    'cv::hconcat( matrices, out );\n'
    '//out:\n'
    '//[1, 2, 3;\n'
    '// 1, 2, 3;\n'
    '// 1, 2, 3;\n'
    '// 1, 2, 3]\n'
    '@endcode\n'
    '@param src input array or vector of matrices. all of the matrices must '
    'have the same number of rows and the same depth.\n'
    '@param dst output array. It has the same number of rows and depth as the '
    'src, and the sum of cols of the src.\n'
    'same depth.']
parse_name: cv.hconcat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::hconcat namespace:cv classpath: classname: name:hconcat
register (function) hconcat (cv_hconcat__InputArray__OutputArray)

--- Incoming ---
[   'cv.vconcat',
    'void',
    [],
    [   ['const Mat*', 'src', '', []],
        ['size_t', 'nsrc', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Applies vertical concatenation to given matrices.\n'
    '\n'
    'The function vertically concatenates two or more cv::Mat matrices (with '
    'the same number of cols).\n'
    '@code{.cpp}\n'
    'cv::Mat matArray[] = { cv::Mat(1, 4, CV_8UC1, cv::Scalar(1)),\n'
    'cv::Mat(1, 4, CV_8UC1, cv::Scalar(2)),\n'
    'cv::Mat(1, 4, CV_8UC1, cv::Scalar(3)),};\n'
    '\n'
    'cv::Mat out;\n'
    'cv::vconcat( matArray, 3, out );\n'
    '//out:\n'
    '//[1,   1,   1,   1;\n'
    '// 2,   2,   2,   2;\n'
    '// 3,   3,   3,   3]\n'
    '@endcode\n'
    '@param src input array or vector of matrices. all of the matrices must '
    'have the same number of cols and the same depth.\n'
    '@param nsrc number of matrices in src.\n'
    '@param dst output array. It has the same number of cols and depth as the '
    'src, and the sum of rows of the src.\n'
    '@sa cv::hconcat(const Mat*, size_t, OutputArray), @sa '
    'cv::hconcat(InputArrayOfArrays, OutputArray) and @sa '
    'cv::hconcat(InputArray, InputArray, OutputArray)']
parse_name: cv.vconcat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::vconcat namespace:cv classpath: classname: name:vconcat
register (function) vconcat (cv_vconcat_const_Mat_size_t__OutputArray)

--- Incoming ---
[   'cv.vconcat',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@overload\n'
    '@code{.cpp}\n'
    'cv::Mat_<float> A = (cv::Mat_<float>(3, 2) << 1, 7,\n'
    '2, 8,\n'
    '3, 9);\n'
    'cv::Mat_<float> B = (cv::Mat_<float>(3, 2) << 4, 10,\n'
    '5, 11,\n'
    '6, 12);\n'
    '\n'
    'cv::Mat C;\n'
    'cv::vconcat(A, B, C);\n'
    '//C:\n'
    '//[1, 7;\n'
    '// 2, 8;\n'
    '// 3, 9;\n'
    '// 4, 10;\n'
    '// 5, 11;\n'
    '// 6, 12]\n'
    '@endcode\n'
    '@param src1 first input array to be considered for vertical '
    'concatenation.\n'
    '@param src2 second input array to be considered for vertical '
    'concatenation.\n'
    '@param dst output array. It has the same number of cols and depth as the '
    'src1 and src2, and the sum of rows of the src1 and src2.']
parse_name: cv.vconcat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::vconcat namespace:cv classpath: classname: name:vconcat
register (function) vconcat (cv_vconcat__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.vconcat',
    'void',
    [],
    [['InputArrayOfArrays', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@overload\n'
    '@code{.cpp}\n'
    'std::vector<cv::Mat> matrices = { cv::Mat(1, 4, CV_8UC1, cv::Scalar(1)),\n'
    'cv::Mat(1, 4, CV_8UC1, cv::Scalar(2)),\n'
    'cv::Mat(1, 4, CV_8UC1, cv::Scalar(3)),};\n'
    '\n'
    'cv::Mat out;\n'
    'cv::vconcat( matrices, out );\n'
    '//out:\n'
    '//[1,   1,   1,   1;\n'
    '// 2,   2,   2,   2;\n'
    '// 3,   3,   3,   3]\n'
    '@endcode\n'
    '@param src input array or vector of matrices. all of the matrices must '
    'have the same number of cols and the same depth\n'
    '@param dst output array. It has the same number of cols and depth as the '
    'src, and the sum of rows of the src.\n'
    'same depth.']
parse_name: cv.vconcat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::vconcat namespace:cv classpath: classname: name:vconcat
register (function) vconcat (cv_vconcat__InputArray__OutputArray)

--- Incoming ---
[   'cv.bitwise_and',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief computes bitwise conjunction of the two arrays (dst = src1 & '
    'src2)\n'
    'Calculates the per-element bit-wise conjunction of two arrays or an\n'
    'array and a scalar.\n'
    '\n'
    'The function cv::bitwise_and calculates the per-element bit-wise logical '
    'conjunction for:\n'
    '*   Two arrays when src1 and src2 have the same size:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\wedge \\texttt{src2} (I) '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    '*   An array and a scalar when src2 is constructed from Scalar or has\n'
    'the same number of elements as `src1.channels()`:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\wedge \\texttt{src2} '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    '*   A scalar and an array when src1 is constructed from Scalar or has\n'
    'the same number of elements as `src2.channels()`:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1}  \\wedge \\texttt{src2} (I) '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    'In case of floating-point arrays, their machine-specific bit\n'
    'representations (usually IEEE754-compliant) are used for the operation.\n'
    'In case of multi-channel arrays, each channel is processed\n'
    'independently. In the second and third cases above, the scalar is first\n'
    'converted to the array type.\n'
    '@param src1 first input array or a scalar.\n'
    '@param src2 second input array or a scalar.\n'
    '@param dst output array that has the same size and type as the input\n'
    'arrays.\n'
    '@param mask optional operation mask, 8-bit single channel array, that\n'
    'specifies elements of the output array to be changed.']
parse_name: cv.bitwise_and with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::bitwise_and namespace:cv classpath: classname: name:bitwise_and
register (function) bitwise_and (cv_bitwise_and__InputArray__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.bitwise_or',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Calculates the per-element bit-wise disjunction of two arrays or '
    'an\n'
    'array and a scalar.\n'
    '\n'
    'The function cv::bitwise_or calculates the per-element bit-wise logical '
    'disjunction for:\n'
    '*   Two arrays when src1 and src2 have the same size:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\vee \\texttt{src2} (I) '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    '*   An array and a scalar when src2 is constructed from Scalar or has\n'
    'the same number of elements as `src1.channels()`:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\vee \\texttt{src2} \\quad '
    '\\texttt{if mask} (I) \\ne0\\f]\n'
    '*   A scalar and an array when src1 is constructed from Scalar or has\n'
    'the same number of elements as `src2.channels()`:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1}  \\vee \\texttt{src2} (I) \\quad '
    '\\texttt{if mask} (I) \\ne0\\f]\n'
    'In case of floating-point arrays, their machine-specific bit\n'
    'representations (usually IEEE754-compliant) are used for the operation.\n'
    'In case of multi-channel arrays, each channel is processed\n'
    'independently. In the second and third cases above, the scalar is first\n'
    'converted to the array type.\n'
    '@param src1 first input array or a scalar.\n'
    '@param src2 second input array or a scalar.\n'
    '@param dst output array that has the same size and type as the input\n'
    'arrays.\n'
    '@param mask optional operation mask, 8-bit single channel array, that\n'
    'specifies elements of the output array to be changed.']
parse_name: cv.bitwise_or with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::bitwise_or namespace:cv classpath: classname: name:bitwise_or
register (function) bitwise_or (cv_bitwise_or__InputArray__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.bitwise_xor',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Calculates the per-element bit-wise "exclusive or" operation on '
    'two\n'
    'arrays or an array and a scalar.\n'
    '\n'
    'The function cv::bitwise_xor calculates the per-element bit-wise logical '
    '"exclusive-or"\n'
    'operation for:\n'
    '*   Two arrays when src1 and src2 have the same size:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\oplus \\texttt{src2} (I) '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    '*   An array and a scalar when src2 is constructed from Scalar or has\n'
    'the same number of elements as `src1.channels()`:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\oplus \\texttt{src2} '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    '*   A scalar and an array when src1 is constructed from Scalar or has\n'
    'the same number of elements as `src2.channels()`:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1}  \\oplus \\texttt{src2} (I) '
    '\\quad \\texttt{if mask} (I) \\ne0\\f]\n'
    'In case of floating-point arrays, their machine-specific bit\n'
    'representations (usually IEEE754-compliant) are used for the operation.\n'
    'In case of multi-channel arrays, each channel is processed\n'
    'independently. In the 2nd and 3rd cases above, the scalar is first\n'
    'converted to the array type.\n'
    '@param src1 first input array or a scalar.\n'
    '@param src2 second input array or a scalar.\n'
    '@param dst output array that has the same size and type as the input\n'
    'arrays.\n'
    '@param mask optional operation mask, 8-bit single channel array, that\n'
    'specifies elements of the output array to be changed.']
parse_name: cv.bitwise_xor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::bitwise_xor namespace:cv classpath: classname: name:bitwise_xor
register (function) bitwise_xor (cv_bitwise_xor__InputArray__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.bitwise_not',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief  Inverts every bit of an array.\n'
    '\n'
    'The function cv::bitwise_not calculates per-element bit-wise inversion of '
    'the input\n'
    'array:\n'
    '\\f[\\texttt{dst} (I) =  \\neg \\texttt{src} (I)\\f]\n'
    'In case of a floating-point input array, its machine-specific bit\n'
    'representation (usually IEEE754-compliant) is used for the operation. In\n'
    'case of multi-channel arrays, each channel is processed independently.\n'
    '@param src input array.\n'
    '@param dst output array that has the same size and type as the input\n'
    'array.\n'
    '@param mask optional operation mask, 8-bit single channel array, that\n'
    'specifies elements of the output array to be changed.']
parse_name: cv.bitwise_not with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::bitwise_not namespace:cv classpath: classname: name:bitwise_not
register (function) bitwise_not (cv_bitwise_not__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates the per-element absolute difference between two arrays '
    'or between an array and a scalar.\n'
    '\n'
    'The function cv::absdiff calculates:\n'
    '*   Absolute difference between two arrays when they have the same\n'
    'size and type:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} (| \\texttt{src1}(I) -  '
    '\\texttt{src2}(I)|)\\f]\n'
    '*   Absolute difference between an array and a scalar when the second\n'
    'array is constructed from Scalar or has as many elements as the\n'
    'number of channels in `src1`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} (| \\texttt{src1}(I) -  '
    '\\texttt{src2} |)\\f]\n'
    '*   Absolute difference between a scalar and an array when the first\n'
    'array is constructed from Scalar or has as many elements as the\n'
    'number of channels in `src2`:\n'
    '\\f[\\texttt{dst}(I) =  \\texttt{saturate} (| \\texttt{src1} -  '
    '\\texttt{src2}(I) |)\\f]\n'
    'where I is a multi-dimensional index of array elements. In case of\n'
    'multi-channel arrays, each channel is processed independently.\n'
    '@note Saturation is not applied when the arrays have the depth CV_32S.\n'
    'You may even get a negative value in the case of overflow.\n'
    '@param src1 first input array or a scalar.\n'
    '@param src2 second input array or a scalar.\n'
    '@param dst output array that has the same size and type as input arrays.\n'
    '@sa cv::abs(const Mat&)']
parse_name: cv.absdiff with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::absdiff namespace:cv classpath: classname: name:absdiff
register (function) absdiff (cv_absdiff__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.copyTo',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'mask', '', []]],
    None,
    '@brief  This is an overloaded member function, provided for convenience '
    '(python)\n'
    'Copies the matrix to another one.\n'
    'When the operation mask is specified, if the Mat::create call shown above '
    'reallocates the matrix, the newly allocated matrix is initialized with '
    'all zeros before copying the data.\n'
    '@param src source matrix.\n'
    '@param dst Destination matrix. If it does not have a proper size or type '
    'before the operation, it is\n'
    'reallocated.\n'
    '@param mask Operation mask of the same size as \\*this. Its non-zero '
    'elements indicate which matrix\n'
    'elements need to be copied. The mask has to be of type CV_8U and can have '
    '1 or multiple channels.']
parse_name: cv.copyTo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::copyTo namespace:cv classpath: classname: name:copyTo
register (function) copyTo (cv_copyTo__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.inRange',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'lowerb', '', []],
        ['InputArray', 'upperb', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief  Checks if array elements lie between the elements of two other '
    'arrays.\n'
    '\n'
    'The function checks the range as follows:\n'
    '-   For every element of a single-channel input array:\n'
    '\\f[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0  \\leq \\texttt{src} (I)_0 '
    '\\leq  \\texttt{upperb} (I)_0\\f]\n'
    '-   For two-channel arrays:\n'
    '\\f[\\texttt{dst} (I)= \\texttt{lowerb} (I)_0  \\leq \\texttt{src} (I)_0 '
    '\\leq  \\texttt{upperb} (I)_0  \\land \\texttt{lowerb} (I)_1  \\leq '
    '\\texttt{src} (I)_1 \\leq  \\texttt{upperb} (I)_1\\f]\n'
    '-   and so forth.\n'
    '\n'
    'That is, dst (I) is set to 255 (all 1 -bits) if src (I) is within the\n'
    'specified 1D, 2D, 3D, ... box and 0 otherwise.\n'
    '\n'
    'When the lower and/or upper boundary parameters are scalars, the indexes\n'
    '(I) at lowerb and upperb in the above formulas should be omitted.\n'
    '@param src first input array.\n'
    '@param lowerb inclusive lower boundary array or a scalar.\n'
    '@param upperb inclusive upper boundary array or a scalar.\n'
    '@param dst output array of the same size as src and CV_8U type.']
parse_name: cv.inRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::inRange namespace:cv classpath: classname: name:inRange
register (function) inRange (cv_inRange__InputArray__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'cmpop', '', []]],
    None,
    '@brief Performs the per-element comparison of two arrays or an array and '
    'scalar value.\n'
    '\n'
    'The function compares:\n'
    '*   Elements of two arrays when src1 and src2 have the same size:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1} (I)  \\,\\texttt{cmpop}\\, '
    '\\texttt{src2} (I)\\f]\n'
    '*   Elements of src1 with a scalar src2 when src2 is constructed from\n'
    'Scalar or has a single element:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1}(I) \\,\\texttt{cmpop}\\,  '
    '\\texttt{src2}\\f]\n'
    '*   src1 with elements of src2 when src1 is constructed from Scalar or\n'
    'has a single element:\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{src1}  \\,\\texttt{cmpop}\\, '
    '\\texttt{src2} (I)\\f]\n'
    'When the comparison result is true, the corresponding element of output\n'
    'array is set to 255. The comparison operations can be replaced with the\n'
    'equivalent matrix expressions:\n'
    '@code{.cpp}\n'
    'Mat dst1 = src1 >= src2;\n'
    'Mat dst2 = src1 < 8;\n'
    '...\n'
    '@endcode\n'
    '@param src1 first input array or a scalar; when it is an array, it must '
    'have a single channel.\n'
    '@param src2 second input array or a scalar; when it is an array, it must '
    'have a single channel.\n'
    '@param dst output array of type ref CV_8U that has the same size and the '
    'same number of channels as\n'
    'the input arrays.\n'
    '@param cmpop a flag, that specifies correspondence between the arrays '
    '(cv::CmpTypes)\n'
    '@sa checkRange, min, max, threshold']
parse_name: cv.compare with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::compare namespace:cv classpath: classname: name:compare
register (function) compare (cv_compare__InputArray__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates per-element minimum of two arrays or an array and a '
    'scalar.\n'
    '\n'
    'The function cv::min calculates the per-element minimum of two arrays:\n'
    '\\f[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{src2} '
    '(I))\\f]\n'
    'or array and a scalar:\n'
    '\\f[\\texttt{dst} (I)= \\min ( \\texttt{src1} (I), \\texttt{value} )\\f]\n'
    '@param src1 first input array.\n'
    '@param src2 second input array of the same size and type as src1.\n'
    '@param dst output array of the same size and type as src1.\n'
    '@sa max, compare, inRange, minMaxLoc']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['const Mat&', 'src1', '', []],
        ['const Mat&', 'src2', '', []],
        ['Mat&', 'dst', '', []]],
    None,
    '@overload\n'
    'needed to avoid conflicts with const _Tp& std::min(const _Tp&, const '
    '_Tp&, _Compare)']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_Mat_Mat_Mat)

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['const UMat&', 'src1', '', []],
        ['const UMat&', 'src2', '', []],
        ['UMat&', 'dst', '', []]],
    None,
    '@overload\n'
    'needed to avoid conflicts with const _Tp& std::min(const _Tp&, const '
    '_Tp&, _Compare)']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_UMat_UMat_UMat)

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates per-element maximum of two arrays or an array and a '
    'scalar.\n'
    '\n'
    'The function cv::max calculates the per-element maximum of two arrays:\n'
    '\\f[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{src2} '
    '(I))\\f]\n'
    'or array and a scalar:\n'
    '\\f[\\texttt{dst} (I)= \\max ( \\texttt{src1} (I), \\texttt{value} )\\f]\n'
    '@param src1 first input array.\n'
    '@param src2 second input array of the same size and type as src1 .\n'
    '@param dst output array of the same size and type as src1.\n'
    '@sa  min, compare, inRange, minMaxLoc, @ref MatrixExpressions']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['const Mat&', 'src1', '', []],
        ['const Mat&', 'src2', '', []],
        ['Mat&', 'dst', '', []]],
    None,
    '@overload\n'
    'needed to avoid conflicts with const _Tp& std::min(const _Tp&, const '
    '_Tp&, _Compare)']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_Mat_Mat_Mat)

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['const UMat&', 'src1', '', []],
        ['const UMat&', 'src2', '', []],
        ['UMat&', 'dst', '', []]],
    None,
    '@overload\n'
    'needed to avoid conflicts with const _Tp& std::min(const _Tp&, const '
    '_Tp&, _Compare)']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_UMat_UMat_UMat)

--- Incoming ---
[   'cv.sqrt',
    'void',
    [],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates a square root of array elements.\n'
    '\n'
    'The function cv::sqrt calculates a square root of each input array '
    'element.\n'
    'In case of multi-channel arrays, each channel is processed\n'
    'independently. The accuracy is approximately the same as of the built-in\n'
    'std::sqrt .\n'
    '@param src input floating-point array.\n'
    '@param dst output array of the same size and type as src.']
parse_name: cv.sqrt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::sqrt namespace:cv classpath: classname: name:sqrt
register (function) sqrt (cv_sqrt__InputArray__OutputArray)

--- Incoming ---
[   'cv.pow',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['double', 'power', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Raises every array element to a power.\n'
    '\n'
    'The function cv::pow raises every element of the input array to power :\n'
    '\\f[\\texttt{dst} (I) =  \\fork{\\texttt{src}(I)^{power}}{if '
    '\\(\\texttt{power}\\) is '
    'integer}{|\\texttt{src}(I)|^{power}}{otherwise}\\f]\n'
    '\n'
    'So, for a non-integer power exponent, the absolute values of input array\n'
    'elements are used. However, it is possible to get true values for\n'
    'negative values using some extra operations. In the example below,\n'
    'computing the 5th root of array src shows:\n'
    '@code{.cpp}\n'
    'Mat mask = src < 0;\n'
    'pow(src, 1./5, dst);\n'
    'subtract(Scalar::all(0), dst, dst, mask);\n'
    '@endcode\n'
    'For some values of power, such as integer values, 0.5 and -0.5,\n'
    'specialized faster algorithms are used.\n'
    '\n'
    'Special values (NaN, Inf) are not handled.\n'
    '@param src input array.\n'
    '@param power exponent of power.\n'
    '@param dst output array of the same size and type as src.\n'
    '@sa sqrt, exp, log, cartToPolar, polarToCart']
parse_name: cv.pow with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::pow namespace:cv classpath: classname: name:pow
register (function) pow (cv_pow__InputArray_double__OutputArray)

--- Incoming ---
[   'cv.exp',
    'void',
    [],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates the exponent of every array element.\n'
    '\n'
    'The function cv::exp calculates the exponent of every element of the '
    'input\n'
    'array:\n'
    '\\f[\\texttt{dst} [I] = e^{ src(I) }\\f]\n'
    '\n'
    'The maximum relative error is about 7e-6 for single-precision input and\n'
    'less than 1e-10 for double-precision input. Currently, the function\n'
    'converts denormalized values to zeros on output. Special values (NaN,\n'
    'Inf) are not handled.\n'
    '@param src input array.\n'
    '@param dst output array of the same size and type as src.\n'
    '@sa log , cartToPolar , polarToCart , phase , pow , sqrt , magnitude']
parse_name: cv.exp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::exp namespace:cv classpath: classname: name:exp
register (function) exp (cv_exp__InputArray__OutputArray)

--- Incoming ---
[   'cv.log',
    'void',
    [],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief Calculates the natural logarithm of every array element.\n'
    '\n'
    'The function cv::log calculates the natural logarithm of every element of '
    'the input array:\n'
    '\\f[\\texttt{dst} (I) =  \\log (\\texttt{src}(I)) \\f]\n'
    '\n'
    'Output on zero, negative and special (NaN, Inf) values is undefined.\n'
    '\n'
    '@param src input array.\n'
    '@param dst output array of the same size and type as src .\n'
    '@sa exp, cartToPolar, polarToCart, phase, pow, sqrt, magnitude']
parse_name: cv.log with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::log namespace:cv classpath: classname: name:log
register (function) log (cv_log__InputArray__OutputArray)

--- Incoming ---
[   'cv.polarToCart',
    'void',
    [],
    [   ['InputArray', 'magnitude', '', []],
        ['InputArray', 'angle', '', []],
        ['OutputArray', 'x', '', []],
        ['OutputArray', 'y', '', []],
        ['bool', 'angleInDegrees', 'false', []]],
    None,
    '@brief Calculates x and y coordinates of 2D vectors from their magnitude '
    'and angle.\n'
    '\n'
    'The function cv::polarToCart calculates the Cartesian coordinates of each '
    '2D\n'
    'vector represented by the corresponding elements of magnitude and angle:\n'
    '\\f[\\begin{array}{l} \\texttt{x} (I) =  \\texttt{magnitude} (I) \\cos ( '
    '\\texttt{angle} (I)) \\\\ \\texttt{y} (I) =  \\texttt{magnitude} (I) '
    '\\sin ( \\texttt{angle} (I)) \\\\ \\end{array}\\f]\n'
    '\n'
    'The relative accuracy of the estimated coordinates is about 1e-6.\n'
    '@param magnitude input floating-point array of magnitudes of 2D vectors;\n'
    'it can be an empty matrix (=Mat()), in this case, the function assumes\n'
    'that all the magnitudes are =1; if it is not empty, it must have the\n'
    'same size and type as angle.\n'
    '@param angle input floating-point array of angles of 2D vectors.\n'
    '@param x output array of x-coordinates of 2D vectors; it has the same\n'
    'size and type as angle.\n'
    '@param y output array of y-coordinates of 2D vectors; it has the same\n'
    'size and type as angle.\n'
    '@param angleInDegrees when true, the input angles are measured in\n'
    'degrees, otherwise, they are measured in radians.\n'
    '@sa cartToPolar, magnitude, phase, exp, log, pow, sqrt']
parse_name: cv.polarToCart with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::polarToCart namespace:cv classpath: classname: name:polarToCart
register (function) polarToCart (cv_polarToCart__InputArray__InputArray__OutputArray__OutputArray_bool)

--- Incoming ---
[   'cv.cartToPolar',
    'void',
    [],
    [   ['InputArray', 'x', '', []],
        ['InputArray', 'y', '', []],
        ['OutputArray', 'magnitude', '', []],
        ['OutputArray', 'angle', '', []],
        ['bool', 'angleInDegrees', 'false', []]],
    None,
    '@brief Calculates the magnitude and angle of 2D vectors.\n'
    '\n'
    'The function cv::cartToPolar calculates either the magnitude, angle, or '
    'both\n'
    'for every 2D vector (x(I),y(I)):\n'
    '\\f[\\begin{array}{l} \\texttt{magnitude} (I)= '
    '\\sqrt{\\texttt{x}(I)^2+\\texttt{y}(I)^2} , \\\\ \\texttt{angle} (I)= '
    '\\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} (I))[ \\cdot180 / \\pi ] '
    '\\end{array}\\f]\n'
    '\n'
    'The angles are calculated with accuracy about 0.3 degrees. For the point\n'
    '(0,0), the angle is set to 0.\n'
    '@param x array of x-coordinates; this must be a single-precision or\n'
    'double-precision floating-point array.\n'
    '@param y array of y-coordinates, that must have the same size and same '
    'type as x.\n'
    '@param magnitude output array of magnitudes of the same size and type as '
    'x.\n'
    '@param angle output array of angles that has the same size and type as\n'
    'x; the angles are measured in radians (from 0 to 2\\*Pi) or in degrees (0 '
    'to 360 degrees).\n'
    '@param angleInDegrees a flag, indicating whether the angles are measured\n'
    'in radians (which is by default), or in degrees.\n'
    '@sa Sobel, Scharr']
parse_name: cv.cartToPolar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::cartToPolar namespace:cv classpath: classname: name:cartToPolar
register (function) cartToPolar (cv_cartToPolar__InputArray__InputArray__OutputArray__OutputArray_bool)

--- Incoming ---
[   'cv.phase',
    'void',
    [],
    [   ['InputArray', 'x', '', []],
        ['InputArray', 'y', '', []],
        ['OutputArray', 'angle', '', []],
        ['bool', 'angleInDegrees', 'false', []]],
    None,
    '@brief Calculates the rotation angle of 2D vectors.\n'
    '\n'
    'The function cv::phase calculates the rotation angle of each 2D vector '
    'that\n'
    'is formed from the corresponding elements of x and y :\n'
    '\\f[\\texttt{angle} (I) =  \\texttt{atan2} ( \\texttt{y} (I), \\texttt{x} '
    '(I))\\f]\n'
    '\n'
    'The angle estimation accuracy is about 0.3 degrees. When x(I)=y(I)=0 ,\n'
    'the corresponding angle(I) is set to 0.\n'
    '@param x input floating-point array of x-coordinates of 2D vectors.\n'
    '@param y input array of y-coordinates of 2D vectors; it must have the\n'
    'same size and the same type as x.\n'
    '@param angle output array of vector angles; it has the same size and\n'
    'same type as x .\n'
    '@param angleInDegrees when true, the function calculates the angle in\n'
    'degrees, otherwise, they are measured in radians.']
parse_name: cv.phase with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::phase namespace:cv classpath: classname: name:phase
register (function) phase (cv_phase__InputArray__InputArray__OutputArray_bool)

--- Incoming ---
[   'cv.magnitude',
    'void',
    [],
    [   ['InputArray', 'x', '', []],
        ['InputArray', 'y', '', []],
        ['OutputArray', 'magnitude', '', []]],
    None,
    '@brief Calculates the magnitude of 2D vectors.\n'
    '\n'
    'The function cv::magnitude calculates the magnitude of 2D vectors formed\n'
    'from the corresponding elements of x and y arrays:\n'
    '\\f[\\texttt{dst} (I) =  \\sqrt{\\texttt{x}(I)^2 + \\texttt{y}(I)^2}\\f]\n'
    '@param x floating-point array of x-coordinates of the vectors.\n'
    '@param y floating-point array of y-coordinates of the vectors; it must\n'
    'have the same size as x.\n'
    '@param magnitude output array of the same size and type as x.\n'
    '@sa cartToPolar, polarToCart, phase, sqrt']
parse_name: cv.magnitude with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::magnitude namespace:cv classpath: classname: name:magnitude
register (function) magnitude (cv_magnitude__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.checkRange',
    'bool',
    [],
    [   ['InputArray', 'a', '', []],
        ['bool', 'quiet', 'true', []],
        ['Point*', 'pos', '0', []],
        ['double', 'minVal', '-DBL_MAX', []],
        ['double', 'maxVal', 'DBL_MAX', []]],
    None,
    '@brief Checks every element of an input array for invalid values.\n'
    '\n'
    'The function cv::checkRange checks that every array element is neither '
    'NaN nor infinite. When minVal \\>\n'
    '-DBL_MAX and maxVal \\< DBL_MAX, the function also checks that each value '
    'is between minVal and\n'
    'maxVal. In case of multi-channel arrays, each channel is processed '
    'independently. If some values\n'
    'are out of range, position of the first outlier is stored in pos (when '
    'pos != NULL). Then, the\n'
    'function either returns false (when quiet=true) or throws an exception.\n'
    '@param a input array.\n'
    '@param quiet a flag, indicating whether the functions quietly return '
    'false when the array elements\n'
    'are out of range or they throw an exception.\n'
    '@param pos optional output parameter, when not NULL, must be a pointer to '
    'array of src.dims\n'
    'elements.\n'
    '@param minVal inclusive lower boundary of valid values range.\n'
    '@param maxVal exclusive upper boundary of valid values range.']
parse_name: cv.checkRange with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::checkRange namespace:cv classpath: classname: name:checkRange
register (function) checkRange (cv_checkRange__InputArray_bool_Point_X_double_double)

--- Incoming ---
[   'cv.patchNaNs',
    'void',
    [],
    [['InputOutputArray', 'a', '', []], ['double', 'val', '0', []]],
    None,
    "@brief converts NaN's to the given number"]
parse_name: cv.patchNaNs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::patchNaNs namespace:cv classpath: classname: name:patchNaNs
register (function) patchNaNs (cv_patchNaNs__InputOutputArray_double)

--- Incoming ---
[   'cv.gemm',
    'void',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['double', 'alpha', '', []],
        ['InputArray', 'src3', '', []],
        ['double', 'beta', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '0', []]],
    None,
    '@brief Performs generalized matrix multiplication.\n'
    '\n'
    'The function cv::gemm performs generalized matrix multiplication similar '
    'to the\n'
    'gemm functions in BLAS level 3. For example,\n'
    '`gemm(src1, src2, alpha, src3, beta, dst, GEMM_1_T + GEMM_3_T)`\n'
    'corresponds to\n'
    '\\f[\\texttt{dst} =  \\texttt{alpha} \\cdot \\texttt{src1} ^T  \\cdot '
    '\\texttt{src2} +  \\texttt{beta} \\cdot \\texttt{src3} ^T\\f]\n'
    '\n'
    'In case of complex (two-channel) data, performed a complex matrix\n'
    'multiplication.\n'
    '\n'
    'The function can be replaced with a matrix expression. For example, the\n'
    'above call can be replaced with:\n'
    '@code{.cpp}\n'
    'dst = alpha*src1.t()*src2 + beta*src3.t();\n'
    '@endcode\n'
    '@param src1 first multiplied input matrix that could be real(CV_32FC1,\n'
    'CV_64FC1) or complex(CV_32FC2, CV_64FC2).\n'
    '@param src2 second multiplied input matrix of the same type as src1.\n'
    '@param alpha weight of the matrix product.\n'
    '@param src3 third optional delta matrix added to the matrix product; it\n'
    'should have the same type as src1 and src2.\n'
    '@param beta weight of src3.\n'
    '@param dst output matrix; it has the proper size and the same type as\n'
    'input matrices.\n'
    '@param flags operation flags (cv::GemmFlags)\n'
    '@sa mulTransposed , transform']
parse_name: cv.gemm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::gemm namespace:cv classpath: classname: name:gemm
register (function) gemm (cv_gemm__InputArray__InputArray_double__InputArray_double__OutputArray_int)

--- Incoming ---
[   'cv.mulTransposed',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['bool', 'aTa', '', []],
        ['InputArray', 'delta', 'noArray()', []],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    None,
    '@brief Calculates the product of a matrix and its transposition.\n'
    '\n'
    'The function cv::mulTransposed calculates the product of src and its\n'
    'transposition:\n'
    '\\f[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} )^T '
    '( \\texttt{src} - \\texttt{delta} )\\f]\n'
    'if aTa=true , and\n'
    '\\f[\\texttt{dst} = \\texttt{scale} ( \\texttt{src} - \\texttt{delta} ) ( '
    '\\texttt{src} - \\texttt{delta} )^T\\f]\n'
    'otherwise. The function is used to calculate the covariance matrix. With\n'
    'zero delta, it can be used as a faster substitute for general matrix\n'
    "product A\\*B when B=A'\n"
    '@param src input single-channel matrix. Note that unlike gemm, the\n'
    'function can multiply not only floating-point matrices.\n'
    '@param dst output square matrix.\n'
    '@param aTa Flag specifying the multiplication ordering. See the\n'
    'description below.\n'
    '@param delta Optional delta matrix subtracted from src before the\n'
    'multiplication. When the matrix is empty ( delta=noArray() ), it is\n'
    'assumed to be zero, that is, nothing is subtracted. If it has the same\n'
    'size as src , it is simply subtracted. Otherwise, it is "repeated" (see\n'
    'repeat ) to cover the full src and then subtracted. Type of the delta\n'
    'matrix, when it is not empty, must be the same as the type of created\n'
    'output matrix. See the dtype parameter description below.\n'
    '@param scale Optional scale factor for the matrix product.\n'
    '@param dtype Optional type of the output matrix. When it is negative,\n'
    'the output matrix will have the same type as src . Otherwise, it will be\n'
    'type=CV_MAT_DEPTH(dtype) that should be either CV_32F or CV_64F .\n'
    '@sa calcCovarMatrix, gemm, repeat, reduce']
parse_name: cv.mulTransposed with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::mulTransposed namespace:cv classpath: classname: name:mulTransposed
register (function) mulTransposed (cv_mulTransposed__InputArray__OutputArray_bool__InputArray_double_int)

--- Incoming ---
[   'cv.transpose',
    'void',
    [],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief Transposes a matrix.\n'
    '\n'
    'The function cv::transpose transposes the matrix src :\n'
    '\\f[\\texttt{dst} (i,j) =  \\texttt{src} (j,i)\\f]\n'
    '@note No complex conjugation is done in case of a complex matrix. It\n'
    'should be done separately if needed.\n'
    '@param src input array.\n'
    '@param dst output array of the same type as src.']
parse_name: cv.transpose with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::transpose namespace:cv classpath: classname: name:transpose
register (function) transpose (cv_transpose__InputArray__OutputArray)

--- Incoming ---
[   'cv.transform',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'm', '', []]],
    None,
    '@brief Performs the matrix transformation of every array element.\n'
    '\n'
    'The function cv::transform performs the matrix transformation of every\n'
    'element of the array src and stores the results in dst :\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{m} \\cdot \\texttt{src} (I)\\f]\n'
    '(when m.cols=src.channels() ), or\n'
    '\\f[\\texttt{dst} (I) =  \\texttt{m} \\cdot [ \\texttt{src} (I); 1]\\f]\n'
    '(when m.cols=src.channels()+1 )\n'
    '\n'
    'Every element of the N -channel array src is interpreted as N -element\n'
    'vector that is transformed using the M x N or M x (N+1) matrix m to\n'
    'M-element vector - the corresponding element of the output array dst .\n'
    '\n'
    'The function may be used for geometrical transformation of\n'
    'N -dimensional points, arbitrary linear color space transformation (such\n'
    'as various kinds of RGB to YUV transforms), shuffling the image\n'
    'channels, and so forth.\n'
    '@param src input array that must have as many channels (1 to 4) as\n'
    'm.cols or m.cols-1.\n'
    '@param dst output array of the same size and depth as src; it has as\n'
    'many channels as m.rows.\n'
    '@param m transformation 2x2 or 2x3 floating-point matrix.\n'
    '@sa perspectiveTransform, getAffineTransform, estimateAffine2D, '
    'warpAffine, warpPerspective']
parse_name: cv.transform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::transform namespace:cv classpath: classname: name:transform
register (function) transform (cv_transform__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.perspectiveTransform',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'm', '', []]],
    None,
    '@brief Performs the perspective matrix transformation of vectors.\n'
    '\n'
    'The function cv::perspectiveTransform transforms every element of src by\n'
    'treating it as a 2D or 3D vector, in the following way:\n'
    "\\f[(x, y, z)  \\rightarrow (x'/w, y'/w, z'/w)\\f]\n"
    'where\n'
    "\\f[(x', y', z', w') =  \\texttt{mat} \\cdot \\begin{bmatrix} x & y & z & "
    '1  \\end{bmatrix}\\f]\n'
    'and\n'
    "\\f[w =  \\fork{w'}{if \\(w' \\ne 0\\)}{\\infty}{otherwise}\\f]\n"
    '\n'
    'Here a 3D vector transformation is shown. In case of a 2D vector\n'
    'transformation, the z component is omitted.\n'
    '\n'
    '@note The function transforms a sparse set of 2D or 3D vectors. If you\n'
    'want to transform an image using perspective transformation, use\n'
    'warpPerspective . If you have an inverse problem, that is, you want to\n'
    'compute the most probable perspective transformation out of several\n'
    'pairs of corresponding points, you can use getPerspectiveTransform or\n'
    'findHomography .\n'
    '@param src input two-channel or three-channel floating-point array; each\n'
    'element is a 2D/3D vector to be transformed.\n'
    '@param dst output array of the same size and type as src.\n'
    '@param m 3x3 or 4x4 floating-point transformation matrix.\n'
    '@sa  transform, warpPerspective, getPerspectiveTransform, findHomography']
parse_name: cv.perspectiveTransform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::perspectiveTransform namespace:cv classpath: classname: name:perspectiveTransform
register (function) perspectiveTransform (cv_perspectiveTransform__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.completeSymm',
    'void',
    [],
    [['InputOutputArray', 'm', '', []], ['bool', 'lowerToUpper', 'false', []]],
    None,
    '@brief Copies the lower or the upper half of a square matrix to its '
    'another half.\n'
    '\n'
    'The function cv::completeSymm copies the lower or the upper half of a '
    'square matrix to\n'
    'its another half. The matrix diagonal remains unchanged:\n'
    '- \\f$\\texttt{m}_{ij}=\\texttt{m}_{ji}\\f$ for \\f$i > j\\f$ if\n'
    'lowerToUpper=false\n'
    '- \\f$\\texttt{m}_{ij}=\\texttt{m}_{ji}\\f$ for \\f$i < j\\f$ if\n'
    'lowerToUpper=true\n'
    '\n'
    '@param m input-output floating-point square matrix.\n'
    '@param lowerToUpper operation flag; if true, the lower half is copied to\n'
    'the upper half. Otherwise, the upper half is copied to the lower half.\n'
    '@sa flip, transpose']
parse_name: cv.completeSymm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::completeSymm namespace:cv classpath: classname: name:completeSymm
register (function) completeSymm (cv_completeSymm__InputOutputArray_bool)

--- Incoming ---
[   'cv.setIdentity',
    'void',
    [],
    [   ['InputOutputArray', 'mtx', '', []],
        ['const Scalar&', 's', 'Scalar(1)', []]],
    None,
    '@brief Initializes a scaled identity matrix.\n'
    '\n'
    'The function cv::setIdentity initializes a scaled identity matrix:\n'
    '\\f[\\texttt{mtx} (i,j)= \\fork{\\texttt{value}}{ if '
    '\\(i=j\\)}{0}{otherwise}\\f]\n'
    '\n'
    'The function can also be emulated using the matrix initializers and the\n'
    'matrix expressions:\n'
    '@code\n'
    'Mat A = Mat::eye(4, 3, CV_32F)*5;\n'
    '// A will be set to [[5, 0, 0], [0, 5, 0], [0, 0, 5], [0, 0, 0]]\n'
    '@endcode\n'
    '@param mtx matrix to initialize (not necessarily square).\n'
    '@param s value to assign to diagonal elements.\n'
    '@sa Mat::zeros, Mat::ones, Mat::setTo, Mat::operator=']
parse_name: cv.setIdentity with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::setIdentity namespace:cv classpath: classname: name:setIdentity
register (function) setIdentity (cv_setIdentity__InputOutputArray_Scalar)

--- Incoming ---
[   'cv.determinant',
    'double',
    [],
    [['InputArray', 'mtx', '', []]],
    None,
    '@brief Returns the determinant of a square floating-point matrix.\n'
    '\n'
    'The function cv::determinant calculates and returns the determinant of '
    'the\n'
    'specified matrix. For small matrices ( mtx.cols=mtx.rows\\<=3 ), the\n'
    'direct method is used. For larger matrices, the function uses LU\n'
    'factorization with partial pivoting.\n'
    '\n'
    'For symmetric positively-determined matrices, it is also possible to use\n'
    'eigen decomposition to calculate the determinant.\n'
    '@param mtx input matrix that must have CV_32FC1 or CV_64FC1 type and\n'
    'square size.\n'
    '@sa trace, invert, solve, eigen, @ref MatrixExpressions']
parse_name: cv.determinant with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::determinant namespace:cv classpath: classname: name:determinant
register (function) determinant (cv_determinant__InputArray)

--- Incoming ---
[   'cv.trace',
    'Scalar',
    [],
    [['InputArray', 'mtx', '', []]],
    None,
    '@brief Returns the trace of a matrix.\n'
    '\n'
    'The function cv::trace returns the sum of the diagonal elements of the\n'
    'matrix mtx .\n'
    '\\f[\\mathrm{tr} ( \\texttt{mtx} ) =  \\sum _i  \\texttt{mtx} (i,i)\\f]\n'
    '@param mtx input matrix.']
parse_name: cv.trace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::trace namespace:cv classpath: classname: name:trace
register (function) trace (cv_trace__InputArray)

--- Incoming ---
[   'cv.invert',
    'double',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', 'DECOMP_LU', []]],
    None,
    '@brief Finds the inverse or pseudo-inverse of a matrix.\n'
    '\n'
    'The function cv::invert inverts the matrix src and stores the result in '
    'dst\n'
    '. When the matrix src is singular or non-square, the function calculates\n'
    'the pseudo-inverse matrix (the dst matrix) so that norm(src\\*dst - I) '
    'is\n'
    'minimal, where I is an identity matrix.\n'
    '\n'
    'In case of the #DECOMP_LU method, the function returns non-zero value if\n'
    'the inverse has been successfully calculated and 0 if src is singular.\n'
    '\n'
    'In case of the #DECOMP_SVD method, the function returns the inverse\n'
    'condition number of src (the ratio of the smallest singular value to the\n'
    'largest singular value) and 0 if src is singular. The SVD method\n'
    'calculates a pseudo-inverse matrix if src is singular.\n'
    '\n'
    'Similarly to #DECOMP_LU, the method #DECOMP_CHOLESKY works only with\n'
    'non-singular square matrices that should also be symmetrical and\n'
    'positively defined. In this case, the function stores the inverted\n'
    'matrix in dst and returns non-zero. Otherwise, it returns 0.\n'
    '\n'
    '@param src input floating-point M x N matrix.\n'
    '@param dst output matrix of N x M size and the same type as src.\n'
    '@param flags inversion method (cv::DecompTypes)\n'
    '@sa solve, SVD']
parse_name: cv.invert with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::invert namespace:cv classpath: classname: name:invert
register (function) invert (cv_invert__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.solve',
    'bool',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', 'DECOMP_LU', []]],
    None,
    '@brief Solves one or more linear systems or least-squares problems.\n'
    '\n'
    'The function cv::solve solves a linear system or least-squares problem '
    '(the\n'
    'latter is possible with SVD or QR methods, or by specifying the flag\n'
    '#DECOMP_NORMAL ):\n'
    '\\f[\\texttt{dst} =  \\arg \\min _X \\| \\texttt{src1} \\cdot \\texttt{X} '
    '-  \\texttt{src2} \\|\\f]\n'
    '\n'
    'If #DECOMP_LU or #DECOMP_CHOLESKY method is used, the function returns 1\n'
    'if src1 (or \\f$\\texttt{src1}^T\\texttt{src1}\\f$ ) is non-singular. '
    'Otherwise,\n'
    'it returns 0. In the latter case, dst is not valid. Other methods find a\n'
    'pseudo-solution in case of a singular left-hand side part.\n'
    '\n'
    '@note If you want to find a unity-norm solution of an under-defined\n'
    'singular system \\f$\\texttt{src1}\\cdot\\texttt{dst}=0\\f$ , the '
    'function solve\n'
    'will not do the work. Use SVD::solveZ instead.\n'
    '\n'
    '@param src1 input matrix on the left-hand side of the system.\n'
    '@param src2 input matrix on the right-hand side of the system.\n'
    '@param dst output solution.\n'
    '@param flags solution (matrix inversion) method (#DecompTypes)\n'
    '@sa invert, SVD, eigen']
parse_name: cv.solve with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::solve namespace:cv classpath: classname: name:solve
register (function) solve (cv_solve__InputArray__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.sort',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '', []]],
    None,
    '@brief Sorts each row or each column of a matrix.\n'
    '\n'
    'The function cv::sort sorts each matrix row or each matrix column in\n'
    'ascending or descending order. So you should pass two operation flags to\n'
    'get desired behaviour. If you want to sort matrix rows or columns\n'
    'lexicographically, you can use STL std::sort generic function with the\n'
    'proper comparison predicate.\n'
    '\n'
    '@param src input single-channel array.\n'
    '@param dst output array of the same size and type as src.\n'
    '@param flags operation flags, a combination of #SortFlags\n'
    '@sa sortIdx, randShuffle']
parse_name: cv.sort with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::sort namespace:cv classpath: classname: name:sort
register (function) sort (cv_sort__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.sortIdx',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '', []]],
    None,
    '@brief Sorts each row or each column of a matrix.\n'
    '\n'
    'The function cv::sortIdx sorts each matrix row or each matrix column in '
    'the\n'
    'ascending or descending order. So you should pass two operation flags to\n'
    'get desired behaviour. Instead of reordering the elements themselves, it\n'
    'stores the indices of sorted elements in the output array. For example:\n'
    '@code\n'
    'Mat A = Mat::eye(3,3,CV_32F), B;\n'
    'sortIdx(A, B, SORT_EVERY_ROW + SORT_ASCENDING);\n'
    '// B will probably contain\n'
    '// (because of equal elements in A some permutations are possible):\n'
    '// [[1, 2, 0], [0, 2, 1], [0, 1, 2]]\n'
    '@endcode\n'
    '@param src input single-channel array.\n'
    '@param dst output integer array of the same size as src.\n'
    '@param flags operation flags that could be a combination of '
    'cv::SortFlags\n'
    '@sa sort, randShuffle']
parse_name: cv.sortIdx with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::sortIdx namespace:cv classpath: classname: name:sortIdx
register (function) sortIdx (cv_sortIdx__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.solveCubic',
    'int',
    [],
    [['InputArray', 'coeffs', '', []], ['OutputArray', 'roots', '', []]],
    None,
    '@brief Finds the real roots of a cubic equation.\n'
    '\n'
    'The function solveCubic finds the real roots of a cubic equation:\n'
    '-   if coeffs is a 4-element vector:\n'
    '\\f[\\texttt{coeffs} [0] x^3 +  \\texttt{coeffs} [1] x^2 +  '
    '\\texttt{coeffs} [2] x +  \\texttt{coeffs} [3] = 0\\f]\n'
    '-   if coeffs is a 3-element vector:\n'
    '\\f[x^3 +  \\texttt{coeffs} [0] x^2 +  \\texttt{coeffs} [1] x +  '
    '\\texttt{coeffs} [2] = 0\\f]\n'
    '\n'
    'The roots are stored in the roots array.\n'
    '@param coeffs equation coefficients, an array of 3 or 4 elements.\n'
    '@param roots output array of real roots that has 1 or 3 elements.\n'
    '@return number of real roots. It can be 0, 1 or 2.']
parse_name: cv.solveCubic with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::solveCubic namespace:cv classpath: classname: name:solveCubic
register (function) solveCubic (cv_solveCubic__InputArray__OutputArray)

--- Incoming ---
[   'cv.solvePoly',
    'double',
    [],
    [   ['InputArray', 'coeffs', '', []],
        ['OutputArray', 'roots', '', []],
        ['int', 'maxIters', '300', []]],
    None,
    '@brief Finds the real or complex roots of a polynomial equation.\n'
    '\n'
    'The function cv::solvePoly finds real and complex roots of a polynomial '
    'equation:\n'
    '\\f[\\texttt{coeffs} [n] x^{n} +  \\texttt{coeffs} [n-1] x^{n-1} + ... +  '
    '\\texttt{coeffs} [1] x +  \\texttt{coeffs} [0] = 0\\f]\n'
    '@param coeffs array of polynomial coefficients.\n'
    '@param roots output (complex) array of roots.\n'
    '@param maxIters maximum number of iterations the algorithm does.']
parse_name: cv.solvePoly with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::solvePoly namespace:cv classpath: classname: name:solvePoly
register (function) solvePoly (cv_solvePoly__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.eigen',
    'bool',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'eigenvalues', '', []],
        ['OutputArray', 'eigenvectors', 'noArray()', []]],
    None,
    '@brief Calculates eigenvalues and eigenvectors of a symmetric matrix.\n'
    '\n'
    'The function cv::eigen calculates just eigenvalues, or eigenvalues and '
    'eigenvectors of the symmetric\n'
    'matrix src:\n'
    '@code\n'
    'src*eigenvectors.row(i).t() = '
    'eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()\n'
    '@endcode\n'
    '\n'
    '@note Use cv::eigenNonSymmetric for calculation of real eigenvalues and '
    'eigenvectors of non-symmetric matrix.\n'
    '\n'
    '@param src input matrix that must have CV_32FC1 or CV_64FC1 type, square '
    'size and be symmetrical\n'
    '(src ^T^ == src).\n'
    '@param eigenvalues output vector of eigenvalues of the same type as src; '
    'the eigenvalues are stored\n'
    'in the descending order.\n'
    '@param eigenvectors output matrix of eigenvectors; it has the same size '
    'and type as src; the\n'
    'eigenvectors are stored as subsequent matrix rows, in the same order as '
    'the corresponding\n'
    'eigenvalues.\n'
    '@sa eigenNonSymmetric, completeSymm , PCA']
parse_name: cv.eigen with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::eigen namespace:cv classpath: classname: name:eigen
register (function) eigen (cv_eigen__InputArray__OutputArray__OutputArray)

--- Incoming ---
[   'cv.eigenNonSymmetric',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'eigenvalues', '', []],
        ['OutputArray', 'eigenvectors', '', []]],
    None,
    '@brief Calculates eigenvalues and eigenvectors of a non-symmetric matrix '
    '(real eigenvalues only).\n'
    '\n'
    '@note Assumes real eigenvalues.\n'
    '\n'
    'The function calculates eigenvalues and eigenvectors (optional) of the '
    'square matrix src:\n'
    '@code\n'
    'src*eigenvectors.row(i).t() = '
    'eigenvalues.at<srcType>(i)*eigenvectors.row(i).t()\n'
    '@endcode\n'
    '\n'
    '@param src input matrix (CV_32FC1 or CV_64FC1 type).\n'
    '@param eigenvalues output vector of eigenvalues (type is the same type as '
    'src).\n'
    '@param eigenvectors output matrix of eigenvectors (type is the same type '
    'as src). The eigenvectors are stored as subsequent matrix rows, in the '
    'same order as the corresponding eigenvalues.\n'
    '@sa eigen']
parse_name: cv.eigenNonSymmetric with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::eigenNonSymmetric namespace:cv classpath: classname: name:eigenNonSymmetric
register (function) eigenNonSymmetric (cv_eigenNonSymmetric__InputArray__OutputArray__OutputArray)

--- Incoming ---
[   'cv.calcCovarMatrix',
    'void',
    [],
    [   ['const Mat*', 'samples', '', []],
        ['int', 'nsamples', '', []],
        ['Mat&', 'covar', '', []],
        ['Mat&', 'mean', '', []],
        ['int', 'flags', '', []],
        ['int', 'ctype', 'CV_64F', []]],
    None,
    '@brief Calculates the covariance matrix of a set of vectors.\n'
    '\n'
    'The function cv::calcCovarMatrix calculates the covariance matrix and, '
    'optionally, the mean vector of\n'
    'the set of input vectors.\n'
    '@param samples samples stored as separate matrices\n'
    '@param nsamples number of samples\n'
    '@param covar output covariance matrix of the type ctype and square size.\n'
    '@param mean input or output (depending on the flags) array as the average '
    'value of the input vectors.\n'
    '@param flags operation flags as a combination of #CovarFlags\n'
    "@param ctype type of the matrixl; it equals 'CV_64F' by default.\n"
    '@sa PCA, mulTransposed, Mahalanobis\n'
    '@todo InputArrayOfArrays']
parse_name: cv.calcCovarMatrix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::calcCovarMatrix namespace:cv classpath: classname: name:calcCovarMatrix
register (function) calcCovarMatrix (cv_calcCovarMatrix_const_Mat_int_Mat_Mat_int_int)

--- Incoming ---
[   'cv.calcCovarMatrix',
    'void',
    [],
    [   ['InputArray', 'samples', '', []],
        ['OutputArray', 'covar', '', []],
        ['InputOutputArray', 'mean', '', []],
        ['int', 'flags', '', []],
        ['int', 'ctype', 'CV_64F', []]],
    None,
    '@overload\n'
    '@note use #COVAR_ROWS or #COVAR_COLS flag\n'
    '@param samples samples stored as rows/columns of a single matrix.\n'
    '@param covar output covariance matrix of the type ctype and square size.\n'
    '@param mean input or output (depending on the flags) array as the average '
    'value of the input vectors.\n'
    '@param flags operation flags as a combination of #CovarFlags\n'
    "@param ctype type of the matrixl; it equals 'CV_64F' by default."]
parse_name: cv.calcCovarMatrix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::calcCovarMatrix namespace:cv classpath: classname: name:calcCovarMatrix
register (function) calcCovarMatrix (cv_calcCovarMatrix__InputArray__OutputArray__InputOutputArray_int_int)

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputOutputArray', 'mean', '', []],
        ['OutputArray', 'eigenvectors', '', []],
        ['int', 'maxComponents', '0', []]],
    None,
    'wrap PCA::operator()']
parse_name: cv.PCACompute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCACompute namespace:cv classpath: classname: name:PCACompute
register (function) PCACompute (cv_PCACompute__InputArray__InputOutputArray__OutputArray_int)

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputOutputArray', 'mean', '', []],
        ['OutputArray', 'eigenvectors', '', []],
        ['OutputArray', 'eigenvalues', '', []],
        ['int', 'maxComponents', '0', []]],
    None,
    'wrap PCA::operator() and add eigenvalues output parameter']
parse_name: cv.PCACompute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCACompute namespace:cv classpath: classname: name:PCACompute
register (function) PCACompute (cv_PCACompute__InputArray__InputOutputArray__OutputArray__OutputArray_int)

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputOutputArray', 'mean', '', []],
        ['OutputArray', 'eigenvectors', '', []],
        ['double', 'retainedVariance', '', []]],
    None,
    'wrap PCA::operator()']
parse_name: cv.PCACompute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCACompute namespace:cv classpath: classname: name:PCACompute
register (function) PCACompute (cv_PCACompute__InputArray__InputOutputArray__OutputArray_double)

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputOutputArray', 'mean', '', []],
        ['OutputArray', 'eigenvectors', '', []],
        ['OutputArray', 'eigenvalues', '', []],
        ['double', 'retainedVariance', '', []]],
    None,
    'wrap PCA::operator() and add eigenvalues output parameter']
parse_name: cv.PCACompute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCACompute namespace:cv classpath: classname: name:PCACompute
register (function) PCACompute (cv_PCACompute__InputArray__InputOutputArray__OutputArray__OutputArray_double)

--- Incoming ---
[   'cv.PCAProject',
    'void',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputArray', 'mean', '', []],
        ['InputArray', 'eigenvectors', '', []],
        ['OutputArray', 'result', '', []]],
    None,
    'wrap PCA::project']
parse_name: cv.PCAProject with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCAProject namespace:cv classpath: classname: name:PCAProject
register (function) PCAProject (cv_PCAProject__InputArray__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.PCABackProject',
    'void',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputArray', 'mean', '', []],
        ['InputArray', 'eigenvectors', '', []],
        ['OutputArray', 'result', '', []]],
    None,
    'wrap PCA::backProject']
parse_name: cv.PCABackProject with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCABackProject namespace:cv classpath: classname: name:PCABackProject
register (function) PCABackProject (cv_PCABackProject__InputArray__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.SVDecomp',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'w', '', []],
        ['OutputArray', 'u', '', []],
        ['OutputArray', 'vt', '', []],
        ['int', 'flags', '0', []]],
    None,
    'wrap SVD::compute']
parse_name: cv.SVDecomp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVDecomp namespace:cv classpath: classname: name:SVDecomp
register (function) SVDecomp (cv_SVDecomp__InputArray__OutputArray__OutputArray__OutputArray_int)

--- Incoming ---
[   'cv.SVBackSubst',
    'void',
    [],
    [   ['InputArray', 'w', '', []],
        ['InputArray', 'u', '', []],
        ['InputArray', 'vt', '', []],
        ['InputArray', 'rhs', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    'wrap SVD::backSubst']
parse_name: cv.SVBackSubst with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVBackSubst namespace:cv classpath: classname: name:SVBackSubst
register (function) SVBackSubst (cv_SVBackSubst__InputArray__InputArray__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.Mahalanobis',
    'double',
    [],
    [   ['InputArray', 'v1', '', []],
        ['InputArray', 'v2', '', []],
        ['InputArray', 'icovar', '', []]],
    None,
    '@brief Calculates the Mahalanobis distance between two vectors.\n'
    '\n'
    'The function cv::Mahalanobis calculates and returns the weighted distance '
    'between two vectors:\n'
    '\\f[d( \\texttt{vec1} , \\texttt{vec2} )= '
    '\\sqrt{\\sum_{i,j}{\\texttt{icovar(i,j)}\\cdot(\\texttt{vec1}(I)-\\texttt{vec2}(I))\\cdot(\\texttt{vec1(j)}-\\texttt{vec2(j)})} '
    '}\\f]\n'
    'The covariance matrix may be calculated using the #calcCovarMatrix '
    'function and then inverted using\n'
    'the invert function (preferably using the #DECOMP_SVD method, as the most '
    'accurate).\n'
    '@param v1 first 1D input vector.\n'
    '@param v2 second 1D input vector.\n'
    '@param icovar inverse covariance matrix.']
parse_name: cv.Mahalanobis with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Mahalanobis namespace:cv classpath: classname: name:Mahalanobis
register (function) Mahalanobis (cv_Mahalanobis__InputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.dft',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]],
    None,
    '@brief Performs a forward or inverse Discrete Fourier transform of a 1D '
    'or 2D floating-point array.\n'
    '\n'
    'The function cv::dft performs one of the following:\n'
    '-   Forward the Fourier transform of a 1D vector of N elements:\n'
    '\\f[Y = F^{(N)}  \\cdot X,\\f]\n'
    'where \\f$F^{(N)}_{jk}=\\exp(-2\\pi i j k/N)\\f$ and '
    '\\f$i=\\sqrt{-1}\\f$\n'
    '-   Inverse the Fourier transform of a 1D vector of N elements:\n'
    "\\f[\\begin{array}{l} X'=  \\left (F^{(N)} \\right )^{-1}  \\cdot Y =  "
    '\\left (F^{(N)} \\right )^*  \\cdot y  \\\\ X = (1/N)  \\cdot X, '
    '\\end{array}\\f]\n'
    'where '
    '\\f$F^*=\\left(\\textrm{Re}(F^{(N)})-\\textrm{Im}(F^{(N)})\\right)^T\\f$\n'
    '-   Forward the 2D Fourier transform of a M x N matrix:\n'
    '\\f[Y = F^{(M)}  \\cdot X  \\cdot F^{(N)}\\f]\n'
    '-   Inverse the 2D Fourier transform of a M x N matrix:\n'
    "\\f[\\begin{array}{l} X'=  \\left (F^{(M)} \\right )^*  \\cdot Y  \\cdot "
    "\\left (F^{(N)} \\right )^* \\\\ X =  \\frac{1}{M \\cdot N} \\cdot X' "
    '\\end{array}\\f]\n'
    '\n'
    'In case of real (single-channel) data, the output spectrum of the forward '
    'Fourier transform or input\n'
    'spectrum of the inverse Fourier transform can be represented in a packed '
    'format called *CCS*\n'
    '(complex-conjugate-symmetrical). It was borrowed from IPL (Intel\\* Image '
    'Processing Library). Here\n'
    'is how 2D *CCS* spectrum looks:\n'
    '\\f[\\begin{bmatrix} Re Y_{0,0} & Re Y_{0,1} & Im Y_{0,1} & Re Y_{0,2} & '
    'Im Y_{0,2} &  \\cdots & Re Y_{0,N/2-1} & Im Y_{0,N/2-1} & Re Y_{0,N/2}  '
    '\\\\ Re Y_{1,0} & Re Y_{1,1} & Im Y_{1,1} & Re Y_{1,2} & Im Y_{1,2} &  '
    '\\cdots & Re Y_{1,N/2-1} & Im Y_{1,N/2-1} & Re Y_{1,N/2}  \\\\ Im Y_{1,0} '
    '& Re Y_{2,1} & Im Y_{2,1} & Re Y_{2,2} & Im Y_{2,2} &  \\cdots & Re '
    'Y_{2,N/2-1} & Im Y_{2,N/2-1} & Im Y_{1,N/2}  \\\\ \\hdotsfor{9} \\\\ Re '
    'Y_{M/2-1,0} &  Re Y_{M-3,1}  & Im Y_{M-3,1} &  \\hdotsfor{3} & Re '
    'Y_{M-3,N/2-1} & Im Y_{M-3,N/2-1}& Re Y_{M/2-1,N/2}  \\\\ Im Y_{M/2-1,0} '
    '&  Re Y_{M-2,1}  & Im Y_{M-2,1} &  \\hdotsfor{3} & Re Y_{M-2,N/2-1} & Im '
    'Y_{M-2,N/2-1}& Im Y_{M/2-1,N/2}  \\\\ Re Y_{M/2,0}  &  Re Y_{M-1,1} &  Im '
    'Y_{M-1,1} &  \\hdotsfor{3} & Re Y_{M-1,N/2-1} & Im Y_{M-1,N/2-1}& Re '
    'Y_{M/2,N/2} \\end{bmatrix}\\f]\n'
    '\n'
    'In case of 1D transform of a real vector, the output looks like the first '
    'row of the matrix above.\n'
    '\n'
    'So, the function chooses an operation mode depending on the flags and '
    'size of the input array:\n'
    '-   If #DFT_ROWS is set or the input array has a single row or single '
    'column, the function\n'
    'performs a 1D forward or inverse transform of each row of a matrix when '
    '#DFT_ROWS is set.\n'
    'Otherwise, it performs a 2D transform.\n'
    '-   If the input array is real and #DFT_INVERSE is not set, the function '
    'performs a forward 1D or\n'
    '2D transform:\n'
    '-   When #DFT_COMPLEX_OUTPUT is set, the output is a complex matrix of '
    'the same size as\n'
    'input.\n'
    '-   When #DFT_COMPLEX_OUTPUT is not set, the output is a real matrix of '
    'the same size as\n'
    'input. In case of 2D transform, it uses the packed format as shown above. '
    'In case of a\n'
    'single 1D transform, it looks like the first row of the matrix above. In '
    'case of\n'
    'multiple 1D transforms (when using the #DFT_ROWS flag), each row of the '
    'output matrix\n'
    'looks like the first row of the matrix above.\n'
    '-   If the input array is complex and either #DFT_INVERSE or '
    '#DFT_REAL_OUTPUT are not set, the\n'
    'output is a complex array of the same size as input. The function '
    'performs a forward or\n'
    'inverse 1D or 2D transform of the whole input array or each row of the '
    'input array\n'
    'independently, depending on the flags DFT_INVERSE and DFT_ROWS.\n'
    '-   When #DFT_INVERSE is set and the input array is real, or it is '
    'complex but #DFT_REAL_OUTPUT\n'
    'is set, the output is a real array of the same size as input. The '
    'function performs a 1D or 2D\n'
    'inverse transformation of the whole input array or each individual row, '
    'depending on the flags\n'
    '#DFT_INVERSE and #DFT_ROWS.\n'
    '\n'
    'If #DFT_SCALE is set, the scaling is done after the transformation.\n'
    '\n'
    'Unlike dct , the function supports arrays of arbitrary size. But only '
    'those arrays are processed\n'
    'efficiently, whose sizes can be factorized in a product of small prime '
    'numbers (2, 3, and 5 in the\n'
    'current implementation). Such an efficient DFT size can be calculated '
    'using the getOptimalDFTSize\n'
    'method.\n'
    '\n'
    'The sample below illustrates how to calculate a DFT-based convolution of '
    'two 2D real arrays:\n'
    '@code\n'
    'void convolveDFT(InputArray A, InputArray B, OutputArray C)\n'
    '{\n'
    '// reallocate the output array if needed\n'
    'C.create(abs(A.rows - B.rows)+1, abs(A.cols - B.cols)+1, A.type());\n'
    'Size dftSize;\n'
    '// calculate the size of DFT transform\n'
    'dftSize.width = getOptimalDFTSize(A.cols + B.cols - 1);\n'
    'dftSize.height = getOptimalDFTSize(A.rows + B.rows - 1);\n'
    '\n'
    "// allocate temporary buffers and initialize them with 0's\n"
    'Mat tempA(dftSize, A.type(), Scalar::all(0));\n'
    'Mat tempB(dftSize, B.type(), Scalar::all(0));\n'
    '\n'
    '// copy A and B to the top-left corners of tempA and tempB, respectively\n'
    'Mat roiA(tempA, Rect(0,0,A.cols,A.rows));\n'
    'A.copyTo(roiA);\n'
    'Mat roiB(tempB, Rect(0,0,B.cols,B.rows));\n'
    'B.copyTo(roiB);\n'
    '\n'
    '// now transform the padded A & B in-place;\n'
    '// use "nonzeroRows" hint for faster processing\n'
    'dft(tempA, tempA, 0, A.rows);\n'
    'dft(tempB, tempB, 0, B.rows);\n'
    '\n'
    '// multiply the spectrums;\n'
    '// the function handles packed spectrum representations well\n'
    'mulSpectrums(tempA, tempB, tempA);\n'
    '\n'
    '// transform the product back from the frequency domain.\n'
    '// Even though all the result rows will be non-zero,\n'
    '// you need only the first C.rows of them, and thus you\n'
    '// pass nonzeroRows == C.rows\n'
    'dft(tempA, tempA, DFT_INVERSE + DFT_SCALE, C.rows);\n'
    '\n'
    '// now copy the result back to C.\n'
    'tempA(Rect(0, 0, C.cols, C.rows)).copyTo(C);\n'
    '\n'
    '// all the temporary buffers will be deallocated automatically\n'
    '}\n'
    '@endcode\n'
    'To optimize this sample, consider the following approaches:\n'
    '-   Since nonzeroRows != 0 is passed to the forward transform calls and '
    'since A and B are copied to\n'
    'the top-left corners of tempA and tempB, respectively, it is not '
    'necessary to clear the whole\n'
    'tempA and tempB. It is only necessary to clear the tempA.cols - A.cols ( '
    'tempB.cols - B.cols)\n'
    'rightmost columns of the matrices.\n'
    '-   This DFT-based convolution does not have to be applied to the whole '
    'big arrays, especially if B\n'
    'is significantly smaller than A or vice versa. Instead, you can calculate '
    'convolution by parts.\n'
    'To do this, you need to split the output array C into multiple tiles. For '
    'each tile, estimate\n'
    'which parts of A and B are required to calculate convolution in this '
    'tile. If the tiles in C are\n'
    'too small, the speed will decrease a lot because of repeated work. In the '
    'ultimate case, when\n'
    'each tile in C is a single pixel, the algorithm becomes equivalent to the '
    'naive convolution\n'
    'algorithm. If the tiles are too big, the temporary arrays tempA and tempB '
    'become too big and\n'
    'there is also a slowdown because of bad cache locality. So, there is an '
    'optimal tile size\n'
    'somewhere in the middle.\n'
    '-   If different tiles in C can be calculated in parallel and, thus, the '
    'convolution is done by\n'
    'parts, the loop can be threaded.\n'
    '\n'
    'All of the above improvements have been implemented in #matchTemplate and '
    '#filter2D . Therefore, by\n'
    'using them, you can get the performance even better than with the above '
    'theoretically optimal\n'
    'implementation. Though, those two functions actually calculate '
    'cross-correlation, not convolution,\n'
    'so you need to "flip" the second convolution operand B vertically and '
    'horizontally using flip .\n'
    '@note\n'
    '-   An example using the discrete fourier transform can be found at\n'
    'opencv_source_code/samples/cpp/dft.cpp\n'
    '-   (Python) An example using the dft functionality to perform Wiener '
    'deconvolution can be found\n'
    'at opencv_source/samples/python/deconvolution.py\n'
    '-   (Python) An example rearranging the quadrants of a Fourier image can '
    'be found at\n'
    'opencv_source/samples/python/dft.py\n'
    '@param src input array that could be real or complex.\n'
    '@param dst output array whose size and type depends on the flags .\n'
    '@param flags transformation flags, representing a combination of the '
    '#DftFlags\n'
    '@param nonzeroRows when the parameter is not zero, the function assumes '
    'that only the first\n'
    'nonzeroRows rows of the input array (#DFT_INVERSE is not set) or only the '
    'first nonzeroRows of the\n'
    'output array (#DFT_INVERSE is set) contain non-zeros, thus, the function '
    'can handle the rest of the\n'
    'rows more efficiently and save some time; this technique is very useful '
    'for calculating array\n'
    'cross-correlation or convolution using DFT.\n'
    '@sa dct , getOptimalDFTSize , mulSpectrums, filter2D , matchTemplate , '
    'flip , cartToPolar ,\n'
    'magnitude , phase']
parse_name: cv.dft with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::dft namespace:cv classpath: classname: name:dft
register (function) dft (cv_dft__InputArray__OutputArray_int_int)

--- Incoming ---
[   'cv.idft',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]],
    None,
    '@brief Calculates the inverse Discrete Fourier Transform of a 1D or 2D '
    'array.\n'
    '\n'
    'idft(src, dst, flags) is equivalent to dft(src, dst, flags | '
    '#DFT_INVERSE) .\n'
    '@note None of dft and idft scales the result by default. So, you should '
    'pass #DFT_SCALE to one of\n'
    'dft or idft explicitly to make these transforms mutually inverse.\n'
    '@sa dft, dct, idct, mulSpectrums, getOptimalDFTSize\n'
    '@param src input floating-point real or complex array.\n'
    '@param dst output array whose size and type depend on the flags.\n'
    '@param flags operation flags (see dft and #DftFlags).\n'
    '@param nonzeroRows number of dst rows to process; the rest of the rows '
    'have undefined content (see\n'
    'the convolution sample in dft description.']
parse_name: cv.idft with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::idft namespace:cv classpath: classname: name:idft
register (function) idft (cv_idft__InputArray__OutputArray_int_int)

--- Incoming ---
[   'cv.dct',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '0', []]],
    None,
    '@brief Performs a forward or inverse discrete Cosine transform of 1D or '
    '2D array.\n'
    '\n'
    'The function cv::dct performs a forward or inverse discrete Cosine '
    'transform (DCT) of a 1D or 2D\n'
    'floating-point array:\n'
    '-   Forward Cosine transform of a 1D vector of N elements:\n'
    '\\f[Y = C^{(N)}  \\cdot X\\f]\n'
    'where\n'
    '\\f[C^{(N)}_{jk}= \\sqrt{\\alpha_j/N} \\cos \\left ( '
    '\\frac{\\pi(2k+1)j}{2N} \\right )\\f]\n'
    'and\n'
    '\\f$\\alpha_0=1\\f$, \\f$\\alpha_j=2\\f$ for *j \\> 0*.\n'
    '-   Inverse Cosine transform of a 1D vector of N elements:\n'
    '\\f[X =  \\left (C^{(N)} \\right )^{-1}  \\cdot Y =  \\left (C^{(N)} '
    '\\right )^T  \\cdot Y\\f]\n'
    '(since \\f$C^{(N)}\\f$ is an orthogonal matrix, \\f$C^{(N)} \\cdot '
    '\\left(C^{(N)}\\right)^T = I\\f$ )\n'
    '-   Forward 2D Cosine transform of M x N matrix:\n'
    '\\f[Y = C^{(N)}  \\cdot X  \\cdot \\left (C^{(N)} \\right )^T\\f]\n'
    '-   Inverse 2D Cosine transform of M x N matrix:\n'
    '\\f[X =  \\left (C^{(N)} \\right )^T  \\cdot X  \\cdot C^{(N)}\\f]\n'
    '\n'
    'The function chooses the mode of operation by looking at the flags and '
    'size of the input array:\n'
    '-   If (flags & #DCT_INVERSE) == 0 , the function does a forward 1D or 2D '
    'transform. Otherwise, it\n'
    'is an inverse 1D or 2D transform.\n'
    '-   If (flags & #DCT_ROWS) != 0 , the function performs a 1D transform of '
    'each row.\n'
    '-   If the array is a single column or a single row, the function '
    'performs a 1D transform.\n'
    '-   If none of the above is true, the function performs a 2D transform.\n'
    '\n'
    '@note Currently dct supports even-size arrays (2, 4, 6 ...). For data '
    'analysis and approximation, you\n'
    'can pad the array when necessary.\n'
    'Also, the function performance depends very much, and not monotonically, '
    'on the array size (see\n'
    'getOptimalDFTSize ). In the current implementation DCT of a vector of '
    'size N is calculated via DFT\n'
    'of a vector of size N/2 . Thus, the optimal DCT size N1 \\>= N can be '
    'calculated as:\n'
    '@code\n'
    'size_t getOptimalDCTSize(size_t N) { return 2*getOptimalDFTSize((N+1)/2); '
    '}\n'
    'N1 = getOptimalDCTSize(N);\n'
    '@endcode\n'
    '@param src input floating-point array.\n'
    '@param dst output array of the same size and type as src .\n'
    '@param flags transformation flags as a combination of cv::DftFlags '
    '(DCT_*)\n'
    '@sa dft , getOptimalDFTSize , idct']
parse_name: cv.dct with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::dct namespace:cv classpath: classname: name:dct
register (function) dct (cv_dct__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.idct',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '0', []]],
    None,
    '@brief Calculates the inverse Discrete Cosine Transform of a 1D or 2D '
    'array.\n'
    '\n'
    'idct(src, dst, flags) is equivalent to dct(src, dst, flags | '
    'DCT_INVERSE).\n'
    '@param src input floating-point single-channel array.\n'
    '@param dst output array of the same size and type as src.\n'
    '@param flags operation flags.\n'
    '@sa  dct, dft, idft, getOptimalDFTSize']
parse_name: cv.idct with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::idct namespace:cv classpath: classname: name:idct
register (function) idct (cv_idct__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.mulSpectrums',
    'void',
    [],
    [   ['InputArray', 'a', '', []],
        ['InputArray', 'b', '', []],
        ['OutputArray', 'c', '', []],
        ['int', 'flags', '', []],
        ['bool', 'conjB', 'false', []]],
    None,
    '@brief Performs the per-element multiplication of two Fourier spectrums.\n'
    '\n'
    'The function cv::mulSpectrums performs the per-element multiplication of '
    'the two CCS-packed or complex\n'
    'matrices that are results of a real or complex Fourier transform.\n'
    '\n'
    'The function, together with dft and idft , may be used to calculate '
    'convolution (pass conjB=false )\n'
    'or correlation (pass conjB=true ) of two arrays rapidly. When the arrays '
    'are complex, they are\n'
    'simply multiplied (per element) with an optional conjugation of the '
    'second-array elements. When the\n'
    'arrays are real, they are assumed to be CCS-packed (see dft for '
    'details).\n'
    '@param a first input array.\n'
    '@param b second input array of the same size and type as src1 .\n'
    '@param c output array of the same size and type as src1 .\n'
    '@param flags operation flags; currently, the only supported flag is '
    'cv::DFT_ROWS, which indicates that\n'
    'each row of src1 and src2 is an independent 1D Fourier spectrum. If you '
    'do not want to use this flag, then simply add a `0` as value.\n'
    '@param conjB optional flag that conjugates the second input array before '
    'the multiplication (true)\n'
    'or not (false).']
parse_name: cv.mulSpectrums with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::mulSpectrums namespace:cv classpath: classname: name:mulSpectrums
register (function) mulSpectrums (cv_mulSpectrums__InputArray__InputArray__OutputArray_int_bool)

--- Incoming ---
[   'cv.getOptimalDFTSize',
    'int',
    [],
    [['int', 'vecsize', '', []]],
    None,
    '@brief Returns the optimal DFT size for a given vector size.\n'
    '\n'
    'DFT performance is not a monotonic function of a vector size. Therefore, '
    'when you calculate\n'
    'convolution of two arrays or perform the spectral analysis of an array, '
    'it usually makes sense to\n'
    'pad the input data with zeros to get a bit larger array that can be '
    'transformed much faster than the\n'
    'original one. Arrays whose size is a power-of-two (2, 4, 8, 16, 32, ...) '
    'are the fastest to process.\n'
    "Though, the arrays whose size is a product of 2's, 3's, and 5's (for "
    'example, 300 = 5\\*5\\*3\\*2\\*2)\n'
    'are also processed quite efficiently.\n'
    '\n'
    'The function cv::getOptimalDFTSize returns the minimum number N that is '
    'greater than or equal to vecsize\n'
    'so that the DFT of a vector of size N can be processed efficiently. In '
    'the current implementation N\n'
    '= 2 ^p^ \\* 3 ^q^ \\* 5 ^r^ for some integer p, q, r.\n'
    '\n'
    'The function returns a negative number if vecsize is too large (very '
    'close to INT_MAX ).\n'
    '\n'
    'While the function cannot be used directly to estimate the optimal vector '
    'size for DCT transform\n'
    '(since the current DCT implementation supports only even-size vectors), '
    'it can be easily processed\n'
    'as getOptimalDFTSize((vecsize+1)/2)\\*2.\n'
    '@param vecsize vector size.\n'
    '@sa dft , dct , idft , idct , mulSpectrums']
parse_name: cv.getOptimalDFTSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::getOptimalDFTSize namespace:cv classpath: classname: name:getOptimalDFTSize
register (function) getOptimalDFTSize (cv_getOptimalDFTSize_int)

--- Incoming ---
[   'cv.theRNG',
    'RNG&',
    [],
    [],
    None,
    '@brief Returns the default random number generator.\n'
    '\n'
    'The function cv::theRNG returns the default random number generator. For '
    'each thread, there is a\n'
    'separate random number generator, so you can use the function safely in '
    'multi-thread environments.\n'
    'If you just need to get a single random number using this generator or '
    'initialize an array, you can\n'
    'use randu or randn instead. But if you are going to generate many random '
    'numbers inside a loop, it\n'
    'is much faster to use this function to retrieve the generator and then '
    'use RNG::operator _Tp() .\n'
    '@sa RNG, randu, randn']
parse_name: cv.theRNG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::theRNG namespace:cv classpath: classname: name:theRNG
Registering an unknown type: RNG
register (function) theRNG (cv_theRNG)

--- Incoming ---
[   'cv.setRNGSeed',
    'void',
    [],
    [['int', 'seed', '', []]],
    None,
    '@brief Sets state of default random number generator.\n'
    '\n'
    'The function cv::setRNGSeed sets state of default random number generator '
    'to custom value.\n'
    '@param seed new state for default random number generator\n'
    '@sa RNG, randu, randn']
parse_name: cv.setRNGSeed with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::setRNGSeed namespace:cv classpath: classname: name:setRNGSeed
register (function) setRNGSeed (cv_setRNGSeed_int)

--- Incoming ---
[   'cv.randu',
    'void',
    [],
    [   ['InputOutputArray', 'dst', '', []],
        ['InputArray', 'low', '', []],
        ['InputArray', 'high', '', []]],
    None,
    '@brief Generates a single uniformly-distributed random number or an array '
    'of random numbers.\n'
    '\n'
    'Non-template variant of the function fills the matrix dst with '
    'uniformly-distributed\n'
    'random numbers from the specified range:\n'
    '\\f[\\texttt{low} _c  \\leq \\texttt{dst} (I)_c <  \\texttt{high} _c\\f]\n'
    '@param dst output array of random numbers; the array must be '
    'pre-allocated.\n'
    '@param low inclusive lower boundary of the generated random numbers.\n'
    '@param high exclusive upper boundary of the generated random numbers.\n'
    '@sa RNG, randn, theRNG']
parse_name: cv.randu with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::randu namespace:cv classpath: classname: name:randu
register (function) randu (cv_randu__InputOutputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.randn',
    'void',
    [],
    [   ['InputOutputArray', 'dst', '', []],
        ['InputArray', 'mean', '', []],
        ['InputArray', 'stddev', '', []]],
    None,
    '@brief Fills the array with normally distributed random numbers.\n'
    '\n'
    'The function cv::randn fills the matrix dst with normally distributed '
    'random numbers with the specified\n'
    'mean vector and the standard deviation matrix. The generated random '
    'numbers are clipped to fit the\n'
    'value range of the output array data type.\n'
    '@param dst output array of random numbers; the array must be '
    'pre-allocated and have 1 to 4 channels.\n'
    '@param mean mean value (expectation) of the generated random numbers.\n'
    '@param stddev standard deviation of the generated random numbers; it can '
    'be either a vector (in\n'
    'which case a diagonal standard deviation matrix is assumed) or a square '
    'matrix.\n'
    '@sa RNG, randu']
parse_name: cv.randn with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::randn namespace:cv classpath: classname: name:randn
register (function) randn (cv_randn__InputOutputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.randShuffle',
    'void',
    [],
    [   ['InputOutputArray', 'dst', '', []],
        ['double', 'iterFactor', '1.', []],
        ['RNG*', 'rng', '0', []]],
    None,
    '@brief Shuffles the array elements randomly.\n'
    '\n'
    'The function cv::randShuffle shuffles the specified 1D array by randomly '
    'choosing pairs of elements and\n'
    'swapping them. The number of such swap operations will be '
    'dst.rows\\*dst.cols\\*iterFactor .\n'
    '@param dst input/output numerical 1D array.\n'
    '@param iterFactor scale factor that determines the number of random swap '
    'operations (see the details\n'
    'below).\n'
    '@param rng optional random number generator used for shuffling; if it is '
    'zero, theRNG () is used\n'
    'instead.\n'
    '@sa RNG, sort']
parse_name: cv.randShuffle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::randShuffle namespace:cv classpath: classname: name:randShuffle
Registering an unknown type: RNG
register (function) randShuffle (cv_randShuffle__InputOutputArray_double_RNG*)

--- Incoming ---
[   'class cv.PCA',
    '',
    [],
    [],
    None,
    '@brief Principal Component Analysis\n'
    '\n'
    'The class is used to calculate a special basis for a set of vectors. The\n'
    'basis will consist of eigenvectors of the covariance matrix calculated\n'
    'from the input set of vectors. The class %PCA can also transform\n'
    'vectors to/from the new coordinate space defined by the basis. Usually,\n'
    'in this new coordinate system, each vector from the original set (and\n'
    'any linear combination of such vectors) can be quite accurately\n'
    'approximated by taking its first few components, corresponding to the\n'
    'eigenvectors of the largest eigenvalues of the covariance matrix.\n'
    'Geometrically it means that you calculate a projection of the vector to\n'
    'a subspace formed by a few eigenvectors corresponding to the dominant\n'
    'eigenvalues of the covariance matrix. And usually such a projection is\n'
    'very close to the original vector. So, you can represent the original\n'
    'vector from a high-dimensional space with a much shorter vector\n'
    "consisting of the projected vector's coordinates in the subspace. Such a\n"
    'transformation is also known as Karhunen-Loeve Transform, or KLT.\n'
    'See http://en.wikipedia.org/wiki/Principal_component_analysis\n'
    '\n'
    'The sample below is the function that takes two matrices. The first\n'
    'function stores a set of vectors (a row per vector) that is used to\n'
    'calculate PCA. The second function stores another "test" set of vectors\n'
    '(a row per vector). First, these vectors are compressed with PCA, then\n'
    'reconstructed back, and then the reconstruction error norm is computed\n'
    'and printed for each vector. :\n'
    '\n'
    '@code{.cpp}\n'
    'using namespace cv;\n'
    '\n'
    'PCA compressPCA(const Mat& pcaset, int maxComponents,\n'
    'const Mat& testset, Mat& compressed)\n'
    '{\n'
    'PCA pca(pcaset, // pass the data\n'
    'Mat(), // we do not have a pre-computed mean vector,\n'
    '// so let the PCA engine to compute it\n'
    'PCA::DATA_AS_ROW, // indicate that the vectors\n'
    '// are stored as matrix rows\n'
    '// (use PCA::DATA_AS_COL if the vectors are\n'
    '// the matrix columns)\n'
    'maxComponents // specify, how many principal components to retain\n'
    ');\n'
    '// if there is no test data, just return the computed basis, '
    'ready-to-use\n'
    'if( !testset.data )\n'
    'return pca;\n'
    'CV_Assert( testset.cols == pcaset.cols );\n'
    '\n'
    'compressed.create(testset.rows, maxComponents, testset.type());\n'
    '\n'
    'Mat reconstructed;\n'
    'for( int i = 0; i < testset.rows; i++ )\n'
    '{\n'
    'Mat vec = testset.row(i), coeffs = compressed.row(i), reconstructed;\n'
    '// compress the vector, the result will be stored\n'
    '// in the i-th row of the output matrix\n'
    'pca.project(vec, coeffs);\n'
    '// and then reconstruct it\n'
    'pca.backProject(coeffs, reconstructed);\n'
    '// and measure the error\n'
    'printf("%d. diff = %g\\n", i, norm(vec, reconstructed, NORM_L2));\n'
    '}\n'
    'return pca;\n'
    '}\n'
    '@endcode\n'
    '@sa calcCovarMatrix, mulTransposed, SVD, dft, dct']
parse_name: class cv.PCA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA namespace:cv classpath: classname: name:PCA
register class cv::PCA (['class cv.PCA', '', [], [], None, '@brief Principal Component Analysis\n\nThe class is used to calculate a special basis for a set of vectors. The\nbasis will consist of eigenvectors of the covariance matrix calculated\nfrom the input set of vectors. The class %PCA can also transform\nvectors to/from the new coordinate space defined by the basis. Usually,\nin this new coordinate system, each vector from the original set (and\nany linear combination of such vectors) can be quite accurately\napproximated by taking its first few components, corresponding to the\neigenvectors of the largest eigenvalues of the covariance matrix.\nGeometrically it means that you calculate a projection of the vector to\na subspace formed by a few eigenvectors corresponding to the dominant\neigenvalues of the covariance matrix. And usually such a projection is\nvery close to the original vector. So, you can represent the original\nvector from a high-dimensional space with a much shorter vector\nconsisting of the projected vector\'s coordinates in the subspace. Such a\ntransformation is also known as Karhunen-Loeve Transform, or KLT.\nSee http://en.wikipedia.org/wiki/Principal_component_analysis\n\nThe sample below is the function that takes two matrices. The first\nfunction stores a set of vectors (a row per vector) that is used to\ncalculate PCA. The second function stores another "test" set of vectors\n(a row per vector). First, these vectors are compressed with PCA, then\nreconstructed back, and then the reconstruction error norm is computed\nand printed for each vector. :\n\n@code{.cpp}\nusing namespace cv;\n\nPCA compressPCA(const Mat& pcaset, int maxComponents,\nconst Mat& testset, Mat& compressed)\n{\nPCA pca(pcaset, // pass the data\nMat(), // we do not have a pre-computed mean vector,\n// so let the PCA engine to compute it\nPCA::DATA_AS_ROW, // indicate that the vectors\n// are stored as matrix rows\n// (use PCA::DATA_AS_COL if the vectors are\n// the matrix columns)\nmaxComponents // specify, how many principal components to retain\n);\n// if there is no test data, just return the computed basis, ready-to-use\nif( !testset.data )\nreturn pca;\nCV_Assert( testset.cols == pcaset.cols );\n\ncompressed.create(testset.rows, maxComponents, testset.type());\n\nMat reconstructed;\nfor( int i = 0; i < testset.rows; i++ )\n{\nMat vec = testset.row(i), coeffs = compressed.row(i), reconstructed;\n// compress the vector, the result will be stored\n// in the i-th row of the output matrix\npca.project(vec, coeffs);\n// and then reconstruct it\npca.backProject(coeffs, reconstructed);\n// and measure the error\nprintf("%d. diff = %g\\n", i, norm(vec, reconstructed, NORM_L2));\n}\nreturn pca;\n}\n@endcode\n@sa calcCovarMatrix, mulTransposed, SVD, dft, dct'])

--- Incoming ---
[   'enum cv.PCA.Flags',
    '',
    [],
    [   [   'const cv.PCA.DATA_AS_ROW',
            '0',
            [],
            [],
            None,
            'indicates that the input samples are stored as matrix rows\n'],
        [   'const cv.PCA.DATA_AS_COL',
            '1',
            [],
            [],
            None,
            'indicates that the input samples are stored as matrix columns\n'],
        ['const cv.PCA.USE_AVG', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.PCA.DATA_AS_ROW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::DATA_AS_ROW namespace:cv classpath:PCA classname:PCA name:DATA_AS_ROW
parse_name: const cv.PCA.DATA_AS_COL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::DATA_AS_COL namespace:cv classpath:PCA classname:PCA name:DATA_AS_COL
parse_name: const cv.PCA.USE_AVG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::USE_AVG namespace:cv classpath:PCA classname:PCA name:USE_AVG
parse_name: enum cv.PCA.Flags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::Flags namespace:cv classpath:PCA classname:PCA name:Flags
parse_name: const cv.PCA.DATA_AS_ROW with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::DATA_AS_ROW namespace:cv classpath:PCA classname:PCA name:DATA_AS_ROW
parse_name: const cv.PCA.DATA_AS_COL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::DATA_AS_COL namespace:cv classpath:PCA classname:PCA name:DATA_AS_COL
parse_name: const cv.PCA.USE_AVG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::USE_AVG namespace:cv classpath:PCA classname:PCA name:USE_AVG

--- Incoming ---
[   'cv.PCA.PCA',
    'P',
    [],
    [],
    None,
    '@brief default constructor\n'
    '\n'
    'The default constructor initializes an empty %PCA structure. The other\n'
    'constructors initialize the structure and call PCA::operator()().']
parse_name: cv.PCA.PCA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::PCA namespace:cv classpath:PCA classname:PCA name:PCA
register (constructor) default in cv::PCA (cv_PCA_PCA)

--- Incoming ---
[   'cv.PCA.PCA',
    'P',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputArray', 'mean', '', []],
        ['int', 'flags', '', []],
        ['int', 'maxComponents', '0', []]],
    None,
    '@overload\n'
    '@param data input samples stored as matrix rows or matrix columns.\n'
    '@param mean optional mean value; if the matrix is empty (@c noArray()),\n'
    'the mean is computed from the data.\n'
    '@param flags operation flags; currently the parameter is only used to\n'
    'specify the data layout (PCA::Flags)\n'
    '@param maxComponents maximum number of components that %PCA should\n'
    'retain; by default, all the components are retained.']
parse_name: cv.PCA.PCA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::PCA namespace:cv classpath:PCA classname:PCA name:PCA
register (constructor) new in cv::PCA (cv_PCA_PCA__InputArray__InputArray_int_int)

--- Incoming ---
[   'cv.PCA.PCA',
    'P',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputArray', 'mean', '', []],
        ['int', 'flags', '', []],
        ['double', 'retainedVariance', '', []]],
    None,
    '@overload\n'
    '@param data input samples stored as matrix rows or matrix columns.\n'
    '@param mean optional mean value; if the matrix is empty (noArray()),\n'
    'the mean is computed from the data.\n'
    '@param flags operation flags; currently the parameter is only used to\n'
    'specify the data layout (PCA::Flags)\n'
    '@param retainedVariance Percentage of variance that PCA should retain.\n'
    'Using this parameter will let the PCA decided how many components to\n'
    'retain but it will always keep at least 2.']
parse_name: cv.PCA.PCA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::PCA namespace:cv classpath:PCA classname:PCA name:PCA
register (constructor) new in cv::PCA (cv_PCA_PCA__InputArray__InputArray_int_double)

--- Incoming ---
[   'cv.PCA.operator ()',
    'PCA&',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputArray', 'mean', '', []],
        ['int', 'flags', '', []],
        ['int', 'maxComponents', '0', []]],
    None,
    '@brief performs %PCA\n'
    '\n'
    'The operator performs %PCA of the supplied dataset. It is safe to reuse\n'
    'the same PCA structure for multiple datasets. That is, if the structure\n'
    'has been previously used with another dataset, the existing internal\n'
    'data is reclaimed and the new @ref eigenvalues, @ref eigenvectors and '
    '@ref\n'
    'mean are allocated and computed.\n'
    '\n'
    'The computed @ref eigenvalues are sorted from the largest to the smallest '
    'and\n'
    'the corresponding @ref eigenvectors are stored as eigenvectors rows.\n'
    '\n'
    '@param data input samples stored as the matrix rows or as the matrix\n'
    'columns.\n'
    '@param mean optional mean value; if the matrix is empty (noArray()),\n'
    'the mean is computed from the data.\n'
    '@param flags operation flags; currently the parameter is only used to\n'
    'specify the data layout. (Flags)\n'
    '@param maxComponents maximum number of components that PCA should\n'
    'retain; by default, all the components are retained.']
parse_name: cv.PCA.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::operator () namespace:cv classpath:PCA classname:PCA name:operator ()
ignore (method) operator () in cv::PCA

--- Incoming ---
[   'cv.PCA.operator ()',
    'PCA&',
    [],
    [   ['InputArray', 'data', '', []],
        ['InputArray', 'mean', '', []],
        ['int', 'flags', '', []],
        ['double', 'retainedVariance', '', []]],
    None,
    '@overload\n'
    '@param data input samples stored as the matrix rows or as the matrix\n'
    'columns.\n'
    '@param mean optional mean value; if the matrix is empty (noArray()),\n'
    'the mean is computed from the data.\n'
    '@param flags operation flags; currently the parameter is only used to\n'
    'specify the data layout. (PCA::Flags)\n'
    '@param retainedVariance Percentage of variance that %PCA should retain.\n'
    'Using this parameter will let the %PCA decided how many components to\n'
    'retain but it will always keep at least 2.']
parse_name: cv.PCA.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::operator () namespace:cv classpath:PCA classname:PCA name:operator ()
ignore (method) operator () in cv::PCA

--- Incoming ---
[   'cv.PCA.project',
    'Mat',
    ['/C'],
    [['InputArray', 'vec', '', []]],
    None,
    '@brief Projects vector(s) to the principal component subspace.\n'
    '\n'
    'The methods project one or more vectors to the principal component\n'
    'subspace, where each vector projection is represented by coefficients in\n'
    'the principal component basis. The first form of the method returns the\n'
    'matrix that the second form writes to the result. So the first form can\n'
    'be used as a part of expression while the second form can be more\n'
    'efficient in a processing loop.\n'
    '@param vec input vector(s); must have the same dimensionality and the\n'
    'same layout as the input data used at %PCA phase, that is, if\n'
    'DATA_AS_ROW are specified, then `vec.cols==data.cols`\n'
    '(vector dimensionality) and `vec.rows` is the number of vectors to\n'
    'project, and the same is true for the PCA::DATA_AS_COL case.']
parse_name: cv.PCA.project with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::project namespace:cv classpath:PCA classname:PCA name:project
register (method) project in cv::PCA (cv_PCA_project_const__InputArray)

--- Incoming ---
[   'cv.PCA.project',
    'void',
    ['/C'],
    [['InputArray', 'vec', '', []], ['OutputArray', 'result', '', []]],
    None,
    '@overload\n'
    '@param vec input vector(s); must have the same dimensionality and the\n'
    'same layout as the input data used at PCA phase, that is, if\n'
    'DATA_AS_ROW are specified, then `vec.cols==data.cols`\n'
    '(vector dimensionality) and `vec.rows` is the number of vectors to\n'
    'project, and the same is true for the PCA::DATA_AS_COL case.\n'
    '@param result output vectors; in case of PCA::DATA_AS_COL, the\n'
    'output matrix has as many columns as the number of input vectors, this\n'
    'means that `result.cols==vec.cols` and the number of rows match the\n'
    'number of principal components (for example, `maxComponents` parameter\n'
    'passed to the constructor).']
parse_name: cv.PCA.project with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::project namespace:cv classpath:PCA classname:PCA name:project
register (method) project in cv::PCA (cv_PCA_project_const__InputArray__OutputArray)

--- Incoming ---
[   'cv.PCA.backProject',
    'Mat',
    ['/C'],
    [['InputArray', 'vec', '', []]],
    None,
    '@brief Reconstructs vectors from their PC projections.\n'
    '\n'
    'The methods are inverse operations to PCA::project. They take PC\n'
    'coordinates of projected vectors and reconstruct the original vectors.\n'
    'Unless all the principal components have been retained, the\n'
    'reconstructed vectors are different from the originals. But typically,\n'
    'the difference is small if the number of components is large enough (but\n'
    'still much smaller than the original vector dimensionality). As a\n'
    'result, PCA is used.\n'
    '@param vec coordinates of the vectors in the principal component\n'
    'subspace, the layout and size are the same as of PCA::project output\n'
    'vectors.']
parse_name: cv.PCA.backProject with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::backProject namespace:cv classpath:PCA classname:PCA name:backProject
register (method) backProject in cv::PCA (cv_PCA_backProject_const__InputArray)

--- Incoming ---
[   'cv.PCA.backProject',
    'void',
    ['/C'],
    [['InputArray', 'vec', '', []], ['OutputArray', 'result', '', []]],
    None,
    '@overload\n'
    '@param vec coordinates of the vectors in the principal component\n'
    'subspace, the layout and size are the same as of PCA::project output\n'
    'vectors.\n'
    '@param result reconstructed vectors; the layout and size are the same as\n'
    'of PCA::project input vectors.']
parse_name: cv.PCA.backProject with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::backProject namespace:cv classpath:PCA classname:PCA name:backProject
register (method) backProject in cv::PCA (cv_PCA_backProject_const__InputArray__OutputArray)

--- Incoming ---
[   'cv.PCA.write',
    'void',
    ['/C'],
    [['FileStorage&', 'fs', '', []]],
    None,
    '@brief write PCA objects\n'
    '\n'
    'Writes @ref eigenvalues @ref eigenvectors and @ref mean to specified '
    'FileStorage']
parse_name: cv.PCA.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::write namespace:cv classpath:PCA classname:PCA name:write
register (method) write in cv::PCA (cv_PCA_write_const_FileStorage)

--- Incoming ---
[   'cv.PCA.read',
    'void',
    [],
    [['const FileNode&', 'fn', '', []]],
    None,
    '@brief load PCA objects\n'
    '\n'
    'Loads @ref eigenvalues @ref eigenvectors and @ref mean from specified '
    'FileNode']
parse_name: cv.PCA.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::PCA::read namespace:cv classpath:PCA classname:PCA name:read
register (method) read in cv::PCA (cv_PCA_read_FileNode)

--- Incoming ---
[   'class cv.LDA',
    '',
    [],
    [],
    None,
    '@brief Linear Discriminant Analysis\n@todo document this class']
parse_name: class cv.LDA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA namespace:cv classpath: classname: name:LDA
register class cv::LDA (['class cv.LDA', '', [], [], None, '@brief Linear Discriminant Analysis\n@todo document this class'])

--- Incoming ---
[   'cv.LDA.LDA',
    'L',
    ['/E'],
    [['int', 'num_components', '0', []]],
    None,
    '@brief constructor\nInitializes a LDA with num_components (default 0).']
parse_name: cv.LDA.LDA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::LDA namespace:cv classpath:LDA classname:LDA name:LDA
register (constructor) new in cv::LDA (cv_LDA_LDA_int)

--- Incoming ---
[   'cv.LDA.LDA',
    'L',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['InputArray', 'labels', '', []],
        ['int', 'num_components', '0', []]],
    None,
    "Initializes and performs a Discriminant Analysis with Fisher's\n"
    'Optimization Criterion on given data in src and corresponding labels\n'
    'in labels. If 0 (or less) number of components are given, they are\n'
    'automatically determined for given data in computation.']
parse_name: cv.LDA.LDA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::LDA namespace:cv classpath:LDA classname:LDA name:LDA
register (constructor) new in cv::LDA (cv_LDA_LDA__InputArray__InputArray_int)

--- Incoming ---
[   'cv.LDA.save',
    'void',
    ['/C'],
    [['const String&', 'filename', '', []]],
    None,
    'Serializes this object to a given filename.']
parse_name: cv.LDA.save with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::save namespace:cv classpath:LDA classname:LDA name:save
register (method) save in cv::LDA (cv_LDA_save_const_String)

--- Incoming ---
[   'cv.LDA.load',
    'void',
    [],
    [['const String&', 'filename', '', []]],
    None,
    'Deserializes this object from a given filename.']
parse_name: cv.LDA.load with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::load namespace:cv classpath:LDA classname:LDA name:load
register (method) load in cv::LDA (cv_LDA_load_String)

--- Incoming ---
[   'cv.LDA.save',
    'void',
    ['/C'],
    [['FileStorage&', 'fs', '', []]],
    None,
    'Serializes this object to a given cv::FileStorage.']
parse_name: cv.LDA.save with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::save namespace:cv classpath:LDA classname:LDA name:save
register (method) save in cv::LDA (cv_LDA_save_const_FileStorage)

--- Incoming ---
[   'cv.LDA.load',
    'void',
    [],
    [['const FileStorage&', 'node', '', []]],
    None,
    'Deserializes this object from a given cv::FileStorage.']
parse_name: cv.LDA.load with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::load namespace:cv classpath:LDA classname:LDA name:load
register (method) load in cv::LDA (cv_LDA_load_FileStorage)

--- Incoming ---
['cv.LDA.~LDA', '~', [], [], None, 'destructor']
parse_name: cv.LDA.~LDA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::~LDA namespace:cv classpath:LDA classname:LDA name:~LDA
ignore destructor (method) ~LDA in cv::LDA

--- Incoming ---
[   'cv.LDA.compute',
    'void',
    [],
    [['InputArrayOfArrays', 'src', '', []], ['InputArray', 'labels', '', []]],
    None,
    'Compute the discriminants for data in src (row aligned) and labels.']
parse_name: cv.LDA.compute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::compute namespace:cv classpath:LDA classname:LDA name:compute
register (method) compute in cv::LDA (cv_LDA_compute__InputArray__InputArray)

--- Incoming ---
[   'cv.LDA.project',
    'Mat',
    [],
    [['InputArray', 'src', '', []]],
    None,
    'Projects samples into the LDA subspace.\n'
    'src may be one or more row aligned samples.']
parse_name: cv.LDA.project with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::project namespace:cv classpath:LDA classname:LDA name:project
register (method) project in cv::LDA (cv_LDA_project__InputArray)

--- Incoming ---
[   'cv.LDA.reconstruct',
    'Mat',
    [],
    [['InputArray', 'src', '', []]],
    None,
    'Reconstructs projections from the LDA subspace.\n'
    'src may be one or more row aligned projections.']
parse_name: cv.LDA.reconstruct with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::reconstruct namespace:cv classpath:LDA classname:LDA name:reconstruct
register (method) reconstruct in cv::LDA (cv_LDA_reconstruct__InputArray)

--- Incoming ---
[   'cv.LDA.eigenvectors',
    'Mat',
    ['/C'],
    [],
    None,
    'Returns the eigenvectors of this LDA.']
parse_name: cv.LDA.eigenvectors with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::eigenvectors namespace:cv classpath:LDA classname:LDA name:eigenvectors
register (method) eigenvectors in cv::LDA (cv_LDA_eigenvectors_const)

--- Incoming ---
[   'cv.LDA.eigenvalues',
    'Mat',
    ['/C'],
    [],
    None,
    'Returns the eigenvalues of this LDA.']
parse_name: cv.LDA.eigenvalues with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::eigenvalues namespace:cv classpath:LDA classname:LDA name:eigenvalues
register (method) eigenvalues in cv::LDA (cv_LDA_eigenvalues_const)

--- Incoming ---
[   'cv.LDA.subspaceProject',
    'Mat',
    ['/S'],
    [   ['InputArray', 'W', '', []],
        ['InputArray', 'mean', '', []],
        ['InputArray', 'src', '', []]],
    None,
    '']
parse_name: cv.LDA.subspaceProject with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::subspaceProject namespace:cv classpath:LDA classname:LDA name:subspaceProject
register (method) subspaceProject in cv::LDA (cv_LDA_subspaceProject__InputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.LDA.subspaceReconstruct',
    'Mat',
    ['/S'],
    [   ['InputArray', 'W', '', []],
        ['InputArray', 'mean', '', []],
        ['InputArray', 'src', '', []]],
    None,
    '']
parse_name: cv.LDA.subspaceReconstruct with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::subspaceReconstruct namespace:cv classpath:LDA classname:LDA name:subspaceReconstruct
register (method) subspaceReconstruct in cv::LDA (cv_LDA_subspaceReconstruct__InputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.LDA.lda',
    'void',
    ['/H'],
    [['InputArrayOfArrays', 'src', '', []], ['InputArray', 'labels', '', []]],
    None,
    '']
parse_name: cv.LDA.lda with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::LDA::lda namespace:cv classpath:LDA classname:LDA name:lda

--- Incoming ---
[   'class cv.SVD',
    '',
    [],
    [],
    None,
    '@brief Singular Value Decomposition\n'
    '\n'
    'Class for computing Singular Value Decomposition of a floating-point\n'
    'matrix. The Singular Value Decomposition is used to solve least-square\n'
    'problems, under-determined linear systems, invert matrices, compute\n'
    'condition numbers, and so on.\n'
    '\n'
    'If you want to compute a condition number of a matrix or an absolute '
    'value of\n'
    'its determinant, you do not need `u` and `vt`. You can pass\n'
    'flags=SVD::NO_UV|... . Another flag SVD::FULL_UV indicates that full-size '
    'u\n'
    'and vt must be computed, which is not necessary most of the time.\n'
    '\n'
    '@sa invert, solve, eigen, determinant']
parse_name: class cv.SVD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD namespace:cv classpath: classname: name:SVD
register class cv::SVD (['class cv.SVD', '', [], [], None, '@brief Singular Value Decomposition\n\nClass for computing Singular Value Decomposition of a floating-point\nmatrix. The Singular Value Decomposition is used to solve least-square\nproblems, under-determined linear systems, invert matrices, compute\ncondition numbers, and so on.\n\nIf you want to compute a condition number of a matrix or an absolute value of\nits determinant, you do not need `u` and `vt`. You can pass\nflags=SVD::NO_UV|... . Another flag SVD::FULL_UV indicates that full-size u\nand vt must be computed, which is not necessary most of the time.\n\n@sa invert, solve, eigen, determinant']) [ignored]

--- Incoming ---
[   'enum cv.SVD.Flags',
    '',
    [],
    [   ['const cv.SVD.MODIFY_A', '1', [], [], None, ''],
        ['const cv.SVD.NO_UV', '2', [], [], None, ''],
        ['const cv.SVD.FULL_UV', '4', [], [], None, '']],
    None,
    '']
parse_name: const cv.SVD.MODIFY_A with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::MODIFY_A namespace:cv classpath:SVD classname:SVD name:MODIFY_A
parse_name: const cv.SVD.NO_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::NO_UV namespace:cv classpath:SVD classname:SVD name:NO_UV
parse_name: const cv.SVD.FULL_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::FULL_UV namespace:cv classpath:SVD classname:SVD name:FULL_UV
parse_name: enum cv.SVD.Flags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::Flags namespace:cv classpath:SVD classname:SVD name:Flags
parse_name: const cv.SVD.MODIFY_A with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::MODIFY_A namespace:cv classpath:SVD classname:SVD name:MODIFY_A
parse_name: const cv.SVD.NO_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::NO_UV namespace:cv classpath:SVD classname:SVD name:NO_UV
parse_name: const cv.SVD.FULL_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::FULL_UV namespace:cv classpath:SVD classname:SVD name:FULL_UV

--- Incoming ---
[   'cv.SVD.SVD',
    'S',
    [],
    [],
    None,
    '@brief the default constructor\n\ninitializes an empty SVD structure']
parse_name: cv.SVD.SVD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::SVD namespace:cv classpath:SVD classname:SVD name:SVD
Registering an unknown type: SVD
register (constructor) default in cv::SVD (ignored) (cv_SVD_SVD)

--- Incoming ---
[   'cv.SVD.SVD',
    'S',
    [],
    [['InputArray', 'src', '', []], ['int', 'flags', '0', []]],
    None,
    '@overload\n'
    'initializes an empty SVD structure and then calls SVD::operator()\n'
    '@param src decomposed matrix. The depth has to be CV_32F or CV_64F.\n'
    '@param flags operation flags (SVD::Flags)']
parse_name: cv.SVD.SVD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::SVD namespace:cv classpath:SVD classname:SVD name:SVD
register (constructor) new in cv::SVD (ignored) (cv_SVD_SVD__InputArray_int)

--- Incoming ---
[   'cv.SVD.operator ()',
    'SVD&',
    [],
    [['InputArray', 'src', '', []], ['int', 'flags', '0', []]],
    None,
    '@brief the operator that performs SVD. The previously allocated u, w and '
    'vt are released.\n'
    '\n'
    'The operator performs the singular value decomposition of the supplied\n'
    'matrix. The u,`vt` , and the vector of singular values w are stored in\n'
    'the structure. The same SVD structure can be reused many times with\n'
    'different matrices. Each time, if needed, the previous u,`vt` , and w\n'
    'are reclaimed and the new matrices are created, which is all handled by\n'
    'Mat::create.\n'
    '@param src decomposed matrix. The depth has to be CV_32F or CV_64F.\n'
    '@param flags operation flags (SVD::Flags)']
parse_name: cv.SVD.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::operator () namespace:cv classpath:SVD classname:SVD name:operator ()
Registering an unknown type: SVD
ignore (method) operator () in cv::SVD (ignored)

--- Incoming ---
[   'cv.SVD.compute',
    'void',
    ['/S'],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'w', '', []],
        ['OutputArray', 'u', '', []],
        ['OutputArray', 'vt', '', []],
        ['int', 'flags', '0', []]],
    None,
    '@brief decomposes matrix and stores the results to user-provided '
    'matrices\n'
    '\n'
    'The methods/functions perform SVD of matrix. Unlike SVD::SVD constructor\n'
    'and SVD::operator(), they store the results to the user-provided\n'
    'matrices:\n'
    '\n'
    '@code{.cpp}\n'
    'Mat A, w, u, vt;\n'
    'SVD::compute(A, w, u, vt);\n'
    '@endcode\n'
    '\n'
    '@param src decomposed matrix. The depth has to be CV_32F or CV_64F.\n'
    '@param w calculated singular values\n'
    '@param u calculated left singular vectors\n'
    '@param vt transposed matrix of right singular vectors\n'
    '@param flags operation flags - see SVD::Flags.']
parse_name: cv.SVD.compute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::compute namespace:cv classpath:SVD classname:SVD name:compute
register (method) compute in cv::SVD (ignored) (cv_SVD_compute__InputArray__OutputArray__OutputArray__OutputArray_int)

--- Incoming ---
[   'cv.SVD.compute',
    'void',
    ['/S'],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'w', '', []],
        ['int', 'flags', '0', []]],
    None,
    '@overload\n'
    'computes singular values of a matrix\n'
    '@param src decomposed matrix. The depth has to be CV_32F or CV_64F.\n'
    '@param w calculated singular values\n'
    '@param flags operation flags - see SVD::Flags.']
parse_name: cv.SVD.compute with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::compute namespace:cv classpath:SVD classname:SVD name:compute
register (method) compute in cv::SVD (ignored) (cv_SVD_compute__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.SVD.backSubst',
    'void',
    ['/S'],
    [   ['InputArray', 'w', '', []],
        ['InputArray', 'u', '', []],
        ['InputArray', 'vt', '', []],
        ['InputArray', 'rhs', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief performs back substitution']
parse_name: cv.SVD.backSubst with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::backSubst namespace:cv classpath:SVD classname:SVD name:backSubst
register (method) backSubst in cv::SVD (ignored) (cv_SVD_backSubst__InputArray__InputArray__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.SVD.solveZ',
    'void',
    ['/S'],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief solves an under-determined singular linear system\n'
    '\n'
    'The method finds a unit-length solution x of a singular linear system\n'
    'A\\*x = 0. Depending on the rank of A, there can be no solutions, a\n'
    'single solution or an infinite number of solutions. In general, the\n'
    'algorithm solves the following problem:\n'
    '\\f[dst =  \\arg \\min _{x:  \\| x \\| =1}  \\| src  \\cdot x  \\|\\f]\n'
    '@param src left-hand-side matrix.\n'
    '@param dst found solution.']
parse_name: cv.SVD.solveZ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::solveZ namespace:cv classpath:SVD classname:SVD name:solveZ
register (method) solveZ in cv::SVD (ignored) (cv_SVD_solveZ__InputArray__OutputArray)

--- Incoming ---
[   'cv.SVD.backSubst',
    'void',
    ['/C'],
    [['InputArray', 'rhs', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief performs a singular value back substitution.\n'
    '\n'
    'The method calculates a back substitution for the specified right-hand\n'
    'side:\n'
    '\n'
    '\\f[\\texttt{x} =  \\texttt{vt} ^T  \\cdot diag( \\texttt{w} )^{-1}  '
    '\\cdot \\texttt{u} ^T  \\cdot \\texttt{rhs} \\sim \\texttt{A} ^{-1}  '
    '\\cdot \\texttt{rhs}\\f]\n'
    '\n'
    'Using this technique you can either get a very accurate solution of the\n'
    'convenient linear system, or the best (in the least-squares terms)\n'
    'pseudo-solution of an overdetermined linear system.\n'
    '\n'
    "@param rhs right-hand side of a linear system (u\\*w\\*v')\\*dst = rhs "
    'to\n'
    'be solved, where A has been previously decomposed.\n'
    '\n'
    '@param dst found solution of the system.\n'
    '\n'
    '@note Explicit SVD with the further back substitution only makes sense\n'
    'if you need to solve many linear systems with the same left-hand side\n'
    '(for example, src ). If all you need is to solve a single system\n'
    '(possibly with multiple rhs immediately available), simply call solve\n'
    'add pass #DECOMP_SVD there. It does absolutely the same thing.']
parse_name: cv.SVD.backSubst with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::SVD::backSubst namespace:cv classpath:SVD classname:SVD name:backSubst
register (method) backSubst in cv::SVD (ignored) (cv_SVD_backSubst_const__InputArray__OutputArray)

--- Incoming ---
[   'class cv.RNG',
    '',
    [],
    [],
    None,
    '@brief Random Number Generator\n'
    '\n'
    'Random number generator. It encapsulates the state (currently, a 64-bit\n'
    'integer) and has methods to return scalar random values and to fill\n'
    'arrays with random values. Currently it supports uniform and Gaussian\n'
    '(normal) distributions. The generator uses Multiply-With-Carry\n'
    'algorithm, introduced by G. Marsaglia (\n'
    '<http://en.wikipedia.org/wiki/Multiply-with-carry> ).\n'
    'Gaussian-distribution random numbers are generated using the Ziggurat\n'
    'algorithm ( <http://en.wikipedia.org/wiki/Ziggurat_algorithm> ),\n'
    'introduced by G. Marsaglia and W. W. Tsang.']
parse_name: class cv.RNG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG namespace:cv classpath: classname: name:RNG
register class cv::RNG (['class cv.RNG', '', [], [], None, '@brief Random Number Generator\n\nRandom number generator. It encapsulates the state (currently, a 64-bit\ninteger) and has methods to return scalar random values and to fill\narrays with random values. Currently it supports uniform and Gaussian\n(normal) distributions. The generator uses Multiply-With-Carry\nalgorithm, introduced by G. Marsaglia (\n<http://en.wikipedia.org/wiki/Multiply-with-carry> ).\nGaussian-distribution random numbers are generated using the Ziggurat\nalgorithm ( <http://en.wikipedia.org/wiki/Ziggurat_algorithm> ),\nintroduced by G. Marsaglia and W. W. Tsang.']) [ignored]

--- Incoming ---
[   'enum cv.RNG.<unnamed>',
    '',
    [],
    [   ['const cv.RNG.UNIFORM', '0', [], [], None, ''],
        ['const cv.RNG.NORMAL', '1', [], [], None, '']],
    None,
    '']
parse_name: const cv.RNG.UNIFORM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::UNIFORM namespace:cv classpath:RNG classname:RNG name:UNIFORM
parse_name: const cv.RNG.NORMAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::NORMAL namespace:cv classpath:RNG classname:RNG name:NORMAL

--- Incoming ---
[   'cv.RNG.RNG',
    'R',
    [],
    [],
    None,
    '@brief constructor\n'
    '\n'
    'These are the RNG constructors. The first form sets the state to some\n'
    'pre-defined value, equal to 2\\*\\*32-1 in the current implementation. '
    'The\n'
    'second form sets the state to the specified value. If you passed state=0\n'
    ', the constructor uses the above default value instead to avoid the\n'
    'singular random number sequence, consisting of all zeros.']
parse_name: cv.RNG.RNG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::RNG namespace:cv classpath:RNG classname:RNG name:RNG
register (constructor) default in cv::RNG (ignored) (cv_RNG_RNG)

--- Incoming ---
[   'cv.RNG.RNG',
    'R',
    [],
    [['uint64', 'state', '', []]],
    None,
    '@overload\n@param state 64-bit value used to initialize the RNG.']
parse_name: cv.RNG.RNG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::RNG namespace:cv classpath:RNG classname:RNG name:RNG
register (constructor) new in cv::RNG (ignored) (cv_RNG_RNG_uint64)

--- Incoming ---
[   'cv.RNG.next',
    'unsigned',
    [],
    [],
    None,
    'The method updates the state using the MWC algorithm and returns the\n'
    'next 32-bit random number.']
parse_name: cv.RNG.next with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::next namespace:cv classpath:RNG classname:RNG name:next
register (method) next in cv::RNG (ignored) (cv_RNG_next)

--- Incoming ---
[   'cv.RNG.operator uchar',
    '',
    [],
    [],
    None,
    'Each of the methods updates the state using the MWC algorithm and\n'
    'returns the next random number of the specified type. In case of integer\n'
    'types, the returned number is from the available value range for the\n'
    'specified type. In case of floating-point types, the returned value is\n'
    'from [0,1) range.']
parse_name: cv.RNG.operator uchar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator uchar namespace:cv classpath:RNG classname:RNG name:operator uchar
register (convertor method) operator uchar in cv::RNG (ignored) (cv_RNG_operator_uchar)

--- Incoming ---
['cv.RNG.operator schar', '', [], [], None, '@overload']
parse_name: cv.RNG.operator schar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator schar namespace:cv classpath:RNG classname:RNG name:operator schar
register (convertor method) operator schar in cv::RNG (ignored) (cv_RNG_operator_schar)

--- Incoming ---
['cv.RNG.operator ushort', '', [], [], None, '@overload']
parse_name: cv.RNG.operator ushort with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator ushort namespace:cv classpath:RNG classname:RNG name:operator ushort
register (convertor method) operator ushort in cv::RNG (ignored) (cv_RNG_operator_ushort)

--- Incoming ---
['cv.RNG.operator short', '', [], [], None, '@overload']
parse_name: cv.RNG.operator short with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator short namespace:cv classpath:RNG classname:RNG name:operator short
register (convertor method) operator short in cv::RNG (ignored) (cv_RNG_operator_short)

--- Incoming ---
['cv.RNG.operator unsigned', '', [], [], None, '@overload']
parse_name: cv.RNG.operator unsigned with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator unsigned namespace:cv classpath:RNG classname:RNG name:operator unsigned
register (convertor method) operator unsigned in cv::RNG (ignored) (cv_RNG_operator_unsigned)

--- Incoming ---
['cv.RNG.operator int', '', [], [], None, '@overload']
parse_name: cv.RNG.operator int with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator int namespace:cv classpath:RNG classname:RNG name:operator int
register (convertor method) operator int in cv::RNG (ignored) (cv_RNG_operator_int)

--- Incoming ---
['cv.RNG.operator float', '', [], [], None, '@overload']
parse_name: cv.RNG.operator float with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator float namespace:cv classpath:RNG classname:RNG name:operator float
register (convertor method) operator float in cv::RNG (ignored) (cv_RNG_operator_float)

--- Incoming ---
['cv.RNG.operator double', '', [], [], None, '@overload']
parse_name: cv.RNG.operator double with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator double namespace:cv classpath:RNG classname:RNG name:operator double
register (convertor method) operator double in cv::RNG (ignored) (cv_RNG_operator_double)

--- Incoming ---
[   'cv.RNG.operator ()',
    'unsigned',
    [],
    [],
    None,
    '@brief returns a random integer sampled uniformly from [0, N).\n'
    '\n'
    'The methods transform the state using the MWC algorithm and return the\n'
    'next random number. The first form is equivalent to RNG::next . The\n'
    'second form returns the random number modulo N , which means that the\n'
    'result is in the range [0, N) .']
parse_name: cv.RNG.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator () namespace:cv classpath:RNG classname:RNG name:operator ()
ignore (method) operator () in cv::RNG (ignored)

--- Incoming ---
[   'cv.RNG.operator ()',
    'unsigned',
    [],
    [['unsigned', 'N', '', []]],
    None,
    '@overload\n'
    '@param N upper non-inclusive boundary of the returned random number.']
parse_name: cv.RNG.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator () namespace:cv classpath:RNG classname:RNG name:operator ()
ignore (method) operator () in cv::RNG (ignored)

--- Incoming ---
[   'cv.RNG.uniform',
    'int',
    [],
    [['int', 'a', '', []], ['int', 'b', '', []]],
    None,
    '@brief returns uniformly distributed integer random number from [a,b) '
    'range\n'
    '\n'
    'The methods transform the state using the MWC algorithm and return the\n'
    'next uniformly-distributed random number of the specified type, deduced\n'
    'from the input parameter type, from the range [a, b) . There is a nuance\n'
    'illustrated by the following sample:\n'
    '\n'
    '@code{.cpp}\n'
    'RNG rng;\n'
    '\n'
    '// always produces 0\n'
    'double a = rng.uniform(0, 1);\n'
    '\n'
    '// produces double from [0, 1)\n'
    'double a1 = rng.uniform((double)0, (double)1);\n'
    '\n'
    '// produces float from [0, 1)\n'
    'float b = rng.uniform(0.f, 1.f);\n'
    '\n'
    '// produces double from [0, 1)\n'
    'double c = rng.uniform(0., 1.);\n'
    '\n'
    '// may cause compiler error because of ambiguity:\n'
    '//  RNG::uniform(0, (int)0.999999)? or RNG::uniform((double)0, 0.99999)?\n'
    'double d = rng.uniform(0, 0.999999);\n'
    '@endcode\n'
    '\n'
    'The compiler does not take into account the type of the variable to\n'
    'which you assign the result of RNG::uniform . The only thing that\n'
    'matters to the compiler is the type of a and b parameters. So, if you\n'
    'want a floating-point random number, but the range boundaries are\n'
    'integer numbers, either put dots in the end, if they are constants, or\n'
    'use explicit type cast operators, as in the a1 initialization above.\n'
    '@param a lower inclusive boundary of the returned random number.\n'
    '@param b upper non-inclusive boundary of the returned random number.']
parse_name: cv.RNG.uniform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::uniform namespace:cv classpath:RNG classname:RNG name:uniform
register (method) uniform in cv::RNG (ignored) (cv_RNG_uniform_int_int)

--- Incoming ---
[   'cv.RNG.uniform',
    'float',
    [],
    [['float', 'a', '', []], ['float', 'b', '', []]],
    None,
    '@overload']
parse_name: cv.RNG.uniform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::uniform namespace:cv classpath:RNG classname:RNG name:uniform
register (method) uniform in cv::RNG (ignored) (cv_RNG_uniform_float_float)

--- Incoming ---
[   'cv.RNG.uniform',
    'double',
    [],
    [['double', 'a', '', []], ['double', 'b', '', []]],
    None,
    '@overload']
parse_name: cv.RNG.uniform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::uniform namespace:cv classpath:RNG classname:RNG name:uniform
register (method) uniform in cv::RNG (ignored) (cv_RNG_uniform_double_double)

--- Incoming ---
[   'cv.RNG.fill',
    'void',
    [],
    [   ['InputOutputArray', 'mat', '', []],
        ['int', 'distType', '', []],
        ['InputArray', 'a', '', []],
        ['InputArray', 'b', '', []],
        ['bool', 'saturateRange', 'false', []]],
    None,
    '@brief Fills arrays with random numbers.\n'
    '\n'
    '@param mat 2D or N-dimensional matrix; currently matrices with more than\n'
    '4 channels are not supported by the methods, use Mat::reshape as a\n'
    'possible workaround.\n'
    '@param distType distribution type, RNG::UNIFORM or RNG::NORMAL.\n'
    '@param a first distribution parameter; in case of the uniform\n'
    'distribution, this is an inclusive lower boundary, in case of the normal\n'
    'distribution, this is a mean value.\n'
    '@param b second distribution parameter; in case of the uniform\n'
    'distribution, this is a non-inclusive upper boundary, in case of the\n'
    'normal distribution, this is a standard deviation (diagonal of the\n'
    'standard deviation matrix or the full standard deviation matrix).\n'
    '@param saturateRange pre-saturation flag; for uniform distribution only;\n'
    'if true, the method will first convert a and b to the acceptable value\n'
    'range (according to the mat datatype) and then will generate uniformly\n'
    'distributed random numbers within the range [saturate(a), saturate(b)),\n'
    'if saturateRange=false, the method will generate uniformly distributed\n'
    'random numbers in the original range [a, b) and then will saturate them,\n'
    'it means, for example, that\n'
    '<tt>theRNG().fill(mat_8u, RNG::UNIFORM, -DBL_MAX, DBL_MAX)</tt> will '
    'likely\n'
    "produce array mostly filled with 0's and 255's, since the range (0, 255)\n"
    'is significantly smaller than [-DBL_MAX, DBL_MAX).\n'
    '\n'
    'Each of the methods fills the matrix with the random values from the\n'
    'specified distribution. As the new numbers are generated, the RNG state\n'
    'is updated accordingly. In case of multiple-channel images, every\n'
    'channel is filled independently, which means that RNG cannot generate\n'
    'samples from the multi-dimensional Gaussian distribution with\n'
    'non-diagonal covariance matrix directly. To do that, the method\n'
    'generates samples from multi-dimensional standard Gaussian distribution\n'
    'with zero mean and identity covariation matrix, and then transforms them\n'
    'using transform to get samples from the specified Gaussian distribution.']
parse_name: cv.RNG.fill with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::fill namespace:cv classpath:RNG classname:RNG name:fill
register (method) fill in cv::RNG (ignored) (cv_RNG_fill__InputOutputArray_int__InputArray__InputArray_bool)

--- Incoming ---
[   'cv.RNG.gaussian',
    'double',
    [],
    [['double', 'sigma', '', []]],
    None,
    '@brief Returns the next random number sampled from the Gaussian '
    'distribution\n'
    '@param sigma standard deviation of the distribution.\n'
    '\n'
    'The method transforms the state using the MWC algorithm and returns the\n'
    'next random number from the Gaussian distribution N(0,sigma) . That is,\n'
    'the mean value of the returned random numbers is zero and the standard\n'
    'deviation is the specified sigma .']
parse_name: cv.RNG.gaussian with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::gaussian namespace:cv classpath:RNG classname:RNG name:gaussian
register (method) gaussian in cv::RNG (ignored) (cv_RNG_gaussian_double)

--- Incoming ---
[   'cv.RNG.operator ==',
    'bool',
    ['/C'],
    [['const RNG&', 'other', '', []]],
    None,
    '']
parse_name: cv.RNG.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG::operator == namespace:cv classpath:RNG classname:RNG name:operator ==
Registering an unknown type: RNG
ignore (method) operator == in cv::RNG (ignored)

--- Incoming ---
[   'class cv.RNG_MT19937',
    '',
    [],
    [],
    None,
    '@brief Mersenne Twister random number generator\n'
    '\n'
    'Inspired by '
    'http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c\n'
    '@todo document']
parse_name: class cv.RNG_MT19937 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937 namespace:cv classpath: classname: name:RNG_MT19937
register class cv::RNG_MT19937 (['class cv.RNG_MT19937', '', [], [], None, '@brief Mersenne Twister random number generator\n\nInspired by http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c\n@todo document']) [ignored]

--- Incoming ---
['cv.RNG_MT19937.RNG_MT19937', 'R', [], [], None, '']
parse_name: cv.RNG_MT19937.RNG_MT19937 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::RNG_MT19937 namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:RNG_MT19937
Registering an unknown type: RNG_MT19937
register (constructor) default in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_RNG_MT19937)

--- Incoming ---
['cv.RNG_MT19937.RNG_MT19937', 'R', [], [['unsigned', 's', '', []]], None, '']
parse_name: cv.RNG_MT19937.RNG_MT19937 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::RNG_MT19937 namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:RNG_MT19937
register (constructor) new in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_RNG_MT19937_unsigned)

--- Incoming ---
['cv.RNG_MT19937.seed', 'void', [], [['unsigned', 's', '', []]], None, '']
parse_name: cv.RNG_MT19937.seed with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::seed namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:seed
register (method) seed in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_seed_unsigned)

--- Incoming ---
['cv.RNG_MT19937.next', 'unsigned', [], [], None, '']
parse_name: cv.RNG_MT19937.next with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::next namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:next
register (method) next in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_next)

--- Incoming ---
['cv.RNG_MT19937.operator int', '', [], [], None, '']
parse_name: cv.RNG_MT19937.operator int with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::operator int namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:operator int
register (convertor method) operator int in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_operator_int)

--- Incoming ---
['cv.RNG_MT19937.operator unsigned', '', [], [], None, '']
parse_name: cv.RNG_MT19937.operator unsigned with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::operator unsigned namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:operator unsigned
register (convertor method) operator unsigned in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_operator_unsigned)

--- Incoming ---
['cv.RNG_MT19937.operator float', '', [], [], None, '']
parse_name: cv.RNG_MT19937.operator float with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::operator float namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:operator float
register (convertor method) operator float in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_operator_float)

--- Incoming ---
['cv.RNG_MT19937.operator double', '', [], [], None, '']
parse_name: cv.RNG_MT19937.operator double with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::operator double namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:operator double
register (convertor method) operator double in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_operator_double)

--- Incoming ---
[   'cv.RNG_MT19937.operator ()',
    'unsigned',
    [],
    [['unsigned', 'N', '', []]],
    None,
    '']
parse_name: cv.RNG_MT19937.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::operator () namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:operator ()
ignore (method) operator () in cv::RNG_MT19937 (ignored)

--- Incoming ---
['cv.RNG_MT19937.operator ()', 'unsigned', [], [], None, '']
parse_name: cv.RNG_MT19937.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::operator () namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:operator ()
ignore (method) operator () in cv::RNG_MT19937 (ignored)

--- Incoming ---
[   'cv.RNG_MT19937.uniform',
    'int',
    [],
    [['int', 'a', '', []], ['int', 'b', '', []]],
    None,
    '@brief returns uniformly distributed integer random number from [a,b) '
    'range']
parse_name: cv.RNG_MT19937.uniform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::uniform namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:uniform
register (method) uniform in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_uniform_int_int)

--- Incoming ---
[   'cv.RNG_MT19937.uniform',
    'float',
    [],
    [['float', 'a', '', []], ['float', 'b', '', []]],
    None,
    '@brief returns uniformly distributed floating-point random number from '
    '[a,b) range']
parse_name: cv.RNG_MT19937.uniform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::uniform namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:uniform
register (method) uniform in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_uniform_float_float)

--- Incoming ---
[   'cv.RNG_MT19937.uniform',
    'double',
    [],
    [['double', 'a', '', []], ['double', 'b', '', []]],
    None,
    '@brief returns uniformly distributed double-precision floating-point '
    'random number from [a,b) range']
parse_name: cv.RNG_MT19937.uniform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::RNG_MT19937::uniform namespace:cv classpath:RNG_MT19937 classname:RNG_MT19937 name:uniform
register (method) uniform in cv::RNG_MT19937 (ignored) (cv_RNG_MT19937_uniform_double_double)

--- Incoming ---
[   'cv.kmeans',
    'double',
    [],
    [   ['InputArray', 'data', '', []],
        ['int', 'K', '', []],
        ['InputOutputArray', 'bestLabels', '', []],
        ['TermCriteria', 'criteria', '', []],
        ['int', 'attempts', '', []],
        ['int', 'flags', '', []],
        ['OutputArray', 'centers', 'noArray()', []]],
    None,
    '@brief Finds centers of clusters and groups input samples around the '
    'clusters.\n'
    '\n'
    'The function kmeans implements a k-means algorithm that finds the centers '
    'of cluster_count clusters\n'
    'and groups the input samples around the clusters. As an output, '
    '\\f$\\texttt{bestLabels}_i\\f$ contains a\n'
    '0-based cluster index for the sample stored in the \\f$i^{th}\\f$ row of '
    'the samples matrix.\n'
    '\n'
    '@note\n'
    '-   (Python) An example on K-means clustering can be found at\n'
    'opencv_source_code/samples/python/kmeans.py\n'
    '@param data Data for clustering. An array of N-Dimensional points with '
    'float coordinates is needed.\n'
    'Examples of this array can be:\n'
    '-   Mat points(count, 2, CV_32F);\n'
    '-   Mat points(count, 1, CV_32FC2);\n'
    '-   Mat points(1, count, CV_32FC2);\n'
    '-   std::vector\\<cv::Point2f\\> points(sampleCount);\n'
    '@param K Number of clusters to split the set by.\n'
    '@param bestLabels Input/output integer array that stores the cluster '
    'indices for every sample.\n'
    '@param criteria The algorithm termination criteria, that is, the maximum '
    'number of iterations and/or\n'
    'the desired accuracy. The accuracy is specified as criteria.epsilon. As '
    'soon as each of the cluster\n'
    'centers moves by less than criteria.epsilon on some iteration, the '
    'algorithm stops.\n'
    '@param attempts Flag to specify the number of times the algorithm is '
    'executed using different\n'
    'initial labellings. The algorithm returns the labels that yield the best '
    'compactness (see the last\n'
    'function parameter).\n'
    '@param flags Flag that can take values of cv::KmeansFlags\n'
    '@param centers Output matrix of the cluster centers, one row per each '
    'cluster center.\n'
    '@return The function returns the compactness measure that is computed as\n'
    '\\f[\\sum _i  \\| \\texttt{samples} _i -  \\texttt{centers} _{ '
    '\\texttt{labels} _i} \\| ^2\\f]\n'
    'after every attempt. The best (minimum) value is chosen and the '
    'corresponding labels and the\n'
    'compactness value are returned by the function. Basically, you can use '
    'only the core of the\n'
    'function, set the number of attempts to 1, initialize labels each time '
    'using a custom algorithm,\n'
    'pass them with the ( flags = #KMEANS_USE_INITIAL_LABELS ) flag, and then '
    'choose the best\n'
    '(most-compact) clustering.']
parse_name: cv.kmeans with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::kmeans namespace:cv classpath: classname: name:kmeans
register (function) kmeans (cv_kmeans__InputArray_int__InputOutputArray_TermCriteria_int_int__OutputArray)

--- Incoming ---
['class cv.Formatted', '', [], [], None, '@todo document']
parse_name: class cv.Formatted with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatted namespace:cv classpath: classname: name:Formatted
register class cv::Formatted (['class cv.Formatted', '', [], [], None, '@todo document'])

--- Incoming ---
['cv.Formatted.next', 'const char*', ['/A'], [], None, '']
parse_name: cv.Formatted.next with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatted::next namespace:cv classpath:Formatted classname:Formatted name:next
register (method) next in cv::Formatted (trait) (cv_Formatted_next)

--- Incoming ---
['cv.Formatted.reset', 'void', ['/A'], [], None, '']
parse_name: cv.Formatted.reset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatted::reset namespace:cv classpath:Formatted classname:Formatted name:reset
register (method) reset in cv::Formatted (trait) (cv_Formatted_reset)

--- Incoming ---
['cv.Formatted.~Formatted', '~', [], [], None, '']
parse_name: cv.Formatted.~Formatted with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatted::~Formatted namespace:cv classpath:Formatted classname:Formatted name:~Formatted
ignore destructor (method) ~Formatted in cv::Formatted (trait)

--- Incoming ---
['class cv.Formatter', '', [], [], None, '@todo document']
parse_name: class cv.Formatter with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter namespace:cv classpath: classname: name:Formatter
register class cv::Formatter (['class cv.Formatter', '', [], [], None, '@todo document'])

--- Incoming ---
[   'enum cv.Formatter.FormatType',
    '',
    [],
    [   ['const cv.Formatter.FMT_DEFAULT', '0', [], [], None, ''],
        ['const cv.Formatter.FMT_MATLAB', '1', [], [], None, ''],
        ['const cv.Formatter.FMT_CSV', '2', [], [], None, ''],
        ['const cv.Formatter.FMT_PYTHON', '3', [], [], None, ''],
        ['const cv.Formatter.FMT_NUMPY', '4', [], [], None, ''],
        ['const cv.Formatter.FMT_C', '5', [], [], None, '']],
    None,
    '']
parse_name: const cv.Formatter.FMT_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_DEFAULT namespace:cv classpath:Formatter classname:Formatter name:FMT_DEFAULT
parse_name: const cv.Formatter.FMT_MATLAB with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_MATLAB namespace:cv classpath:Formatter classname:Formatter name:FMT_MATLAB
parse_name: const cv.Formatter.FMT_CSV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_CSV namespace:cv classpath:Formatter classname:Formatter name:FMT_CSV
parse_name: const cv.Formatter.FMT_PYTHON with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_PYTHON namespace:cv classpath:Formatter classname:Formatter name:FMT_PYTHON
parse_name: const cv.Formatter.FMT_NUMPY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_NUMPY namespace:cv classpath:Formatter classname:Formatter name:FMT_NUMPY
parse_name: const cv.Formatter.FMT_C with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_C namespace:cv classpath:Formatter classname:Formatter name:FMT_C
parse_name: enum cv.Formatter.FormatType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FormatType namespace:cv classpath:Formatter classname:Formatter name:FormatType
parse_name: const cv.Formatter.FMT_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_DEFAULT namespace:cv classpath:Formatter classname:Formatter name:FMT_DEFAULT
parse_name: const cv.Formatter.FMT_MATLAB with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_MATLAB namespace:cv classpath:Formatter classname:Formatter name:FMT_MATLAB
parse_name: const cv.Formatter.FMT_CSV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_CSV namespace:cv classpath:Formatter classname:Formatter name:FMT_CSV
parse_name: const cv.Formatter.FMT_PYTHON with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_PYTHON namespace:cv classpath:Formatter classname:Formatter name:FMT_PYTHON
parse_name: const cv.Formatter.FMT_NUMPY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_NUMPY namespace:cv classpath:Formatter classname:Formatter name:FMT_NUMPY
parse_name: const cv.Formatter.FMT_C with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::FMT_C namespace:cv classpath:Formatter classname:Formatter name:FMT_C

--- Incoming ---
['cv.Formatter.~Formatter', '~', [], [], None, '']
parse_name: cv.Formatter.~Formatter with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::~Formatter namespace:cv classpath:Formatter classname:Formatter name:~Formatter
ignore destructor (method) ~Formatter in cv::Formatter

--- Incoming ---
[   'cv.Formatter.format',
    'Ptr<Formatted>',
    ['/A', '/C'],
    [['const Mat&', 'mtx', '', []]],
    None,
    '']
parse_name: cv.Formatter.format with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::format namespace:cv classpath:Formatter classname:Formatter name:format
register (method) format in cv::Formatter (trait) (cv_Formatter_format_const_Mat)

--- Incoming ---
[   'cv.Formatter.set16fPrecision',
    'void',
    ['/A'],
    [['int', 'p', '4', []]],
    None,
    '']
parse_name: cv.Formatter.set16fPrecision with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::set16fPrecision namespace:cv classpath:Formatter classname:Formatter name:set16fPrecision
register (method) set16fPrecision in cv::Formatter (trait) (cv_Formatter_set16fPrecision_int)

--- Incoming ---
[   'cv.Formatter.set32fPrecision',
    'void',
    ['/A'],
    [['int', 'p', '8', []]],
    None,
    '']
parse_name: cv.Formatter.set32fPrecision with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::set32fPrecision namespace:cv classpath:Formatter classname:Formatter name:set32fPrecision
register (method) set32fPrecision in cv::Formatter (trait) (cv_Formatter_set32fPrecision_int)

--- Incoming ---
[   'cv.Formatter.set64fPrecision',
    'void',
    ['/A'],
    [['int', 'p', '16', []]],
    None,
    '']
parse_name: cv.Formatter.set64fPrecision with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::set64fPrecision namespace:cv classpath:Formatter classname:Formatter name:set64fPrecision
register (method) set64fPrecision in cv::Formatter (trait) (cv_Formatter_set64fPrecision_int)

--- Incoming ---
[   'cv.Formatter.setMultiline',
    'void',
    ['/A'],
    [['bool', 'ml', 'true', []]],
    None,
    '']
parse_name: cv.Formatter.setMultiline with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::setMultiline namespace:cv classpath:Formatter classname:Formatter name:setMultiline
register (method) setMultiline in cv::Formatter (trait) (cv_Formatter_setMultiline_bool)

--- Incoming ---
[   'cv.Formatter.get',
    'Ptr<Formatter>',
    ['/S'],
    [['Formatter::FormatType', 'fmt', 'FMT_DEFAULT', []]],
    None,
    '']
parse_name: cv.Formatter.get with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Formatter::get namespace:cv classpath:Formatter classname:Formatter name:get
register (method) get in cv::Formatter (trait) (cv_Formatter_get_Formatter_FormatType)

--- Incoming ---
[   'cv.operator <<',
    'String&',
    [],
    [['String&', 'out', '', []], ['Ptr<Formatted>', 'fmtd', '', []]],
    None,
    '']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
ignore (function) operator << in None

--- Incoming ---
[   'cv.operator <<',
    'String&',
    [],
    [['String&', 'out', '', []], ['const Mat&', 'mtx', '', []]],
    None,
    '']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
ignore (function) operator << in None

--- Incoming ---
[   'class cv.Algorithm',
    '',
    [],
    [],
    None,
    '@brief This is a base class for all more or less complex algorithms in '
    'OpenCV\n'
    '\n'
    'especially for classes of algorithms, for which there can be multiple '
    'implementations. The examples\n'
    'are stereo correspondence (for which there are algorithms like block '
    'matching, semi-global block\n'
    'matching, graph-cut etc.), background subtraction (which can be done '
    'using mixture-of-gaussians\n'
    'models, codebook-based algorithm etc.), optical flow (block matching, '
    'Lucas-Kanade, Horn-Schunck\n'
    'etc.).\n'
    '\n'
    'Here is example of SimpleBlobDetector use in your application via '
    'Algorithm interface:\n'
    '@snippet snippets/core_various.cpp Algorithm']
parse_name: class cv.Algorithm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (['class cv.Algorithm', '', [], [], None, '@brief This is a base class for all more or less complex algorithms in OpenCV\n\nespecially for classes of algorithms, for which there can be multiple implementations. The examples\nare stereo correspondence (for which there are algorithms like block matching, semi-global block\nmatching, graph-cut etc.), background subtraction (which can be done using mixture-of-gaussians\nmodels, codebook-based algorithm etc.), optical flow (block matching, Lucas-Kanade, Horn-Schunck\netc.).\n\nHere is example of SimpleBlobDetector use in your application via Algorithm interface:\n@snippet snippets/core_various.cpp Algorithm'])

--- Incoming ---
['cv.Algorithm', 'A', [], [], None, '']
parse_name: cv.Algorithm.Algorithm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::Algorithm namespace:cv classpath:Algorithm classname:Algorithm name:Algorithm
register (constructor) default in cv::Algorithm (trait) (cv_Algorithm_Algorithm)

--- Incoming ---
['cv.Algorithm.~Algorithm', '~', [], [], None, '']
parse_name: cv.Algorithm.~Algorithm with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::~Algorithm namespace:cv classpath:Algorithm classname:Algorithm name:~Algorithm
ignore destructor (method) ~Algorithm in cv::Algorithm (trait)

--- Incoming ---
[   'cv.Algorithm.clear',
    'void',
    [],
    [],
    None,
    '@brief Clears the algorithm state']
parse_name: cv.Algorithm.clear with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::clear namespace:cv classpath:Algorithm classname:Algorithm name:clear
register (method) clear in cv::Algorithm (trait) (cv_Algorithm_clear)

--- Incoming ---
[   'cv.Algorithm.write',
    'void',
    ['/C'],
    [['FileStorage&', 'fs', '', []]],
    None,
    '@brief Stores algorithm parameters in a file storage']
parse_name: cv.Algorithm.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::write namespace:cv classpath:Algorithm classname:Algorithm name:write
register (method) write in cv::Algorithm (trait) (cv_Algorithm_write_const_FileStorage)

--- Incoming ---
[   'cv.Algorithm.write',
    'void',
    ['/C'],
    [   ['const Ptr<FileStorage>&', 'fs', '', []],
        ['const String&', 'name', 'String()', []]],
    None,
    '@brief simplified API for language bindings\n* @overload']
parse_name: cv.Algorithm.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::write namespace:cv classpath:Algorithm classname:Algorithm name:write
register (method) write in cv::Algorithm (trait) (cv_Algorithm_write_const_PtrOfFileStorage_String)

--- Incoming ---
[   'cv.Algorithm.read',
    'void',
    [],
    [['const FileNode&', 'fn', '', []]],
    None,
    '@brief Reads algorithm parameters from a file storage']
parse_name: cv.Algorithm.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::read namespace:cv classpath:Algorithm classname:Algorithm name:read
register (method) read in cv::Algorithm (trait) (cv_Algorithm_read_FileNode)

--- Incoming ---
[   'cv.Algorithm.empty',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Returns true if the Algorithm is empty (e.g. in the very beginning '
    'or after unsuccessful read']
parse_name: cv.Algorithm.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::empty namespace:cv classpath:Algorithm classname:Algorithm name:empty
register (method) empty in cv::Algorithm (trait) (cv_Algorithm_empty_const)

--- Incoming ---
[   'cv.Algorithm.Ptr < _Tp > read',
    'template<typename _Tp> static Ptr<_Tp>',
    [],
    [['const FileNode&', 'fn', '', []]],
    None,
    '@brief Reads algorithm from the file node\n'
    '\n'
    "This is static template method of Algorithm. It's usage is following (in "
    'the case of SVM):\n'
    '@code\n'
    'cv::FileStorage fsRead("example.xml", FileStorage::READ);\n'
    'Ptr<SVM> svm = Algorithm::read<SVM>(fsRead.root());\n'
    '@endcode\n'
    'In order to make this method work, the derived class must overwrite '
    'Algorithm::read(const\n'
    'FileNode& fn) and also have static create() method without parameters\n'
    '(or with all the optional parameters)']
parse_name: cv.Algorithm.Ptr < _Tp > read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::Ptr < _Tp > read namespace:cv classpath:Algorithm classname:Algorithm name:Ptr < _Tp > read
Registering an unknown type: template<typename _Tp> static Ptr<_Tp>
register (method) Ptr < _Tp > read in cv::Algorithm (trait) (cv_Algorithm_Ptr_<__Tp_>_read_FileNode)

--- Incoming ---
[   'cv.Algorithm.Ptr < _Tp > load',
    'template<typename _Tp> static Ptr<_Tp>',
    [],
    [   ['const String&', 'filename', '', []],
        ['const String&', 'objname', 'String()', []]],
    None,
    '@brief Loads algorithm from the file\n'
    '\n'
    '@param filename Name of the file to read.\n'
    '@param objname The optional name of the node to read (if empty, the first '
    'top-level node will be used)\n'
    '\n'
    "This is static template method of Algorithm. It's usage is following (in "
    'the case of SVM):\n'
    '@code\n'
    'Ptr<SVM> svm = Algorithm::load<SVM>("my_svm_model.xml");\n'
    '@endcode\n'
    'In order to make this method work, the derived class must overwrite '
    'Algorithm::read(const\n'
    'FileNode& fn).']
parse_name: cv.Algorithm.Ptr < _Tp > load with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::Ptr < _Tp > load namespace:cv classpath:Algorithm classname:Algorithm name:Ptr < _Tp > load
register (method) Ptr < _Tp > load in cv::Algorithm (trait) (cv_Algorithm_Ptr_<__Tp_>_load_String_String)

--- Incoming ---
[   'cv.Algorithm.Ptr < _Tp > loadFromString',
    'template<typename _Tp> static Ptr<_Tp>',
    [],
    [   ['const String&', 'strModel', '', []],
        ['const String&', 'objname', 'String()', []]],
    None,
    '@brief Loads algorithm from a String\n'
    '\n'
    '@param strModel The string variable containing the model you want to '
    'load.\n'
    '@param objname The optional name of the node to read (if empty, the first '
    'top-level node will be used)\n'
    '\n'
    "This is static template method of Algorithm. It's usage is following (in "
    'the case of SVM):\n'
    '@code\n'
    'Ptr<SVM> svm = Algorithm::loadFromString<SVM>(myStringModel);\n'
    '@endcode']
parse_name: cv.Algorithm.Ptr < _Tp > loadFromString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::Ptr < _Tp > loadFromString namespace:cv classpath:Algorithm classname:Algorithm name:Ptr < _Tp > loadFromString
register (method) Ptr < _Tp > loadFromString in cv::Algorithm (trait) (cv_Algorithm_Ptr_<__Tp_>_loadFromString_String_String)

--- Incoming ---
[   'cv.Algorithm.save',
    'void',
    ['/C'],
    [['const String&', 'filename', '', []]],
    None,
    'Saves the algorithm to a file.\n'
    'In order to make this method work, the derived class must implement '
    'Algorithm::write(FileStorage& fs).']
parse_name: cv.Algorithm.save with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::save namespace:cv classpath:Algorithm classname:Algorithm name:save
register (method) save in cv::Algorithm (trait) (cv_Algorithm_save_const_String)

--- Incoming ---
[   'cv.Algorithm.getDefaultName',
    'String',
    ['/C'],
    [],
    None,
    'Returns the algorithm string identifier.\n'
    'This string is used as top level xml/yml node tag when the object is '
    'saved to a file or string.']
parse_name: cv.Algorithm.getDefaultName with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::getDefaultName namespace:cv classpath:Algorithm classname:Algorithm name:getDefaultName
register (method) getDefaultName in cv::Algorithm (trait) (cv_Algorithm_getDefaultName_const)

--- Incoming ---
[   'cv.Algorithm.writeFormat',
    'void',
    ['/C', '/H'],
    [['FileStorage&', 'fs', '', []]],
    None,
    '']
parse_name: cv.Algorithm.writeFormat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Algorithm::writeFormat namespace:cv classpath:Algorithm classname:Algorithm name:writeFormat

--- Incoming ---
[   'enum struct cv.Param',
    '',
    [],
    [   ['const cv.Param.INT', '0', [], [], None, ''],
        ['const cv.Param.BOOLEAN', '1', [], [], None, ''],
        ['const cv.Param.REAL', '2', [], [], None, ''],
        ['const cv.Param.STRING', '3', [], [], None, ''],
        ['const cv.Param.MAT', '4', [], [], None, ''],
        ['const cv.Param.MAT_VECTOR', '5', [], [], None, ''],
        ['const cv.Param.ALGORITHM', '6', [], [], None, ''],
        ['const cv.Param.FLOAT', '7', [], [], None, ''],
        ['const cv.Param.UNSIGNED_INT', '8', [], [], None, ''],
        ['const cv.Param.UINT64', '9', [], [], None, ''],
        ['const cv.Param.UCHAR', '11', [], [], None, ''],
        ['const cv.Param.SCALAR', '12', [], [], None, '']],
    None,
    '']
parse_name: const cv.Param.INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::INT namespace:cv classpath:Param classname:Param name:INT
parse_name: const cv.Param.BOOLEAN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::BOOLEAN namespace:cv classpath:Param classname:Param name:BOOLEAN
parse_name: const cv.Param.REAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::REAL namespace:cv classpath:Param classname:Param name:REAL
parse_name: const cv.Param.STRING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::STRING namespace:cv classpath:Param classname:Param name:STRING
parse_name: const cv.Param.MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::MAT namespace:cv classpath:Param classname:Param name:MAT
parse_name: const cv.Param.MAT_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::MAT_VECTOR namespace:cv classpath:Param classname:Param name:MAT_VECTOR
parse_name: const cv.Param.ALGORITHM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::ALGORITHM namespace:cv classpath:Param classname:Param name:ALGORITHM
parse_name: const cv.Param.FLOAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::FLOAT namespace:cv classpath:Param classname:Param name:FLOAT
parse_name: const cv.Param.UNSIGNED_INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::UNSIGNED_INT namespace:cv classpath:Param classname:Param name:UNSIGNED_INT
parse_name: const cv.Param.UINT64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::UINT64 namespace:cv classpath:Param classname:Param name:UINT64
parse_name: const cv.Param.UCHAR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::UCHAR namespace:cv classpath:Param classname:Param name:UCHAR
parse_name: const cv.Param.SCALAR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::SCALAR namespace:cv classpath:Param classname:Param name:SCALAR
parse_name: enum struct cv.Param with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param namespace:cv classpath: classname: name:Param
parse_name: const cv.Param.INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::INT namespace:cv classpath:Param classname:Param name:INT
parse_name: const cv.Param.BOOLEAN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::BOOLEAN namespace:cv classpath:Param classname:Param name:BOOLEAN
parse_name: const cv.Param.REAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::REAL namespace:cv classpath:Param classname:Param name:REAL
parse_name: const cv.Param.STRING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::STRING namespace:cv classpath:Param classname:Param name:STRING
parse_name: const cv.Param.MAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::MAT namespace:cv classpath:Param classname:Param name:MAT
parse_name: const cv.Param.MAT_VECTOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::MAT_VECTOR namespace:cv classpath:Param classname:Param name:MAT_VECTOR
parse_name: const cv.Param.ALGORITHM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::ALGORITHM namespace:cv classpath:Param classname:Param name:ALGORITHM
parse_name: const cv.Param.FLOAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::FLOAT namespace:cv classpath:Param classname:Param name:FLOAT
parse_name: const cv.Param.UNSIGNED_INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::UNSIGNED_INT namespace:cv classpath:Param classname:Param name:UNSIGNED_INT
parse_name: const cv.Param.UINT64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::UINT64 namespace:cv classpath:Param classname:Param name:UINT64
parse_name: const cv.Param.UCHAR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::UCHAR namespace:cv classpath:Param classname:Param name:UCHAR
parse_name: const cv.Param.SCALAR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Param::SCALAR namespace:cv classpath:Param classname:Param name:SCALAR


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/affine.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['typedef cv.Affine3f', 'Affine3<float>', '', [], None, '']
parse_name: typedef cv.Affine3f with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3f namespace:cv classpath: classname: name:Affine3f
Registering an unknown type: Affine3<float>

--- Incoming ---
['typedef cv.Affine3d', 'Affine3<double>', '', [], None, '']
parse_name: typedef cv.Affine3d with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3d namespace:cv classpath: classname: name:Affine3d
Registering an unknown type: Affine3<double>

--- Incoming ---
[   'cv.Vec3f operator *',
    'Vec3f operator*',
    ['/S'],
    [['const Affine3f&', 'affine', '', []], ['const Vec3f&', 'vector', '', []]],
    None,
    '']
parse_name: cv.Vec3f operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3f operator * namespace:cv classpath: classname: name:Vec3f operator *
Registering an unknown type: Vec3f operator
Registering an unknown type: Affine3f
register (function) Vec3f operator * (cv_Vec3f_operator_*_Affine3f_Vec3f)

--- Incoming ---
[   'cv.Vec3d operator *',
    'Vec3d operator*',
    ['/S'],
    [['const Affine3d&', 'affine', '', []], ['const Vec3d&', 'vector', '', []]],
    None,
    '']
parse_name: cv.Vec3d operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Vec3d operator * namespace:cv classpath: classname: name:Vec3d operator *
Registering an unknown type: Vec3d operator
Registering an unknown type: Affine3d
register (function) Vec3d operator * (cv_Vec3d_operator_*_Affine3d_Vec3d)

--- Incoming ---
['.Affine3', 'template<typename T>', [], [], None, '@cond IGNORED']
parse_name: .Affine3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::Affine3 namespace: classpath: classname: name:Affine3
Registering an unknown type: template<typename T>
register (function) Affine3 (_Affine3)

--- Incoming ---
[   '.Affine3',
    'template<typename T>',
    [],
    [['const Mat4&', 'affine', '', []]],
    None,
    '']
parse_name: .Affine3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::Affine3 namespace: classpath: classname: name:Affine3
Registering an unknown type: Mat4
register (function) Affine3 (_Affine3_Mat4)

--- Incoming ---
[   '.Affine3',
    'template<typename T>',
    [],
    [['const Mat3&', 'R', '', []], ['const Vec3&', 't', '', []]],
    None,
    '']
parse_name: .Affine3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::Affine3 namespace: classpath: classname: name:Affine3
Registering an unknown type: Mat3
Registering an unknown type: Vec3
register (function) Affine3 (_Affine3_Mat3_Vec3)

--- Incoming ---
[   '.Affine3',
    'template<typename T>',
    [],
    [['const Vec3&', '_rvec', '', []], ['const Vec3&', 't', '', []]],
    None,
    '']
parse_name: .Affine3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::Affine3 namespace: classpath: classname: name:Affine3
register (function) Affine3 (_Affine3_Vec3_Vec3)

--- Incoming ---
[   '.Affine3',
    'template<typename T>',
    [],
    [['const cv::Mat&', 'data', '', []], ['const Vec3&', 't', '', []]],
    None,
    '']
parse_name: .Affine3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::Affine3 namespace: classpath: classname: name:Affine3
register (function) Affine3 (_Affine3_Mat_Vec3)

--- Incoming ---
[   '.Affine3',
    'template<typename T>',
    [],
    [['const float_type*', 'vals', '', []]],
    None,
    '']
parse_name: .Affine3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::Affine3 namespace: classpath: classname: name:Affine3
Registering an unknown type: float_type
register (function) Affine3 (_Affine3_float_type*)

--- Incoming ---
[   'cv.Affine3 < T > .Identity',
    'template<typename T> cv::Affine3<T>',
    [],
    [],
    None,
    '']
parse_name: cv.Affine3 < T > .Identity with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::Identity namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:Identity
Registering an unknown type: template<typename T> cv::Affine3<T>

--- Incoming ---
[   'cv.Affine3 < T > .rotation',
    'template<typename T> void',
    [],
    [['const Mat3&', 'R', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .rotation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::rotation namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:rotation
Registering an unknown type: template<typename T> void

--- Incoming ---
[   'cv.Affine3 < T > .rotation',
    'template<typename T> void',
    [],
    [['const Vec3&', '_rvec', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .rotation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::rotation namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:rotation

--- Incoming ---
[   'cv.Affine3 < T > .rotation',
    'template<typename T> void',
    [],
    [['const cv::Mat&', 'data', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .rotation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::rotation namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:rotation

--- Incoming ---
[   'cv.Affine3 < T > .linear',
    'template<typename T> void',
    [],
    [['const Mat3&', 'L', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .linear with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::linear namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:linear

--- Incoming ---
[   'cv.Affine3 < T > .translation',
    'template<typename T> void',
    [],
    [['const Vec3&', 't', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .translation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::translation namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:translation

--- Incoming ---
[   'cv.Affine3 < T > .Mat3 cv.Affine3 < T > .rotation',
    'template<typename T> typename cv::Affine3<T>::Mat3',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Affine3 < T > .Mat3 cv.Affine3 < T > .rotation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::Mat3 cv::Affine3 < T > ::rotation namespace:cv classpath:Affine3 < T > ::Mat3 cv::Affine3 < T >  classname:Affine3 < T >  name:rotation
Registering an unknown type: template<typename T> typename cv::Affine3<T>::Mat3

--- Incoming ---
[   'cv.Affine3 < T > .Mat3 cv.Affine3 < T > .linear',
    'template<typename T> typename cv::Affine3<T>::Mat3',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Affine3 < T > .Mat3 cv.Affine3 < T > .linear with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::Mat3 cv::Affine3 < T > ::linear namespace:cv classpath:Affine3 < T > ::Mat3 cv::Affine3 < T >  classname:Affine3 < T >  name:linear

--- Incoming ---
[   'cv.Affine3 < T > .Vec3 cv.Affine3 < T > .translation',
    'template<typename T> typename cv::Affine3<T>::Vec3',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Affine3 < T > .Vec3 cv.Affine3 < T > .translation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::Vec3 cv::Affine3 < T > ::translation namespace:cv classpath:Affine3 < T > ::Vec3 cv::Affine3 < T >  classname:Affine3 < T >  name:translation
Registering an unknown type: template<typename T> typename cv::Affine3<T>::Vec3

--- Incoming ---
[   'cv.Affine3 < T > .Vec3 cv.Affine3 < T > .rvec',
    'template<typename T> typename cv::Affine3<T>::Vec3',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Affine3 < T > .Vec3 cv.Affine3 < T > .rvec with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::Vec3 cv::Affine3 < T > ::rvec namespace:cv classpath:Affine3 < T > ::Vec3 cv::Affine3 < T >  classname:Affine3 < T >  name:rvec

--- Incoming ---
[   'cv.Affine3 < T > .inv',
    'template<typename T> cv::Affine3<T>',
    ['/C'],
    [['int', 'method', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .inv with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::inv namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:inv

--- Incoming ---
[   'cv.Affine3 < T > .rotate',
    'template<typename T> cv::Affine3<T>',
    ['/C'],
    [['const Mat3&', 'R', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .rotate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::rotate namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:rotate

--- Incoming ---
[   'cv.Affine3 < T > .rotate',
    'template<typename T> cv::Affine3<T>',
    ['/C'],
    [['const Vec3&', '_rvec', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .rotate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::rotate namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:rotate

--- Incoming ---
[   'cv.Affine3 < T > .translate',
    'template<typename T> cv::Affine3<T>',
    ['/C'],
    [['const Vec3&', 't', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .translate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::translate namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:translate

--- Incoming ---
[   'cv.Affine3 < T > .concatenate',
    'template<typename T> cv::Affine3<T>',
    ['/C'],
    [['const Affine3<T>&', 'affine', '', []]],
    None,
    '']
parse_name: cv.Affine3 < T > .concatenate with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::concatenate namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:concatenate
Registering an unknown type: Affine3<T>

--- Incoming ---
[   '.operator Affine3 < Y >',
    'template<typename T> template <typename Y>',
    ['/C'],
    [],
    None,
    '']
parse_name: .operator Affine3 < Y > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:::operator Affine3 < Y > namespace: classpath: classname: name:operator Affine3 < Y >
Registering an unknown type: template<typename T> template <typename Y>
ignore (function) operator Affine3 < Y > in None

--- Incoming ---
[   'cv.Affine3 < T > .cast',
    'template<typename T> template <typename Y> cv::Affine3<Y>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.Affine3 < T > .cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::Affine3 < T > ::cast namespace:cv classpath:Affine3 < T >  classname:Affine3 < T >  name:cast
Registering an unknown type: template<typename T> template <typename Y> cv::Affine3<Y>

--- Incoming ---
[   'cv.operator *',
    'cv::Vec3f cv::operator*',
    [],
    [   ['const cv::Affine3f&', 'affine', '', []],
        ['const cv::Vec3f&', 'v', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: cv::Vec3f cv::operator
Registering an unknown type: cv::Affine3f
ignore (function) operator * in None

--- Incoming ---
[   'cv.operator *',
    'cv::Vec3d cv::operator*',
    [],
    [   ['const cv::Affine3d&', 'affine', '', []],
        ['const cv::Vec3d&', 'v', '', []]],
    None,
    '']
parse_name: cv.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::operator * namespace:cv classpath: classname: name:operator *
Registering an unknown type: cv::Vec3d cv::operator
Registering an unknown type: cv::Affine3d
ignore (function) operator * in None


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/async.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'class cv.AsyncArray',
    '',
    [],
    [],
    None,
    '@brief Returns result of asynchronous operations\n'
    '\n'
    'Object has attached asynchronous state.\n'
    "Assignment operator doesn't clone asynchronous state (it is shared "
    'between all instances).\n'
    '\n'
    'Result can be fetched via get() method only once.']
parse_name: class cv.AsyncArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray namespace:cv classpath: classname: name:AsyncArray
register class cv::AsyncArray (['class cv.AsyncArray', '', [], [], None, "@brief Returns result of asynchronous operations\n\nObject has attached asynchronous state.\nAssignment operator doesn't clone asynchronous state (it is shared between all instances).\n\nResult can be fetched via get() method only once."])

--- Incoming ---
['cv.AsyncArray.~AsyncArray', '~', [], [], None, '']
parse_name: cv.AsyncArray.~AsyncArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::~AsyncArray namespace:cv classpath:AsyncArray classname:AsyncArray name:~AsyncArray
ignore destructor (method) ~AsyncArray in cv::AsyncArray

--- Incoming ---
['cv.AsyncArray.AsyncArray', 'A', [], [], None, '']
parse_name: cv.AsyncArray.AsyncArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::AsyncArray namespace:cv classpath:AsyncArray classname:AsyncArray name:AsyncArray
register (constructor) default in cv::AsyncArray (cv_AsyncArray_AsyncArray)

--- Incoming ---
[   'cv.AsyncArray.AsyncArray',
    'A',
    [],
    [['const AsyncArray&', 'o', '', []]],
    None,
    '']
parse_name: cv.AsyncArray.AsyncArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::AsyncArray namespace:cv classpath:AsyncArray classname:AsyncArray name:AsyncArray
register (constructor) copy in cv::AsyncArray (cv_AsyncArray_AsyncArray_AsyncArray)

--- Incoming ---
[   'cv.AsyncArray.operator=',
    'AsyncArray&',
    [],
    [['const AsyncArray&', 'o', '', []]],
    None,
    '']
parse_name: cv.AsyncArray.operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::operator= namespace:cv classpath:AsyncArray classname:AsyncArray name:operator=
ignore (method) operator= in cv::AsyncArray

--- Incoming ---
['cv.AsyncArray.release', 'void', [], [], None, '']
parse_name: cv.AsyncArray.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::release namespace:cv classpath:AsyncArray classname:AsyncArray name:release
register (method) release in cv::AsyncArray (cv_AsyncArray_release)

--- Incoming ---
[   'cv.AsyncArray.get',
    'void',
    ['/C'],
    [['OutputArray', 'dst', '', []]],
    None,
    'Fetch the result.\n'
    '@param[out] dst destination array\n'
    '\n'
    'Waits for result until container has valid result.\n'
    'Throws exception if exception was stored as a result.\n'
    '\n'
    'Throws exception on invalid container state.\n'
    '\n'
    '@note Result or stored exception can be fetched only once.']
parse_name: cv.AsyncArray.get with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::get namespace:cv classpath:AsyncArray classname:AsyncArray name:get
register (method) get in cv::AsyncArray (cv_AsyncArray_get_const__OutputArray)

--- Incoming ---
[   'cv.AsyncArray.get',
    'bool',
    ['/C'],
    [['OutputArray', 'dst', '', []], ['int64', 'timeoutNs', '', []]],
    None,
    'Retrieving the result with timeout\n'
    '@param[out] dst destination array\n'
    '@param[in] timeoutNs timeout in nanoseconds, -1 for infinite wait\n'
    '\n'
    '@returns true if result is ready, false if the timeout has expired\n'
    '\n'
    '@note Result or stored exception can be fetched only once.']
parse_name: cv.AsyncArray.get with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::get namespace:cv classpath:AsyncArray classname:AsyncArray name:get
register (method) get in cv::AsyncArray (cv_AsyncArray_get_const__OutputArray_int64)

--- Incoming ---
[   'cv.AsyncArray.get',
    'bool',
    ['/C'],
    [['OutputArray', 'dst', '', []], ['double', 'timeoutNs', '', []]],
    None,
    '']
parse_name: cv.AsyncArray.get with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::get namespace:cv classpath:AsyncArray classname:AsyncArray name:get
register (method) get in cv::AsyncArray (cv_AsyncArray_get_const__OutputArray_double)

--- Incoming ---
[   'cv.AsyncArray.wait_for',
    'bool',
    ['/C'],
    [['int64', 'timeoutNs', '', []]],
    None,
    '']
parse_name: cv.AsyncArray.wait_for with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::wait_for namespace:cv classpath:AsyncArray classname:AsyncArray name:wait_for
register (method) wait_for in cv::AsyncArray (cv_AsyncArray_wait_for_const_int64)

--- Incoming ---
[   'cv.AsyncArray.wait_for',
    'bool',
    ['/C'],
    [['double', 'timeoutNs', '', []]],
    None,
    '']
parse_name: cv.AsyncArray.wait_for with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::wait_for namespace:cv classpath:AsyncArray classname:AsyncArray name:wait_for
register (method) wait_for in cv::AsyncArray (cv_AsyncArray_wait_for_const_double)

--- Incoming ---
['cv.AsyncArray.valid', 'bool', ['/C'], [], None, '']
parse_name: cv.AsyncArray.valid with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::valid namespace:cv classpath:AsyncArray classname:AsyncArray name:valid
register (method) valid in cv::AsyncArray (cv_AsyncArray_valid_const)

--- Incoming ---
['cv.AsyncArray.AsyncArray', 'A', [], [['AsyncArray&&', 'o', '', []]], None, '']
parse_name: cv.AsyncArray.AsyncArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::AsyncArray namespace:cv classpath:AsyncArray classname:AsyncArray name:AsyncArray
Registering an unknown type: AsyncArray&
register (constructor) new in cv::AsyncArray (cv_AsyncArray_AsyncArray_AsyncArray&)

--- Incoming ---
[   'cv.AsyncArray.operator=',
    'AsyncArray&',
    [],
    [['AsyncArray&&', 'o', '', []]],
    None,
    '']
parse_name: cv.AsyncArray.operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::operator= namespace:cv classpath:AsyncArray classname:AsyncArray name:operator=
ignore (method) operator= in cv::AsyncArray

--- Incoming ---
['cv.AsyncArray.getFutureMat', 'std::future<Mat>', ['/C'], [], None, '']
parse_name: cv.AsyncArray.getFutureMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::getFutureMat namespace:cv classpath:AsyncArray classname:AsyncArray name:getFutureMat
Registering an unknown type: std::future<Mat>
register (method) getFutureMat in cv::AsyncArray (cv_AsyncArray_getFutureMat_const)

--- Incoming ---
['cv.AsyncArray.getFutureUMat', 'std::future<UMat>', ['/C'], [], None, '']
parse_name: cv.AsyncArray.getFutureUMat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::getFutureUMat namespace:cv classpath:AsyncArray classname:AsyncArray name:getFutureUMat
Registering an unknown type: std::future<UMat>
register (method) getFutureUMat in cv::AsyncArray (cv_AsyncArray_getFutureUMat_const)

--- Incoming ---
['cv.AsyncArray._getImpl', 'void*', ['/C'], [], None, '']
parse_name: cv.AsyncArray._getImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal'] -> fullname:cv::AsyncArray::_getImpl namespace:cv classpath:AsyncArray classname:AsyncArray name:_getImpl
register (method) _getImpl in cv::AsyncArray (cv_AsyncArray__getImpl_const)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/bindings_utils.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'cv.utils.dumpInputArray',
    'String',
    [],
    [['InputArray', 'argument', '', []]],
    None,
    '@addtogroup core_utils\n@{']
parse_name: cv.utils.dumpInputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::dumpInputArray namespace:cv::utils classpath: classname: name:dumpInputArray
register (function) dumpInputArray (cv_utils_dumpInputArray__InputArray)

--- Incoming ---
[   'cv.utils.dumpInputArrayOfArrays',
    'String',
    [],
    [['InputArrayOfArrays', 'argument', '', []]],
    None,
    '']
parse_name: cv.utils.dumpInputArrayOfArrays with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::dumpInputArrayOfArrays namespace:cv::utils classpath: classname: name:dumpInputArrayOfArrays
register (function) dumpInputArrayOfArrays (cv_utils_dumpInputArrayOfArrays__InputArray)

--- Incoming ---
[   'cv.utils.dumpInputOutputArray',
    'String',
    [],
    [['InputOutputArray', 'argument', '', []]],
    None,
    '']
parse_name: cv.utils.dumpInputOutputArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::dumpInputOutputArray namespace:cv::utils classpath: classname: name:dumpInputOutputArray
register (function) dumpInputOutputArray (cv_utils_dumpInputOutputArray__InputOutputArray)

--- Incoming ---
[   'cv.utils.dumpInputOutputArrayOfArrays',
    'String',
    [],
    [['InputOutputArrayOfArrays', 'argument', '', []]],
    None,
    '']
parse_name: cv.utils.dumpInputOutputArrayOfArrays with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::dumpInputOutputArrayOfArrays namespace:cv::utils classpath: classname: name:dumpInputOutputArrayOfArrays
register (function) dumpInputOutputArrayOfArrays (cv_utils_dumpInputOutputArrayOfArrays__InputOutputArray)

--- Incoming ---
[   'cv.utils.testAsyncArray',
    'AsyncArray',
    [],
    [['InputArray', 'argument', '', []]],
    None,
    '']
parse_name: cv.utils.testAsyncArray with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::testAsyncArray namespace:cv::utils classpath: classname: name:testAsyncArray
register (function) testAsyncArray (cv_utils_testAsyncArray__InputArray)

--- Incoming ---
['cv.utils.testAsyncException', 'AsyncArray', [], [], None, '']
parse_name: cv.utils.testAsyncException with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::testAsyncException namespace:cv::utils classpath: classname: name:testAsyncException
register (function) testAsyncException (cv_utils_testAsyncException)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/bufferpool.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['class cv.BufferPoolController', '', [], [], None, '@addtogroup core\n@{']
parse_name: class cv.BufferPoolController with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::BufferPoolController namespace:cv classpath: classname: name:BufferPoolController
register class cv::BufferPoolController (['class cv.BufferPoolController', '', [], [], None, '@addtogroup core\n@{'])

--- Incoming ---
['cv.BufferPoolController.~BufferPoolController', '~', ['/H'], [], None, '']
parse_name: cv.BufferPoolController.~BufferPoolController with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::BufferPoolController::~BufferPoolController namespace:cv classpath:BufferPoolController classname:BufferPoolController name:~BufferPoolController
ignore destructor (method) ~BufferPoolController in cv::BufferPoolController

--- Incoming ---
[   'cv.BufferPoolController.getReservedSize',
    'size_t',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.BufferPoolController.getReservedSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::BufferPoolController::getReservedSize namespace:cv classpath:BufferPoolController classname:BufferPoolController name:getReservedSize
register (method) getReservedSize in cv::BufferPoolController (trait) (cv_BufferPoolController_getReservedSize_const)

--- Incoming ---
[   'cv.BufferPoolController.getMaxReservedSize',
    'size_t',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.BufferPoolController.getMaxReservedSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::BufferPoolController::getMaxReservedSize namespace:cv classpath:BufferPoolController classname:BufferPoolController name:getMaxReservedSize
register (method) getMaxReservedSize in cv::BufferPoolController (trait) (cv_BufferPoolController_getMaxReservedSize_const)

--- Incoming ---
[   'cv.BufferPoolController.setMaxReservedSize',
    'void',
    ['/A'],
    [['size_t', 'size', '', []]],
    None,
    '']
parse_name: cv.BufferPoolController.setMaxReservedSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::BufferPoolController::setMaxReservedSize namespace:cv classpath:BufferPoolController classname:BufferPoolController name:setMaxReservedSize
register (method) setMaxReservedSize in cv::BufferPoolController (trait) (cv_BufferPoolController_setMaxReservedSize_size_t)

--- Incoming ---
['cv.BufferPoolController.freeAllReservedBuffers', 'void', ['/A'], [], None, '']
parse_name: cv.BufferPoolController.freeAllReservedBuffers with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::BufferPoolController::freeAllReservedBuffers namespace:cv classpath:BufferPoolController classname:BufferPoolController name:freeAllReservedBuffers
register (method) freeAllReservedBuffers in cv::BufferPoolController (trait) (cv_BufferPoolController_freeAllReservedBuffers)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/check.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'cv.depthToString',
    'const char*',
    [],
    [['int', 'depth', '', []]],
    None,
    'Returns string of cv::Mat depth value: CV_8U -> "CV_8U" or "<invalid '
    'depth>"']
parse_name: cv.depthToString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::depthToString namespace:cv classpath: classname: name:depthToString
register (function) depthToString (cv_depthToString_int)

--- Incoming ---
[   'cv.typeToString',
    'const String',
    [],
    [['int', 'type', '', []]],
    None,
    'Returns string of cv::Mat depth value: CV_8UC3 -> "CV_8UC3" or "<invalid '
    'type>"']
parse_name: cv.typeToString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::typeToString namespace:cv classpath: classname: name:typeToString
register (function) typeToString (cv_typeToString_int)

--- Incoming ---
[   'cv.detail.depthToString_',
    'const char*',
    [],
    [['int', 'depth', '', []]],
    None,
    'Returns string of cv::Mat depth value: CV_8U -> "CV_8U" or NULL']
parse_name: cv.detail.depthToString_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::depthToString_ namespace:cv::detail classpath: classname: name:depthToString_
register (function) depthToString_ (cv_detail_depthToString__int)

--- Incoming ---
[   'cv.detail.typeToString_',
    'const cv::String',
    [],
    [['int', 'type', '', []]],
    None,
    'Returns string of cv::Mat depth value: CV_8UC3 -> "CV_8UC3" or '
    'cv::String()']
parse_name: cv.detail.typeToString_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::typeToString_ namespace:cv::detail classpath: classname: name:typeToString_
register (function) typeToString_ (cv_detail_typeToString__int)

--- Incoming ---
[   'enum cv.detail.TestOp',
    '',
    [],
    [   ['const cv.detail.TEST_CUSTOM', '0', [], [], None, ''],
        ['const cv.detail.TEST_EQ', '1', [], [], None, ''],
        ['const cv.detail.TEST_NE', '2', [], [], None, ''],
        ['const cv.detail.TEST_LE', '3', [], [], None, ''],
        ['const cv.detail.TEST_LT', '4', [], [], None, ''],
        ['const cv.detail.TEST_GE', '5', [], [], None, ''],
        ['const cv.detail.TEST_GT', '6', [], [], None, '']],
    None,
    '']
parse_name: const cv.detail.TEST_CUSTOM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_CUSTOM namespace:cv::detail classpath: classname: name:TEST_CUSTOM
parse_name: const cv.detail.TEST_EQ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_EQ namespace:cv::detail classpath: classname: name:TEST_EQ
parse_name: const cv.detail.TEST_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_NE namespace:cv::detail classpath: classname: name:TEST_NE
parse_name: const cv.detail.TEST_LE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_LE namespace:cv::detail classpath: classname: name:TEST_LE
parse_name: const cv.detail.TEST_LT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_LT namespace:cv::detail classpath: classname: name:TEST_LT
parse_name: const cv.detail.TEST_GE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_GE namespace:cv::detail classpath: classname: name:TEST_GE
parse_name: const cv.detail.TEST_GT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_GT namespace:cv::detail classpath: classname: name:TEST_GT
parse_name: enum cv.detail.TestOp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TestOp namespace:cv::detail classpath: classname: name:TestOp
parse_name: const cv.detail.TEST_CUSTOM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_CUSTOM namespace:cv::detail classpath: classname: name:TEST_CUSTOM
parse_name: const cv.detail.TEST_EQ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_EQ namespace:cv::detail classpath: classname: name:TEST_EQ
parse_name: const cv.detail.TEST_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_NE namespace:cv::detail classpath: classname: name:TEST_NE
parse_name: const cv.detail.TEST_LE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_LE namespace:cv::detail classpath: classname: name:TEST_LE
parse_name: const cv.detail.TEST_LT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_LT namespace:cv::detail classpath: classname: name:TEST_LT
parse_name: const cv.detail.TEST_GE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_GE namespace:cv::detail classpath: classname: name:TEST_GE
parse_name: const cv.detail.TEST_GT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::TEST_GT namespace:cv::detail classpath: classname: name:TEST_GT

--- Incoming ---
['struct cv.detail.CheckContext', '', [], [], None, '']
parse_name: struct cv.detail.CheckContext with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::CheckContext namespace:cv::detail classpath: classname: name:CheckContext
register class cv::detail::CheckContext (['struct cv.detail.CheckContext', '', [], [], None, ''])

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [   ['const int', 'v1', '', []],
        ['const int', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_int_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [   ['const size_t', 'v1', '', []],
        ['const size_t', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_size_t_size_t_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [   ['const float', 'v1', '', []],
        ['const float', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_float_float_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [   ['const double', 'v1', '', []],
        ['const double', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_double_double_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [   ['const Size_<int>', 'v1', '', []],
        ['const Size_<int>', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
Registering an unknown type: Size_<int>
register (function) check_failed_auto (cv_detail_check_failed_auto_Size_<int>_Size_<int>_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_MatDepth',
    'void',
    [],
    [   ['const int', 'v1', '', []],
        ['const int', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_MatDepth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_MatDepth namespace:cv::detail classpath: classname: name:check_failed_MatDepth
register (function) check_failed_MatDepth (cv_detail_check_failed_MatDepth_int_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_MatType',
    'void',
    [],
    [   ['const int', 'v1', '', []],
        ['const int', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_MatType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_MatType namespace:cv::detail classpath: classname: name:check_failed_MatType
register (function) check_failed_MatType (cv_detail_check_failed_MatType_int_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_MatChannels',
    'void',
    [],
    [   ['const int', 'v1', '', []],
        ['const int', 'v2', '', []],
        ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_MatChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_MatChannels namespace:cv::detail classpath: classname: name:check_failed_MatChannels
register (function) check_failed_MatChannels (cv_detail_check_failed_MatChannels_int_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [['const int', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [['const size_t', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_size_t_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [['const float', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_float_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [['const double', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_double_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_auto',
    'void',
    [],
    [['const Size_<int>', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_auto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_auto namespace:cv::detail classpath: classname: name:check_failed_auto
register (function) check_failed_auto (cv_detail_check_failed_auto_Size_<int>_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_MatDepth',
    'void',
    [],
    [['const int', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_MatDepth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_MatDepth namespace:cv::detail classpath: classname: name:check_failed_MatDepth
register (function) check_failed_MatDepth (cv_detail_check_failed_MatDepth_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_MatType',
    'void',
    [],
    [['const int', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_MatType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_MatType namespace:cv::detail classpath: classname: name:check_failed_MatType
register (function) check_failed_MatType (cv_detail_check_failed_MatType_int_CheckContext)

--- Incoming ---
[   'cv.detail.check_failed_MatChannels',
    'void',
    [],
    [['const int', 'v', '', []], ['const CheckContext&', 'ctx', '', []]],
    None,
    '']
parse_name: cv.detail.check_failed_MatChannels with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::detail::check_failed_MatChannels namespace:cv::detail classpath: classname: name:check_failed_MatChannels
register (function) check_failed_MatChannels (cv_detail_check_failed_MatChannels_int_CheckContext)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/core.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/cv_cpu_helper.h ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/directx.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'cv.directx.ocl.initializeContextFromD3D11Device',
    'Context&',
    [],
    [['ID3D11Device*', 'pD3D11Device', '', []]],
    None,
    '@addtogroup core_directx\n'
    '@{\n'
    '@brief Creates OpenCL context from D3D11 device\n'
    '@param pD3D11Device - pointer to D3D11 device\n'
    '@return Returns reference to OpenCL Context']
parse_name: cv.directx.ocl.initializeContextFromD3D11Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::ocl::initializeContextFromD3D11Device namespace:cv::directx::ocl classpath: classname: name:initializeContextFromD3D11Device
Registering an unknown type: Context
Registering an unknown type: ID3D11Device
register (function) initializeContextFromD3D11Device (cv_directx_ocl_initializeContextFromD3D11Device_ID3D11Device*)

--- Incoming ---
[   'cv.directx.ocl.initializeContextFromD3D10Device',
    'Context&',
    [],
    [['ID3D10Device*', 'pD3D10Device', '', []]],
    None,
    '@brief Creates OpenCL context from D3D10 device\n'
    '@param pD3D10Device - pointer to D3D10 device\n'
    '@return Returns reference to OpenCL Context']
parse_name: cv.directx.ocl.initializeContextFromD3D10Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::ocl::initializeContextFromD3D10Device namespace:cv::directx::ocl classpath: classname: name:initializeContextFromD3D10Device
Registering an unknown type: ID3D10Device
register (function) initializeContextFromD3D10Device (cv_directx_ocl_initializeContextFromD3D10Device_ID3D10Device*)

--- Incoming ---
[   'cv.directx.ocl.initializeContextFromDirect3DDevice9Ex',
    'Context&',
    [],
    [['IDirect3DDevice9Ex*', 'pDirect3DDevice9Ex', '', []]],
    None,
    '@brief Creates OpenCL context from Direct3DDevice9Ex device\n'
    '@param pDirect3DDevice9Ex - pointer to Direct3DDevice9Ex device\n'
    '@return Returns reference to OpenCL Context']
parse_name: cv.directx.ocl.initializeContextFromDirect3DDevice9Ex with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::ocl::initializeContextFromDirect3DDevice9Ex namespace:cv::directx::ocl classpath: classname: name:initializeContextFromDirect3DDevice9Ex
Registering an unknown type: IDirect3DDevice9Ex
register (function) initializeContextFromDirect3DDevice9Ex (cv_directx_ocl_initializeContextFromDirect3DDevice9Ex_IDirect3DDevice9Ex*)

--- Incoming ---
[   'cv.directx.ocl.initializeContextFromDirect3DDevice9',
    'Context&',
    [],
    [['IDirect3DDevice9*', 'pDirect3DDevice9', '', []]],
    None,
    '@brief Creates OpenCL context from Direct3DDevice9 device\n'
    '@param pDirect3DDevice9 - pointer to Direct3Device9 device\n'
    '@return Returns reference to OpenCL Context']
parse_name: cv.directx.ocl.initializeContextFromDirect3DDevice9 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::ocl::initializeContextFromDirect3DDevice9 namespace:cv::directx::ocl classpath: classname: name:initializeContextFromDirect3DDevice9
Registering an unknown type: IDirect3DDevice9
register (function) initializeContextFromDirect3DDevice9 (cv_directx_ocl_initializeContextFromDirect3DDevice9_IDirect3DDevice9*)

--- Incoming ---
[   'cv.directx.convertToD3D11Texture2D',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['ID3D11Texture2D*', 'pD3D11Texture2D', '', []]],
    None,
    '@addtogroup core_directx\n'
    '@{\n'
    '@brief Converts InputArray to ID3D11Texture2D. If destination texture '
    'format is DXGI_FORMAT_NV12 then\n'
    'input UMat expected to be in BGR format and data will be downsampled and '
    'color-converted to NV12.\n'
    '@note Note: Destination texture must be allocated by application. '
    'Function does memory copy from src to\n'
    'pD3D11Texture2D\n'
    '@param src - source InputArray\n'
    '@param pD3D11Texture2D - destination D3D11 texture']
parse_name: cv.directx.convertToD3D11Texture2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::convertToD3D11Texture2D namespace:cv::directx classpath: classname: name:convertToD3D11Texture2D
Registering an unknown type: ID3D11Texture2D
register (function) convertToD3D11Texture2D (cv_directx_convertToD3D11Texture2D__InputArray_ID3D11Texture2D*)

--- Incoming ---
[   'cv.directx.convertFromD3D11Texture2D',
    'void',
    [],
    [   ['ID3D11Texture2D*', 'pD3D11Texture2D', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Converts ID3D11Texture2D to OutputArray. If input texture format '
    'is DXGI_FORMAT_NV12 then\n'
    'data will be upsampled and color-converted to BGR format.\n'
    '@note Note: Destination matrix will be re-allocated if it has not enough '
    'memory to match texture size.\n'
    'function does memory copy from pD3D11Texture2D to dst\n'
    '@param pD3D11Texture2D - source D3D11 texture\n'
    '@param dst             - destination OutputArray']
parse_name: cv.directx.convertFromD3D11Texture2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::convertFromD3D11Texture2D namespace:cv::directx classpath: classname: name:convertFromD3D11Texture2D
register (function) convertFromD3D11Texture2D (cv_directx_convertFromD3D11Texture2D_ID3D11Texture2D*__OutputArray)

--- Incoming ---
[   'cv.directx.convertToD3D10Texture2D',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['ID3D10Texture2D*', 'pD3D10Texture2D', '', []]],
    None,
    '@brief Converts InputArray to ID3D10Texture2D\n'
    '@note Note: function does memory copy from src to\n'
    'pD3D10Texture2D\n'
    '@param src             - source InputArray\n'
    '@param pD3D10Texture2D - destination D3D10 texture']
parse_name: cv.directx.convertToD3D10Texture2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::convertToD3D10Texture2D namespace:cv::directx classpath: classname: name:convertToD3D10Texture2D
Registering an unknown type: ID3D10Texture2D
register (function) convertToD3D10Texture2D (cv_directx_convertToD3D10Texture2D__InputArray_ID3D10Texture2D*)

--- Incoming ---
[   'cv.directx.convertFromD3D10Texture2D',
    'void',
    [],
    [   ['ID3D10Texture2D*', 'pD3D10Texture2D', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Converts ID3D10Texture2D to OutputArray\n'
    '@note Note: function does memory copy from pD3D10Texture2D\n'
    'to dst\n'
    '@param pD3D10Texture2D - source D3D10 texture\n'
    '@param dst             - destination OutputArray']
parse_name: cv.directx.convertFromD3D10Texture2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::convertFromD3D10Texture2D namespace:cv::directx classpath: classname: name:convertFromD3D10Texture2D
register (function) convertFromD3D10Texture2D (cv_directx_convertFromD3D10Texture2D_ID3D10Texture2D*__OutputArray)

--- Incoming ---
[   'cv.directx.convertToDirect3DSurface9',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['IDirect3DSurface9*', 'pDirect3DSurface9', '', []],
        ['void*', 'surfaceSharedHandle', 'NULL', []]],
    None,
    '@brief Converts InputArray to IDirect3DSurface9\n'
    '@note Note: function does memory copy from src to\n'
    'pDirect3DSurface9\n'
    '@param src                 - source InputArray\n'
    '@param pDirect3DSurface9   - destination D3D10 texture\n'
    '@param surfaceSharedHandle - shared handle']
parse_name: cv.directx.convertToDirect3DSurface9 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::convertToDirect3DSurface9 namespace:cv::directx classpath: classname: name:convertToDirect3DSurface9
Registering an unknown type: IDirect3DSurface9
register (function) convertToDirect3DSurface9 (cv_directx_convertToDirect3DSurface9__InputArray_IDirect3DSurface9*_void_X)

--- Incoming ---
[   'cv.directx.convertFromDirect3DSurface9',
    'void',
    [],
    [   ['IDirect3DSurface9*', 'pDirect3DSurface9', '', []],
        ['OutputArray', 'dst', '', []],
        ['void*', 'surfaceSharedHandle', 'NULL', []]],
    None,
    '@brief Converts IDirect3DSurface9 to OutputArray\n'
    '@note Note: function does memory copy from pDirect3DSurface9\n'
    'to dst\n'
    '@param pDirect3DSurface9   - source D3D10 texture\n'
    '@param dst                 - destination OutputArray\n'
    '@param surfaceSharedHandle - shared handle']
parse_name: cv.directx.convertFromDirect3DSurface9 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::convertFromDirect3DSurface9 namespace:cv::directx classpath: classname: name:convertFromDirect3DSurface9
register (function) convertFromDirect3DSurface9 (cv_directx_convertFromDirect3DSurface9_IDirect3DSurface9*__OutputArray_void_X)

--- Incoming ---
[   'cv.directx.getTypeFromDXGI_FORMAT',
    'int',
    [],
    [['const int', 'iDXGI_FORMAT', '', []]],
    None,
    '@brief Get OpenCV type from DirectX type\n'
    '@param iDXGI_FORMAT - enum DXGI_FORMAT for D3D10/D3D11\n'
    '@return OpenCV type or -1 if there is no equivalent']
parse_name: cv.directx.getTypeFromDXGI_FORMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::getTypeFromDXGI_FORMAT namespace:cv::directx classpath: classname: name:getTypeFromDXGI_FORMAT
register (function) getTypeFromDXGI_FORMAT (cv_directx_getTypeFromDXGI_FORMAT_int)

--- Incoming ---
[   'cv.directx.getTypeFromD3DFORMAT',
    'int',
    [],
    [['const int', 'iD3DFORMAT', '', []]],
    None,
    '@brief Get OpenCV type from DirectX type\n'
    '@param iD3DFORMAT - enum D3DTYPE for D3D9\n'
    '@return OpenCV type or -1 if there is no equivalent']
parse_name: cv.directx.getTypeFromD3DFORMAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::directx::getTypeFromD3DFORMAT namespace:cv::directx classpath: classname: name:getTypeFromD3DFORMAT
register (function) getTypeFromD3DFORMAT (cv_directx_getTypeFromD3DFORMAT_int)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/hal/interface.h ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'const CV_HAL_ERROR_OK',
    '0',
    [],
    [],
    '@addtogroup core_hal_interface\n@{\n@name Return codes\n@{\n']
parse_name: const CV_HAL_ERROR_OK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_ERROR_OK namespace: classpath: classname: name:CV_HAL_ERROR_OK

--- Incoming ---
[   'const CV_HAL_ERROR_NOT_IMPLEMENTED',
    '1',
    [],
    [],
    '@addtogroup core_hal_interface\n@{\n@name Return codes\n@{\n']
parse_name: const CV_HAL_ERROR_NOT_IMPLEMENTED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_ERROR_NOT_IMPLEMENTED namespace: classpath: classname: name:CV_HAL_ERROR_NOT_IMPLEMENTED

--- Incoming ---
[   'const CV_HAL_ERROR_UNKNOWN',
    '-1',
    [],
    [],
    '@addtogroup core_hal_interface\n@{\n@name Return codes\n@{\n']
parse_name: const CV_HAL_ERROR_UNKNOWN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_ERROR_UNKNOWN namespace: classpath: classname: name:CV_HAL_ERROR_UNKNOWN

--- Incoming ---
[   'typedef uint',
    'unsigned int',
    '',
    [],
    None,
    '@addtogroup core_hal_interface\n'
    '@{\n'
    '@name Return codes\n'
    '@{\n'
    '@}\n'
    '@name Data types\n'
    'primitive types\n'
    '- schar  - signed 1 byte integer\n'
    '- uchar  - unsigned 1 byte integer\n'
    '- short  - signed 2 byte integer\n'
    '- ushort - unsigned 2 byte integer\n'
    '- int    - signed 4 byte integer\n'
    '- uint   - unsigned 4 byte integer\n'
    '- int64  - signed 8 byte integer\n'
    '- uint64 - unsigned 8 byte integer\n'
    '@{']
parse_name: typedef uint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uint namespace: classpath: classname: name:uint

--- Incoming ---
['typedef uint', 'std::uint32_t', '', [], None, '']
parse_name: typedef uint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uint namespace: classpath: classname: name:uint
Registering an unknown type: std::uint32_t

--- Incoming ---
['typedef uint', 'uint32_t', '', [], None, '']
parse_name: typedef uint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uint namespace: classpath: classname: name:uint

--- Incoming ---
['typedef uint', 'unsigned', '', [], None, '']
parse_name: typedef uint with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uint namespace: classpath: classname: name:uint

--- Incoming ---
['typedef schar', 'signed char', '', [], None, '']
parse_name: typedef schar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:schar namespace: classpath: classname: name:schar

--- Incoming ---
['typedef uchar', 'unsigned char', '', [], None, '']
parse_name: typedef uchar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uchar namespace: classpath: classname: name:uchar

--- Incoming ---
['typedef ushort', 'unsigned short', '', [], None, '']
parse_name: typedef ushort with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:ushort namespace: classpath: classname: name:ushort

--- Incoming ---
['typedef int64', '__int64', '', [], None, '']
parse_name: typedef int64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:int64 namespace: classpath: classname: name:int64

--- Incoming ---
['typedef uint64', 'unsigned __int64', '', [], None, '']
parse_name: typedef uint64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uint64 namespace: classpath: classname: name:uint64

--- Incoming ---
['typedef int64', 'int64_t', '', [], None, '']
parse_name: typedef int64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:int64 namespace: classpath: classname: name:int64

--- Incoming ---
['typedef uint64', 'uint64_t', '', [], None, '']
parse_name: typedef uint64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:uint64 namespace: classpath: classname: name:uint64

--- Incoming ---
[   'const CV_USRTYPE1',
    '(void)"CV_USRTYPE1 support has been dropped in OpenCV 4.0"',
    [],
    [],
    '']
parse_name: const CV_USRTYPE1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_USRTYPE1 namespace: classpath: classname: name:CV_USRTYPE1
ignored: CONST CV_USRTYPE1=(void)"CV_USRTYPE1 support has been dropped in OpenCV 4.0"

--- Incoming ---
['const CV_CN_MAX', '512', [], [], '']
parse_name: const CV_CN_MAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_CN_MAX namespace: classpath: classname: name:CV_CN_MAX

--- Incoming ---
['const CV_CN_SHIFT', '3', [], [], '']
parse_name: const CV_CN_SHIFT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_CN_SHIFT namespace: classpath: classname: name:CV_CN_SHIFT

--- Incoming ---
['const CV_DEPTH_MAX', '(1 << CV_CN_SHIFT)', [], [], '']
parse_name: const CV_DEPTH_MAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_DEPTH_MAX namespace: classpath: classname: name:CV_DEPTH_MAX

--- Incoming ---
['const CV_8U', '0', [], [], '']
parse_name: const CV_8U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8U namespace: classpath: classname: name:CV_8U

--- Incoming ---
['const CV_8S', '1', [], [], '']
parse_name: const CV_8S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8S namespace: classpath: classname: name:CV_8S

--- Incoming ---
['const CV_16U', '2', [], [], '']
parse_name: const CV_16U with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16U namespace: classpath: classname: name:CV_16U

--- Incoming ---
['const CV_16S', '3', [], [], '']
parse_name: const CV_16S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16S namespace: classpath: classname: name:CV_16S

--- Incoming ---
['const CV_32S', '4', [], [], '']
parse_name: const CV_32S with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32S namespace: classpath: classname: name:CV_32S

--- Incoming ---
['const CV_32F', '5', [], [], '']
parse_name: const CV_32F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32F namespace: classpath: classname: name:CV_32F

--- Incoming ---
['const CV_64F', '6', [], [], '']
parse_name: const CV_64F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_64F namespace: classpath: classname: name:CV_64F

--- Incoming ---
['const CV_16F', '7', [], [], '']
parse_name: const CV_16F with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16F namespace: classpath: classname: name:CV_16F

--- Incoming ---
['const CV_MAT_DEPTH_MASK', '(CV_DEPTH_MAX - 1)', [], [], '']
parse_name: const CV_MAT_DEPTH_MASK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_MAT_DEPTH_MASK namespace: classpath: classname: name:CV_MAT_DEPTH_MASK

--- Incoming ---
['const CV_MAKE_TYPE', 'CV_MAKETYPE', [], [], '']
parse_name: const CV_MAKE_TYPE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_MAKE_TYPE namespace: classpath: classname: name:CV_MAKE_TYPE
ignored: CONST CV_MAKE_TYPE=CV_MAKETYPE

--- Incoming ---
['const CV_8UC1', 'CV_MAKETYPE(CV_8U,1)', [], [], '']
parse_name: const CV_8UC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8UC1 namespace: classpath: classname: name:CV_8UC1

--- Incoming ---
['const CV_8UC2', 'CV_MAKETYPE(CV_8U,2)', [], [], '']
parse_name: const CV_8UC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8UC2 namespace: classpath: classname: name:CV_8UC2

--- Incoming ---
['const CV_8UC3', 'CV_MAKETYPE(CV_8U,3)', [], [], '']
parse_name: const CV_8UC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8UC3 namespace: classpath: classname: name:CV_8UC3

--- Incoming ---
['const CV_8UC4', 'CV_MAKETYPE(CV_8U,4)', [], [], '']
parse_name: const CV_8UC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8UC4 namespace: classpath: classname: name:CV_8UC4

--- Incoming ---
['const CV_8SC1', 'CV_MAKETYPE(CV_8S,1)', [], [], '']
parse_name: const CV_8SC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8SC1 namespace: classpath: classname: name:CV_8SC1

--- Incoming ---
['const CV_8SC2', 'CV_MAKETYPE(CV_8S,2)', [], [], '']
parse_name: const CV_8SC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8SC2 namespace: classpath: classname: name:CV_8SC2

--- Incoming ---
['const CV_8SC3', 'CV_MAKETYPE(CV_8S,3)', [], [], '']
parse_name: const CV_8SC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8SC3 namespace: classpath: classname: name:CV_8SC3

--- Incoming ---
['const CV_8SC4', 'CV_MAKETYPE(CV_8S,4)', [], [], '']
parse_name: const CV_8SC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_8SC4 namespace: classpath: classname: name:CV_8SC4

--- Incoming ---
['const CV_16UC1', 'CV_MAKETYPE(CV_16U,1)', [], [], '']
parse_name: const CV_16UC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16UC1 namespace: classpath: classname: name:CV_16UC1

--- Incoming ---
['const CV_16UC2', 'CV_MAKETYPE(CV_16U,2)', [], [], '']
parse_name: const CV_16UC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16UC2 namespace: classpath: classname: name:CV_16UC2

--- Incoming ---
['const CV_16UC3', 'CV_MAKETYPE(CV_16U,3)', [], [], '']
parse_name: const CV_16UC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16UC3 namespace: classpath: classname: name:CV_16UC3

--- Incoming ---
['const CV_16UC4', 'CV_MAKETYPE(CV_16U,4)', [], [], '']
parse_name: const CV_16UC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16UC4 namespace: classpath: classname: name:CV_16UC4

--- Incoming ---
['const CV_16SC1', 'CV_MAKETYPE(CV_16S,1)', [], [], '']
parse_name: const CV_16SC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16SC1 namespace: classpath: classname: name:CV_16SC1

--- Incoming ---
['const CV_16SC2', 'CV_MAKETYPE(CV_16S,2)', [], [], '']
parse_name: const CV_16SC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16SC2 namespace: classpath: classname: name:CV_16SC2

--- Incoming ---
['const CV_16SC3', 'CV_MAKETYPE(CV_16S,3)', [], [], '']
parse_name: const CV_16SC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16SC3 namespace: classpath: classname: name:CV_16SC3

--- Incoming ---
['const CV_16SC4', 'CV_MAKETYPE(CV_16S,4)', [], [], '']
parse_name: const CV_16SC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16SC4 namespace: classpath: classname: name:CV_16SC4

--- Incoming ---
['const CV_32SC1', 'CV_MAKETYPE(CV_32S,1)', [], [], '']
parse_name: const CV_32SC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32SC1 namespace: classpath: classname: name:CV_32SC1

--- Incoming ---
['const CV_32SC2', 'CV_MAKETYPE(CV_32S,2)', [], [], '']
parse_name: const CV_32SC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32SC2 namespace: classpath: classname: name:CV_32SC2

--- Incoming ---
['const CV_32SC3', 'CV_MAKETYPE(CV_32S,3)', [], [], '']
parse_name: const CV_32SC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32SC3 namespace: classpath: classname: name:CV_32SC3

--- Incoming ---
['const CV_32SC4', 'CV_MAKETYPE(CV_32S,4)', [], [], '']
parse_name: const CV_32SC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32SC4 namespace: classpath: classname: name:CV_32SC4

--- Incoming ---
['const CV_32FC1', 'CV_MAKETYPE(CV_32F,1)', [], [], '']
parse_name: const CV_32FC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32FC1 namespace: classpath: classname: name:CV_32FC1

--- Incoming ---
['const CV_32FC2', 'CV_MAKETYPE(CV_32F,2)', [], [], '']
parse_name: const CV_32FC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32FC2 namespace: classpath: classname: name:CV_32FC2

--- Incoming ---
['const CV_32FC3', 'CV_MAKETYPE(CV_32F,3)', [], [], '']
parse_name: const CV_32FC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32FC3 namespace: classpath: classname: name:CV_32FC3

--- Incoming ---
['const CV_32FC4', 'CV_MAKETYPE(CV_32F,4)', [], [], '']
parse_name: const CV_32FC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_32FC4 namespace: classpath: classname: name:CV_32FC4

--- Incoming ---
['const CV_64FC1', 'CV_MAKETYPE(CV_64F,1)', [], [], '']
parse_name: const CV_64FC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_64FC1 namespace: classpath: classname: name:CV_64FC1

--- Incoming ---
['const CV_64FC2', 'CV_MAKETYPE(CV_64F,2)', [], [], '']
parse_name: const CV_64FC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_64FC2 namespace: classpath: classname: name:CV_64FC2

--- Incoming ---
['const CV_64FC3', 'CV_MAKETYPE(CV_64F,3)', [], [], '']
parse_name: const CV_64FC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_64FC3 namespace: classpath: classname: name:CV_64FC3

--- Incoming ---
['const CV_64FC4', 'CV_MAKETYPE(CV_64F,4)', [], [], '']
parse_name: const CV_64FC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_64FC4 namespace: classpath: classname: name:CV_64FC4

--- Incoming ---
['const CV_16FC1', 'CV_MAKETYPE(CV_16F,1)', [], [], '']
parse_name: const CV_16FC1 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16FC1 namespace: classpath: classname: name:CV_16FC1
ignored: CONST CV_16FC1=CV_MAKETYPE(CV_16F,1)

--- Incoming ---
['const CV_16FC2', 'CV_MAKETYPE(CV_16F,2)', [], [], '']
parse_name: const CV_16FC2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16FC2 namespace: classpath: classname: name:CV_16FC2
ignored: CONST CV_16FC2=CV_MAKETYPE(CV_16F,2)

--- Incoming ---
['const CV_16FC3', 'CV_MAKETYPE(CV_16F,3)', [], [], '']
parse_name: const CV_16FC3 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16FC3 namespace: classpath: classname: name:CV_16FC3
ignored: CONST CV_16FC3=CV_MAKETYPE(CV_16F,3)

--- Incoming ---
['const CV_16FC4', 'CV_MAKETYPE(CV_16F,4)', [], [], '']
parse_name: const CV_16FC4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_16FC4 namespace: classpath: classname: name:CV_16FC4
ignored: CONST CV_16FC4=CV_MAKETYPE(CV_16F,4)

--- Incoming ---
[   'const CV_HAL_CMP_EQ',
    '0',
    [],
    [],
    '@}\n@name Comparison operation\n@sa cv::CmpTypes\n@{\n']
parse_name: const CV_HAL_CMP_EQ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_CMP_EQ namespace: classpath: classname: name:CV_HAL_CMP_EQ

--- Incoming ---
[   'const CV_HAL_CMP_GT',
    '1',
    [],
    [],
    '@}\n@name Comparison operation\n@sa cv::CmpTypes\n@{\n']
parse_name: const CV_HAL_CMP_GT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_CMP_GT namespace: classpath: classname: name:CV_HAL_CMP_GT

--- Incoming ---
[   'const CV_HAL_CMP_GE',
    '2',
    [],
    [],
    '@}\n@name Comparison operation\n@sa cv::CmpTypes\n@{\n']
parse_name: const CV_HAL_CMP_GE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_CMP_GE namespace: classpath: classname: name:CV_HAL_CMP_GE

--- Incoming ---
[   'const CV_HAL_CMP_LT',
    '3',
    [],
    [],
    '@}\n@name Comparison operation\n@sa cv::CmpTypes\n@{\n']
parse_name: const CV_HAL_CMP_LT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_CMP_LT namespace: classpath: classname: name:CV_HAL_CMP_LT

--- Incoming ---
[   'const CV_HAL_CMP_LE',
    '4',
    [],
    [],
    '@}\n@name Comparison operation\n@sa cv::CmpTypes\n@{\n']
parse_name: const CV_HAL_CMP_LE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_CMP_LE namespace: classpath: classname: name:CV_HAL_CMP_LE

--- Incoming ---
[   'const CV_HAL_CMP_NE',
    '5',
    [],
    [],
    '@}\n@name Comparison operation\n@sa cv::CmpTypes\n@{\n']
parse_name: const CV_HAL_CMP_NE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_CMP_NE namespace: classpath: classname: name:CV_HAL_CMP_NE

--- Incoming ---
[   'const CV_HAL_BORDER_CONSTANT',
    '0',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_CONSTANT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_CONSTANT namespace: classpath: classname: name:CV_HAL_BORDER_CONSTANT

--- Incoming ---
[   'const CV_HAL_BORDER_REPLICATE',
    '1',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_REPLICATE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_REPLICATE namespace: classpath: classname: name:CV_HAL_BORDER_REPLICATE

--- Incoming ---
[   'const CV_HAL_BORDER_REFLECT',
    '2',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_REFLECT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_REFLECT namespace: classpath: classname: name:CV_HAL_BORDER_REFLECT

--- Incoming ---
[   'const CV_HAL_BORDER_WRAP',
    '3',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_WRAP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_WRAP namespace: classpath: classname: name:CV_HAL_BORDER_WRAP

--- Incoming ---
[   'const CV_HAL_BORDER_REFLECT_101',
    '4',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_REFLECT_101 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_REFLECT_101 namespace: classpath: classname: name:CV_HAL_BORDER_REFLECT_101

--- Incoming ---
[   'const CV_HAL_BORDER_TRANSPARENT',
    '5',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_TRANSPARENT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_TRANSPARENT namespace: classpath: classname: name:CV_HAL_BORDER_TRANSPARENT

--- Incoming ---
[   'const CV_HAL_BORDER_ISOLATED',
    '16',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n']
parse_name: const CV_HAL_BORDER_ISOLATED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_BORDER_ISOLATED namespace: classpath: classname: name:CV_HAL_BORDER_ISOLATED

--- Incoming ---
[   'const CV_HAL_DFT_INVERSE',
    '1',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_INVERSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_INVERSE namespace: classpath: classname: name:CV_HAL_DFT_INVERSE

--- Incoming ---
[   'const CV_HAL_DFT_SCALE',
    '2',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_SCALE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_SCALE namespace: classpath: classname: name:CV_HAL_DFT_SCALE

--- Incoming ---
[   'const CV_HAL_DFT_ROWS',
    '4',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_ROWS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_ROWS namespace: classpath: classname: name:CV_HAL_DFT_ROWS

--- Incoming ---
[   'const CV_HAL_DFT_COMPLEX_OUTPUT',
    '16',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_COMPLEX_OUTPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_COMPLEX_OUTPUT namespace: classpath: classname: name:CV_HAL_DFT_COMPLEX_OUTPUT

--- Incoming ---
[   'const CV_HAL_DFT_REAL_OUTPUT',
    '32',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_REAL_OUTPUT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_REAL_OUTPUT namespace: classpath: classname: name:CV_HAL_DFT_REAL_OUTPUT

--- Incoming ---
[   'const CV_HAL_DFT_TWO_STAGE',
    '64',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_TWO_STAGE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_TWO_STAGE namespace: classpath: classname: name:CV_HAL_DFT_TWO_STAGE

--- Incoming ---
[   'const CV_HAL_DFT_STAGE_COLS',
    '128',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_STAGE_COLS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_STAGE_COLS namespace: classpath: classname: name:CV_HAL_DFT_STAGE_COLS

--- Incoming ---
[   'const CV_HAL_DFT_IS_CONTINUOUS',
    '512',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_IS_CONTINUOUS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_IS_CONTINUOUS namespace: classpath: classname: name:CV_HAL_DFT_IS_CONTINUOUS

--- Incoming ---
[   'const CV_HAL_DFT_IS_INPLACE',
    '1024',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n']
parse_name: const CV_HAL_DFT_IS_INPLACE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_DFT_IS_INPLACE namespace: classpath: classname: name:CV_HAL_DFT_IS_INPLACE

--- Incoming ---
[   'const CV_HAL_SVD_NO_UV',
    '1',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n']
parse_name: const CV_HAL_SVD_NO_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_SVD_NO_UV namespace: classpath: classname: name:CV_HAL_SVD_NO_UV

--- Incoming ---
[   'const CV_HAL_SVD_SHORT_UV',
    '2',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n']
parse_name: const CV_HAL_SVD_SHORT_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_SVD_SHORT_UV namespace: classpath: classname: name:CV_HAL_SVD_SHORT_UV

--- Incoming ---
[   'const CV_HAL_SVD_MODIFY_A',
    '4',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n']
parse_name: const CV_HAL_SVD_MODIFY_A with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_SVD_MODIFY_A namespace: classpath: classname: name:CV_HAL_SVD_MODIFY_A

--- Incoming ---
[   'const CV_HAL_SVD_FULL_UV',
    '8',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n']
parse_name: const CV_HAL_SVD_FULL_UV with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_SVD_FULL_UV namespace: classpath: classname: name:CV_HAL_SVD_FULL_UV

--- Incoming ---
[   'const CV_HAL_GEMM_1_T',
    '1',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n'
    '@}\n'
    '@name Gemm flags\n'
    '@{\n']
parse_name: const CV_HAL_GEMM_1_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_GEMM_1_T namespace: classpath: classname: name:CV_HAL_GEMM_1_T

--- Incoming ---
[   'const CV_HAL_GEMM_2_T',
    '2',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n'
    '@}\n'
    '@name Gemm flags\n'
    '@{\n']
parse_name: const CV_HAL_GEMM_2_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_GEMM_2_T namespace: classpath: classname: name:CV_HAL_GEMM_2_T

--- Incoming ---
[   'const CV_HAL_GEMM_3_T',
    '4',
    [],
    [],
    '@}\n'
    '@name Comparison operation\n'
    '@sa cv::CmpTypes\n'
    '@{\n'
    '@}\n'
    '@name Border processing modes\n'
    '@sa cv::BorderTypes\n'
    '@{\n'
    '@}\n'
    '@name DFT flags\n'
    '@{\n'
    '@}\n'
    '@name SVD flags\n'
    '@{\n'
    '@}\n'
    '@name Gemm flags\n'
    '@{\n']
parse_name: const CV_HAL_GEMM_3_T with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_HAL_GEMM_3_T namespace: classpath: classname: name:CV_HAL_GEMM_3_T


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/neon_utils.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'cv_vrnd_s32_f32',
    'int32x2_t',
    [],
    [['float32x2_t', 'v', '', []]],
    None,
    '@addtogroup core_utils_neon\n@{']
parse_name: cv_vrnd_s32_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrnd_s32_f32 namespace: classpath: classname: name:cv_vrnd_s32_f32
Registering an unknown type: int32x2_t
Registering an unknown type: float32x2_t
register (function) cv_vrnd_s32_f32 (cv_vrnd_s32_f32_float32x2_t)

--- Incoming ---
['cv_vrndq_s32_f32', 'int32x4_t', [], [['float32x4_t', 'v', '', []]], None, '']
parse_name: cv_vrndq_s32_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrndq_s32_f32 namespace: classpath: classname: name:cv_vrndq_s32_f32
Registering an unknown type: int32x4_t
Registering an unknown type: float32x4_t
register (function) cv_vrndq_s32_f32 (cv_vrndq_s32_f32_float32x4_t)

--- Incoming ---
['cv_vrnd_u32_f32', 'uint32x2_t', [], [['float32x2_t', 'v', '', []]], None, '']
parse_name: cv_vrnd_u32_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrnd_u32_f32 namespace: classpath: classname: name:cv_vrnd_u32_f32
Registering an unknown type: uint32x2_t
register (function) cv_vrnd_u32_f32 (cv_vrnd_u32_f32_float32x2_t)

--- Incoming ---
['cv_vrndq_u32_f32', 'uint32x4_t', [], [['float32x4_t', 'v', '', []]], None, '']
parse_name: cv_vrndq_u32_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrndq_u32_f32 namespace: classpath: classname: name:cv_vrndq_u32_f32
Registering an unknown type: uint32x4_t
register (function) cv_vrndq_u32_f32 (cv_vrndq_u32_f32_float32x4_t)

--- Incoming ---
['cv_vrecpq_f32', 'float32x4_t', [], [['float32x4_t', 'val', '', []]], None, '']
parse_name: cv_vrecpq_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrecpq_f32 namespace: classpath: classname: name:cv_vrecpq_f32
register (function) cv_vrecpq_f32 (cv_vrecpq_f32_float32x4_t)

--- Incoming ---
['cv_vrecp_f32', 'float32x2_t', [], [['float32x2_t', 'val', '', []]], None, '']
parse_name: cv_vrecp_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrecp_f32 namespace: classpath: classname: name:cv_vrecp_f32
register (function) cv_vrecp_f32 (cv_vrecp_f32_float32x2_t)

--- Incoming ---
[   'cv_vrsqrtq_f32',
    'float32x4_t',
    [],
    [['float32x4_t', 'val', '', []]],
    None,
    '']
parse_name: cv_vrsqrtq_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrsqrtq_f32 namespace: classpath: classname: name:cv_vrsqrtq_f32
register (function) cv_vrsqrtq_f32 (cv_vrsqrtq_f32_float32x4_t)

--- Incoming ---
['cv_vrsqrt_f32', 'float32x2_t', [], [['float32x2_t', 'val', '', []]], None, '']
parse_name: cv_vrsqrt_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vrsqrt_f32 namespace: classpath: classname: name:cv_vrsqrt_f32
register (function) cv_vrsqrt_f32 (cv_vrsqrt_f32_float32x2_t)

--- Incoming ---
['cv_vsqrtq_f32', 'float32x4_t', [], [['float32x4_t', 'val', '', []]], None, '']
parse_name: cv_vsqrtq_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vsqrtq_f32 namespace: classpath: classname: name:cv_vsqrtq_f32
register (function) cv_vsqrtq_f32 (cv_vsqrtq_f32_float32x4_t)

--- Incoming ---
['cv_vsqrt_f32', 'float32x2_t', [], [['float32x2_t', 'val', '', []]], None, '']
parse_name: cv_vsqrt_f32 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv_vsqrt_f32 namespace: classpath: classname: name:cv_vsqrt_f32
register (function) cv_vsqrt_f32 (cv_vsqrt_f32_float32x2_t)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/ocl.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['cv.ocl.haveOpenCL', 'bool', [], [], None, '@addtogroup core_opencl\n@{']
parse_name: cv.ocl.haveOpenCL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::haveOpenCL namespace:cv::ocl classpath: classname: name:haveOpenCL
register (function) haveOpenCL (cv_ocl_haveOpenCL)

--- Incoming ---
['cv.ocl.useOpenCL', 'bool', [], [], None, '']
parse_name: cv.ocl.useOpenCL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::useOpenCL namespace:cv::ocl classpath: classname: name:useOpenCL
register (function) useOpenCL (cv_ocl_useOpenCL)

--- Incoming ---
['cv.ocl.haveAmdBlas', 'bool', [], [], None, '']
parse_name: cv.ocl.haveAmdBlas with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::haveAmdBlas namespace:cv::ocl classpath: classname: name:haveAmdBlas
register (function) haveAmdBlas (cv_ocl_haveAmdBlas)

--- Incoming ---
['cv.ocl.haveAmdFft', 'bool', [], [], None, '']
parse_name: cv.ocl.haveAmdFft with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::haveAmdFft namespace:cv::ocl classpath: classname: name:haveAmdFft
register (function) haveAmdFft (cv_ocl_haveAmdFft)

--- Incoming ---
['cv.ocl.setUseOpenCL', 'void', [], [['bool', 'flag', '', []]], None, '']
parse_name: cv.ocl.setUseOpenCL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::setUseOpenCL namespace:cv::ocl classpath: classname: name:setUseOpenCL
register (function) setUseOpenCL (cv_ocl_setUseOpenCL_bool)

--- Incoming ---
['cv.ocl.finish', 'void', [], [], None, '']
parse_name: cv.ocl.finish with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::finish namespace:cv::ocl classpath: classname: name:finish
register (function) finish (cv_ocl_finish)

--- Incoming ---
['cv.ocl.haveSVM', 'bool', [], [], None, '']
parse_name: cv.ocl.haveSVM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::haveSVM namespace:cv::ocl classpath: classname: name:haveSVM
register (function) haveSVM (cv_ocl_haveSVM)

--- Incoming ---
['class cv.ocl.Device', '', ['/Simple'], [], None, '']
parse_name: class cv.ocl.Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device namespace:cv::ocl classpath: classname: name:Device
register class cv::ocl::Device (['class cv.ocl.Device', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Device.Device', 'D', [], [], None, '']
parse_name: cv.ocl.Device.Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::Device namespace:cv::ocl classpath:Device classname:Device name:Device
register (constructor) default in cv::ocl::Device (cv_ocl_Device_Device)

--- Incoming ---
['cv.ocl.Device.Device', 'D', ['/E'], [['void*', 'd', '', []]], None, '']
parse_name: cv.ocl.Device.Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::Device namespace:cv::ocl classpath:Device classname:Device name:Device
register (constructor) new in cv::ocl::Device (cv_ocl_Device_Device_void_X)

--- Incoming ---
['cv.ocl.Device.Device', 'D', [], [['const Device&', 'd', '', []]], None, '']
parse_name: cv.ocl.Device.Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::Device namespace:cv::ocl classpath:Device classname:Device name:Device
register (constructor) copy in cv::ocl::Device (cv_ocl_Device_Device_Device)

--- Incoming ---
[   'cv.ocl.Device.operator =',
    'Device&',
    [],
    [['const Device&', 'd', '', []]],
    None,
    '']
parse_name: cv.ocl.Device.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::operator = namespace:cv::ocl classpath:Device classname:Device name:operator =
ignore (method) operator = in cv::ocl::Device

--- Incoming ---
['cv.ocl.Device.~Device', '~', [], [], None, '']
parse_name: cv.ocl.Device.~Device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::~Device namespace:cv::ocl classpath:Device classname:Device name:~Device
ignore destructor (method) ~Device in cv::ocl::Device

--- Incoming ---
['cv.ocl.Device.set', 'void', [], [['void*', 'd', '', []]], None, '']
parse_name: cv.ocl.Device.set with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::set namespace:cv::ocl classpath:Device classname:Device name:set
register (method) set in cv::ocl::Device (cv_ocl_Device_set_void_X)

--- Incoming ---
[   'enum cv.ocl.Device.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.Device.TYPE_DEFAULT', '(1 << 0)', [], [], None, ''],
        ['const cv.ocl.Device.TYPE_CPU', '(1 << 1)', [], [], None, ''],
        ['const cv.ocl.Device.TYPE_GPU', '(1 << 2)', [], [], None, ''],
        ['const cv.ocl.Device.TYPE_ACCELERATOR', '(1 << 3)', [], [], None, ''],
        [   'const cv.ocl.Device.TYPE_DGPU',
            'TYPE_GPU + (1 << 16)',
            [],
            [],
            None,
            ''],
        [   'const cv.ocl.Device.TYPE_IGPU',
            'TYPE_GPU + (1 << 17)',
            [],
            [],
            None,
            ''],
        ['const cv.ocl.Device.TYPE_ALL', '0xFFFFFFFF', [], [], None, '']],
    None,
    '']
parse_name: const cv.ocl.Device.TYPE_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_DEFAULT namespace:cv::ocl classpath:Device classname:Device name:TYPE_DEFAULT
parse_name: const cv.ocl.Device.TYPE_CPU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_CPU namespace:cv::ocl classpath:Device classname:Device name:TYPE_CPU
parse_name: const cv.ocl.Device.TYPE_GPU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_GPU namespace:cv::ocl classpath:Device classname:Device name:TYPE_GPU
parse_name: const cv.ocl.Device.TYPE_ACCELERATOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_ACCELERATOR namespace:cv::ocl classpath:Device classname:Device name:TYPE_ACCELERATOR
parse_name: const cv.ocl.Device.TYPE_DGPU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_DGPU namespace:cv::ocl classpath:Device classname:Device name:TYPE_DGPU
parse_name: const cv.ocl.Device.TYPE_IGPU with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_IGPU namespace:cv::ocl classpath:Device classname:Device name:TYPE_IGPU
parse_name: const cv.ocl.Device.TYPE_ALL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::TYPE_ALL namespace:cv::ocl classpath:Device classname:Device name:TYPE_ALL

--- Incoming ---
['cv.ocl.Device.name', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.name with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::name namespace:cv::ocl classpath:Device classname:Device name:name
register (method) name in cv::ocl::Device (cv_ocl_Device_name_const)

--- Incoming ---
['cv.ocl.Device.extensions', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.extensions with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::extensions namespace:cv::ocl classpath:Device classname:Device name:extensions
register (method) extensions in cv::ocl::Device (cv_ocl_Device_extensions_const)

--- Incoming ---
[   'cv.ocl.Device.isExtensionSupported',
    'bool',
    ['/C'],
    [['const String&', 'extensionName', '', []]],
    None,
    '']
parse_name: cv.ocl.Device.isExtensionSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::isExtensionSupported namespace:cv::ocl classpath:Device classname:Device name:isExtensionSupported
register (method) isExtensionSupported in cv::ocl::Device (cv_ocl_Device_isExtensionSupported_const_String)

--- Incoming ---
['cv.ocl.Device.version', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.version with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::version namespace:cv::ocl classpath:Device classname:Device name:version
register (method) version in cv::ocl::Device (cv_ocl_Device_version_const)

--- Incoming ---
['cv.ocl.Device.vendorName', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.vendorName with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::vendorName namespace:cv::ocl classpath:Device classname:Device name:vendorName
register (method) vendorName in cv::ocl::Device (cv_ocl_Device_vendorName_const)

--- Incoming ---
['cv.ocl.Device.OpenCL_C_Version', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.OpenCL_C_Version with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::OpenCL_C_Version namespace:cv::ocl classpath:Device classname:Device name:OpenCL_C_Version
register (method) OpenCL_C_Version in cv::ocl::Device (cv_ocl_Device_OpenCL_C_Version_const)

--- Incoming ---
['cv.ocl.Device.OpenCLVersion', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.OpenCLVersion with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::OpenCLVersion namespace:cv::ocl classpath:Device classname:Device name:OpenCLVersion
register (method) OpenCLVersion in cv::ocl::Device (cv_ocl_Device_OpenCLVersion_const)

--- Incoming ---
['cv.ocl.Device.deviceVersionMajor', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.deviceVersionMajor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::deviceVersionMajor namespace:cv::ocl classpath:Device classname:Device name:deviceVersionMajor
register (method) deviceVersionMajor in cv::ocl::Device (cv_ocl_Device_deviceVersionMajor_const)

--- Incoming ---
['cv.ocl.Device.deviceVersionMinor', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.deviceVersionMinor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::deviceVersionMinor namespace:cv::ocl classpath:Device classname:Device name:deviceVersionMinor
register (method) deviceVersionMinor in cv::ocl::Device (cv_ocl_Device_deviceVersionMinor_const)

--- Incoming ---
['cv.ocl.Device.driverVersion', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Device.driverVersion with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::driverVersion namespace:cv::ocl classpath:Device classname:Device name:driverVersion
register (method) driverVersion in cv::ocl::Device (cv_ocl_Device_driverVersion_const)

--- Incoming ---
['cv.ocl.Device.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Device.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::ptr namespace:cv::ocl classpath:Device classname:Device name:ptr
register (method) ptr in cv::ocl::Device (cv_ocl_Device_ptr_const)

--- Incoming ---
['cv.ocl.Device.type', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.type with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::type namespace:cv::ocl classpath:Device classname:Device name:type
register (method) type in cv::ocl::Device (cv_ocl_Device_type_const)

--- Incoming ---
['cv.ocl.Device.addressBits', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.addressBits with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::addressBits namespace:cv::ocl classpath:Device classname:Device name:addressBits
register (method) addressBits in cv::ocl::Device (cv_ocl_Device_addressBits_const)

--- Incoming ---
['cv.ocl.Device.available', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.available with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::available namespace:cv::ocl classpath:Device classname:Device name:available
register (method) available in cv::ocl::Device (cv_ocl_Device_available_const)

--- Incoming ---
['cv.ocl.Device.compilerAvailable', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.compilerAvailable with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::compilerAvailable namespace:cv::ocl classpath:Device classname:Device name:compilerAvailable
register (method) compilerAvailable in cv::ocl::Device (cv_ocl_Device_compilerAvailable_const)

--- Incoming ---
['cv.ocl.Device.linkerAvailable', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.linkerAvailable with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::linkerAvailable namespace:cv::ocl classpath:Device classname:Device name:linkerAvailable
register (method) linkerAvailable in cv::ocl::Device (cv_ocl_Device_linkerAvailable_const)

--- Incoming ---
[   'enum cv.ocl.Device.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.Device.FP_DENORM', '(1 << 0)', [], [], None, ''],
        ['const cv.ocl.Device.FP_INF_NAN', '(1 << 1)', [], [], None, ''],
        [   'const cv.ocl.Device.FP_ROUND_TO_NEAREST',
            '(1 << 2)',
            [],
            [],
            None,
            ''],
        ['const cv.ocl.Device.FP_ROUND_TO_ZERO', '(1 << 3)', [], [], None, ''],
        ['const cv.ocl.Device.FP_ROUND_TO_INF', '(1 << 4)', [], [], None, ''],
        ['const cv.ocl.Device.FP_FMA', '(1 << 5)', [], [], None, ''],
        ['const cv.ocl.Device.FP_SOFT_FLOAT', '(1 << 6)', [], [], None, ''],
        [   'const cv.ocl.Device.FP_CORRECTLY_ROUNDED_DIVIDE_SQRT',
            '(1 << 7)',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv.ocl.Device.FP_DENORM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_DENORM namespace:cv::ocl classpath:Device classname:Device name:FP_DENORM
parse_name: const cv.ocl.Device.FP_INF_NAN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_INF_NAN namespace:cv::ocl classpath:Device classname:Device name:FP_INF_NAN
parse_name: const cv.ocl.Device.FP_ROUND_TO_NEAREST with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_ROUND_TO_NEAREST namespace:cv::ocl classpath:Device classname:Device name:FP_ROUND_TO_NEAREST
parse_name: const cv.ocl.Device.FP_ROUND_TO_ZERO with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_ROUND_TO_ZERO namespace:cv::ocl classpath:Device classname:Device name:FP_ROUND_TO_ZERO
parse_name: const cv.ocl.Device.FP_ROUND_TO_INF with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_ROUND_TO_INF namespace:cv::ocl classpath:Device classname:Device name:FP_ROUND_TO_INF
parse_name: const cv.ocl.Device.FP_FMA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_FMA namespace:cv::ocl classpath:Device classname:Device name:FP_FMA
parse_name: const cv.ocl.Device.FP_SOFT_FLOAT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_SOFT_FLOAT namespace:cv::ocl classpath:Device classname:Device name:FP_SOFT_FLOAT
parse_name: const cv.ocl.Device.FP_CORRECTLY_ROUNDED_DIVIDE_SQRT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::FP_CORRECTLY_ROUNDED_DIVIDE_SQRT namespace:cv::ocl classpath:Device classname:Device name:FP_CORRECTLY_ROUNDED_DIVIDE_SQRT

--- Incoming ---
['cv.ocl.Device.doubleFPConfig', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.doubleFPConfig with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::doubleFPConfig namespace:cv::ocl classpath:Device classname:Device name:doubleFPConfig
register (method) doubleFPConfig in cv::ocl::Device (cv_ocl_Device_doubleFPConfig_const)

--- Incoming ---
['cv.ocl.Device.singleFPConfig', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.singleFPConfig with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::singleFPConfig namespace:cv::ocl classpath:Device classname:Device name:singleFPConfig
register (method) singleFPConfig in cv::ocl::Device (cv_ocl_Device_singleFPConfig_const)

--- Incoming ---
['cv.ocl.Device.halfFPConfig', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.halfFPConfig with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::halfFPConfig namespace:cv::ocl classpath:Device classname:Device name:halfFPConfig
register (method) halfFPConfig in cv::ocl::Device (cv_ocl_Device_halfFPConfig_const)

--- Incoming ---
['cv.ocl.Device.endianLittle', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.endianLittle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::endianLittle namespace:cv::ocl classpath:Device classname:Device name:endianLittle
register (method) endianLittle in cv::ocl::Device (cv_ocl_Device_endianLittle_const)

--- Incoming ---
['cv.ocl.Device.errorCorrectionSupport', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.errorCorrectionSupport with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::errorCorrectionSupport namespace:cv::ocl classpath:Device classname:Device name:errorCorrectionSupport
register (method) errorCorrectionSupport in cv::ocl::Device (cv_ocl_Device_errorCorrectionSupport_const)

--- Incoming ---
[   'enum cv.ocl.Device.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.Device.EXEC_KERNEL', '(1 << 0)', [], [], None, ''],
        [   'const cv.ocl.Device.EXEC_NATIVE_KERNEL',
            '(1 << 1)',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv.ocl.Device.EXEC_KERNEL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::EXEC_KERNEL namespace:cv::ocl classpath:Device classname:Device name:EXEC_KERNEL
parse_name: const cv.ocl.Device.EXEC_NATIVE_KERNEL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::EXEC_NATIVE_KERNEL namespace:cv::ocl classpath:Device classname:Device name:EXEC_NATIVE_KERNEL

--- Incoming ---
['cv.ocl.Device.executionCapabilities', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.executionCapabilities with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::executionCapabilities namespace:cv::ocl classpath:Device classname:Device name:executionCapabilities
register (method) executionCapabilities in cv::ocl::Device (cv_ocl_Device_executionCapabilities_const)

--- Incoming ---
['cv.ocl.Device.globalMemCacheSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.globalMemCacheSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::globalMemCacheSize namespace:cv::ocl classpath:Device classname:Device name:globalMemCacheSize
register (method) globalMemCacheSize in cv::ocl::Device (cv_ocl_Device_globalMemCacheSize_const)

--- Incoming ---
[   'enum cv.ocl.Device.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.Device.NO_CACHE', '0', [], [], None, ''],
        ['const cv.ocl.Device.READ_ONLY_CACHE', '1', [], [], None, ''],
        ['const cv.ocl.Device.READ_WRITE_CACHE', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.ocl.Device.NO_CACHE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::NO_CACHE namespace:cv::ocl classpath:Device classname:Device name:NO_CACHE
parse_name: const cv.ocl.Device.READ_ONLY_CACHE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::READ_ONLY_CACHE namespace:cv::ocl classpath:Device classname:Device name:READ_ONLY_CACHE
parse_name: const cv.ocl.Device.READ_WRITE_CACHE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::READ_WRITE_CACHE namespace:cv::ocl classpath:Device classname:Device name:READ_WRITE_CACHE

--- Incoming ---
['cv.ocl.Device.globalMemCacheType', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.globalMemCacheType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::globalMemCacheType namespace:cv::ocl classpath:Device classname:Device name:globalMemCacheType
register (method) globalMemCacheType in cv::ocl::Device (cv_ocl_Device_globalMemCacheType_const)

--- Incoming ---
['cv.ocl.Device.globalMemCacheLineSize', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.globalMemCacheLineSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::globalMemCacheLineSize namespace:cv::ocl classpath:Device classname:Device name:globalMemCacheLineSize
register (method) globalMemCacheLineSize in cv::ocl::Device (cv_ocl_Device_globalMemCacheLineSize_const)

--- Incoming ---
['cv.ocl.Device.globalMemSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.globalMemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::globalMemSize namespace:cv::ocl classpath:Device classname:Device name:globalMemSize
register (method) globalMemSize in cv::ocl::Device (cv_ocl_Device_globalMemSize_const)

--- Incoming ---
['cv.ocl.Device.localMemSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.localMemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::localMemSize namespace:cv::ocl classpath:Device classname:Device name:localMemSize
register (method) localMemSize in cv::ocl::Device (cv_ocl_Device_localMemSize_const)

--- Incoming ---
[   'enum cv.ocl.Device.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.Device.NO_LOCAL_MEM', '0', [], [], None, ''],
        ['const cv.ocl.Device.LOCAL_IS_LOCAL', '1', [], [], None, ''],
        ['const cv.ocl.Device.LOCAL_IS_GLOBAL', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.ocl.Device.NO_LOCAL_MEM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::NO_LOCAL_MEM namespace:cv::ocl classpath:Device classname:Device name:NO_LOCAL_MEM
parse_name: const cv.ocl.Device.LOCAL_IS_LOCAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::LOCAL_IS_LOCAL namespace:cv::ocl classpath:Device classname:Device name:LOCAL_IS_LOCAL
parse_name: const cv.ocl.Device.LOCAL_IS_GLOBAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::LOCAL_IS_GLOBAL namespace:cv::ocl classpath:Device classname:Device name:LOCAL_IS_GLOBAL

--- Incoming ---
['cv.ocl.Device.localMemType', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.localMemType with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::localMemType namespace:cv::ocl classpath:Device classname:Device name:localMemType
register (method) localMemType in cv::ocl::Device (cv_ocl_Device_localMemType_const)

--- Incoming ---
['cv.ocl.Device.hostUnifiedMemory', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.hostUnifiedMemory with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::hostUnifiedMemory namespace:cv::ocl classpath:Device classname:Device name:hostUnifiedMemory
register (method) hostUnifiedMemory in cv::ocl::Device (cv_ocl_Device_hostUnifiedMemory_const)

--- Incoming ---
['cv.ocl.Device.imageSupport', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.imageSupport with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::imageSupport namespace:cv::ocl classpath:Device classname:Device name:imageSupport
register (method) imageSupport in cv::ocl::Device (cv_ocl_Device_imageSupport_const)

--- Incoming ---
['cv.ocl.Device.imageFromBufferSupport', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.imageFromBufferSupport with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::imageFromBufferSupport namespace:cv::ocl classpath:Device classname:Device name:imageFromBufferSupport
register (method) imageFromBufferSupport in cv::ocl::Device (cv_ocl_Device_imageFromBufferSupport_const)

--- Incoming ---
['cv.ocl.Device.imagePitchAlignment', 'uint', ['/C'], [], None, '']
parse_name: cv.ocl.Device.imagePitchAlignment with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::imagePitchAlignment namespace:cv::ocl classpath:Device classname:Device name:imagePitchAlignment
register (method) imagePitchAlignment in cv::ocl::Device (cv_ocl_Device_imagePitchAlignment_const)

--- Incoming ---
['cv.ocl.Device.imageBaseAddressAlignment', 'uint', ['/C'], [], None, '']
parse_name: cv.ocl.Device.imageBaseAddressAlignment with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::imageBaseAddressAlignment namespace:cv::ocl classpath:Device classname:Device name:imageBaseAddressAlignment
register (method) imageBaseAddressAlignment in cv::ocl::Device (cv_ocl_Device_imageBaseAddressAlignment_const)

--- Incoming ---
['cv.ocl.Device.intelSubgroupsSupport', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.intelSubgroupsSupport with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::intelSubgroupsSupport namespace:cv::ocl classpath:Device classname:Device name:intelSubgroupsSupport
register (method) intelSubgroupsSupport in cv::ocl::Device (cv_ocl_Device_intelSubgroupsSupport_const)

--- Incoming ---
['cv.ocl.Device.image2DMaxWidth', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.image2DMaxWidth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::image2DMaxWidth namespace:cv::ocl classpath:Device classname:Device name:image2DMaxWidth
register (method) image2DMaxWidth in cv::ocl::Device (cv_ocl_Device_image2DMaxWidth_const)

--- Incoming ---
['cv.ocl.Device.image2DMaxHeight', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.image2DMaxHeight with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::image2DMaxHeight namespace:cv::ocl classpath:Device classname:Device name:image2DMaxHeight
register (method) image2DMaxHeight in cv::ocl::Device (cv_ocl_Device_image2DMaxHeight_const)

--- Incoming ---
['cv.ocl.Device.image3DMaxWidth', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.image3DMaxWidth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::image3DMaxWidth namespace:cv::ocl classpath:Device classname:Device name:image3DMaxWidth
register (method) image3DMaxWidth in cv::ocl::Device (cv_ocl_Device_image3DMaxWidth_const)

--- Incoming ---
['cv.ocl.Device.image3DMaxHeight', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.image3DMaxHeight with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::image3DMaxHeight namespace:cv::ocl classpath:Device classname:Device name:image3DMaxHeight
register (method) image3DMaxHeight in cv::ocl::Device (cv_ocl_Device_image3DMaxHeight_const)

--- Incoming ---
['cv.ocl.Device.image3DMaxDepth', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.image3DMaxDepth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::image3DMaxDepth namespace:cv::ocl classpath:Device classname:Device name:image3DMaxDepth
register (method) image3DMaxDepth in cv::ocl::Device (cv_ocl_Device_image3DMaxDepth_const)

--- Incoming ---
['cv.ocl.Device.imageMaxBufferSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.imageMaxBufferSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::imageMaxBufferSize namespace:cv::ocl classpath:Device classname:Device name:imageMaxBufferSize
register (method) imageMaxBufferSize in cv::ocl::Device (cv_ocl_Device_imageMaxBufferSize_const)

--- Incoming ---
['cv.ocl.Device.imageMaxArraySize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.imageMaxArraySize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::imageMaxArraySize namespace:cv::ocl classpath:Device classname:Device name:imageMaxArraySize
register (method) imageMaxArraySize in cv::ocl::Device (cv_ocl_Device_imageMaxArraySize_const)

--- Incoming ---
[   'enum cv.ocl.Device.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.Device.UNKNOWN_VENDOR', '0', [], [], None, ''],
        ['const cv.ocl.Device.VENDOR_AMD', '1', [], [], None, ''],
        ['const cv.ocl.Device.VENDOR_INTEL', '2', [], [], None, ''],
        ['const cv.ocl.Device.VENDOR_NVIDIA', '3', [], [], None, '']],
    None,
    '']
parse_name: const cv.ocl.Device.UNKNOWN_VENDOR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::UNKNOWN_VENDOR namespace:cv::ocl classpath:Device classname:Device name:UNKNOWN_VENDOR
parse_name: const cv.ocl.Device.VENDOR_AMD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::VENDOR_AMD namespace:cv::ocl classpath:Device classname:Device name:VENDOR_AMD
parse_name: const cv.ocl.Device.VENDOR_INTEL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::VENDOR_INTEL namespace:cv::ocl classpath:Device classname:Device name:VENDOR_INTEL
parse_name: const cv.ocl.Device.VENDOR_NVIDIA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::VENDOR_NVIDIA namespace:cv::ocl classpath:Device classname:Device name:VENDOR_NVIDIA

--- Incoming ---
['cv.ocl.Device.vendorID', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.vendorID with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::vendorID namespace:cv::ocl classpath:Device classname:Device name:vendorID
register (method) vendorID in cv::ocl::Device (cv_ocl_Device_vendorID_const)

--- Incoming ---
['cv.ocl.Device.isAMD', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.isAMD with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::isAMD namespace:cv::ocl classpath:Device classname:Device name:isAMD
register (method) isAMD in cv::ocl::Device (cv_ocl_Device_isAMD_const)

--- Incoming ---
['cv.ocl.Device.isIntel', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.isIntel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::isIntel namespace:cv::ocl classpath:Device classname:Device name:isIntel
register (method) isIntel in cv::ocl::Device (cv_ocl_Device_isIntel_const)

--- Incoming ---
['cv.ocl.Device.isNVidia', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Device.isNVidia with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::isNVidia namespace:cv::ocl classpath:Device classname:Device name:isNVidia
register (method) isNVidia in cv::ocl::Device (cv_ocl_Device_isNVidia_const)

--- Incoming ---
['cv.ocl.Device.maxClockFrequency', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxClockFrequency with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxClockFrequency namespace:cv::ocl classpath:Device classname:Device name:maxClockFrequency
register (method) maxClockFrequency in cv::ocl::Device (cv_ocl_Device_maxClockFrequency_const)

--- Incoming ---
['cv.ocl.Device.maxComputeUnits', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxComputeUnits with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxComputeUnits namespace:cv::ocl classpath:Device classname:Device name:maxComputeUnits
register (method) maxComputeUnits in cv::ocl::Device (cv_ocl_Device_maxComputeUnits_const)

--- Incoming ---
['cv.ocl.Device.maxConstantArgs', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxConstantArgs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxConstantArgs namespace:cv::ocl classpath:Device classname:Device name:maxConstantArgs
register (method) maxConstantArgs in cv::ocl::Device (cv_ocl_Device_maxConstantArgs_const)

--- Incoming ---
['cv.ocl.Device.maxConstantBufferSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxConstantBufferSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxConstantBufferSize namespace:cv::ocl classpath:Device classname:Device name:maxConstantBufferSize
register (method) maxConstantBufferSize in cv::ocl::Device (cv_ocl_Device_maxConstantBufferSize_const)

--- Incoming ---
['cv.ocl.Device.maxMemAllocSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxMemAllocSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxMemAllocSize namespace:cv::ocl classpath:Device classname:Device name:maxMemAllocSize
register (method) maxMemAllocSize in cv::ocl::Device (cv_ocl_Device_maxMemAllocSize_const)

--- Incoming ---
['cv.ocl.Device.maxParameterSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxParameterSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxParameterSize namespace:cv::ocl classpath:Device classname:Device name:maxParameterSize
register (method) maxParameterSize in cv::ocl::Device (cv_ocl_Device_maxParameterSize_const)

--- Incoming ---
['cv.ocl.Device.maxReadImageArgs', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxReadImageArgs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxReadImageArgs namespace:cv::ocl classpath:Device classname:Device name:maxReadImageArgs
register (method) maxReadImageArgs in cv::ocl::Device (cv_ocl_Device_maxReadImageArgs_const)

--- Incoming ---
['cv.ocl.Device.maxWriteImageArgs', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxWriteImageArgs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxWriteImageArgs namespace:cv::ocl classpath:Device classname:Device name:maxWriteImageArgs
register (method) maxWriteImageArgs in cv::ocl::Device (cv_ocl_Device_maxWriteImageArgs_const)

--- Incoming ---
['cv.ocl.Device.maxSamplers', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxSamplers with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxSamplers namespace:cv::ocl classpath:Device classname:Device name:maxSamplers
register (method) maxSamplers in cv::ocl::Device (cv_ocl_Device_maxSamplers_const)

--- Incoming ---
['cv.ocl.Device.maxWorkGroupSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxWorkGroupSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxWorkGroupSize namespace:cv::ocl classpath:Device classname:Device name:maxWorkGroupSize
register (method) maxWorkGroupSize in cv::ocl::Device (cv_ocl_Device_maxWorkGroupSize_const)

--- Incoming ---
['cv.ocl.Device.maxWorkItemDims', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.maxWorkItemDims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxWorkItemDims namespace:cv::ocl classpath:Device classname:Device name:maxWorkItemDims
register (method) maxWorkItemDims in cv::ocl::Device (cv_ocl_Device_maxWorkItemDims_const)

--- Incoming ---
[   'cv.ocl.Device.maxWorkItemSizes',
    'void',
    ['/C'],
    [['size_t*', '', '', []]],
    None,
    '']
parse_name: cv.ocl.Device.maxWorkItemSizes with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::maxWorkItemSizes namespace:cv::ocl classpath:Device classname:Device name:maxWorkItemSizes
register (method) maxWorkItemSizes in cv::ocl::Device (cv_ocl_Device_maxWorkItemSizes_const_size_t_X)

--- Incoming ---
['cv.ocl.Device.memBaseAddrAlign', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.memBaseAddrAlign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::memBaseAddrAlign namespace:cv::ocl classpath:Device classname:Device name:memBaseAddrAlign
register (method) memBaseAddrAlign in cv::ocl::Device (cv_ocl_Device_memBaseAddrAlign_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthChar', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthChar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthChar namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthChar
register (method) nativeVectorWidthChar in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthChar_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthShort', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthShort with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthShort namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthShort
register (method) nativeVectorWidthShort in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthShort_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthInt', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthInt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthInt namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthInt
register (method) nativeVectorWidthInt in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthInt_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthLong', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthLong with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthLong namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthLong
register (method) nativeVectorWidthLong in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthLong_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthFloat', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthFloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthFloat namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthFloat
register (method) nativeVectorWidthFloat in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthFloat_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthDouble', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthDouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthDouble namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthDouble
register (method) nativeVectorWidthDouble in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthDouble_const)

--- Incoming ---
['cv.ocl.Device.nativeVectorWidthHalf', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.nativeVectorWidthHalf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::nativeVectorWidthHalf namespace:cv::ocl classpath:Device classname:Device name:nativeVectorWidthHalf
register (method) nativeVectorWidthHalf in cv::ocl::Device (cv_ocl_Device_nativeVectorWidthHalf_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthChar', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthChar with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthChar namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthChar
register (method) preferredVectorWidthChar in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthChar_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthShort', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthShort with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthShort namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthShort
register (method) preferredVectorWidthShort in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthShort_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthInt', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthInt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthInt namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthInt
register (method) preferredVectorWidthInt in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthInt_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthLong', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthLong with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthLong namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthLong
register (method) preferredVectorWidthLong in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthLong_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthFloat', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthFloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthFloat namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthFloat
register (method) preferredVectorWidthFloat in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthFloat_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthDouble', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthDouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthDouble namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthDouble
register (method) preferredVectorWidthDouble in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthDouble_const)

--- Incoming ---
['cv.ocl.Device.preferredVectorWidthHalf', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.Device.preferredVectorWidthHalf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::preferredVectorWidthHalf namespace:cv::ocl classpath:Device classname:Device name:preferredVectorWidthHalf
register (method) preferredVectorWidthHalf in cv::ocl::Device (cv_ocl_Device_preferredVectorWidthHalf_const)

--- Incoming ---
['cv.ocl.Device.printfBufferSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.printfBufferSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::printfBufferSize namespace:cv::ocl classpath:Device classname:Device name:printfBufferSize
register (method) printfBufferSize in cv::ocl::Device (cv_ocl_Device_printfBufferSize_const)

--- Incoming ---
['cv.ocl.Device.profilingTimerResolution', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Device.profilingTimerResolution with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::profilingTimerResolution namespace:cv::ocl classpath:Device classname:Device name:profilingTimerResolution
register (method) profilingTimerResolution in cv::ocl::Device (cv_ocl_Device_profilingTimerResolution_const)

--- Incoming ---
['cv.ocl.Device.getDefault', 'const Device&', ['/S'], [], None, '']
parse_name: cv.ocl.Device.getDefault with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Device::getDefault namespace:cv::ocl classpath:Device classname:Device name:getDefault
register (method) getDefault in cv::ocl::Device (cv_ocl_Device_getDefault)

--- Incoming ---
['class cv.ocl.Context', '', [], [], None, '']
parse_name: class cv.ocl.Context with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context namespace:cv::ocl classpath: classname: name:Context
register class cv::ocl::Context (['class cv.ocl.Context', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Context.Context', 'C', [], [], None, '']
parse_name: cv.ocl.Context.Context with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::Context namespace:cv::ocl classpath:Context classname:Context name:Context
register (constructor) default in cv::ocl::Context (cv_ocl_Context_Context)

--- Incoming ---
['cv.ocl.Context.Context', 'C', ['/E'], [['int', 'dtype', '', []]], None, '']
parse_name: cv.ocl.Context.Context with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::Context namespace:cv::ocl classpath:Context classname:Context name:Context
register (constructor) new in cv::ocl::Context (cv_ocl_Context_Context_int)

--- Incoming ---
['cv.ocl.Context.~Context', '~', [], [], None, '']
parse_name: cv.ocl.Context.~Context with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::~Context namespace:cv::ocl classpath:Context classname:Context name:~Context
ignore destructor (method) ~Context in cv::ocl::Context

--- Incoming ---
['cv.ocl.Context.Context', 'C', [], [['const Context&', 'c', '', []]], None, '']
parse_name: cv.ocl.Context.Context with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::Context namespace:cv::ocl classpath:Context classname:Context name:Context
register (constructor) copy in cv::ocl::Context (cv_ocl_Context_Context_Context)

--- Incoming ---
[   'cv.ocl.Context.operator =',
    'Context&',
    [],
    [['const Context&', 'c', '', []]],
    None,
    '']
parse_name: cv.ocl.Context.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::operator = namespace:cv::ocl classpath:Context classname:Context name:operator =
ignore (method) operator = in cv::ocl::Context

--- Incoming ---
['cv.ocl.Context.create', 'bool', [], [], None, '']
parse_name: cv.ocl.Context.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::create namespace:cv::ocl classpath:Context classname:Context name:create
register (method) create in cv::ocl::Context (cv_ocl_Context_create)

--- Incoming ---
['cv.ocl.Context.create', 'bool', [], [['int', 'dtype', '', []]], None, '']
parse_name: cv.ocl.Context.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::create namespace:cv::ocl classpath:Context classname:Context name:create
register (method) create in cv::ocl::Context (cv_ocl_Context_create_int)

--- Incoming ---
['cv.ocl.Context.ndevices', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Context.ndevices with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::ndevices namespace:cv::ocl classpath:Context classname:Context name:ndevices
register (method) ndevices in cv::ocl::Context (cv_ocl_Context_ndevices_const)

--- Incoming ---
[   'cv.ocl.Context.device',
    'const Device&',
    ['/C'],
    [['size_t', 'idx', '', []]],
    None,
    '']
parse_name: cv.ocl.Context.device with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::device namespace:cv::ocl classpath:Context classname:Context name:device
register (method) device in cv::ocl::Context (cv_ocl_Context_device_const_size_t)

--- Incoming ---
[   'cv.ocl.Context.getProg',
    'Program',
    [],
    [   ['const ProgramSource&', 'prog', '', []],
        ['const String&', 'buildopt', '', []],
        ['String&', 'errmsg', '', []]],
    None,
    '']
parse_name: cv.ocl.Context.getProg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::getProg namespace:cv::ocl classpath:Context classname:Context name:getProg
Registering an unknown type: Program
Registering an unknown type: ProgramSource
register (method) getProg in cv::ocl::Context (cv_ocl_Context_getProg_ProgramSource_String_String)

--- Incoming ---
[   'cv.ocl.Context.unloadProg',
    'void',
    [],
    [['Program&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.Context.unloadProg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::unloadProg namespace:cv::ocl classpath:Context classname:Context name:unloadProg
Registering an unknown type: Program
register (method) unloadProg in cv::ocl::Context (cv_ocl_Context_unloadProg_Program)

--- Incoming ---
[   'cv.ocl.Context.getDefault',
    'Context&',
    ['/S'],
    [['bool', 'initialize', 'true', []]],
    None,
    '']
parse_name: cv.ocl.Context.getDefault with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::getDefault namespace:cv::ocl classpath:Context classname:Context name:getDefault
register (method) getDefault in cv::ocl::Context (cv_ocl_Context_getDefault_bool)

--- Incoming ---
['cv.ocl.Context.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Context.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::ptr namespace:cv::ocl classpath:Context classname:Context name:ptr
register (method) ptr in cv::ocl::Context (cv_ocl_Context_ptr_const)

--- Incoming ---
[   'cv.ocl.Context.void initializeContextFromHandle',
    'friend void',
    [],
    [   ['Context&', 'ctx', '', []],
        ['void*', 'platform', '', []],
        ['void*', 'context', '', []],
        ['void*', 'device', '', []]],
    None,
    '']
parse_name: cv.ocl.Context.void initializeContextFromHandle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::void initializeContextFromHandle namespace:cv::ocl classpath:Context classname:Context name:void initializeContextFromHandle
Registering an unknown type: friend void
register (method) void initializeContextFromHandle in cv::ocl::Context (cv_ocl_Context_void_initializeContextFromHandle_Context_void_X_void_X_void_X)

--- Incoming ---
['cv.ocl.Context.useSVM', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Context.useSVM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::useSVM namespace:cv::ocl classpath:Context classname:Context name:useSVM
register (method) useSVM in cv::ocl::Context (cv_ocl_Context_useSVM_const)

--- Incoming ---
[   'cv.ocl.Context.setUseSVM',
    'void',
    [],
    [['bool', 'enabled', '', []]],
    None,
    '']
parse_name: cv.ocl.Context.setUseSVM with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::setUseSVM namespace:cv::ocl classpath:Context classname:Context name:setUseSVM
register (method) setUseSVM in cv::ocl::Context (cv_ocl_Context_setUseSVM_bool)

--- Incoming ---
['cv.ocl.Context.getImpl', 'Impl*', ['/C'], [], None, '']
parse_name: cv.ocl.Context.getImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Context::getImpl namespace:cv::ocl classpath:Context classname:Context name:getImpl
Registering an unknown type: Impl
register (method) getImpl in cv::ocl::Context (cv_ocl_Context_getImpl_const)

--- Incoming ---
['class cv.ocl.Platform', '', [], [], None, '']
parse_name: class cv.ocl.Platform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform namespace:cv::ocl classpath: classname: name:Platform
register class cv::ocl::Platform (['class cv.ocl.Platform', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Platform.Platform', 'P', [], [], None, '']
parse_name: cv.ocl.Platform.Platform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::Platform namespace:cv::ocl classpath:Platform classname:Platform name:Platform
register (constructor) default in cv::ocl::Platform (cv_ocl_Platform_Platform)

--- Incoming ---
['cv.ocl.Platform.~Platform', '~', [], [], None, '']
parse_name: cv.ocl.Platform.~Platform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::~Platform namespace:cv::ocl classpath:Platform classname:Platform name:~Platform
ignore destructor (method) ~Platform in cv::ocl::Platform

--- Incoming ---
[   'cv.ocl.Platform.Platform',
    'P',
    [],
    [['const Platform&', 'p', '', []]],
    None,
    '']
parse_name: cv.ocl.Platform.Platform with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::Platform namespace:cv::ocl classpath:Platform classname:Platform name:Platform
register (constructor) copy in cv::ocl::Platform (cv_ocl_Platform_Platform_Platform)

--- Incoming ---
[   'cv.ocl.Platform.operator =',
    'Platform&',
    [],
    [['const Platform&', 'p', '', []]],
    None,
    '']
parse_name: cv.ocl.Platform.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::operator = namespace:cv::ocl classpath:Platform classname:Platform name:operator =
ignore (method) operator = in cv::ocl::Platform

--- Incoming ---
['cv.ocl.Platform.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Platform.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::ptr namespace:cv::ocl classpath:Platform classname:Platform name:ptr
register (method) ptr in cv::ocl::Platform (cv_ocl_Platform_ptr_const)

--- Incoming ---
['cv.ocl.Platform.getDefault', 'Platform&', ['/S'], [], None, '']
parse_name: cv.ocl.Platform.getDefault with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::getDefault namespace:cv::ocl classpath:Platform classname:Platform name:getDefault
register (method) getDefault in cv::ocl::Platform (cv_ocl_Platform_getDefault)

--- Incoming ---
[   'cv.ocl.Platform.void initializeContextFromHandle',
    'friend void',
    [],
    [   ['Context&', 'ctx', '', []],
        ['void*', 'platform', '', []],
        ['void*', 'context', '', []],
        ['void*', 'device', '', []]],
    None,
    '']
parse_name: cv.ocl.Platform.void initializeContextFromHandle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Platform::void initializeContextFromHandle namespace:cv::ocl classpath:Platform classname:Platform name:void initializeContextFromHandle
register (method) void initializeContextFromHandle in cv::ocl::Platform (cv_ocl_Platform_void_initializeContextFromHandle_Context_void_X_void_X_void_X)

--- Incoming ---
[   'cv.ocl.attachContext',
    'void',
    [],
    [   ['const String&', 'platformName', '', []],
        ['void*', 'platformID', '', []],
        ['void*', 'context', '', []],
        ['void*', 'deviceID', '', []]],
    None,
    '@brief Attaches OpenCL context to OpenCV\n'
    '@note\n'
    'OpenCV will check if available OpenCL platform has platformName name, '
    'then assign context to\n'
    'OpenCV and call `clRetainContext` function. The deviceID device will be '
    'used as target device and\n'
    'new command queue will be created.\n'
    '@param platformName name of OpenCL platform to attach, this string is '
    'used to check if platform is available to OpenCV at runtime\n'
    '@param platformID ID of platform attached context was created for\n'
    '@param context OpenCL context to be attached to OpenCV\n'
    '@param deviceID ID of device, must be created from attached context']
parse_name: cv.ocl.attachContext with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::attachContext namespace:cv::ocl classpath: classname: name:attachContext
register (function) attachContext (cv_ocl_attachContext_String_void_X_void_X_void_X)

--- Incoming ---
[   'cv.ocl.convertFromBuffer',
    'void',
    [],
    [   ['void*', 'cl_mem_buffer', '', []],
        ['size_t', 'step', '', []],
        ['int', 'rows', '', []],
        ['int', 'cols', '', []],
        ['int', 'type', '', []],
        ['UMat&', 'dst', '', []]],
    None,
    '@brief Convert OpenCL buffer to UMat\n'
    '@note\n'
    'OpenCL buffer (cl_mem_buffer) should contain 2D image data, compatible '
    'with OpenCV. Memory\n'
    'content is not copied from `clBuffer` to UMat. Instead, buffer handle '
    'assigned to UMat and\n'
    '`clRetainMemObject` is called.\n'
    '@param cl_mem_buffer source clBuffer handle\n'
    '@param step num of bytes in single row\n'
    '@param rows number of rows\n'
    '@param cols number of cols\n'
    '@param type OpenCV type of image\n'
    '@param dst destination UMat']
parse_name: cv.ocl.convertFromBuffer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::convertFromBuffer namespace:cv::ocl classpath: classname: name:convertFromBuffer
register (function) convertFromBuffer (cv_ocl_convertFromBuffer_void_X_size_t_int_int_int_UMat)

--- Incoming ---
[   'cv.ocl.convertFromImage',
    'void',
    [],
    [['void*', 'cl_mem_image', '', []], ['UMat&', 'dst', '', []]],
    None,
    '@brief Convert OpenCL image2d_t to UMat\n'
    '@note\n'
    'OpenCL `image2d_t` (cl_mem_image), should be compatible with OpenCV UMat '
    'formats. Memory content\n'
    'is copied from image to UMat with `clEnqueueCopyImageToBuffer` function.\n'
    '@param cl_mem_image source image2d_t handle\n'
    '@param dst destination UMat']
parse_name: cv.ocl.convertFromImage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::convertFromImage namespace:cv::ocl classpath: classname: name:convertFromImage
register (function) convertFromImage (cv_ocl_convertFromImage_void_X_UMat)

--- Incoming ---
[   'cv.ocl.initializeContextFromHandle',
    'void',
    [],
    [   ['Context&', 'ctx', '', []],
        ['void*', 'platform', '', []],
        ['void*', 'context', '', []],
        ['void*', 'device', '', []]],
    None,
    '']
parse_name: cv.ocl.initializeContextFromHandle with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::initializeContextFromHandle namespace:cv::ocl classpath: classname: name:initializeContextFromHandle
register (function) initializeContextFromHandle (cv_ocl_initializeContextFromHandle_Context_void_X_void_X_void_X)

--- Incoming ---
['class cv.ocl.Queue', '', [], [], None, '']
parse_name: class cv.ocl.Queue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue namespace:cv::ocl classpath: classname: name:Queue
register class cv::ocl::Queue (['class cv.ocl.Queue', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Queue.Queue', 'Q', [], [], None, '']
parse_name: cv.ocl.Queue.Queue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::Queue namespace:cv::ocl classpath:Queue classname:Queue name:Queue
register (constructor) default in cv::ocl::Queue (cv_ocl_Queue_Queue)

--- Incoming ---
[   'cv.ocl.Queue.Queue',
    'Q',
    ['/E'],
    [['const Context&', 'c', '', []], ['const Device&', 'd', 'Device()', []]],
    None,
    '']
parse_name: cv.ocl.Queue.Queue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::Queue namespace:cv::ocl classpath:Queue classname:Queue name:Queue
register (constructor) new in cv::ocl::Queue (cv_ocl_Queue_Queue_Context_Device)

--- Incoming ---
['cv.ocl.Queue.~Queue', '~', [], [], None, '']
parse_name: cv.ocl.Queue.~Queue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::~Queue namespace:cv::ocl classpath:Queue classname:Queue name:~Queue
ignore destructor (method) ~Queue in cv::ocl::Queue

--- Incoming ---
['cv.ocl.Queue.Queue', 'Q', [], [['const Queue&', 'q', '', []]], None, '']
parse_name: cv.ocl.Queue.Queue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::Queue namespace:cv::ocl classpath:Queue classname:Queue name:Queue
register (constructor) copy in cv::ocl::Queue (cv_ocl_Queue_Queue_Queue)

--- Incoming ---
[   'cv.ocl.Queue.operator =',
    'Queue&',
    [],
    [['const Queue&', 'q', '', []]],
    None,
    '']
parse_name: cv.ocl.Queue.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::operator = namespace:cv::ocl classpath:Queue classname:Queue name:operator =
ignore (method) operator = in cv::ocl::Queue

--- Incoming ---
[   'cv.ocl.Queue.create',
    'bool',
    [],
    [   ['const Context&', 'c', 'Context()', []],
        ['const Device&', 'd', 'Device()', []]],
    None,
    '']
parse_name: cv.ocl.Queue.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::create namespace:cv::ocl classpath:Queue classname:Queue name:create
register (method) create in cv::ocl::Queue (cv_ocl_Queue_create_Context_Device)

--- Incoming ---
['cv.ocl.Queue.finish', 'void', [], [], None, '']
parse_name: cv.ocl.Queue.finish with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::finish namespace:cv::ocl classpath:Queue classname:Queue name:finish
register (method) finish in cv::ocl::Queue (cv_ocl_Queue_finish)

--- Incoming ---
['cv.ocl.Queue.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Queue.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::ptr namespace:cv::ocl classpath:Queue classname:Queue name:ptr
register (method) ptr in cv::ocl::Queue (cv_ocl_Queue_ptr_const)

--- Incoming ---
['cv.ocl.Queue.getDefault', 'Queue&', ['/S'], [], None, '']
parse_name: cv.ocl.Queue.getDefault with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::getDefault namespace:cv::ocl classpath:Queue classname:Queue name:getDefault
register (method) getDefault in cv::ocl::Queue (cv_ocl_Queue_getDefault)

--- Incoming ---
['cv.ocl.Queue.getProfilingQueue', 'const Queue&', ['/C'], [], None, '']
parse_name: cv.ocl.Queue.getProfilingQueue with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::getProfilingQueue namespace:cv::ocl classpath:Queue classname:Queue name:getProfilingQueue
register (method) getProfilingQueue in cv::ocl::Queue (cv_ocl_Queue_getProfilingQueue_const)

--- Incoming ---
['cv.ocl.Queue.getImpl', 'Impl*', ['/C'], [], None, '']
parse_name: cv.ocl.Queue.getImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Queue::getImpl namespace:cv::ocl classpath:Queue classname:Queue name:getImpl
register (method) getImpl in cv::ocl::Queue (cv_ocl_Queue_getImpl_const)

--- Incoming ---
['class cv.ocl.KernelArg', '', [], [], None, '']
parse_name: class cv.ocl.KernelArg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg namespace:cv::ocl classpath: classname: name:KernelArg
register class cv::ocl::KernelArg (['class cv.ocl.KernelArg', '', [], [], None, ''])

--- Incoming ---
[   'enum cv.ocl.KernelArg.<unnamed>',
    '',
    [],
    [   ['const cv.ocl.KernelArg.LOCAL', '1', [], [], None, ''],
        ['const cv.ocl.KernelArg.READ_ONLY', '2', [], [], None, ''],
        ['const cv.ocl.KernelArg.WRITE_ONLY', '4', [], [], None, ''],
        ['const cv.ocl.KernelArg.READ_WRITE', '6', [], [], None, ''],
        ['const cv.ocl.KernelArg.CONSTANT', '8', [], [], None, ''],
        ['const cv.ocl.KernelArg.PTR_ONLY', '16', [], [], None, ''],
        ['const cv.ocl.KernelArg.NO_SIZE', '256', [], [], None, '']],
    None,
    '']
parse_name: const cv.ocl.KernelArg.LOCAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::LOCAL namespace:cv::ocl classpath:KernelArg classname:KernelArg name:LOCAL
parse_name: const cv.ocl.KernelArg.READ_ONLY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::READ_ONLY namespace:cv::ocl classpath:KernelArg classname:KernelArg name:READ_ONLY
parse_name: const cv.ocl.KernelArg.WRITE_ONLY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::WRITE_ONLY namespace:cv::ocl classpath:KernelArg classname:KernelArg name:WRITE_ONLY
parse_name: const cv.ocl.KernelArg.READ_WRITE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::READ_WRITE namespace:cv::ocl classpath:KernelArg classname:KernelArg name:READ_WRITE
parse_name: const cv.ocl.KernelArg.CONSTANT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::CONSTANT namespace:cv::ocl classpath:KernelArg classname:KernelArg name:CONSTANT
parse_name: const cv.ocl.KernelArg.PTR_ONLY with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::PTR_ONLY namespace:cv::ocl classpath:KernelArg classname:KernelArg name:PTR_ONLY
parse_name: const cv.ocl.KernelArg.NO_SIZE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::NO_SIZE namespace:cv::ocl classpath:KernelArg classname:KernelArg name:NO_SIZE

--- Incoming ---
[   'cv.ocl.KernelArg.KernelArg',
    'K',
    [],
    [   ['int', '_flags', '', []],
        ['UMat*', '_m', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []],
        ['const void*', '_obj', '0', []],
        ['size_t', '_sz', '0', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.KernelArg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::KernelArg namespace:cv::ocl classpath:KernelArg classname:KernelArg name:KernelArg
register (constructor) new in cv::ocl::KernelArg (cv_ocl_KernelArg_KernelArg_int_UMat_int_int_const_void_X_size_t)

--- Incoming ---
['cv.ocl.KernelArg.KernelArg', 'K', [], [], None, '']
parse_name: cv.ocl.KernelArg.KernelArg with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::KernelArg namespace:cv::ocl classpath:KernelArg classname:KernelArg name:KernelArg
register (constructor) default in cv::ocl::KernelArg (cv_ocl_KernelArg_KernelArg)

--- Incoming ---
[   'cv.ocl.KernelArg.Local',
    'KernelArg',
    ['/S'],
    [['size_t', 'localMemSize', '', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.Local with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::Local namespace:cv::ocl classpath:KernelArg classname:KernelArg name:Local
register (method) Local in cv::ocl::KernelArg (cv_ocl_KernelArg_Local_size_t)

--- Incoming ---
[   'cv.ocl.KernelArg.PtrWriteOnly',
    'KernelArg',
    ['/S'],
    [['const UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.PtrWriteOnly with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::PtrWriteOnly namespace:cv::ocl classpath:KernelArg classname:KernelArg name:PtrWriteOnly
register (method) PtrWriteOnly in cv::ocl::KernelArg (cv_ocl_KernelArg_PtrWriteOnly_UMat)

--- Incoming ---
[   'cv.ocl.KernelArg.PtrReadOnly',
    'KernelArg',
    ['/S'],
    [['const UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.PtrReadOnly with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::PtrReadOnly namespace:cv::ocl classpath:KernelArg classname:KernelArg name:PtrReadOnly
register (method) PtrReadOnly in cv::ocl::KernelArg (cv_ocl_KernelArg_PtrReadOnly_UMat)

--- Incoming ---
[   'cv.ocl.KernelArg.PtrReadWrite',
    'KernelArg',
    ['/S'],
    [['const UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.PtrReadWrite with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::PtrReadWrite namespace:cv::ocl classpath:KernelArg classname:KernelArg name:PtrReadWrite
register (method) PtrReadWrite in cv::ocl::KernelArg (cv_ocl_KernelArg_PtrReadWrite_UMat)

--- Incoming ---
[   'cv.ocl.KernelArg.ReadWrite',
    'KernelArg',
    ['/S'],
    [   ['const UMat&', 'm', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.ReadWrite with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::ReadWrite namespace:cv::ocl classpath:KernelArg classname:KernelArg name:ReadWrite
register (method) ReadWrite in cv::ocl::KernelArg (cv_ocl_KernelArg_ReadWrite_UMat_int_int)

--- Incoming ---
[   'cv.ocl.KernelArg.ReadWriteNoSize',
    'KernelArg',
    ['/S'],
    [   ['const UMat&', 'm', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.ReadWriteNoSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::ReadWriteNoSize namespace:cv::ocl classpath:KernelArg classname:KernelArg name:ReadWriteNoSize
register (method) ReadWriteNoSize in cv::ocl::KernelArg (cv_ocl_KernelArg_ReadWriteNoSize_UMat_int_int)

--- Incoming ---
[   'cv.ocl.KernelArg.ReadOnly',
    'KernelArg',
    ['/S'],
    [   ['const UMat&', 'm', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.ReadOnly with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::ReadOnly namespace:cv::ocl classpath:KernelArg classname:KernelArg name:ReadOnly
register (method) ReadOnly in cv::ocl::KernelArg (cv_ocl_KernelArg_ReadOnly_UMat_int_int)

--- Incoming ---
[   'cv.ocl.KernelArg.WriteOnly',
    'KernelArg',
    ['/S'],
    [   ['const UMat&', 'm', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.WriteOnly with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::WriteOnly namespace:cv::ocl classpath:KernelArg classname:KernelArg name:WriteOnly
register (method) WriteOnly in cv::ocl::KernelArg (cv_ocl_KernelArg_WriteOnly_UMat_int_int)

--- Incoming ---
[   'cv.ocl.KernelArg.ReadOnlyNoSize',
    'KernelArg',
    ['/S'],
    [   ['const UMat&', 'm', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.ReadOnlyNoSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::ReadOnlyNoSize namespace:cv::ocl classpath:KernelArg classname:KernelArg name:ReadOnlyNoSize
register (method) ReadOnlyNoSize in cv::ocl::KernelArg (cv_ocl_KernelArg_ReadOnlyNoSize_UMat_int_int)

--- Incoming ---
[   'cv.ocl.KernelArg.WriteOnlyNoSize',
    'KernelArg',
    ['/S'],
    [   ['const UMat&', 'm', '', []],
        ['int', 'wscale', '1', []],
        ['int', 'iwscale', '1', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.WriteOnlyNoSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::WriteOnlyNoSize namespace:cv::ocl classpath:KernelArg classname:KernelArg name:WriteOnlyNoSize
register (method) WriteOnlyNoSize in cv::ocl::KernelArg (cv_ocl_KernelArg_WriteOnlyNoSize_UMat_int_int)

--- Incoming ---
[   'cv.ocl.KernelArg.Constant',
    'KernelArg',
    ['/S'],
    [['const Mat&', 'm', '', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.Constant with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::Constant namespace:cv::ocl classpath:KernelArg classname:KernelArg name:Constant
register (method) Constant in cv::ocl::KernelArg (cv_ocl_KernelArg_Constant_Mat)

--- Incoming ---
[   'cv.ocl.KernelArg.KernelArg Constant',
    'template<typename _Tp> static KernelArg',
    [],
    [['const _Tp*', 'arr', '', []], ['size_t', 'n', '', []]],
    None,
    '']
parse_name: cv.ocl.KernelArg.KernelArg Constant with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::KernelArg::KernelArg Constant namespace:cv::ocl classpath:KernelArg classname:KernelArg name:KernelArg Constant
Registering an unknown type: template<typename _Tp> static KernelArg
register (method) KernelArg Constant in cv::ocl::KernelArg (cv_ocl_KernelArg_KernelArg_Constant__Tp*_size_t)

--- Incoming ---
['class cv.ocl.Kernel', '', [], [], None, '']
parse_name: class cv.ocl.Kernel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel namespace:cv::ocl classpath: classname: name:Kernel
register class cv::ocl::Kernel (['class cv.ocl.Kernel', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Kernel.Kernel', 'K', [], [], None, '']
parse_name: cv.ocl.Kernel.Kernel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::Kernel namespace:cv::ocl classpath:Kernel classname:Kernel name:Kernel
register (constructor) default in cv::ocl::Kernel (cv_ocl_Kernel_Kernel)

--- Incoming ---
[   'cv.ocl.Kernel.Kernel',
    'K',
    [],
    [['const char*', 'kname', '', []], ['const Program&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.Kernel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::Kernel namespace:cv::ocl classpath:Kernel classname:Kernel name:Kernel
Registering an unknown type: Program
register (constructor) new in cv::ocl::Kernel (cv_ocl_Kernel_Kernel_const_char_X_Program)

--- Incoming ---
[   'cv.ocl.Kernel.Kernel',
    'K',
    [],
    [   ['const char*', 'kname', '', []],
        ['const ProgramSource&', 'prog', '', []],
        ['const String&', 'buildopts', 'String()', []],
        ['String*', 'errmsg', '0', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.Kernel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::Kernel namespace:cv::ocl classpath:Kernel classname:Kernel name:Kernel
register (constructor) new in cv::ocl::Kernel (cv_ocl_Kernel_Kernel_const_char_X_ProgramSource_String_String_X)

--- Incoming ---
['cv.ocl.Kernel.~Kernel', '~', [], [], None, '']
parse_name: cv.ocl.Kernel.~Kernel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::~Kernel namespace:cv::ocl classpath:Kernel classname:Kernel name:~Kernel
ignore destructor (method) ~Kernel in cv::ocl::Kernel

--- Incoming ---
['cv.ocl.Kernel.Kernel', 'K', [], [['const Kernel&', 'k', '', []]], None, '']
parse_name: cv.ocl.Kernel.Kernel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::Kernel namespace:cv::ocl classpath:Kernel classname:Kernel name:Kernel
register (constructor) copy in cv::ocl::Kernel (cv_ocl_Kernel_Kernel_Kernel)

--- Incoming ---
[   'cv.ocl.Kernel.operator =',
    'Kernel&',
    [],
    [['const Kernel&', 'k', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::operator = namespace:cv::ocl classpath:Kernel classname:Kernel name:operator =
ignore (method) operator = in cv::ocl::Kernel

--- Incoming ---
['cv.ocl.Kernel.empty', 'bool', ['/C'], [], None, '']
parse_name: cv.ocl.Kernel.empty with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::empty namespace:cv::ocl classpath:Kernel classname:Kernel name:empty
register (method) empty in cv::ocl::Kernel (cv_ocl_Kernel_empty_const)

--- Incoming ---
[   'cv.ocl.Kernel.create',
    'bool',
    [],
    [['const char*', 'kname', '', []], ['const Program&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::create namespace:cv::ocl classpath:Kernel classname:Kernel name:create
register (method) create in cv::ocl::Kernel (cv_ocl_Kernel_create_const_char_X_Program)

--- Incoming ---
[   'cv.ocl.Kernel.create',
    'bool',
    [],
    [   ['const char*', 'kname', '', []],
        ['const ProgramSource&', 'prog', '', []],
        ['const String&', 'buildopts', '', []],
        ['String*', 'errmsg', '0', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::create namespace:cv::ocl classpath:Kernel classname:Kernel name:create
register (method) create in cv::ocl::Kernel (cv_ocl_Kernel_create_const_char_X_ProgramSource_String_String_X)

--- Incoming ---
[   'cv.ocl.Kernel.set',
    'int',
    [],
    [   ['int', 'i', '', []],
        ['const void*', 'value', '', []],
        ['size_t', 'sz', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.set with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::set namespace:cv::ocl classpath:Kernel classname:Kernel name:set
register (method) set in cv::ocl::Kernel (cv_ocl_Kernel_set_int_const_void_X_size_t)

--- Incoming ---
[   'cv.ocl.Kernel.set',
    'int',
    [],
    [['int', 'i', '', []], ['const Image2D&', 'image2D', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.set with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::set namespace:cv::ocl classpath:Kernel classname:Kernel name:set
Registering an unknown type: Image2D
register (method) set in cv::ocl::Kernel (cv_ocl_Kernel_set_int_Image2D)

--- Incoming ---
[   'cv.ocl.Kernel.set',
    'int',
    [],
    [['int', 'i', '', []], ['const UMat&', 'm', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.set with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::set namespace:cv::ocl classpath:Kernel classname:Kernel name:set
register (method) set in cv::ocl::Kernel (cv_ocl_Kernel_set_int_UMat)

--- Incoming ---
[   'cv.ocl.Kernel.set',
    'int',
    [],
    [['int', 'i', '', []], ['const KernelArg&', 'arg', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.set with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::set namespace:cv::ocl classpath:Kernel classname:Kernel name:set
register (method) set in cv::ocl::Kernel (cv_ocl_Kernel_set_int_KernelArg)

--- Incoming ---
[   'cv.ocl.Kernel.set',
    'template<typename _Tp> int',
    [],
    [['int', 'i', '', []], ['const _Tp&', 'value', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.set with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::set namespace:cv::ocl classpath:Kernel classname:Kernel name:set
Registering an unknown type: template<typename _Tp> int
register (method) set in cv::ocl::Kernel (cv_ocl_Kernel_set_int__Tp)

--- Incoming ---
[   'cv.ocl.Kernel.set_args_',
    'template<typename _Tp0> int',
    ['/H'],
    [['int', 'i', '', []], ['const _Tp0&', 'a0', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.set_args_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::set_args_ namespace:cv::ocl classpath:Kernel classname:Kernel name:set_args_
Registering an unknown type: template<typename _Tp0> int
Registering an unknown type: _Tp0

--- Incoming ---
[   'cv.ocl.Kernel.args',
    'template<typename... _Tps> Kernel&',
    [],
    [['const _Tps&...', 'kernel_args', '', []]],
    None,
    '@brief Setup OpenCL Kernel arguments.\n'
    'Avoid direct using of set(i, ...) methods.\n'
    '@code\n'
    'bool ok = kernel\n'
    '.args(\n'
    'srcUMat, dstUMat,\n'
    '(float)some_float_param\n'
    ').run(ndims, globalSize, localSize);\n'
    'if (!ok) return false;\n'
    '@endcode']
parse_name: cv.ocl.Kernel.args with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::args namespace:cv::ocl classpath:Kernel classname:Kernel name:args
Registering an unknown type: template<typename... _Tps> Kernel
Registering an unknown type: _Tps&...
register (method) args in cv::ocl::Kernel (cv_ocl_Kernel_args__Tps&...)

--- Incoming ---
[   'cv.ocl.Kernel.run',
    'bool',
    [],
    [   ['int', 'dims', '', []],
        ['size_t[]', 'globalsize', '', []],
        ['size_t[]', 'localsize', '', []],
        ['bool', 'sync', '', []],
        ['const Queue&', 'q', 'Queue()', []]],
    None,
    '@brief Run the OpenCL kernel.\n'
    '@param dims the work problem dimensions. It is the length of globalsize '
    'and localsize. It can be either 1, 2 or 3.\n'
    '@param globalsize work items for each dimension. It is not the final '
    'globalsize passed to\n'
    'OpenCL. Each dimension will be adjusted to the nearest integer divisible '
    'by the corresponding\n'
    'value in localsize. If localsize is NULL, it will still be adjusted '
    'depending on dims. The\n'
    'adjusted values are greater than or equal to the original values.\n'
    '@param localsize work-group size for each dimension.\n'
    '@param sync specify whether to wait for OpenCL computation to finish '
    'before return.\n'
    '@param q command queue']
parse_name: cv.ocl.Kernel.run with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::run namespace:cv::ocl classpath:Kernel classname:Kernel name:run
register (method) run in cv::ocl::Kernel (cv_ocl_Kernel_run_int_size_t_X_size_t_X_bool_Queue)

--- Incoming ---
[   'cv.ocl.Kernel.runTask',
    'bool',
    [],
    [['bool', 'sync', '', []], ['const Queue&', 'q', 'Queue()', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.runTask with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::runTask namespace:cv::ocl classpath:Kernel classname:Kernel name:runTask
register (method) runTask in cv::ocl::Kernel (cv_ocl_Kernel_runTask_bool_Queue)

--- Incoming ---
[   'cv.ocl.Kernel.runProfiling',
    'int64',
    [],
    [   ['int', 'dims', '', []],
        ['size_t[]', 'globalsize', '', []],
        ['size_t[]', 'localsize', '', []],
        ['const Queue&', 'q', 'Queue()', []]],
    None,
    '@brief Similar to synchronized run() call with returning of kernel '
    'execution time\n'
    '* Separate OpenCL command queue may be used (with '
    'CL_QUEUE_PROFILING_ENABLE)\n'
    '* @return Execution time in nanoseconds or negative number on error']
parse_name: cv.ocl.Kernel.runProfiling with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::runProfiling namespace:cv::ocl classpath:Kernel classname:Kernel name:runProfiling
register (method) runProfiling in cv::ocl::Kernel (cv_ocl_Kernel_runProfiling_int_size_t_X_size_t_X_Queue)

--- Incoming ---
['cv.ocl.Kernel.workGroupSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Kernel.workGroupSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::workGroupSize namespace:cv::ocl classpath:Kernel classname:Kernel name:workGroupSize
register (method) workGroupSize in cv::ocl::Kernel (cv_ocl_Kernel_workGroupSize_const)

--- Incoming ---
['cv.ocl.Kernel.preferedWorkGroupSizeMultiple', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Kernel.preferedWorkGroupSizeMultiple with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::preferedWorkGroupSizeMultiple namespace:cv::ocl classpath:Kernel classname:Kernel name:preferedWorkGroupSizeMultiple
register (method) preferedWorkGroupSizeMultiple in cv::ocl::Kernel (cv_ocl_Kernel_preferedWorkGroupSizeMultiple_const)

--- Incoming ---
[   'cv.ocl.Kernel.compileWorkGroupSize',
    'bool',
    ['/C'],
    [['size_t[]', 'wsz', '', []]],
    None,
    '']
parse_name: cv.ocl.Kernel.compileWorkGroupSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::compileWorkGroupSize namespace:cv::ocl classpath:Kernel classname:Kernel name:compileWorkGroupSize
register (method) compileWorkGroupSize in cv::ocl::Kernel (cv_ocl_Kernel_compileWorkGroupSize_const_size_t_X)

--- Incoming ---
['cv.ocl.Kernel.localMemSize', 'size_t', ['/C'], [], None, '']
parse_name: cv.ocl.Kernel.localMemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::localMemSize namespace:cv::ocl classpath:Kernel classname:Kernel name:localMemSize
register (method) localMemSize in cv::ocl::Kernel (cv_ocl_Kernel_localMemSize_const)

--- Incoming ---
['cv.ocl.Kernel.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Kernel.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Kernel::ptr namespace:cv::ocl classpath:Kernel classname:Kernel name:ptr
register (method) ptr in cv::ocl::Kernel (cv_ocl_Kernel_ptr_const)

--- Incoming ---
['class cv.ocl.Program', '', [], [], None, '']
parse_name: class cv.ocl.Program with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program namespace:cv::ocl classpath: classname: name:Program
register class cv::ocl::Program (['class cv.ocl.Program', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Program.Program', 'P', [], [], None, '']
parse_name: cv.ocl.Program.Program with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::Program namespace:cv::ocl classpath:Program classname:Program name:Program
register (constructor) default in cv::ocl::Program (cv_ocl_Program_Program)

--- Incoming ---
[   'cv.ocl.Program.Program',
    'P',
    [],
    [   ['const ProgramSource&', 'src', '', []],
        ['const String&', 'buildflags', '', []],
        ['String&', 'errmsg', '', []]],
    None,
    '']
parse_name: cv.ocl.Program.Program with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::Program namespace:cv::ocl classpath:Program classname:Program name:Program
register (constructor) new in cv::ocl::Program (cv_ocl_Program_Program_ProgramSource_String_String)

--- Incoming ---
[   'cv.ocl.Program.Program',
    'P',
    [],
    [['const Program&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.Program.Program with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::Program namespace:cv::ocl classpath:Program classname:Program name:Program
register (constructor) copy in cv::ocl::Program (cv_ocl_Program_Program_Program)

--- Incoming ---
[   'cv.ocl.Program.operator =',
    'Program&',
    [],
    [['const Program&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.Program.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::operator = namespace:cv::ocl classpath:Program classname:Program name:operator =
ignore (method) operator = in cv::ocl::Program

--- Incoming ---
['cv.ocl.Program.~Program', '~', [], [], None, '']
parse_name: cv.ocl.Program.~Program with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::~Program namespace:cv::ocl classpath:Program classname:Program name:~Program
ignore destructor (method) ~Program in cv::ocl::Program

--- Incoming ---
[   'cv.ocl.Program.create',
    'bool',
    [],
    [   ['const ProgramSource&', 'src', '', []],
        ['const String&', 'buildflags', '', []],
        ['String&', 'errmsg', '', []]],
    None,
    '']
parse_name: cv.ocl.Program.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::create namespace:cv::ocl classpath:Program classname:Program name:create
register (method) create in cv::ocl::Program (cv_ocl_Program_create_ProgramSource_String_String)

--- Incoming ---
['cv.ocl.Program.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Program.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::ptr namespace:cv::ocl classpath:Program classname:Program name:ptr
register (method) ptr in cv::ocl::Program (cv_ocl_Program_ptr_const)

--- Incoming ---
[   'cv.ocl.Program.getBinary',
    'void',
    ['/C'],
    [['std::vector<char>&', 'binary', '', []]],
    None,
    '* @brief Query device-specific program binary.\n'
    '*\n'
    '* Returns RAW OpenCL executable binary without additional attachments.\n'
    '*\n'
    '* @sa ProgramSource::fromBinary\n'
    '*\n'
    '* @param[out] binary output buffer']
parse_name: cv.ocl.Program.getBinary with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::getBinary namespace:cv::ocl classpath:Program classname:Program name:getBinary
register (method) getBinary in cv::ocl::Program (cv_ocl_Program_getBinary_const_VectorOfchar)

--- Incoming ---
['cv.ocl.Program.getImpl', 'Impl*', ['/C'], [], None, '']
parse_name: cv.ocl.Program.getImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::getImpl namespace:cv::ocl classpath:Program classname:Program name:getImpl
register (method) getImpl in cv::ocl::Program (cv_ocl_Program_getImpl_const)

--- Incoming ---
[   'cv.ocl.Program.read',
    'bool',
    [],
    [['const String&', 'buf', '', []], ['const String&', 'buildflags', '', []]],
    None,
    '']
parse_name: cv.ocl.Program.read with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::read namespace:cv::ocl classpath:Program classname:Program name:read
register (method) read in cv::ocl::Program (cv_ocl_Program_read_String_String)

--- Incoming ---
['cv.ocl.Program.write', 'bool', ['/C'], [['String&', 'buf', '', []]], None, '']
parse_name: cv.ocl.Program.write with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::write namespace:cv::ocl classpath:Program classname:Program name:write
register (method) write in cv::ocl::Program (cv_ocl_Program_write_const_String)

--- Incoming ---
['cv.ocl.Program.source', 'const ProgramSource&', ['/C'], [], None, '']
parse_name: cv.ocl.Program.source with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::source namespace:cv::ocl classpath:Program classname:Program name:source
register (method) source in cv::ocl::Program (cv_ocl_Program_source_const)

--- Incoming ---
['cv.ocl.Program.getPrefix', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.Program.getPrefix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::getPrefix namespace:cv::ocl classpath:Program classname:Program name:getPrefix
register (method) getPrefix in cv::ocl::Program (cv_ocl_Program_getPrefix_const)

--- Incoming ---
[   'cv.ocl.Program.getPrefix',
    'String',
    ['/S'],
    [['const String&', 'buildflags', '', []]],
    None,
    '']
parse_name: cv.ocl.Program.getPrefix with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Program::getPrefix namespace:cv::ocl classpath:Program classname:Program name:getPrefix
register (method) getPrefix in cv::ocl::Program (cv_ocl_Program_getPrefix_String)

--- Incoming ---
['class cv.ocl.ProgramSource', '', [], [], None, '']
parse_name: class cv.ocl.ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource namespace:cv::ocl classpath: classname: name:ProgramSource
register class cv::ocl::ProgramSource (['class cv.ocl.ProgramSource', '', [], [], None, ''])

--- Incoming ---
['typedef cv.ocl.ProgramSource.hash_t', 'uint64', '', [], None, '']
parse_name: typedef cv.ocl.ProgramSource.hash_t with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::hash_t namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:hash_t
Registering an unknown type: hash_t

--- Incoming ---
['cv.ocl.ProgramSource.ProgramSource', 'P', [], [], None, '']
parse_name: cv.ocl.ProgramSource.ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::ProgramSource namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:ProgramSource
register (constructor) default in cv::ocl::ProgramSource (cv_ocl_ProgramSource_ProgramSource)

--- Incoming ---
[   'cv.ocl.ProgramSource.ProgramSource',
    'P',
    ['/E'],
    [   ['const String&', 'module', '', []],
        ['const String&', 'name', '', []],
        ['const String&', 'codeStr', '', []],
        ['const String&', 'codeHash', '', []]],
    None,
    '']
parse_name: cv.ocl.ProgramSource.ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::ProgramSource namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:ProgramSource
register (constructor) new in cv::ocl::ProgramSource (cv_ocl_ProgramSource_ProgramSource_String_String_String_String)

--- Incoming ---
[   'cv.ocl.ProgramSource.ProgramSource',
    'P',
    ['/E'],
    [['const String&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.ProgramSource.ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::ProgramSource namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:ProgramSource
register (constructor) new in cv::ocl::ProgramSource (cv_ocl_ProgramSource_ProgramSource_String)

--- Incoming ---
[   'cv.ocl.ProgramSource.ProgramSource',
    'P',
    ['/E'],
    [['const char*', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.ProgramSource.ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::ProgramSource namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:ProgramSource
register (constructor) new in cv::ocl::ProgramSource (cv_ocl_ProgramSource_ProgramSource_const_char_X)

--- Incoming ---
['cv.ocl.ProgramSource.~ProgramSource', '~', [], [], None, '']
parse_name: cv.ocl.ProgramSource.~ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::~ProgramSource namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:~ProgramSource
ignore destructor (method) ~ProgramSource in cv::ocl::ProgramSource

--- Incoming ---
[   'cv.ocl.ProgramSource.ProgramSource',
    'P',
    [],
    [['const ProgramSource&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.ProgramSource.ProgramSource with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::ProgramSource namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:ProgramSource
register (constructor) copy in cv::ocl::ProgramSource (cv_ocl_ProgramSource_ProgramSource_ProgramSource)

--- Incoming ---
[   'cv.ocl.ProgramSource.operator =',
    'ProgramSource&',
    [],
    [['const ProgramSource&', 'prog', '', []]],
    None,
    '']
parse_name: cv.ocl.ProgramSource.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::operator = namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:operator =
ignore (method) operator = in cv::ocl::ProgramSource

--- Incoming ---
['cv.ocl.ProgramSource.source', 'const String&', ['/C'], [], None, '']
parse_name: cv.ocl.ProgramSource.source with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::source namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:source
register (method) source in cv::ocl::ProgramSource (cv_ocl_ProgramSource_source_const)

--- Incoming ---
['cv.ocl.ProgramSource.hash', 'hash_t', ['/C'], [], None, '']
parse_name: cv.ocl.ProgramSource.hash with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::hash namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:hash
register (method) hash in cv::ocl::ProgramSource (cv_ocl_ProgramSource_hash_const)

--- Incoming ---
[   'cv.ocl.ProgramSource.fromBinary',
    'ProgramSource',
    ['/S'],
    [   ['const String&', 'module', '', []],
        ['const String&', 'name', '', []],
        ['const unsigned char*', 'binary', '', []],
        ['const size_t', 'size', '', []],
        ['const cv::String&', 'buildOptions', 'cv::String()', []]],
    None,
    '@brief Describe OpenCL program binary.\n'
    '* Do not call clCreateProgramWithBinary() and/or clBuildProgram().\n'
    '*\n'
    '* Caller should guarantee binary buffer lifetime greater than '
    'ProgramSource object (and any of its copies).\n'
    '*\n'
    '* This kind of binary is not portable between platforms in general - it '
    'is specific to OpenCL vendor / device / driver version.\n'
    '*\n'
    '* @param module name of program owner module\n'
    '* @param name unique name of program (module+name is used as key for '
    'OpenCL program caching)\n'
    '* @param binary buffer address. See buffer lifetime requirement in '
    'description.\n'
    '* @param size buffer size\n'
    '* @param buildOptions additional program-related build options passed to '
    'clBuildProgram()\n'
    '* @return created ProgramSource object']
parse_name: cv.ocl.ProgramSource.fromBinary with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::fromBinary namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:fromBinary
register (method) fromBinary in cv::ocl::ProgramSource (cv_ocl_ProgramSource_fromBinary_String_String_const_unsigned_char_X_size_t_String)

--- Incoming ---
[   'cv.ocl.ProgramSource.fromSPIR',
    'ProgramSource',
    ['/S'],
    [   ['const String&', 'module', '', []],
        ['const String&', 'name', '', []],
        ['const unsigned char*', 'binary', '', []],
        ['const size_t', 'size', '', []],
        ['const cv::String&', 'buildOptions', 'cv::String()', []]],
    None,
    '@brief Describe OpenCL program in SPIR format.\n'
    '* Do not call clCreateProgramWithBinary() and/or clBuildProgram().\n'
    '*\n'
    "* Supports SPIR 1.2 by default (pass '-spir-std=X.Y' in buildOptions to "
    'override this behavior)\n'
    '*\n'
    '* Caller should guarantee binary buffer lifetime greater than '
    'ProgramSource object (and any of its copies).\n'
    '*\n'
    '* Programs in this format are portable between OpenCL implementations '
    "with 'khr_spir' extension:\n"
    '* '
    'https://www.khronos.org/registry/OpenCL/sdk/2.0/docs/man/xhtml/cl_khr_spir.html\n'
    '* (but they are not portable between different platforms: 32-bit / '
    '64-bit)\n'
    '*\n'
    "* Note: these programs can't support vendor specific extensions, like "
    "'cl_intel_subgroups'.\n"
    '*\n'
    '* @param module name of program owner module\n'
    '* @param name unique name of program (module+name is used as key for '
    'OpenCL program caching)\n'
    '* @param binary buffer address. See buffer lifetime requirement in '
    'description.\n'
    '* @param size buffer size\n'
    '* @param buildOptions additional program-related build options passed to '
    'clBuildProgram()\n'
    "*        (these options are added automatically: '-x spir' and "
    "'-spir-std=1.2')\n"
    '* @return created ProgramSource object.']
parse_name: cv.ocl.ProgramSource.fromSPIR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::fromSPIR namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:fromSPIR
register (method) fromSPIR in cv::ocl::ProgramSource (cv_ocl_ProgramSource_fromSPIR_String_String_const_unsigned_char_X_size_t_String)

--- Incoming ---
['cv.ocl.ProgramSource.getImpl', 'Impl*', ['/C'], [], None, '']
parse_name: cv.ocl.ProgramSource.getImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::ProgramSource::getImpl namespace:cv::ocl classpath:ProgramSource classname:ProgramSource name:getImpl
register (method) getImpl in cv::ocl::ProgramSource (cv_ocl_ProgramSource_getImpl_const)

--- Incoming ---
['class cv.ocl.PlatformInfo', '', [], [], None, '']
parse_name: class cv.ocl.PlatformInfo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo namespace:cv::ocl classpath: classname: name:PlatformInfo
register class cv::ocl::PlatformInfo (['class cv.ocl.PlatformInfo', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.PlatformInfo.PlatformInfo', 'P', [], [], None, '']
parse_name: cv.ocl.PlatformInfo.PlatformInfo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::PlatformInfo namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:PlatformInfo
register (constructor) default in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_PlatformInfo)

--- Incoming ---
[   'cv.ocl.PlatformInfo.PlatformInfo',
    'P',
    ['/E'],
    [['void*', 'id', '', []]],
    None,
    '']
parse_name: cv.ocl.PlatformInfo.PlatformInfo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::PlatformInfo namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:PlatformInfo
register (constructor) new in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_PlatformInfo_void_X)

--- Incoming ---
['cv.ocl.PlatformInfo.~PlatformInfo', '~', [], [], None, '']
parse_name: cv.ocl.PlatformInfo.~PlatformInfo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::~PlatformInfo namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:~PlatformInfo
ignore destructor (method) ~PlatformInfo in cv::ocl::PlatformInfo

--- Incoming ---
[   'cv.ocl.PlatformInfo.PlatformInfo',
    'P',
    [],
    [['const PlatformInfo&', 'i', '', []]],
    None,
    '']
parse_name: cv.ocl.PlatformInfo.PlatformInfo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::PlatformInfo namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:PlatformInfo
register (constructor) copy in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_PlatformInfo_PlatformInfo)

--- Incoming ---
[   'cv.ocl.PlatformInfo.operator =',
    'PlatformInfo&',
    [],
    [['const PlatformInfo&', 'i', '', []]],
    None,
    '']
parse_name: cv.ocl.PlatformInfo.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::operator = namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:operator =
ignore (method) operator = in cv::ocl::PlatformInfo

--- Incoming ---
['cv.ocl.PlatformInfo.name', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.PlatformInfo.name with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::name namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:name
register (method) name in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_name_const)

--- Incoming ---
['cv.ocl.PlatformInfo.vendor', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.PlatformInfo.vendor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::vendor namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:vendor
register (method) vendor in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_vendor_const)

--- Incoming ---
['cv.ocl.PlatformInfo.version', 'String', ['/C'], [], None, '']
parse_name: cv.ocl.PlatformInfo.version with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::version namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:version
register (method) version in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_version_const)

--- Incoming ---
['cv.ocl.PlatformInfo.deviceNumber', 'int', ['/C'], [], None, '']
parse_name: cv.ocl.PlatformInfo.deviceNumber with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::deviceNumber namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:deviceNumber
register (method) deviceNumber in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_deviceNumber_const)

--- Incoming ---
[   'cv.ocl.PlatformInfo.getDevice',
    'void',
    ['/C'],
    [['Device&', 'device', '', []], ['int', 'd', '', []]],
    None,
    '']
parse_name: cv.ocl.PlatformInfo.getDevice with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::PlatformInfo::getDevice namespace:cv::ocl classpath:PlatformInfo classname:PlatformInfo name:getDevice
register (method) getDevice in cv::ocl::PlatformInfo (cv_ocl_PlatformInfo_getDevice_const_Device_int)

--- Incoming ---
[   'cv.ocl.convertTypeStr',
    'const char*',
    [],
    [   ['int', 'sdepth', '', []],
        ['int', 'ddepth', '', []],
        ['int', 'cn', '', []],
        ['char*', 'buf', '', []]],
    None,
    '']
parse_name: cv.ocl.convertTypeStr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::convertTypeStr namespace:cv::ocl classpath: classname: name:convertTypeStr
register (function) convertTypeStr (cv_ocl_convertTypeStr_int_int_int_char_X)

--- Incoming ---
['cv.ocl.typeToStr', 'const char*', [], [['int', 't', '', []]], None, '']
parse_name: cv.ocl.typeToStr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::typeToStr namespace:cv::ocl classpath: classname: name:typeToStr
register (function) typeToStr (cv_ocl_typeToStr_int)

--- Incoming ---
['cv.ocl.memopTypeToStr', 'const char*', [], [['int', 't', '', []]], None, '']
parse_name: cv.ocl.memopTypeToStr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::memopTypeToStr namespace:cv::ocl classpath: classname: name:memopTypeToStr
register (function) memopTypeToStr (cv_ocl_memopTypeToStr_int)

--- Incoming ---
['cv.ocl.vecopTypeToStr', 'const char*', [], [['int', 't', '', []]], None, '']
parse_name: cv.ocl.vecopTypeToStr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::vecopTypeToStr namespace:cv::ocl classpath: classname: name:vecopTypeToStr
register (function) vecopTypeToStr (cv_ocl_vecopTypeToStr_int)

--- Incoming ---
[   'cv.ocl.getOpenCLErrorString',
    'const char*',
    [],
    [['int', 'errorCode', '', []]],
    None,
    '']
parse_name: cv.ocl.getOpenCLErrorString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::getOpenCLErrorString namespace:cv::ocl classpath: classname: name:getOpenCLErrorString
register (function) getOpenCLErrorString (cv_ocl_getOpenCLErrorString_int)

--- Incoming ---
[   'cv.ocl.kernelToStr',
    'String',
    [],
    [   ['InputArray', '_kernel', '', []],
        ['int', 'ddepth', '-1', []],
        ['const char *', 'name', 'NULL', []]],
    None,
    '']
parse_name: cv.ocl.kernelToStr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::kernelToStr namespace:cv::ocl classpath: classname: name:kernelToStr
register (function) kernelToStr (cv_ocl_kernelToStr__InputArray_int_const_char_X)

--- Incoming ---
[   'cv.ocl.getPlatfomsInfo',
    'void',
    [],
    [['std::vector<PlatformInfo>&', 'platform_info', '', []]],
    None,
    '']
parse_name: cv.ocl.getPlatfomsInfo with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::getPlatfomsInfo namespace:cv::ocl classpath: classname: name:getPlatfomsInfo
register (function) getPlatfomsInfo (cv_ocl_getPlatfomsInfo_VectorOfPlatformInfo)

--- Incoming ---
[   'enum cv.ocl.OclVectorStrategy',
    '',
    [],
    [   ['const cv.ocl.OCL_VECTOR_OWN', '0', [], [], None, ''],
        ['const cv.ocl.OCL_VECTOR_MAX', '1', [], [], None, ''],
        [   'const cv.ocl.OCL_VECTOR_DEFAULT',
            'OCL_VECTOR_OWN',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv.ocl.OCL_VECTOR_OWN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OCL_VECTOR_OWN namespace:cv::ocl classpath: classname: name:OCL_VECTOR_OWN
parse_name: const cv.ocl.OCL_VECTOR_MAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OCL_VECTOR_MAX namespace:cv::ocl classpath: classname: name:OCL_VECTOR_MAX
parse_name: const cv.ocl.OCL_VECTOR_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OCL_VECTOR_DEFAULT namespace:cv::ocl classpath: classname: name:OCL_VECTOR_DEFAULT
parse_name: enum cv.ocl.OclVectorStrategy with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OclVectorStrategy namespace:cv::ocl classpath: classname: name:OclVectorStrategy
parse_name: const cv.ocl.OCL_VECTOR_OWN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OCL_VECTOR_OWN namespace:cv::ocl classpath: classname: name:OCL_VECTOR_OWN
parse_name: const cv.ocl.OCL_VECTOR_MAX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OCL_VECTOR_MAX namespace:cv::ocl classpath: classname: name:OCL_VECTOR_MAX
parse_name: const cv.ocl.OCL_VECTOR_DEFAULT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::OCL_VECTOR_DEFAULT namespace:cv::ocl classpath: classname: name:OCL_VECTOR_DEFAULT

--- Incoming ---
[   'cv.ocl.predictOptimalVectorWidth',
    'int',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', 'noArray()', []],
        ['InputArray', 'src3', 'noArray()', []],
        ['InputArray', 'src4', 'noArray()', []],
        ['InputArray', 'src5', 'noArray()', []],
        ['InputArray', 'src6', 'noArray()', []],
        ['InputArray', 'src7', 'noArray()', []],
        ['InputArray', 'src8', 'noArray()', []],
        ['InputArray', 'src9', 'noArray()', []],
        ['OclVectorStrategy', 'strat', 'OCL_VECTOR_DEFAULT', []]],
    None,
    '']
parse_name: cv.ocl.predictOptimalVectorWidth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::predictOptimalVectorWidth namespace:cv::ocl classpath: classname: name:predictOptimalVectorWidth
register (function) predictOptimalVectorWidth (cv_ocl_predictOptimalVectorWidth__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray_OclVectorStrategy)

--- Incoming ---
[   'cv.ocl.checkOptimalVectorWidth',
    'int',
    [],
    [   ['const int *', 'vectorWidths', '', []],
        ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', 'noArray()', []],
        ['InputArray', 'src3', 'noArray()', []],
        ['InputArray', 'src4', 'noArray()', []],
        ['InputArray', 'src5', 'noArray()', []],
        ['InputArray', 'src6', 'noArray()', []],
        ['InputArray', 'src7', 'noArray()', []],
        ['InputArray', 'src8', 'noArray()', []],
        ['InputArray', 'src9', 'noArray()', []],
        ['OclVectorStrategy', 'strat', 'OCL_VECTOR_DEFAULT', []]],
    None,
    '']
parse_name: cv.ocl.checkOptimalVectorWidth with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::checkOptimalVectorWidth namespace:cv::ocl classpath: classname: name:checkOptimalVectorWidth
register (function) checkOptimalVectorWidth (cv_ocl_checkOptimalVectorWidth_const_int_X__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray_OclVectorStrategy)

--- Incoming ---
[   'cv.ocl.predictOptimalVectorWidthMax',
    'int',
    [],
    [   ['InputArray', 'src1', '', []],
        ['InputArray', 'src2', 'noArray()', []],
        ['InputArray', 'src3', 'noArray()', []],
        ['InputArray', 'src4', 'noArray()', []],
        ['InputArray', 'src5', 'noArray()', []],
        ['InputArray', 'src6', 'noArray()', []],
        ['InputArray', 'src7', 'noArray()', []],
        ['InputArray', 'src8', 'noArray()', []],
        ['InputArray', 'src9', 'noArray()', []]],
    None,
    '']
parse_name: cv.ocl.predictOptimalVectorWidthMax with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::predictOptimalVectorWidthMax namespace:cv::ocl classpath: classname: name:predictOptimalVectorWidthMax
register (function) predictOptimalVectorWidthMax (cv_ocl_predictOptimalVectorWidthMax__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.ocl.buildOptionsAddMatrixDescription',
    'void',
    [],
    [   ['String&', 'buildOptions', '', []],
        ['const String&', 'name', '', []],
        ['InputArray', '_m', '', []]],
    None,
    '']
parse_name: cv.ocl.buildOptionsAddMatrixDescription with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::buildOptionsAddMatrixDescription namespace:cv::ocl classpath: classname: name:buildOptionsAddMatrixDescription
register (function) buildOptionsAddMatrixDescription (cv_ocl_buildOptionsAddMatrixDescription_String_String__InputArray)

--- Incoming ---
['class cv.ocl.Image2D', '', [], [], None, '']
parse_name: class cv.ocl.Image2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D namespace:cv::ocl classpath: classname: name:Image2D
register class cv::ocl::Image2D (['class cv.ocl.Image2D', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Image2D.Image2D', 'I', [], [], None, '']
parse_name: cv.ocl.Image2D.Image2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::Image2D namespace:cv::ocl classpath:Image2D classname:Image2D name:Image2D
register (constructor) default in cv::ocl::Image2D (cv_ocl_Image2D_Image2D)

--- Incoming ---
[   'cv.ocl.Image2D.Image2D',
    'I',
    ['/E'],
    [   ['const UMat &', 'src', '', []],
        ['bool', 'norm', 'false', []],
        ['bool', 'alias', 'false', []]],
    None,
    '@param src UMat object from which to get image properties and data\n'
    '@param norm flag to enable the use of normalized channel data types\n'
    '@param alias flag indicating that the image should alias the src UMat. If '
    'true, changes to the\n'
    'image or src will be reflected in both objects.']
parse_name: cv.ocl.Image2D.Image2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::Image2D namespace:cv::ocl classpath:Image2D classname:Image2D name:Image2D
register (constructor) new in cv::ocl::Image2D (cv_ocl_Image2D_Image2D_UMat_bool_bool)

--- Incoming ---
[   'cv.ocl.Image2D.Image2D',
    'I',
    [],
    [['const Image2D &', 'i', '', []]],
    None,
    '']
parse_name: cv.ocl.Image2D.Image2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::Image2D namespace:cv::ocl classpath:Image2D classname:Image2D name:Image2D
register (constructor) copy in cv::ocl::Image2D (cv_ocl_Image2D_Image2D_Image2D)

--- Incoming ---
['cv.ocl.Image2D.~Image2D', '~', [], [], None, '']
parse_name: cv.ocl.Image2D.~Image2D with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::~Image2D namespace:cv::ocl classpath:Image2D classname:Image2D name:~Image2D
ignore destructor (method) ~Image2D in cv::ocl::Image2D

--- Incoming ---
[   'cv.ocl.Image2D.operator =',
    'Image2D &',
    [],
    [['const Image2D &', 'i', '', []]],
    None,
    '']
parse_name: cv.ocl.Image2D.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::operator = namespace:cv::ocl classpath:Image2D classname:Image2D name:operator =
ignore (method) operator = in cv::ocl::Image2D

--- Incoming ---
[   'cv.ocl.Image2D.canCreateAlias',
    'bool',
    ['/S'],
    [['const UMat &', 'u', '', []]],
    None,
    'Indicates if creating an aliased image should succeed.\n'
    'Depends on the underlying platform and the dimensions of the UMat.']
parse_name: cv.ocl.Image2D.canCreateAlias with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::canCreateAlias namespace:cv::ocl classpath:Image2D classname:Image2D name:canCreateAlias
register (method) canCreateAlias in cv::ocl::Image2D (cv_ocl_Image2D_canCreateAlias_UMat)

--- Incoming ---
[   'cv.ocl.Image2D.isFormatSupported',
    'bool',
    ['/S'],
    [['int', 'depth', '', []], ['int', 'cn', '', []], ['bool', 'norm', '', []]],
    None,
    'Indicates if the image format is supported.']
parse_name: cv.ocl.Image2D.isFormatSupported with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::isFormatSupported namespace:cv::ocl classpath:Image2D classname:Image2D name:isFormatSupported
register (method) isFormatSupported in cv::ocl::Image2D (cv_ocl_Image2D_isFormatSupported_int_int_bool)

--- Incoming ---
['cv.ocl.Image2D.ptr', 'void*', ['/C'], [], None, '']
parse_name: cv.ocl.Image2D.ptr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Image2D::ptr namespace:cv::ocl classpath:Image2D classname:Image2D name:ptr
register (method) ptr in cv::ocl::Image2D (cv_ocl_Image2D_ptr_const)

--- Incoming ---
['class cv.ocl.Timer', '', [], [], None, '']
parse_name: class cv.ocl.Timer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Timer namespace:cv::ocl classpath: classname: name:Timer
register class cv::ocl::Timer (['class cv.ocl.Timer', '', [], [], None, ''])

--- Incoming ---
['cv.ocl.Timer.Timer', 'T', [], [['const Queue&', 'q', '', []]], None, '']
parse_name: cv.ocl.Timer.Timer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Timer::Timer namespace:cv::ocl classpath:Timer classname:Timer name:Timer
register (constructor) new in cv::ocl::Timer (cv_ocl_Timer_Timer_Queue)

--- Incoming ---
['cv.ocl.Timer.~Timer', '~', [], [], None, '']
parse_name: cv.ocl.Timer.~Timer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Timer::~Timer namespace:cv::ocl classpath:Timer classname:Timer name:~Timer
ignore destructor (method) ~Timer in cv::ocl::Timer

--- Incoming ---
['cv.ocl.Timer.start', 'void', [], [], None, '']
parse_name: cv.ocl.Timer.start with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Timer::start namespace:cv::ocl classpath:Timer classname:Timer name:start
register (method) start in cv::ocl::Timer (cv_ocl_Timer_start)

--- Incoming ---
['cv.ocl.Timer.stop', 'void', [], [], None, '']
parse_name: cv.ocl.Timer.stop with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Timer::stop namespace:cv::ocl classpath:Timer classname:Timer name:stop
register (method) stop in cv::ocl::Timer (cv_ocl_Timer_stop)

--- Incoming ---
['cv.ocl.Timer.durationNS', 'uint64', ['/C'], [], None, '']
parse_name: cv.ocl.Timer.durationNS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::Timer::durationNS namespace:cv::ocl classpath:Timer classname:Timer name:durationNS
register (method) durationNS in cv::ocl::Timer (cv_ocl_Timer_durationNS_const)

--- Incoming ---
['cv.ocl.getOpenCLAllocator', 'MatAllocator*', [], [], None, '']
parse_name: cv.ocl.getOpenCLAllocator with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::getOpenCLAllocator namespace:cv::ocl classpath: classname: name:getOpenCLAllocator
register (function) getOpenCLAllocator (cv_ocl_getOpenCLAllocator)

--- Incoming ---
['cv.ocl.internal.isOpenCLForced', 'bool', [], [], None, '']
parse_name: cv.ocl.internal.isOpenCLForced with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::internal::isOpenCLForced namespace:cv::ocl::internal classpath: classname: name:isOpenCLForced
register (function) isOpenCLForced (cv_ocl_internal_isOpenCLForced)

--- Incoming ---
['cv.ocl.internal.isPerformanceCheckBypassed', 'bool', [], [], None, '']
parse_name: cv.ocl.internal.isPerformanceCheckBypassed with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::internal::isPerformanceCheckBypassed namespace:cv::ocl::internal classpath: classname: name:isPerformanceCheckBypassed
register (function) isPerformanceCheckBypassed (cv_ocl_internal_isPerformanceCheckBypassed)

--- Incoming ---
['cv.ocl.internal.isCLBuffer', 'bool', [], [['UMat&', 'u', '', []]], None, '']
parse_name: cv.ocl.internal.isCLBuffer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::internal::isCLBuffer namespace:cv::ocl::internal classpath: classname: name:isCLBuffer
register (function) isCLBuffer (cv_ocl_internal_isCLBuffer_UMat)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/ocl_genbase.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['struct cv.ocl.internal.ProgramEntry', '', [], [], None, '']
parse_name: struct cv.ocl.internal.ProgramEntry with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::internal::ProgramEntry namespace:cv::ocl::internal classpath: classname: name:ProgramEntry
register class cv::ocl::internal::ProgramEntry (['struct cv.ocl.internal.ProgramEntry', '', [], [], None, ''])

--- Incoming ---
[   'cv.ocl.internal.ProgramEntry.operator ProgramSource&',
    'operator ProgramSource&',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.ocl.internal.ProgramEntry.operator ProgramSource& with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ocl::internal::ProgramEntry::operator ProgramSource& namespace:cv::ocl::internal classpath:ProgramEntry classname:ProgramEntry name:operator ProgramSource&
Registering an unknown type: operator ProgramSource
ignore (method) operator ProgramSource& in cv::ocl::internal::ProgramEntry


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/optim.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'class cv.MinProblemSolver',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief Basic interface for all solvers']
parse_name: class cv.MinProblemSolver with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver namespace:cv classpath: classname: name:MinProblemSolver
register class cv::MinProblemSolver (['class cv.MinProblemSolver', ': cv::Algorithm', [], [], None, '@brief Basic interface for all solvers']) impl:cv::Algorithm

--- Incoming ---
[   'class cv.MinProblemSolver.Function',
    '',
    [],
    [],
    None,
    '@brief Represents function being optimized']
parse_name: class cv.MinProblemSolver.Function with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::Function namespace:cv classpath:MinProblemSolver classname:MinProblemSolver name:Function
register class cv::MinProblemSolver::Function (['class cv.MinProblemSolver.Function', '', [], [], None, '@brief Represents function being optimized'])

--- Incoming ---
['cv.MinProblemSolver.Function.~Function', '~', [], [], None, '']
parse_name: cv.MinProblemSolver.Function.~Function with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::Function::~Function namespace:cv classpath:MinProblemSolver::Function classname:Function name:~Function
ignore destructor (method) ~Function in cv::MinProblemSolver::Function

--- Incoming ---
['cv.MinProblemSolver.Function.getDims', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.MinProblemSolver.Function.getDims with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::Function::getDims namespace:cv classpath:MinProblemSolver::Function classname:Function name:getDims
register (method) getDims in cv::MinProblemSolver::Function (trait) (cv_MinProblemSolver_Function_getDims_const)

--- Incoming ---
['cv.MinProblemSolver.Function.getGradientEps', 'double', ['/C'], [], None, '']
parse_name: cv.MinProblemSolver.Function.getGradientEps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::Function::getGradientEps namespace:cv classpath:MinProblemSolver::Function classname:Function name:getGradientEps
register (method) getGradientEps in cv::MinProblemSolver::Function (trait) (cv_MinProblemSolver_Function_getGradientEps_const)

--- Incoming ---
[   'cv.MinProblemSolver.Function.calc',
    'double',
    ['/A', '/C'],
    [['const double*', 'x', '', []]],
    None,
    '']
parse_name: cv.MinProblemSolver.Function.calc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::Function::calc namespace:cv classpath:MinProblemSolver::Function classname:Function name:calc
register (method) calc in cv::MinProblemSolver::Function (trait) (cv_MinProblemSolver_Function_calc_const_const_double_X)

--- Incoming ---
[   'cv.MinProblemSolver.Function.getGradient',
    'void',
    [],
    [['const double*', 'x', '', []], ['double*', 'grad', '', []]],
    None,
    '']
parse_name: cv.MinProblemSolver.Function.getGradient with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::Function::getGradient namespace:cv classpath:MinProblemSolver::Function classname:Function name:getGradient
register (method) getGradient in cv::MinProblemSolver::Function (trait) (cv_MinProblemSolver_Function_getGradient_const_double_X_double_X)

--- Incoming ---
[   'cv.MinProblemSolver.getFunction',
    'Ptr<Function>',
    ['/A', '/C'],
    [],
    None,
    '@brief Getter for the optimized function.\n'
    '\n'
    'The optimized function is represented by Function interface, which '
    'requires derivatives to\n'
    'implement the calc(double*) and getDim() methods to evaluate the '
    'function.\n'
    '\n'
    '@return Smart-pointer to an object that implements Function interface - '
    'it represents the\n'
    'function that is being optimized. It can be empty, if no function was '
    'given so far.']
parse_name: cv.MinProblemSolver.getFunction with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::getFunction namespace:cv classpath:MinProblemSolver classname:MinProblemSolver name:getFunction
register (method) getFunction in cv::MinProblemSolver (trait) (cv_MinProblemSolver_getFunction_const)

--- Incoming ---
[   'cv.MinProblemSolver.setFunction',
    'void',
    ['/A'],
    [['const Ptr<Function>&', 'f', '', []]],
    None,
    '@brief Setter for the optimized function.\n'
    '\n'
    '*It should be called at least once before the call to* minimize(), as '
    'default value is not usable.\n'
    '\n'
    '@param f The new function to optimize.']
parse_name: cv.MinProblemSolver.setFunction with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::setFunction namespace:cv classpath:MinProblemSolver classname:MinProblemSolver name:setFunction
register (method) setFunction in cv::MinProblemSolver (trait) (cv_MinProblemSolver_setFunction_PtrOfFunction)

--- Incoming ---
[   'cv.MinProblemSolver.getTermCriteria',
    'TermCriteria',
    ['/A', '/C'],
    [],
    None,
    '@brief Getter for the previously set terminal criteria for this '
    'algorithm.\n'
    '\n'
    '@return Deep copy of the terminal criteria used at the moment.']
parse_name: cv.MinProblemSolver.getTermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::getTermCriteria namespace:cv classpath:MinProblemSolver classname:MinProblemSolver name:getTermCriteria
register (method) getTermCriteria in cv::MinProblemSolver (trait) (cv_MinProblemSolver_getTermCriteria_const)

--- Incoming ---
[   'cv.MinProblemSolver.setTermCriteria',
    'void',
    ['/A'],
    [['const TermCriteria&', 'termcrit', '', []]],
    None,
    '@brief Set terminal criteria for solver.\n'
    '\n'
    'This method *is not necessary* to be called before the first call to '
    'minimize(), as the default\n'
    'value is sensible.\n'
    '\n'
    'Algorithm stops when the number of function evaluations done exceeds '
    'termcrit.maxCount, when\n'
    'the function values at the vertices of simplex are within '
    'termcrit.epsilon range or simplex\n'
    'becomes so small that it can enclosed in a box with termcrit.epsilon '
    'sides, whatever comes\n'
    'first.\n'
    '@param termcrit Terminal criteria to be used, represented as '
    'cv::TermCriteria structure.']
parse_name: cv.MinProblemSolver.setTermCriteria with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::setTermCriteria namespace:cv classpath:MinProblemSolver classname:MinProblemSolver name:setTermCriteria
register (method) setTermCriteria in cv::MinProblemSolver (trait) (cv_MinProblemSolver_setTermCriteria_TermCriteria)

--- Incoming ---
[   'cv.MinProblemSolver.minimize',
    'double',
    ['/A'],
    [['InputOutputArray', 'x', '', []]],
    None,
    '@brief actually runs the algorithm and performs the minimization.\n'
    '\n'
    'The sole input parameter determines the centroid of the starting simplex '
    '(roughly, it tells\n'
    'where to start), all the others (terminal criteria, initial step, '
    'function to be minimized) are\n'
    'supposed to be set via the setters before the call to this method or the '
    'default values (not\n'
    'always sensible) will be used.\n'
    '\n'
    '@param x The initial point, that will become a centroid of an initial '
    'simplex. After the algorithm\n'
    'will terminate, it will be set to the point where the algorithm stops, '
    'the point of possible\n'
    'minimum.\n'
    '@return The value of a function at the point found.']
parse_name: cv.MinProblemSolver.minimize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::MinProblemSolver::minimize namespace:cv classpath:MinProblemSolver classname:MinProblemSolver name:minimize
register (method) minimize in cv::MinProblemSolver (trait) (cv_MinProblemSolver_minimize__InputOutputArray)

--- Incoming ---
[   'class cv.DownhillSolver',
    ': cv::MinProblemSolver',
    [],
    [],
    None,
    '@brief This class is used to perform the non-linear non-constrained '
    'minimization of a function,\n'
    '\n'
    'defined on an `n`-dimensional Euclidean space, using the **Nelder-Mead '
    'method**, also known as\n'
    '**downhill simplex method**. The basic idea about the method can be '
    'obtained from\n'
    '<http://en.wikipedia.org/wiki/Nelder-Mead_method>.\n'
    '\n'
    'It should be noted, that this method, although deterministic, is rather a '
    'heuristic and therefore\n'
    'may converge to a local minima, not necessary a global one. It is '
    'iterative optimization technique,\n'
    'which at each step uses an information about the values of a function '
    'evaluated only at `n+1`\n'
    'points, arranged as a *simplex* in `n`-dimensional space (hence the '
    'second name of the method). At\n'
    'each step new point is chosen to evaluate function at, obtained value is '
    'compared with previous\n'
    "ones and based on this information simplex changes it's shape , slowly "
    'moving to the local minimum.\n'
    'Thus this method is using *only* function values to make decision, on '
    'contrary to, say, Nonlinear\n'
    'Conjugate Gradient method (which is also implemented in optim).\n'
    '\n'
    'Algorithm stops when the number of function evaluations done exceeds '
    'termcrit.maxCount, when the\n'
    'function values at the vertices of simplex are within termcrit.epsilon '
    'range or simplex becomes so\n'
    'small that it can enclosed in a box with termcrit.epsilon sides, whatever '
    'comes first, for some\n'
    'defined by user positive integer termcrit.maxCount and positive '
    'non-integer termcrit.epsilon.\n'
    '\n'
    '@note DownhillSolver is a derivative of the abstract interface\n'
    'cv::MinProblemSolver, which in turn is derived from the Algorithm '
    'interface and is used to\n'
    'encapsulate the functionality, common to all non-linear optimization '
    'algorithms in the optim\n'
    'module.\n'
    '\n'
    '@note term criteria should meet following condition:\n'
    '@code\n'
    'termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && '
    'termcrit.epsilon > 0 && termcrit.maxCount > 0\n'
    '@endcode']
parse_name: class cv.DownhillSolver with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::DownhillSolver namespace:cv classpath: classname: name:DownhillSolver
register class cv::DownhillSolver (['class cv.DownhillSolver', ': cv::MinProblemSolver', [], [], None, "@brief This class is used to perform the non-linear non-constrained minimization of a function,\n\ndefined on an `n`-dimensional Euclidean space, using the **Nelder-Mead method**, also known as\n**downhill simplex method**. The basic idea about the method can be obtained from\n<http://en.wikipedia.org/wiki/Nelder-Mead_method>.\n\nIt should be noted, that this method, although deterministic, is rather a heuristic and therefore\nmay converge to a local minima, not necessary a global one. It is iterative optimization technique,\nwhich at each step uses an information about the values of a function evaluated only at `n+1`\npoints, arranged as a *simplex* in `n`-dimensional space (hence the second name of the method). At\neach step new point is chosen to evaluate function at, obtained value is compared with previous\nones and based on this information simplex changes it's shape , slowly moving to the local minimum.\nThus this method is using *only* function values to make decision, on contrary to, say, Nonlinear\nConjugate Gradient method (which is also implemented in optim).\n\nAlgorithm stops when the number of function evaluations done exceeds termcrit.maxCount, when the\nfunction values at the vertices of simplex are within termcrit.epsilon range or simplex becomes so\nsmall that it can enclosed in a box with termcrit.epsilon sides, whatever comes first, for some\ndefined by user positive integer termcrit.maxCount and positive non-integer termcrit.epsilon.\n\n@note DownhillSolver is a derivative of the abstract interface\ncv::MinProblemSolver, which in turn is derived from the Algorithm interface and is used to\nencapsulate the functionality, common to all non-linear optimization algorithms in the optim\nmodule.\n\n@note term criteria should meet following condition:\n@code\ntermcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0\n@endcode"]) impl:cv::MinProblemSolver

--- Incoming ---
[   'cv.DownhillSolver.getInitStep',
    'void',
    ['/A', '/C'],
    [['OutputArray', 'step', '', []]],
    None,
    '@brief Returns the initial step that will be used in downhill simplex '
    'algorithm.\n'
    '\n'
    '@param step Initial step that will be used in algorithm. Note, that '
    'although corresponding setter\n'
    'accepts column-vectors as well as row-vectors, this method will return a '
    'row-vector.\n'
    '@see DownhillSolver::setInitStep']
parse_name: cv.DownhillSolver.getInitStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::DownhillSolver::getInitStep namespace:cv classpath:DownhillSolver classname:DownhillSolver name:getInitStep
register (method) getInitStep in cv::DownhillSolver (trait) (cv_DownhillSolver_getInitStep_const__OutputArray)

--- Incoming ---
[   'cv.DownhillSolver.setInitStep',
    'void',
    ['/A'],
    [['InputArray', 'step', '', []]],
    None,
    '@brief Sets the initial step that will be used in downhill simplex '
    'algorithm.\n'
    '\n'
    'Step, together with initial point (givin in DownhillSolver::minimize) are '
    'two `n`-dimensional\n'
    'vectors that are used to determine the shape of initial simplex. Roughly '
    'said, initial point\n'
    "determines the position of a simplex (it will become simplex's centroid), "
    'while step determines the\n'
    'spread (size in each dimension) of a simplex. To be more precise, if '
    '\\f$s,x_0\\in\\mathbb{R}^n\\f$ are\n'
    'the initial step and initial point respectively, the vertices of a '
    'simplex will be:\n'
    '\\f$v_0:=x_0-\\frac{1}{2} s\\f$ and \\f$v_i:=x_0+s_i\\f$ for '
    '\\f$i=1,2,\\dots,n\\f$ where \\f$s_i\\f$ denotes\n'
    'projections of the initial step of *n*-th coordinate (the result of '
    'projection is treated to be\n'
    'vector given by \\f$s_i:=e_i\\cdot\\left<e_i\\cdot s\\right>\\f$, where '
    '\\f$e_i\\f$ form canonical basis)\n'
    '\n'
    '@param step Initial step that will be used in algorithm. Roughly said, it '
    'determines the spread\n'
    '(size in each dimension) of an initial simplex.']
parse_name: cv.DownhillSolver.setInitStep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::DownhillSolver::setInitStep namespace:cv classpath:DownhillSolver classname:DownhillSolver name:setInitStep
register (method) setInitStep in cv::DownhillSolver (trait) (cv_DownhillSolver_setInitStep__InputArray)

--- Incoming ---
[   'cv.DownhillSolver.create',
    'Ptr<DownhillSolver>',
    ['/S'],
    [   [   'const Ptr<MinProblemSolver::Function>&',
            'f',
            'Ptr<MinProblemSolver::Function>()',
            []],
        ['InputArray', 'initStep', 'Mat_<double>(1,1,0.0)', []],
        [   'TermCriteria',
            'termcrit',
            'TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5000,0.000001)',
            []]],
    None,
    '@brief This function returns the reference to the ready-to-use '
    'DownhillSolver object.\n'
    '\n'
    'All the parameters are optional, so this procedure can be called even '
    'without parameters at\n'
    'all. In this case, the default values will be used. As default value for '
    'terminal criteria are\n'
    'the only sensible ones, MinProblemSolver::setFunction() and '
    'DownhillSolver::setInitStep()\n'
    'should be called upon the obtained object, if the respective parameters '
    'were not given to\n'
    'create(). Otherwise, the two ways (give parameters to '
    'createDownhillSolver() or miss them out\n'
    'and call the MinProblemSolver::setFunction() and '
    'DownhillSolver::setInitStep()) are absolutely\n'
    'equivalent (and will drop the same errors in the same way, should invalid '
    'input be detected).\n'
    '@param f Pointer to the function that will be minimized, similarly to the '
    'one you submit via\n'
    'MinProblemSolver::setFunction.\n'
    '@param initStep Initial step, that will be used to construct the initial '
    'simplex, similarly to the one\n'
    'you submit via MinProblemSolver::setInitStep.\n'
    '@param termcrit Terminal criteria to the algorithm, similarly to the one '
    'you submit via\n'
    'MinProblemSolver::setTermCriteria.']
parse_name: cv.DownhillSolver.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::DownhillSolver::create namespace:cv classpath:DownhillSolver classname:DownhillSolver name:create
register (method) create in cv::DownhillSolver (trait) (cv_DownhillSolver_create_PtrOfFunction__InputArray_TermCriteria)

--- Incoming ---
[   'class cv.ConjGradSolver',
    ': cv::MinProblemSolver',
    [],
    [],
    None,
    '@brief This class is used to perform the non-linear non-constrained '
    'minimization of a function\n'
    'with known gradient,\n'
    '\n'
    'defined on an *n*-dimensional Euclidean space, using the **Nonlinear '
    'Conjugate Gradient method**.\n'
    'The implementation was done based on the beautifully clear explanatory '
    'article [An Introduction to\n'
    'the Conjugate Gradient Method Without the Agonizing\n'
    'Pain](http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf) '
    'by Jonathan Richard\n'
    'Shewchuk. The method can be seen as an adaptation of a standard Conjugate '
    'Gradient method (see, for\n'
    'example <http://en.wikipedia.org/wiki/Conjugate_gradient_method>) for '
    'numerically solving the\n'
    'systems of linear equations.\n'
    '\n'
    'It should be noted, that this method, although deterministic, is rather a '
    'heuristic method and\n'
    'therefore may converge to a local minima, not necessary a global one. '
    'What is even more disastrous,\n'
    'most of its behaviour is ruled by gradient, therefore it essentially '
    'cannot distinguish between\n'
    'local minima and maxima. Therefore, if it starts sufficiently near to the '
    'local maximum, it may\n'
    'converge to it. Another obvious restriction is that it should be possible '
    'to compute the gradient of\n'
    'a function at any point, thus it is preferable to have analytic '
    'expression for gradient and\n'
    'computational burden should be born by the user.\n'
    '\n'
    'The latter responsibility is accomplished via the getGradient method of '
    'a\n'
    'MinProblemSolver::Function interface (which represents function being '
    'optimized). This method takes\n'
    'point a point in *n*-dimensional space (first argument represents the '
    'array of coordinates of that\n'
    'point) and compute its gradient (it should be stored in the second '
    'argument as an array).\n'
    '\n'
    '@note class ConjGradSolver thus does not add any new methods to the basic '
    'MinProblemSolver interface.\n'
    '\n'
    '@note term criteria should meet following condition:\n'
    '@code\n'
    'termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && '
    'termcrit.epsilon > 0 && termcrit.maxCount > 0\n'
    '// or\n'
    'termcrit.type == TermCriteria::MAX_ITER) && termcrit.maxCount > 0\n'
    '@endcode']
parse_name: class cv.ConjGradSolver with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ConjGradSolver namespace:cv classpath: classname: name:ConjGradSolver
register class cv::ConjGradSolver (['class cv.ConjGradSolver', ': cv::MinProblemSolver', [], [], None, '@brief This class is used to perform the non-linear non-constrained minimization of a function\nwith known gradient,\n\ndefined on an *n*-dimensional Euclidean space, using the **Nonlinear Conjugate Gradient method**.\nThe implementation was done based on the beautifully clear explanatory article [An Introduction to\nthe Conjugate Gradient Method Without the Agonizing\nPain](http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf) by Jonathan Richard\nShewchuk. The method can be seen as an adaptation of a standard Conjugate Gradient method (see, for\nexample <http://en.wikipedia.org/wiki/Conjugate_gradient_method>) for numerically solving the\nsystems of linear equations.\n\nIt should be noted, that this method, although deterministic, is rather a heuristic method and\ntherefore may converge to a local minima, not necessary a global one. What is even more disastrous,\nmost of its behaviour is ruled by gradient, therefore it essentially cannot distinguish between\nlocal minima and maxima. Therefore, if it starts sufficiently near to the local maximum, it may\nconverge to it. Another obvious restriction is that it should be possible to compute the gradient of\na function at any point, thus it is preferable to have analytic expression for gradient and\ncomputational burden should be born by the user.\n\nThe latter responsibility is accomplished via the getGradient method of a\nMinProblemSolver::Function interface (which represents function being optimized). This method takes\npoint a point in *n*-dimensional space (first argument represents the array of coordinates of that\npoint) and compute its gradient (it should be stored in the second argument as an array).\n\n@note class ConjGradSolver thus does not add any new methods to the basic MinProblemSolver interface.\n\n@note term criteria should meet following condition:\n@code\ntermcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0\n// or\ntermcrit.type == TermCriteria::MAX_ITER) && termcrit.maxCount > 0\n@endcode']) impl:cv::MinProblemSolver

--- Incoming ---
[   'cv.ConjGradSolver.create',
    'Ptr<ConjGradSolver>',
    ['/S'],
    [   [   'const Ptr<MinProblemSolver::Function>&',
            'f',
            'Ptr<ConjGradSolver::Function>()',
            []],
        [   'TermCriteria',
            'termcrit',
            'TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5000,0.000001)',
            []]],
    None,
    '@brief This function returns the reference to the ready-to-use '
    'ConjGradSolver object.\n'
    '\n'
    'All the parameters are optional, so this procedure can be called even '
    'without parameters at\n'
    'all. In this case, the default values will be used. As default value for '
    'terminal criteria are\n'
    'the only sensible ones, MinProblemSolver::setFunction() should be called '
    'upon the obtained\n'
    'object, if the function was not given to create(). Otherwise, the two '
    'ways (submit it to\n'
    'create() or miss it out and call the MinProblemSolver::setFunction()) are '
    'absolutely equivalent\n'
    '(and will drop the same errors in the same way, should invalid input be '
    'detected).\n'
    '@param f Pointer to the function that will be minimized, similarly to the '
    'one you submit via\n'
    'MinProblemSolver::setFunction.\n'
    '@param termcrit Terminal criteria to the algorithm, similarly to the one '
    'you submit via\n'
    'MinProblemSolver::setTermCriteria.']
parse_name: cv.ConjGradSolver.create with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ConjGradSolver::create namespace:cv classpath:ConjGradSolver classname:ConjGradSolver name:create
register (method) create in cv::ConjGradSolver (cv_ConjGradSolver_create_PtrOfFunction_TermCriteria)

--- Incoming ---
[   'enum cv.SolveLPResult',
    '',
    [],
    [   [   'const cv.SOLVELP_UNBOUNDED',
            '-2',
            [],
            [],
            None,
            'problem is unbounded (target function can achieve arbitrary high '
            'values)\n'],
        [   'const cv.SOLVELP_UNFEASIBLE',
            '-1',
            [],
            [],
            None,
            'problem is unfeasible (there are no points that satisfy all the '
            'constraints imposed)\n'],
        [   'const cv.SOLVELP_SINGLE',
            '0',
            [],
            [],
            None,
            'there is only one maximum for target function\n'],
        [   'const cv.SOLVELP_MULTI',
            '1',
            [],
            [],
            None,
            'there are multiple maxima for target function - the arbitrary one '
            'is returned\n']],
    None,
    'return codes for cv::solveLP() function']
parse_name: const cv.SOLVELP_UNBOUNDED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_UNBOUNDED namespace:cv classpath: classname: name:SOLVELP_UNBOUNDED
parse_name: const cv.SOLVELP_UNFEASIBLE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_UNFEASIBLE namespace:cv classpath: classname: name:SOLVELP_UNFEASIBLE
parse_name: const cv.SOLVELP_SINGLE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_SINGLE namespace:cv classpath: classname: name:SOLVELP_SINGLE
parse_name: const cv.SOLVELP_MULTI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_MULTI namespace:cv classpath: classname: name:SOLVELP_MULTI
parse_name: enum cv.SolveLPResult with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SolveLPResult namespace:cv classpath: classname: name:SolveLPResult
parse_name: const cv.SOLVELP_UNBOUNDED with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_UNBOUNDED namespace:cv classpath: classname: name:SOLVELP_UNBOUNDED
parse_name: const cv.SOLVELP_UNFEASIBLE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_UNFEASIBLE namespace:cv classpath: classname: name:SOLVELP_UNFEASIBLE
parse_name: const cv.SOLVELP_SINGLE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_SINGLE namespace:cv classpath: classname: name:SOLVELP_SINGLE
parse_name: const cv.SOLVELP_MULTI with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::SOLVELP_MULTI namespace:cv classpath: classname: name:SOLVELP_MULTI

--- Incoming ---
[   'cv.solveLP',
    'int',
    [],
    [   ['InputArray', 'Func', '', []],
        ['InputArray', 'Constr', '', []],
        ['OutputArray', 'z', '', []]],
    None,
    '@brief Solve given (non-integer) linear programming problem using the '
    'Simplex Algorithm (Simplex Method).\n'
    '\n'
    'What we mean here by "linear programming problem" (or LP problem, for '
    'short) can be formulated as:\n'
    '\n'
    '\\f[\\mbox{Maximize } c\\cdot x\\\\\n'
    '\\mbox{Subject to:}\\\\\n'
    'Ax\\leq b\\\\\n'
    'x\\geq 0\\f]\n'
    '\n'
    'Where \\f$c\\f$ is fixed `1`-by-`n` row-vector, \\f$A\\f$ is fixed '
    '`m`-by-`n` matrix, \\f$b\\f$ is fixed `m`-by-`1`\n'
    'column vector and \\f$x\\f$ is an arbitrary `n`-by-`1` column vector, '
    'which satisfies the constraints.\n'
    '\n'
    'Simplex algorithm is one of many algorithms that are designed to handle '
    'this sort of problems\n'
    'efficiently. Although it is not optimal in theoretical sense (there exist '
    'algorithms that can solve\n'
    'any problem written as above in polynomial time, while simplex method '
    'degenerates to exponential\n'
    'time for some special cases), it is well-studied, easy to implement and '
    'is shown to work well for\n'
    'real-life purposes.\n'
    '\n'
    'The particular implementation is taken almost verbatim from '
    '**Introduction to Algorithms, third\n'
    'edition** by T. H. Cormen, C. E. Leiserson, R. L. Rivest and Clifford '
    'Stein. In particular, the\n'
    "Bland's rule <http://en.wikipedia.org/wiki/Bland%27s_rule> is used to "
    'prevent cycling.\n'
    '\n'
    '@param Func This row-vector corresponds to \\f$c\\f$ in the LP problem '
    'formulation (see above). It should\n'
    'contain 32- or 64-bit floating point numbers. As a convenience, '
    'column-vector may be also submitted,\n'
    'in the latter case it is understood to correspond to \\f$c^T\\f$.\n'
    '@param Constr `m`-by-`n+1` matrix, whose rightmost column corresponds to '
    '\\f$b\\f$ in formulation above\n'
    'and the remaining to \\f$A\\f$. It should contain 32- or 64-bit floating '
    'point numbers.\n'
    '@param z The solution will be returned here as a column-vector - it '
    'corresponds to \\f$c\\f$ in the\n'
    'formulation above. It will contain 64-bit floating point numbers.\n'
    '@return One of cv::SolveLPResult']
parse_name: cv.solveLP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::solveLP namespace:cv classpath: classname: name:solveLP
register (function) solveLP (cv_solveLP__InputArray__InputArray__OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/ovx.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['cv.haveOpenVX', 'bool', [], [], None, '']
parse_name: cv.haveOpenVX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::haveOpenVX namespace:cv classpath: classname: name:haveOpenVX
register (function) haveOpenVX (cv_haveOpenVX)

--- Incoming ---
['cv.useOpenVX', 'bool', [], [], None, '']
parse_name: cv.useOpenVX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::useOpenVX namespace:cv classpath: classname: name:useOpenVX
register (function) useOpenVX (cv_useOpenVX)

--- Incoming ---
['cv.setUseOpenVX', 'void', [], [['bool', 'flag', '', []]], None, '']
parse_name: cv.setUseOpenVX with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::setUseOpenVX namespace:cv classpath: classname: name:setUseOpenVX
register (function) setUseOpenVX (cv_setUseOpenVX_bool)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/saturate.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['uchar', 'v', '', []]],
    None,
    '@brief Template function for accurate conversion from one primitive type '
    'to another.\n'
    '\n'
    'The function saturate_cast resembles the standard C++ cast operations, '
    'such as static_cast\\<T\\>()\n'
    'and others. It perform an efficient and accurate conversion from one '
    'primitive type to another\n'
    '(see the introduction chapter). saturate in the name means that when the '
    'input value v is out of the\n'
    'range of the target type, the result is not formed just by taking low '
    'bits of the input, but instead\n'
    'the value is clipped. For example:\n'
    '@code\n'
    'uchar a = saturate_cast<uchar>(-100); // a = 0 (UCHAR_MIN)\n'
    'short b = saturate_cast<short>(33333.33333); // b = 32767 (SHRT_MAX)\n'
    '@endcode\n'
    'Such clipping is done when the target type is unsigned char , signed char '
    ', unsigned short or\n'
    'signed short . For 32-bit integers, no clipping is done.\n'
    '\n'
    'When the parameter is a floating-point value and the target type is an '
    'integer (8-, 16- or 32-bit),\n'
    'the floating-point value is first rounded to the nearest integer and then '
    'clipped if needed (when\n'
    'the target type is 8- or 16-bit).\n'
    '\n'
    'This operation is used in the simplest or most complex image processing '
    'functions in OpenCV.\n'
    '\n'
    '@param v Function parameter.\n'
    '@sa add, subtract, multiply, divide, Mat::convertTo']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_uchar)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['schar', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_schar)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['ushort', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_ushort)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['short', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_short)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_unsigned)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['int', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_int)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['float', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_float)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['double', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_double)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['int64', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_int64)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['uint64', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_uint64)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['schar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
Registering an unknown type: template<> uchar
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_schar)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['ushort', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_ushort)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_int)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['short', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_short)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_unsigned)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_float)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_double)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_int64)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['uchar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
Registering an unknown type: template<> schar
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_uchar)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['ushort', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_ushort)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_int)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['short', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_short)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_unsigned)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_float)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_double)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_int64)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['schar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
Registering an unknown type: template<> ushort
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_schar)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['short', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_short)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_int)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_unsigned)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_float)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_double)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_int64)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['ushort', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
Registering an unknown type: template<> short
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_ushort)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_int)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_unsigned)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_float)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_double)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_int64)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_unsigned)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_int64)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_float)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_double)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['schar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
Registering an unknown type: template<> unsigned
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_schar)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['short', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_short)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_int)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_int64)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_float)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_double)

--- Incoming ---
[   'cv.saturate_cast < uint64 >',
    'template<> uint64',
    [],
    [['schar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uint64 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uint64 > namespace:cv classpath: classname: name:saturate_cast < uint64 >
Registering an unknown type: template<> uint64
register (function) saturate_cast < uint64 > (cv_saturate_cast_<_uint64_>_schar)

--- Incoming ---
[   'cv.saturate_cast < uint64 >',
    'template<> uint64',
    [],
    [['short', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uint64 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uint64 > namespace:cv classpath: classname: name:saturate_cast < uint64 >
register (function) saturate_cast < uint64 > (cv_saturate_cast_<_uint64_>_short)

--- Incoming ---
[   'cv.saturate_cast < uint64 >',
    'template<> uint64',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uint64 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uint64 > namespace:cv classpath: classname: name:saturate_cast < uint64 >
register (function) saturate_cast < uint64 > (cv_saturate_cast_<_uint64_>_int)

--- Incoming ---
[   'cv.saturate_cast < uint64 >',
    'template<> uint64',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uint64 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uint64 > namespace:cv classpath: classname: name:saturate_cast < uint64 >
register (function) saturate_cast < uint64 > (cv_saturate_cast_<_uint64_>_int64)

--- Incoming ---
[   'cv.saturate_cast < int64 >',
    'template<> int64',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int64 > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int64 > namespace:cv classpath: classname: name:saturate_cast < int64 >
register (function) saturate_cast < int64 > (cv_saturate_cast_<_int64_>_uint64)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['float16_t', 'v', '', []]],
    None,
    '@overload']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_float16_t)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['uchar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
Registering an unknown type: template<> float16_t
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_uchar)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['schar', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_schar)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['ushort', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_ushort)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['short', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_short)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['unsigned', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_unsigned)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['int', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_int)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['uint64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_uint64)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['int64', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_int64)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['float', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_float)

--- Incoming ---
[   'cv.saturate_cast < float16_t >',
    'template<> float16_t',
    [],
    [['double', 'v', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < float16_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < float16_t > namespace:cv classpath: classname: name:saturate_cast < float16_t >
register (function) saturate_cast < float16_t > (cv_saturate_cast_<_float16_t_>_double)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/simd_intrinsics.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/softfloat.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['struct cv.softfloat', '', [], [], None, '']
parse_name: struct cv.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat namespace:cv classpath: classname: name:softfloat
register class cv::softfloat (['struct cv.softfloat', '', [], [], None, '']) [ignored]

--- Incoming ---
['cv.softfloat.softfloat', 's', [], [], None, '@brief Default constructor']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
Registering an unknown type: softfloat
register (constructor) default in cv::softfloat (ignored) (cv_softfloat_softfloat)

--- Incoming ---
[   'cv.softfloat.softfloat',
    's',
    [],
    [['const softfloat&', 'c', '', []]],
    None,
    '@brief Copy constructor']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
Registering an unknown type: softfloat
register (constructor) copy in cv::softfloat (ignored) (cv_softfloat_softfloat_softfloat)

--- Incoming ---
[   'cv.softfloat.operator=',
    'softfloat&',
    [],
    [['const softfloat&', 'c', '', []]],
    None,
    '@brief Assign constructor']
parse_name: cv.softfloat.operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator= namespace:cv classpath:softfloat classname:softfloat name:operator=
Registering an unknown type: softfloat
ignore (method) operator= in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.fromRaw',
    'const softfloat',
    ['/S'],
    [['const uint32_t', 'a', '', []]],
    None,
    '@brief Construct from raw\n'
    '\n'
    'Builds new value from raw binary representation']
parse_name: cv.softfloat.fromRaw with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::fromRaw namespace:cv classpath:softfloat classname:softfloat name:fromRaw
Registering an unknown type: softfloat
register (method) fromRaw in cv::softfloat (ignored) (cv_softfloat_fromRaw_uint32_t)

--- Incoming ---
[   'cv.softfloat.softfloat',
    's',
    ['/E'],
    [['const', 'uint32_t', '', []]],
    None,
    '@brief Construct from integer']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
Registering an unknown type: const
register (constructor) new in cv::softfloat (ignored) (cv_softfloat_softfloat_const)

--- Incoming ---
[   'cv.softfloat.softfloat',
    's',
    ['/E'],
    [['const', 'uint64_t', '', []]],
    None,
    '']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
register (constructor) new in cv::softfloat (ignored) (cv_softfloat_softfloat_const)

--- Incoming ---
[   'cv.softfloat.softfloat',
    's',
    ['/E'],
    [['const', 'int32_t', '', []]],
    None,
    '']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
register (constructor) new in cv::softfloat (ignored) (cv_softfloat_softfloat_const)

--- Incoming ---
[   'cv.softfloat.softfloat',
    's',
    ['/E'],
    [['const', 'int64_t', '', []]],
    None,
    '']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
register (constructor) new in cv::softfloat (ignored) (cv_softfloat_softfloat_const)

--- Incoming ---
['cv.softfloat.softfloat', 's', ['/E'], [['const int', 'a', '', []]], None, '']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
register (constructor) new in cv::softfloat (ignored) (cv_softfloat_softfloat_int)

--- Incoming ---
[   'cv.softfloat.softfloat',
    's',
    ['/E'],
    [['const float', 'a', '', []]],
    None,
    '@brief Construct from float']
parse_name: cv.softfloat.softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::softfloat namespace:cv classpath:softfloat classname:softfloat name:softfloat
register (constructor) new in cv::softfloat (ignored) (cv_softfloat_softfloat_float)

--- Incoming ---
['cv.softfloat.operator softdouble', '', ['/C'], [], None, '@brief Type casts']
parse_name: cv.softfloat.operator softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator softdouble namespace:cv classpath:softfloat classname:softfloat name:operator softdouble
Registering an unknown type: softdouble
ignore (method) operator softdouble in cv::softfloat (ignored)

--- Incoming ---
['cv.softfloat.operator float', '', ['/C'], [], None, '']
parse_name: cv.softfloat.operator float with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator float namespace:cv classpath:softfloat classname:softfloat name:operator float
register (convertor method) operator float in cv::softfloat (ignored) (cv_softfloat_operator_float_const)

--- Incoming ---
[   'cv.softfloat.operator +',
    'softfloat',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '@brief Basic arithmetics']
parse_name: cv.softfloat.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator + namespace:cv classpath:softfloat classname:softfloat name:operator +
ignore (method) operator + in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator -',
    'softfloat',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator - namespace:cv classpath:softfloat classname:softfloat name:operator -
ignore (method) operator - in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator *',
    'softfloat operator *',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator * namespace:cv classpath:softfloat classname:softfloat name:operator *
Registering an unknown type: softfloat operator
ignore (method) operator * in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator /',
    'softfloat',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator / namespace:cv classpath:softfloat classname:softfloat name:operator /
ignore (method) operator / in cv::softfloat (ignored)

--- Incoming ---
['cv.softfloat.operator -', 'softfloat', ['/C'], [], None, '']
parse_name: cv.softfloat.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator - namespace:cv classpath:softfloat classname:softfloat name:operator -
ignore (method) operator - in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator %',
    'softfloat',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '@brief Remainder operator\n'
    '\n'
    'A quote from original SoftFloat manual:\n'
    '\n'
    '> The IEEE Standard remainder operation computes the value\n'
    '> a - n * b, where n is the integer closest to a / b.\n'
    '> If a / b is exactly halfway between two integers, n is the even '
    'integer\n'
    '> closest to a / b. The IEEE Standard’s remainder operation is always '
    'exact and so requires no rounding.\n'
    '> Depending on the relative magnitudes of the operands, the remainder '
    'functions\n'
    '> can take considerably longer to execute than the other SoftFloat '
    'functions.\n'
    '> This is an inherent characteristic of the remainder operation itself '
    'and is not a flaw\n'
    '> in the SoftFloat implementation.']
parse_name: cv.softfloat.operator % with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator % namespace:cv classpath:softfloat classname:softfloat name:operator %
ignore (method) operator % in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator +=',
    'softfloat&',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator += with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator += namespace:cv classpath:softfloat classname:softfloat name:operator +=
ignore (method) operator += in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator -=',
    'softfloat&',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator -= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator -= namespace:cv classpath:softfloat classname:softfloat name:operator -=
ignore (method) operator -= in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator *=',
    'softfloat& operator *',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator *= namespace:cv classpath:softfloat classname:softfloat name:operator *=
Registering an unknown type: softfloat& operator
ignore (method) operator *= in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator /=',
    'softfloat&',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator /= namespace:cv classpath:softfloat classname:softfloat name:operator /=
ignore (method) operator /= in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator %=',
    'softfloat&',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator %= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator %= namespace:cv classpath:softfloat classname:softfloat name:operator %=
ignore (method) operator %= in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator ==',
    'bool',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '@brief Comparison operations\n'
    '\n'
    '- Any operation with NaN produces false\n'
    '+ The only exception is when x is NaN: x != y for any y.\n'
    '- Positive and negative zeros are equal']
parse_name: cv.softfloat.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator == namespace:cv classpath:softfloat classname:softfloat name:operator ==
ignore (method) operator == in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator !=',
    'bool',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator != namespace:cv classpath:softfloat classname:softfloat name:operator !=
ignore (method) operator != in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator >',
    'bool',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator > namespace:cv classpath:softfloat classname:softfloat name:operator >
ignore (method) operator > in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator >=',
    'bool',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator >= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator >= namespace:cv classpath:softfloat classname:softfloat name:operator >=
ignore (method) operator >= in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator <',
    'bool',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator < namespace:cv classpath:softfloat classname:softfloat name:operator <
ignore (method) operator < in cv::softfloat (ignored)

--- Incoming ---
[   'cv.softfloat.operator <=',
    'bool',
    ['/C'],
    [['const softfloat&', '', '', []]],
    None,
    '']
parse_name: cv.softfloat.operator <= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::operator <= namespace:cv classpath:softfloat classname:softfloat name:operator <=
ignore (method) operator <= in cv::softfloat (ignored)

--- Incoming ---
['cv.softfloat.isNaN', 'bool', ['/C'], [], None, '@brief NaN state indicator']
parse_name: cv.softfloat.isNaN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::isNaN namespace:cv classpath:softfloat classname:softfloat name:isNaN
register (method) isNaN in cv::softfloat (ignored) (cv_softfloat_isNaN_const)

--- Incoming ---
['cv.softfloat.isInf', 'bool', ['/C'], [], None, '@brief Inf state indicator']
parse_name: cv.softfloat.isInf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::isInf namespace:cv classpath:softfloat classname:softfloat name:isInf
register (method) isInf in cv::softfloat (ignored) (cv_softfloat_isInf_const)

--- Incoming ---
[   'cv.softfloat.isSubnormal',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Subnormal number indicator']
parse_name: cv.softfloat.isSubnormal with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::isSubnormal namespace:cv classpath:softfloat classname:softfloat name:isSubnormal
register (method) isSubnormal in cv::softfloat (ignored) (cv_softfloat_isSubnormal_const)

--- Incoming ---
['cv.softfloat.getSign', 'bool', ['/C'], [], None, '@brief Get sign bit']
parse_name: cv.softfloat.getSign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::getSign namespace:cv classpath:softfloat classname:softfloat name:getSign
register (method) getSign in cv::softfloat (ignored) (cv_softfloat_getSign_const)

--- Incoming ---
[   'cv.softfloat.setSign',
    'softfloat',
    ['/C'],
    [['bool', 'sign', '', []]],
    None,
    '@brief Construct a copy with new sign bit']
parse_name: cv.softfloat.setSign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::setSign namespace:cv classpath:softfloat classname:softfloat name:setSign
register (method) setSign in cv::softfloat (ignored) (cv_softfloat_setSign_const_bool)

--- Incoming ---
['cv.softfloat.getExp', 'int', ['/C'], [], None, '@brief Get 0-based exponent']
parse_name: cv.softfloat.getExp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::getExp namespace:cv classpath:softfloat classname:softfloat name:getExp
register (method) getExp in cv::softfloat (ignored) (cv_softfloat_getExp_const)

--- Incoming ---
[   'cv.softfloat.setExp',
    'softfloat',
    ['/C'],
    [['int', 'e', '', []]],
    None,
    '@brief Construct a copy with new 0-based exponent']
parse_name: cv.softfloat.setExp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::setExp namespace:cv classpath:softfloat classname:softfloat name:setExp
register (method) setExp in cv::softfloat (ignored) (cv_softfloat_setExp_const_int)

--- Incoming ---
[   'cv.softfloat.getFrac',
    'softfloat',
    ['/C'],
    [],
    None,
    '@brief Get a fraction part\n'
    '\n'
    'Returns a number 1 <= x < 2 with the same significand']
parse_name: cv.softfloat.getFrac with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::getFrac namespace:cv classpath:softfloat classname:softfloat name:getFrac
register (method) getFrac in cv::softfloat (ignored) (cv_softfloat_getFrac_const)

--- Incoming ---
[   'cv.softfloat.setFrac',
    'softfloat',
    ['/C'],
    [['const softfloat&', 's', '', []]],
    None,
    '@brief Construct a copy with provided significand\n'
    '\n'
    'Constructs a copy of a number with significand taken from parameter']
parse_name: cv.softfloat.setFrac with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::setFrac namespace:cv classpath:softfloat classname:softfloat name:setFrac
register (method) setFrac in cv::softfloat (ignored) (cv_softfloat_setFrac_const_softfloat)

--- Incoming ---
['cv.softfloat.zero', 'softfloat', ['/S'], [], None, '@brief Zero constant']
parse_name: cv.softfloat.zero with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::zero namespace:cv classpath:softfloat classname:softfloat name:zero
register (method) zero in cv::softfloat (ignored) (cv_softfloat_zero)

--- Incoming ---
[   'cv.softfloat.inf',
    'softfloat',
    ['/S'],
    [],
    None,
    '@brief Positive infinity constant']
parse_name: cv.softfloat.inf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::inf namespace:cv classpath:softfloat classname:softfloat name:inf
register (method) inf in cv::softfloat (ignored) (cv_softfloat_inf)

--- Incoming ---
[   'cv.softfloat.nan',
    'softfloat',
    ['/S'],
    [],
    None,
    '@brief Default NaN constant']
parse_name: cv.softfloat.nan with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::nan namespace:cv classpath:softfloat classname:softfloat name:nan
register (method) nan in cv::softfloat (ignored) (cv_softfloat_nan)

--- Incoming ---
['cv.softfloat.one', 'softfloat', ['/S'], [], None, '@brief One constant']
parse_name: cv.softfloat.one with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::one namespace:cv classpath:softfloat classname:softfloat name:one
register (method) one in cv::softfloat (ignored) (cv_softfloat_one)

--- Incoming ---
[   'cv.softfloat.min',
    'softfloat',
    ['/S'],
    [],
    None,
    '@brief Smallest normalized value']
parse_name: cv.softfloat.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::min namespace:cv classpath:softfloat classname:softfloat name:min
register (method) min in cv::softfloat (ignored) (cv_softfloat_min)

--- Incoming ---
[   'cv.softfloat.eps',
    'softfloat',
    ['/S'],
    [],
    None,
    '@brief Difference between 1 and next representable value']
parse_name: cv.softfloat.eps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::eps namespace:cv classpath:softfloat classname:softfloat name:eps
register (method) eps in cv::softfloat (ignored) (cv_softfloat_eps)

--- Incoming ---
[   'cv.softfloat.max',
    'softfloat',
    ['/S'],
    [],
    None,
    '@brief Biggest finite value']
parse_name: cv.softfloat.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::max namespace:cv classpath:softfloat classname:softfloat name:max
register (method) max in cv::softfloat (ignored) (cv_softfloat_max)

--- Incoming ---
[   'cv.softfloat.pi',
    'softfloat',
    ['/S'],
    [],
    None,
    '@brief Correct pi approximation']
parse_name: cv.softfloat.pi with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softfloat::pi namespace:cv classpath:softfloat classname:softfloat name:pi
register (method) pi in cv::softfloat (ignored) (cv_softfloat_pi)

--- Incoming ---
['struct cv.softdouble', '', [], [], None, '']
parse_name: struct cv.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble namespace:cv classpath: classname: name:softdouble
register class cv::softdouble (['struct cv.softdouble', '', [], [], None, '']) [ignored]

--- Incoming ---
['cv.softdouble.softdouble', 's', [], [], None, '@brief Default constructor']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) default in cv::softdouble (ignored) (cv_softdouble_softdouble)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    [],
    [['const softdouble&', 'c', '', []]],
    None,
    '@brief Copy constructor']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
Registering an unknown type: softdouble
register (constructor) copy in cv::softdouble (ignored) (cv_softdouble_softdouble_softdouble)

--- Incoming ---
[   'cv.softdouble.operator=',
    'softdouble&',
    [],
    [['const softdouble&', 'c', '', []]],
    None,
    '@brief Assign constructor']
parse_name: cv.softdouble.operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator= namespace:cv classpath:softdouble classname:softdouble name:operator=
Registering an unknown type: softdouble
ignore (method) operator= in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.fromRaw',
    'softdouble',
    ['/S'],
    [['const uint64_t', 'a', '', []]],
    None,
    '@brief Construct from raw\n'
    '\n'
    'Builds new value from raw binary representation']
parse_name: cv.softdouble.fromRaw with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::fromRaw namespace:cv classpath:softdouble classname:softdouble name:fromRaw
register (method) fromRaw in cv::softdouble (ignored) (cv_softdouble_fromRaw_uint64_t)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    ['/E'],
    [['const', 'uint32_t', '', []]],
    None,
    '@brief Construct from integer']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) new in cv::softdouble (ignored) (cv_softdouble_softdouble_const)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    ['/E'],
    [['const', 'uint64_t', '', []]],
    None,
    '']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) new in cv::softdouble (ignored) (cv_softdouble_softdouble_const)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    ['/E'],
    [['const', 'int32_t', '', []]],
    None,
    '']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) new in cv::softdouble (ignored) (cv_softdouble_softdouble_const)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    ['/E'],
    [['const', 'int64_t', '', []]],
    None,
    '']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) new in cv::softdouble (ignored) (cv_softdouble_softdouble_const)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    ['/E'],
    [['const int', 'a', '', []]],
    None,
    '']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) new in cv::softdouble (ignored) (cv_softdouble_softdouble_int)

--- Incoming ---
[   'cv.softdouble.softdouble',
    's',
    ['/E'],
    [['const double', 'a', '', []]],
    None,
    '@brief Construct from double']
parse_name: cv.softdouble.softdouble with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::softdouble namespace:cv classpath:softdouble classname:softdouble name:softdouble
register (constructor) new in cv::softdouble (ignored) (cv_softdouble_softdouble_double)

--- Incoming ---
['cv.softdouble.operator softfloat', '', ['/C'], [], None, '@brief Type casts']
parse_name: cv.softdouble.operator softfloat with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator softfloat namespace:cv classpath:softdouble classname:softdouble name:operator softfloat
ignore (method) operator softfloat in cv::softdouble (ignored)

--- Incoming ---
['cv.softdouble.operator double', '', ['/C'], [], None, '']
parse_name: cv.softdouble.operator double with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator double namespace:cv classpath:softdouble classname:softdouble name:operator double
register (convertor method) operator double in cv::softdouble (ignored) (cv_softdouble_operator_double_const)

--- Incoming ---
[   'cv.softdouble.operator +',
    'softdouble',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '@brief Basic arithmetics']
parse_name: cv.softdouble.operator + with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator + namespace:cv classpath:softdouble classname:softdouble name:operator +
ignore (method) operator + in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator -',
    'softdouble',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator - namespace:cv classpath:softdouble classname:softdouble name:operator -
ignore (method) operator - in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator *',
    'softdouble operator *',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator * with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator * namespace:cv classpath:softdouble classname:softdouble name:operator *
Registering an unknown type: softdouble operator
ignore (method) operator * in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator /',
    'softdouble',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator / with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator / namespace:cv classpath:softdouble classname:softdouble name:operator /
ignore (method) operator / in cv::softdouble (ignored)

--- Incoming ---
['cv.softdouble.operator -', 'softdouble', ['/C'], [], None, '']
parse_name: cv.softdouble.operator - with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator - namespace:cv classpath:softdouble classname:softdouble name:operator -
ignore (method) operator - in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator %',
    'softdouble',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '@brief Remainder operator\n'
    '\n'
    'A quote from original SoftFloat manual:\n'
    '\n'
    '> The IEEE Standard remainder operation computes the value\n'
    '> a - n * b, where n is the integer closest to a / b.\n'
    '> If a / b is exactly halfway between two integers, n is the even '
    'integer\n'
    '> closest to a / b. The IEEE Standard’s remainder operation is always '
    'exact and so requires no rounding.\n'
    '> Depending on the relative magnitudes of the operands, the remainder '
    'functions\n'
    '> can take considerably longer to execute than the other SoftFloat '
    'functions.\n'
    '> This is an inherent characteristic of the remainder operation itself '
    'and is not a flaw\n'
    '> in the SoftFloat implementation.']
parse_name: cv.softdouble.operator % with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator % namespace:cv classpath:softdouble classname:softdouble name:operator %
ignore (method) operator % in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator +=',
    'softdouble&',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator += with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator += namespace:cv classpath:softdouble classname:softdouble name:operator +=
ignore (method) operator += in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator -=',
    'softdouble&',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator -= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator -= namespace:cv classpath:softdouble classname:softdouble name:operator -=
ignore (method) operator -= in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator *=',
    'softdouble& operator *',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator *= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator *= namespace:cv classpath:softdouble classname:softdouble name:operator *=
Registering an unknown type: softdouble& operator
ignore (method) operator *= in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator /=',
    'softdouble&',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator /= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator /= namespace:cv classpath:softdouble classname:softdouble name:operator /=
ignore (method) operator /= in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator %=',
    'softdouble&',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator %= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator %= namespace:cv classpath:softdouble classname:softdouble name:operator %=
ignore (method) operator %= in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator ==',
    'bool',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '@brief Comparison operations\n'
    '\n'
    '- Any operation with NaN produces false\n'
    '+ The only exception is when x is NaN: x != y for any y.\n'
    '- Positive and negative zeros are equal']
parse_name: cv.softdouble.operator == with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator == namespace:cv classpath:softdouble classname:softdouble name:operator ==
ignore (method) operator == in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator !=',
    'bool',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator != with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator != namespace:cv classpath:softdouble classname:softdouble name:operator !=
ignore (method) operator != in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator >',
    'bool',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator > namespace:cv classpath:softdouble classname:softdouble name:operator >
ignore (method) operator > in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator >=',
    'bool',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator >= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator >= namespace:cv classpath:softdouble classname:softdouble name:operator >=
ignore (method) operator >= in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator <',
    'bool',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator < with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator < namespace:cv classpath:softdouble classname:softdouble name:operator <
ignore (method) operator < in cv::softdouble (ignored)

--- Incoming ---
[   'cv.softdouble.operator <=',
    'bool',
    ['/C'],
    [['const softdouble&', '', '', []]],
    None,
    '']
parse_name: cv.softdouble.operator <= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::operator <= namespace:cv classpath:softdouble classname:softdouble name:operator <=
ignore (method) operator <= in cv::softdouble (ignored)

--- Incoming ---
['cv.softdouble.isNaN', 'bool', ['/C'], [], None, '@brief NaN state indicator']
parse_name: cv.softdouble.isNaN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::isNaN namespace:cv classpath:softdouble classname:softdouble name:isNaN
register (method) isNaN in cv::softdouble (ignored) (cv_softdouble_isNaN_const)

--- Incoming ---
['cv.softdouble.isInf', 'bool', ['/C'], [], None, '@brief Inf state indicator']
parse_name: cv.softdouble.isInf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::isInf namespace:cv classpath:softdouble classname:softdouble name:isInf
register (method) isInf in cv::softdouble (ignored) (cv_softdouble_isInf_const)

--- Incoming ---
[   'cv.softdouble.isSubnormal',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Subnormal number indicator']
parse_name: cv.softdouble.isSubnormal with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::isSubnormal namespace:cv classpath:softdouble classname:softdouble name:isSubnormal
register (method) isSubnormal in cv::softdouble (ignored) (cv_softdouble_isSubnormal_const)

--- Incoming ---
['cv.softdouble.getSign', 'bool', ['/C'], [], None, '@brief Get sign bit']
parse_name: cv.softdouble.getSign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::getSign namespace:cv classpath:softdouble classname:softdouble name:getSign
register (method) getSign in cv::softdouble (ignored) (cv_softdouble_getSign_const)

--- Incoming ---
[   'cv.softdouble.setSign',
    'softdouble',
    ['/C'],
    [['bool', 'sign', '', []]],
    None,
    '@brief Construct a copy with new sign bit']
parse_name: cv.softdouble.setSign with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::setSign namespace:cv classpath:softdouble classname:softdouble name:setSign
register (method) setSign in cv::softdouble (ignored) (cv_softdouble_setSign_const_bool)

--- Incoming ---
['cv.softdouble.getExp', 'int', ['/C'], [], None, '@brief Get 0-based exponent']
parse_name: cv.softdouble.getExp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::getExp namespace:cv classpath:softdouble classname:softdouble name:getExp
register (method) getExp in cv::softdouble (ignored) (cv_softdouble_getExp_const)

--- Incoming ---
[   'cv.softdouble.setExp',
    'softdouble',
    ['/C'],
    [['int', 'e', '', []]],
    None,
    '@brief Construct a copy with new 0-based exponent']
parse_name: cv.softdouble.setExp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::setExp namespace:cv classpath:softdouble classname:softdouble name:setExp
register (method) setExp in cv::softdouble (ignored) (cv_softdouble_setExp_const_int)

--- Incoming ---
[   'cv.softdouble.getFrac',
    'softdouble',
    ['/C'],
    [],
    None,
    '@brief Get a fraction part\n'
    '\n'
    'Returns a number 1 <= x < 2 with the same significand']
parse_name: cv.softdouble.getFrac with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::getFrac namespace:cv classpath:softdouble classname:softdouble name:getFrac
register (method) getFrac in cv::softdouble (ignored) (cv_softdouble_getFrac_const)

--- Incoming ---
[   'cv.softdouble.setFrac',
    'softdouble',
    ['/C'],
    [['const softdouble&', 's', '', []]],
    None,
    '@brief Construct a copy with provided significand\n'
    '\n'
    'Constructs a copy of a number with significand taken from parameter']
parse_name: cv.softdouble.setFrac with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::setFrac namespace:cv classpath:softdouble classname:softdouble name:setFrac
register (method) setFrac in cv::softdouble (ignored) (cv_softdouble_setFrac_const_softdouble)

--- Incoming ---
['cv.softdouble.zero', 'softdouble', ['/S'], [], None, '@brief Zero constant']
parse_name: cv.softdouble.zero with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::zero namespace:cv classpath:softdouble classname:softdouble name:zero
register (method) zero in cv::softdouble (ignored) (cv_softdouble_zero)

--- Incoming ---
[   'cv.softdouble.inf',
    'softdouble',
    ['/S'],
    [],
    None,
    '@brief Positive infinity constant']
parse_name: cv.softdouble.inf with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::inf namespace:cv classpath:softdouble classname:softdouble name:inf
register (method) inf in cv::softdouble (ignored) (cv_softdouble_inf)

--- Incoming ---
[   'cv.softdouble.nan',
    'softdouble',
    ['/S'],
    [],
    None,
    '@brief Default NaN constant']
parse_name: cv.softdouble.nan with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::nan namespace:cv classpath:softdouble classname:softdouble name:nan
register (method) nan in cv::softdouble (ignored) (cv_softdouble_nan)

--- Incoming ---
['cv.softdouble.one', 'softdouble', ['/S'], [], None, '@brief One constant']
parse_name: cv.softdouble.one with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::one namespace:cv classpath:softdouble classname:softdouble name:one
register (method) one in cv::softdouble (ignored) (cv_softdouble_one)

--- Incoming ---
[   'cv.softdouble.min',
    'softdouble',
    ['/S'],
    [],
    None,
    '@brief Smallest normalized value']
parse_name: cv.softdouble.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::min namespace:cv classpath:softdouble classname:softdouble name:min
register (method) min in cv::softdouble (ignored) (cv_softdouble_min)

--- Incoming ---
[   'cv.softdouble.eps',
    'softdouble',
    ['/S'],
    [],
    None,
    '@brief Difference between 1 and next representable value']
parse_name: cv.softdouble.eps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::eps namespace:cv classpath:softdouble classname:softdouble name:eps
register (method) eps in cv::softdouble (ignored) (cv_softdouble_eps)

--- Incoming ---
[   'cv.softdouble.max',
    'softdouble',
    ['/S'],
    [],
    None,
    '@brief Biggest finite value']
parse_name: cv.softdouble.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::max namespace:cv classpath:softdouble classname:softdouble name:max
register (method) max in cv::softdouble (ignored) (cv_softdouble_max)

--- Incoming ---
[   'cv.softdouble.pi',
    'softdouble',
    ['/S'],
    [],
    None,
    '@brief Correct pi approximation']
parse_name: cv.softdouble.pi with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::softdouble::pi namespace:cv classpath:softdouble classname:softdouble name:pi
register (method) pi in cv::softdouble (ignored) (cv_softdouble_pi)

--- Incoming ---
[   'cv.mulAdd',
    'softfloat',
    [],
    [   ['const softfloat&', 'a', '', []],
        ['const softfloat&', 'b', '', []],
        ['const softfloat &', 'c', '', []]],
    None,
    '@brief Fused Multiplication and Addition\n'
    '\n'
    'Computes (a*b)+c with single rounding']
parse_name: cv.mulAdd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::mulAdd namespace:cv classpath: classname: name:mulAdd
Registering an unknown type: softfloat
register (function) mulAdd (cv_mulAdd_softfloat_softfloat_softfloat)

--- Incoming ---
[   'cv.mulAdd',
    'softdouble',
    [],
    [   ['const softdouble&', 'a', '', []],
        ['const softdouble&', 'b', '', []],
        ['const softdouble&', 'c', '', []]],
    None,
    '']
parse_name: cv.mulAdd with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::mulAdd namespace:cv classpath: classname: name:mulAdd
register (function) mulAdd (cv_mulAdd_softdouble_softdouble_softdouble)

--- Incoming ---
[   'cv.sqrt',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '@brief Square root']
parse_name: cv.sqrt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::sqrt namespace:cv classpath: classname: name:sqrt
register (function) sqrt (cv_sqrt_softfloat)

--- Incoming ---
['cv.sqrt', 'softdouble', [], [['const softdouble&', 'a', '', []]], None, '']
parse_name: cv.sqrt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::sqrt namespace:cv classpath: classname: name:sqrt
register (function) sqrt (cv_sqrt_softdouble)

--- Incoming ---
[   'cvTrunc',
    'int',
    [],
    [['const cv::softfloat&', 'a', '', []]],
    None,
    '@brief Truncates number to integer with minimum magnitude']
parse_name: cvTrunc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvTrunc namespace: classpath: classname: name:cvTrunc
Registering an unknown type: cv::softfloat
register (function) cvTrunc (cvTrunc_softfloat)

--- Incoming ---
['cvTrunc', 'int', [], [['const cv::softdouble&', 'a', '', []]], None, '']
parse_name: cvTrunc with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvTrunc namespace: classpath: classname: name:cvTrunc
Registering an unknown type: cv::softdouble
register (function) cvTrunc (cvTrunc_softdouble)

--- Incoming ---
[   'cvRound',
    'int',
    [],
    [['const cv::softfloat&', 'a', '', []]],
    None,
    '@brief Rounds a number to nearest even integer']
parse_name: cvRound with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvRound namespace: classpath: classname: name:cvRound
register (function) cvRound (cvRound_softfloat)

--- Incoming ---
['cvRound', 'int', [], [['const cv::softdouble&', 'a', '', []]], None, '']
parse_name: cvRound with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvRound namespace: classpath: classname: name:cvRound
register (function) cvRound (cvRound_softdouble)

--- Incoming ---
[   'cvRound64',
    'int64_t',
    [],
    [['const cv::softdouble&', 'a', '', []]],
    None,
    '@brief Rounds a number to nearest even long long integer']
parse_name: cvRound64 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvRound64 namespace: classpath: classname: name:cvRound64
register (function) cvRound64 (cvRound64_softdouble)

--- Incoming ---
[   'cvFloor',
    'int',
    [],
    [['const cv::softfloat&', 'a', '', []]],
    None,
    '@brief Rounds a number down to integer']
parse_name: cvFloor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvFloor namespace: classpath: classname: name:cvFloor
register (function) cvFloor (cvFloor_softfloat)

--- Incoming ---
['cvFloor', 'int', [], [['const cv::softdouble&', 'a', '', []]], None, '']
parse_name: cvFloor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvFloor namespace: classpath: classname: name:cvFloor
register (function) cvFloor (cvFloor_softdouble)

--- Incoming ---
[   'cvCeil',
    'int',
    [],
    [['const cv::softfloat&', 'a', '', []]],
    None,
    '@brief Rounds number up to integer']
parse_name: cvCeil with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvCeil namespace: classpath: classname: name:cvCeil
register (function) cvCeil (cvCeil_softfloat)

--- Incoming ---
['cvCeil', 'int', [], [['const cv::softdouble&', 'a', '', []]], None, '']
parse_name: cvCeil with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cvCeil namespace: classpath: classname: name:cvCeil
register (function) cvCeil (cvCeil_softdouble)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '@brief Saturate casts']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_softfloat)

--- Incoming ---
[   'cv.saturate_cast',
    'template<typename _Tp> _Tp',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast namespace:cv classpath: classname: name:saturate_cast
register (function) saturate_cast (cv_saturate_cast_softdouble)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < uchar >',
    'template<> uchar',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uchar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uchar > namespace:cv classpath: classname: name:saturate_cast < uchar >
register (function) saturate_cast < uchar > (cv_saturate_cast_<_uchar_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < schar >',
    'template<> schar',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < schar > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < schar > namespace:cv classpath: classname: name:saturate_cast < schar >
register (function) saturate_cast < schar > (cv_saturate_cast_<_schar_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < ushort >',
    'template<> ushort',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < ushort > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < ushort > namespace:cv classpath: classname: name:saturate_cast < ushort >
register (function) saturate_cast < ushort > (cv_saturate_cast_<_ushort_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < short >',
    'template<> short',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < short > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < short > namespace:cv classpath: classname: name:saturate_cast < short >
register (function) saturate_cast < short > (cv_saturate_cast_<_short_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < int >',
    'template<> int',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int > namespace:cv classpath: classname: name:saturate_cast < int >
register (function) saturate_cast < int > (cv_saturate_cast_<_int_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < int64_t >',
    'template<> int64_t',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int64_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int64_t > namespace:cv classpath: classname: name:saturate_cast < int64_t >
Registering an unknown type: template<> int64_t
register (function) saturate_cast < int64_t > (cv_saturate_cast_<_int64_t_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < int64_t >',
    'template<> int64_t',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < int64_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < int64_t > namespace:cv classpath: classname: name:saturate_cast < int64_t >
register (function) saturate_cast < int64_t > (cv_saturate_cast_<_int64_t_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '@brief Saturate cast to unsigned integer and unsigned long long integer\n'
    'We intentionally do not clip negative numbers, to make -1 become '
    '0xffffffff etc.']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < unsigned >',
    'template<> unsigned',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < unsigned > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < unsigned > namespace:cv classpath: classname: name:saturate_cast < unsigned >
register (function) saturate_cast < unsigned > (cv_saturate_cast_<_unsigned_>_softdouble)

--- Incoming ---
[   'cv.saturate_cast < uint64_t >',
    'template<> uint64_t',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uint64_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uint64_t > namespace:cv classpath: classname: name:saturate_cast < uint64_t >
Registering an unknown type: template<> uint64_t
register (function) saturate_cast < uint64_t > (cv_saturate_cast_<_uint64_t_>_softfloat)

--- Incoming ---
[   'cv.saturate_cast < uint64_t >',
    'template<> uint64_t',
    [],
    [['softdouble', 'a', '', []]],
    None,
    '']
parse_name: cv.saturate_cast < uint64_t > with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::saturate_cast < uint64_t > namespace:cv classpath: classname: name:saturate_cast < uint64_t >
register (function) saturate_cast < uint64_t > (cv_saturate_cast_<_uint64_t_>_softdouble)

--- Incoming ---
[   'cv.min',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []], ['const softfloat&', 'b', '', []]],
    None,
    '@brief Min and Max functions']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_softfloat_softfloat)

--- Incoming ---
[   'cv.min',
    'softdouble',
    [],
    [['const softdouble&', 'a', '', []], ['const softdouble&', 'b', '', []]],
    None,
    '']
parse_name: cv.min with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::min namespace:cv classpath: classname: name:min
register (function) min (cv_min_softdouble_softdouble)

--- Incoming ---
[   'cv.max',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []], ['const softfloat&', 'b', '', []]],
    None,
    '']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_softfloat_softfloat)

--- Incoming ---
[   'cv.max',
    'softdouble',
    [],
    [['const softdouble&', 'a', '', []], ['const softdouble&', 'b', '', []]],
    None,
    '']
parse_name: cv.max with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::max namespace:cv classpath: classname: name:max
register (function) max (cv_max_softdouble_softdouble)

--- Incoming ---
[   'cv.abs',
    'softfloat',
    [],
    [['softfloat', 'a', '', []]],
    None,
    '@brief Absolute value']
parse_name: cv.abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::abs namespace:cv classpath: classname: name:abs
register (function) abs (cv_abs_softfloat)

--- Incoming ---
['cv.abs', 'softdouble', [], [['softdouble', 'a', '', []]], None, '']
parse_name: cv.abs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::abs namespace:cv classpath: classname: name:abs
register (function) abs (cv_abs_softdouble)

--- Incoming ---
[   'cv.exp',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '@brief Exponent\n'
    '\n'
    'Special cases:\n'
    '- exp(NaN) is NaN\n'
    '- exp(-Inf) == 0\n'
    '- exp(+Inf) == +Inf']
parse_name: cv.exp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::exp namespace:cv classpath: classname: name:exp
register (function) exp (cv_exp_softfloat)

--- Incoming ---
['cv.exp', 'softdouble', [], [['const softdouble&', 'a', '', []]], None, '']
parse_name: cv.exp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::exp namespace:cv classpath: classname: name:exp
register (function) exp (cv_exp_softdouble)

--- Incoming ---
[   'cv.log',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '@brief Natural logarithm\n'
    '\n'
    'Special cases:\n'
    '- log(NaN), log(x < 0) are NaN\n'
    '- log(0) == -Inf']
parse_name: cv.log with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::log namespace:cv classpath: classname: name:log
register (function) log (cv_log_softfloat)

--- Incoming ---
['cv.log', 'softdouble', [], [['const softdouble&', 'a', '', []]], None, '']
parse_name: cv.log with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::log namespace:cv classpath: classname: name:log
register (function) log (cv_log_softdouble)

--- Incoming ---
[   'cv.pow',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []], ['const softfloat&', 'b', '', []]],
    None,
    '@brief Raising to the power\n'
    '\n'
    'Special cases:\n'
    '- x**NaN is NaN for any x\n'
    '- ( |x| == 1 )**Inf is NaN\n'
    '- ( |x|  > 1 )**+Inf or ( |x| < 1 )**-Inf is +Inf\n'
    '- ( |x|  > 1 )**-Inf or ( |x| < 1 )**+Inf is 0\n'
    '- x ** 0 == 1 for any x\n'
    '- x ** 1 == 1 for any x\n'
    '- NaN ** y is NaN for any other y\n'
    '- Inf**(y < 0) == 0\n'
    '- Inf ** y is +Inf for any other y\n'
    "- (x < 0)**y is NaN for any other y if x can't be correctly rounded to "
    'integer\n'
    '- 0 ** 0 == 1\n'
    '- 0 ** (y < 0) is +Inf\n'
    '- 0 ** (y > 0) is 0']
parse_name: cv.pow with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::pow namespace:cv classpath: classname: name:pow
register (function) pow (cv_pow_softfloat_softfloat)

--- Incoming ---
[   'cv.pow',
    'softdouble',
    [],
    [['const softdouble&', 'a', '', []], ['const softdouble&', 'b', '', []]],
    None,
    '']
parse_name: cv.pow with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::pow namespace:cv classpath: classname: name:pow
register (function) pow (cv_pow_softdouble_softdouble)

--- Incoming ---
[   'cv.cbrt',
    'softfloat',
    [],
    [['const softfloat&', 'a', '', []]],
    None,
    '@brief Cube root\n'
    '\n'
    'Special cases:\n'
    '- cbrt(NaN) is NaN\n'
    '- cbrt(+/-Inf) is +/-Inf']
parse_name: cv.cbrt with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::cbrt namespace:cv classpath: classname: name:cbrt
register (function) cbrt (cv_cbrt_softfloat)

--- Incoming ---
[   'cv.sin',
    'softdouble',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '@brief Sine\n'
    '\n'
    'Special cases:\n'
    '- sin(Inf) or sin(NaN) is NaN\n'
    '- sin(x) == x when sin(x) is close to zero']
parse_name: cv.sin with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::sin namespace:cv classpath: classname: name:sin
register (function) sin (cv_sin_softdouble)

--- Incoming ---
[   'cv.cos',
    'softdouble',
    [],
    [['const softdouble&', 'a', '', []]],
    None,
    '@brief Cosine\n'
    '*\n'
    'Special cases:\n'
    '- cos(Inf) or cos(NaN) is NaN\n'
    '- cos(x) == +/- 1 when cos(x) is close to +/- 1']
parse_name: cv.cos with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::cos namespace:cv classpath: classname: name:cos
register (function) cos (cv_cos_softdouble)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/sse_utils.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   '_mm_deinterleave_epi8',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []]],
    None,
    '@addtogroup core_utils_sse\n@{']
parse_name: _mm_deinterleave_epi8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_epi8 namespace: classpath: classname: name:_mm_deinterleave_epi8
Registering an unknown type: __m128i
register (function) _mm_deinterleave_epi8 (_mm_deinterleave_epi8___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_deinterleave_epi8',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_epi8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_epi8 namespace: classpath: classname: name:_mm_deinterleave_epi8
register (function) _mm_deinterleave_epi8 (_mm_deinterleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_deinterleave_epi8',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []],
        ['__m128i &', 'v_a0', '', []],
        ['__m128i &', 'v_a1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_epi8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_epi8 namespace: classpath: classname: name:_mm_deinterleave_epi8
register (function) _mm_deinterleave_epi8 (_mm_deinterleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_interleave_epi8',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []]],
    None,
    '']
parse_name: _mm_interleave_epi8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_epi8 namespace: classpath: classname: name:_mm_interleave_epi8
register (function) _mm_interleave_epi8 (_mm_interleave_epi8___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_interleave_epi8',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []]],
    None,
    '']
parse_name: _mm_interleave_epi8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_epi8 namespace: classpath: classname: name:_mm_interleave_epi8
register (function) _mm_interleave_epi8 (_mm_interleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_interleave_epi8',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []],
        ['__m128i &', 'v_a0', '', []],
        ['__m128i &', 'v_a1', '', []]],
    None,
    '']
parse_name: _mm_interleave_epi8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_epi8 namespace: classpath: classname: name:_mm_interleave_epi8
register (function) _mm_interleave_epi8 (_mm_interleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_deinterleave_epi16',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_epi16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_epi16 namespace: classpath: classname: name:_mm_deinterleave_epi16
register (function) _mm_deinterleave_epi16 (_mm_deinterleave_epi16___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_deinterleave_epi16',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_epi16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_epi16 namespace: classpath: classname: name:_mm_deinterleave_epi16
register (function) _mm_deinterleave_epi16 (_mm_deinterleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_deinterleave_epi16',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []],
        ['__m128i &', 'v_a0', '', []],
        ['__m128i &', 'v_a1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_epi16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_epi16 namespace: classpath: classname: name:_mm_deinterleave_epi16
register (function) _mm_deinterleave_epi16 (_mm_deinterleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_interleave_epi16',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []]],
    None,
    '']
parse_name: _mm_interleave_epi16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_epi16 namespace: classpath: classname: name:_mm_interleave_epi16
register (function) _mm_interleave_epi16 (_mm_interleave_epi16___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_interleave_epi16',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []]],
    None,
    '']
parse_name: _mm_interleave_epi16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_epi16 namespace: classpath: classname: name:_mm_interleave_epi16
register (function) _mm_interleave_epi16 (_mm_interleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_interleave_epi16',
    'void',
    [],
    [   ['__m128i &', 'v_r0', '', []],
        ['__m128i &', 'v_r1', '', []],
        ['__m128i &', 'v_g0', '', []],
        ['__m128i &', 'v_g1', '', []],
        ['__m128i &', 'v_b0', '', []],
        ['__m128i &', 'v_b1', '', []],
        ['__m128i &', 'v_a0', '', []],
        ['__m128i &', 'v_a1', '', []]],
    None,
    '']
parse_name: _mm_interleave_epi16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_epi16 namespace: classpath: classname: name:_mm_interleave_epi16
register (function) _mm_interleave_epi16 (_mm_interleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i)

--- Incoming ---
[   '_mm_deinterleave_ps',
    'void',
    [],
    [   ['__m128 &', 'v_r0', '', []],
        ['__m128 &', 'v_r1', '', []],
        ['__m128 &', 'v_g0', '', []],
        ['__m128 &', 'v_g1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_ps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_ps namespace: classpath: classname: name:_mm_deinterleave_ps
Registering an unknown type: __m128
register (function) _mm_deinterleave_ps (_mm_deinterleave_ps___m128___m128___m128___m128)

--- Incoming ---
[   '_mm_deinterleave_ps',
    'void',
    [],
    [   ['__m128 &', 'v_r0', '', []],
        ['__m128 &', 'v_r1', '', []],
        ['__m128 &', 'v_g0', '', []],
        ['__m128 &', 'v_g1', '', []],
        ['__m128 &', 'v_b0', '', []],
        ['__m128 &', 'v_b1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_ps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_ps namespace: classpath: classname: name:_mm_deinterleave_ps
register (function) _mm_deinterleave_ps (_mm_deinterleave_ps___m128___m128___m128___m128___m128___m128)

--- Incoming ---
[   '_mm_deinterleave_ps',
    'void',
    [],
    [   ['__m128 &', 'v_r0', '', []],
        ['__m128 &', 'v_r1', '', []],
        ['__m128 &', 'v_g0', '', []],
        ['__m128 &', 'v_g1', '', []],
        ['__m128 &', 'v_b0', '', []],
        ['__m128 &', 'v_b1', '', []],
        ['__m128 &', 'v_a0', '', []],
        ['__m128 &', 'v_a1', '', []]],
    None,
    '']
parse_name: _mm_deinterleave_ps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_deinterleave_ps namespace: classpath: classname: name:_mm_deinterleave_ps
register (function) _mm_deinterleave_ps (_mm_deinterleave_ps___m128___m128___m128___m128___m128___m128___m128___m128)

--- Incoming ---
[   '_mm_interleave_ps',
    'void',
    [],
    [   ['__m128 &', 'v_r0', '', []],
        ['__m128 &', 'v_r1', '', []],
        ['__m128 &', 'v_g0', '', []],
        ['__m128 &', 'v_g1', '', []]],
    None,
    '']
parse_name: _mm_interleave_ps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_ps namespace: classpath: classname: name:_mm_interleave_ps
register (function) _mm_interleave_ps (_mm_interleave_ps___m128___m128___m128___m128)

--- Incoming ---
[   '_mm_interleave_ps',
    'void',
    [],
    [   ['__m128 &', 'v_r0', '', []],
        ['__m128 &', 'v_r1', '', []],
        ['__m128 &', 'v_g0', '', []],
        ['__m128 &', 'v_g1', '', []],
        ['__m128 &', 'v_b0', '', []],
        ['__m128 &', 'v_b1', '', []]],
    None,
    '']
parse_name: _mm_interleave_ps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_ps namespace: classpath: classname: name:_mm_interleave_ps
register (function) _mm_interleave_ps (_mm_interleave_ps___m128___m128___m128___m128___m128___m128)

--- Incoming ---
[   '_mm_interleave_ps',
    'void',
    [],
    [   ['__m128 &', 'v_r0', '', []],
        ['__m128 &', 'v_r1', '', []],
        ['__m128 &', 'v_g0', '', []],
        ['__m128 &', 'v_g1', '', []],
        ['__m128 &', 'v_b0', '', []],
        ['__m128 &', 'v_b1', '', []],
        ['__m128 &', 'v_a0', '', []],
        ['__m128 &', 'v_a1', '', []]],
    None,
    '']
parse_name: _mm_interleave_ps with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:_mm_interleave_ps namespace: classpath: classname: name:_mm_interleave_ps
register (function) _mm_interleave_ps (_mm_interleave_ps___m128___m128___m128___m128___m128___m128___m128___m128)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/utility.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['cv.setImpl', 'void', [], [['int', 'flags', '', []]], None, '']
parse_name: cv.setImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::setImpl namespace:cv classpath: classname: name:setImpl
register (function) setImpl (cv_setImpl_int)

--- Incoming ---
[   'cv.addImpl',
    'void',
    [],
    [['int', 'flag', '', []], ['const char*', 'func', '0', []]],
    None,
    '']
parse_name: cv.addImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::addImpl namespace:cv classpath: classname: name:addImpl
register (function) addImpl (cv_addImpl_int_const_char_X)

--- Incoming ---
[   'cv.getImpl',
    'int',
    [],
    [   ['std::vector<int> &', 'impl', '', []],
        ['std::vector<String> &', 'funName', '', []]],
    None,
    '']
parse_name: cv.getImpl with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getImpl namespace:cv classpath: classname: name:getImpl
register (function) getImpl (cv_getImpl_VectorOfint_VectorOfString)

--- Incoming ---
['cv.useCollection', 'bool', [], [], None, '']
parse_name: cv.useCollection with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::useCollection namespace:cv classpath: classname: name:useCollection
register (function) useCollection (cv_useCollection)

--- Incoming ---
['cv.setUseCollection', 'void', [], [['bool', 'flag', '', []]], None, '']
parse_name: cv.setUseCollection with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::setUseCollection namespace:cv classpath: classname: name:setUseCollection
register (function) setUseCollection (cv_setUseCollection_bool)

--- Incoming ---
['const CV_IMPL_PLAIN', '0x01 // native CPU OpenCV implementation', [], [], '']
parse_name: const CV_IMPL_PLAIN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_IMPL_PLAIN namespace: classpath: classname: name:CV_IMPL_PLAIN
ignored: CONST CV_IMPL_PLAIN=0x01 // native CPU OpenCV implementation

--- Incoming ---
['const CV_IMPL_OCL', '0x02 // OpenCL implementation', [], [], '']
parse_name: const CV_IMPL_OCL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_IMPL_OCL namespace: classpath: classname: name:CV_IMPL_OCL
ignored: CONST CV_IMPL_OCL=0x02 // OpenCL implementation

--- Incoming ---
['const CV_IMPL_IPP', '0x04 // IPP implementation', [], [], '']
parse_name: const CV_IMPL_IPP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_IMPL_IPP namespace: classpath: classname: name:CV_IMPL_IPP
ignored: CONST CV_IMPL_IPP=0x04 // IPP implementation

--- Incoming ---
['const CV_IMPL_MT', '0x10 // multithreaded implementation', [], [], '']
parse_name: const CV_IMPL_MT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:CV_IMPL_MT namespace: classpath: classname: name:CV_IMPL_MT
ignored: CONST CV_IMPL_MT=0x10 // multithreaded implementation

--- Incoming ---
[   'cv.setBreakOnError',
    'bool',
    [],
    [['bool', 'flag', '', []]],
    None,
    '@brief Sets/resets the break-on-error mode.\n'
    '\n'
    'When the break-on-error mode is set, the default error handler issues a '
    'hardware exception, which\n'
    'can make debugging more convenient.\n'
    '\n'
    '\\return the previous state']
parse_name: cv.setBreakOnError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::setBreakOnError namespace:cv classpath: classname: name:setBreakOnError
register (function) setBreakOnError (cv_setBreakOnError_bool)

--- Incoming ---
[   'cv."C" typedef int',
    'extern "C" typedef',
    [],
    [   ['*ErrorCallback)( int', 'status', '', []],
        ['const char*', 'func_name', '', []],
        ['const char*', 'err_msg', '', []],
        ['const char*', 'file_name', '', []],
        ['int', 'line', '', []],
        ['void*', 'userdata', '', []]],
    None,
    '']
parse_name: cv."C" typedef int with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::"C" int namespace:cv classpath: classname: name:"C" int
Registering an unknown type: extern "C" typedef
Registering an unknown type: *ErrorCallback)( int
register (function) "C" int (cv_"C"_int_*ErrorCallback)( int_const_char_X_const_char_X_const_char_X_int_void_X)

--- Incoming ---
[   'cv.redirectError',
    'ErrorCallback',
    [],
    [   ['ErrorCallback', 'errCallback', '', []],
        ['void*', 'userdata', '0', []],
        ['void**', 'prevUserdata', '0', []]],
    None,
    '@brief Sets the new error handler and the optional user data.\n'
    '\n'
    'The function sets the new error handler, called from cv::error().\n'
    '\n'
    '\\param errCallback the new error handler. If NULL, the default error '
    'handler is used.\n'
    '\\param userdata the optional user data pointer, passed to the callback.\n'
    '\\param prevUserdata the optional output parameter where the previous '
    'user data pointer is stored\n'
    '\n'
    '\\return the previous error handler']
parse_name: cv.redirectError with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::redirectError namespace:cv classpath: classname: name:redirectError
Registering an unknown type: ErrorCallback
register (function) redirectError (cv_redirectError_ErrorCallback_void_X_void**)

--- Incoming ---
['cv.tempfile', 'String', [], [['const char*', 'suffix', '0', []]], None, '']
parse_name: cv.tempfile with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::tempfile namespace:cv classpath: classname: name:tempfile
register (function) tempfile (cv_tempfile_const_char_X)

--- Incoming ---
[   'cv.glob',
    'void',
    [],
    [   ['String', 'pattern', '', []],
        ['std::vector<String>&', 'result', '', []],
        ['bool', 'recursive', 'false', []]],
    None,
    '']
parse_name: cv.glob with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::glob namespace:cv classpath: classname: name:glob
register (function) glob (cv_glob_String_VectorOfString_bool)

--- Incoming ---
[   'cv.setNumThreads',
    'void',
    [],
    [['int', 'nthreads', '', []]],
    None,
    '@brief OpenCV will try to set the number of threads for the next parallel '
    'region.\n'
    '\n'
    'If threads == 0, OpenCV will disable threading optimizations and run all '
    "it's functions\n"
    'sequentially. Passing threads \\< 0 will reset threads number to system '
    'default. This function must\n'
    'be called outside of parallel region.\n'
    '\n'
    'OpenCV will try to run its functions with specified threads number, but '
    'some behaviour differs from\n'
    'framework:\n'
    '-   `TBB` - User-defined parallel constructions will run with the same '
    'threads number, if\n'
    'another is not specified. If later on user creates his own scheduler, '
    'OpenCV will use it.\n'
    '-   `OpenMP` - No special defined behaviour.\n'
    '-   `Concurrency` - If threads == 1, OpenCV will disable threading '
    'optimizations and run its\n'
    'functions sequentially.\n'
    '-   `GCD` - Supports only values \\<= 0.\n'
    '-   `C=` - No special defined behaviour.\n'
    '@param nthreads Number of threads used by OpenCV.\n'
    '@sa getNumThreads, getThreadNum']
parse_name: cv.setNumThreads with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::setNumThreads namespace:cv classpath: classname: name:setNumThreads
register (function) setNumThreads (cv_setNumThreads_int)

--- Incoming ---
[   'cv.getNumThreads',
    'int',
    [],
    [],
    None,
    '@brief Returns the number of threads used by OpenCV for parallel '
    'regions.\n'
    '\n'
    'Always returns 1 if OpenCV is built without threading support.\n'
    '\n'
    'The exact meaning of return value depends on the threading framework used '
    'by OpenCV library:\n'
    '- `TBB` - The number of threads, that OpenCV will try to use for parallel '
    'regions. If there is\n'
    'any tbb::thread_scheduler_init in user code conflicting with OpenCV, then '
    'function returns\n'
    'default number of threads used by TBB library.\n'
    '- `OpenMP` - An upper bound on the number of threads that could be used '
    'to form a new team.\n'
    '- `Concurrency` - The number of threads, that OpenCV will try to use for '
    'parallel regions.\n'
    '- `GCD` - Unsupported; returns the GCD thread pool limit (512) for '
    'compatibility.\n'
    '- `C=` - The number of threads, that OpenCV will try to use for parallel '
    'regions, if before\n'
    'called setNumThreads with threads \\> 0, otherwise returns the number of '
    'logical CPUs,\n'
    'available for the process.\n'
    '@sa setNumThreads, getThreadNum']
parse_name: cv.getNumThreads with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getNumThreads namespace:cv classpath: classname: name:getNumThreads
register (function) getNumThreads (cv_getNumThreads)

--- Incoming ---
[   'cv.getThreadNum',
    'int',
    [],
    [],
    None,
    '@brief Returns the index of the currently executed thread within the '
    'current parallel region. Always\n'
    'returns 0 if called outside of parallel region.\n'
    '\n'
    "@deprecated Current implementation doesn't corresponding to this "
    'documentation.\n'
    '\n'
    'The exact meaning of the return value depends on the threading framework '
    'used by OpenCV library:\n'
    '- `TBB` - Unsupported with current 4.1 TBB release. Maybe will be '
    'supported in future.\n'
    '- `OpenMP` - The thread number, within the current team, of the calling '
    'thread.\n'
    '- `Concurrency` - An ID for the virtual processor that the current '
    'context is executing on (0\n'
    'for master thread and unique number for others, but not necessary '
    '1,2,3,...).\n'
    "- `GCD` - System calling thread's ID. Never returns 0 inside parallel "
    'region.\n'
    '- `C=` - The index of the current parallel task.\n'
    '@sa setNumThreads, getNumThreads']
parse_name: cv.getThreadNum with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getThreadNum namespace:cv classpath: classname: name:getThreadNum
register (function) getThreadNum (cv_getThreadNum)

--- Incoming ---
[   'cv.getBuildInformation',
    'const String&',
    [],
    [],
    None,
    '@brief Returns full configuration time cmake output.\n'
    '\n'
    'Returned value is raw cmake output including version control system '
    'revision, compiler version,\n'
    'compiler flags, enabled modules and third party libraries, etc. Output '
    'format depends on target\n'
    'architecture.']
parse_name: cv.getBuildInformation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getBuildInformation namespace:cv classpath: classname: name:getBuildInformation
register (function) getBuildInformation (cv_getBuildInformation)

--- Incoming ---
[   'cv.getVersionString',
    'String',
    [],
    [],
    None,
    '@brief Returns library version string\n'
    '\n'
    'For example "3.4.1-dev".\n'
    '\n'
    '@sa getMajorVersion, getMinorVersion, getRevisionVersion']
parse_name: cv.getVersionString with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getVersionString namespace:cv classpath: classname: name:getVersionString
register (function) getVersionString (cv_getVersionString)

--- Incoming ---
[   'cv.getVersionMajor',
    'int',
    [],
    [],
    None,
    '@brief Returns major library version']
parse_name: cv.getVersionMajor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getVersionMajor namespace:cv classpath: classname: name:getVersionMajor
register (function) getVersionMajor (cv_getVersionMajor)

--- Incoming ---
[   'cv.getVersionMinor',
    'int',
    [],
    [],
    None,
    '@brief Returns minor library version']
parse_name: cv.getVersionMinor with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getVersionMinor namespace:cv classpath: classname: name:getVersionMinor
register (function) getVersionMinor (cv_getVersionMinor)

--- Incoming ---
[   'cv.getVersionRevision',
    'int',
    [],
    [],
    None,
    '@brief Returns revision field of the library version']
parse_name: cv.getVersionRevision with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getVersionRevision namespace:cv classpath: classname: name:getVersionRevision
register (function) getVersionRevision (cv_getVersionRevision)

--- Incoming ---
[   'cv.getTickCount',
    'int64',
    [],
    [],
    None,
    '@brief Returns the number of ticks.\n'
    '\n'
    'The function returns the number of ticks after the certain event (for '
    'example, when the machine was\n'
    'turned on). It can be used to initialize RNG or to measure a function '
    'execution time by reading the\n'
    'tick count before and after the function call.\n'
    '@sa getTickFrequency, TickMeter']
parse_name: cv.getTickCount with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getTickCount namespace:cv classpath: classname: name:getTickCount
register (function) getTickCount (cv_getTickCount)

--- Incoming ---
[   'cv.getTickFrequency',
    'double',
    [],
    [],
    None,
    '@brief Returns the number of ticks per second.\n'
    '\n'
    'The function returns the number of ticks per second. That is, the '
    'following code computes the\n'
    'execution time in seconds:\n'
    '@code\n'
    'double t = (double)getTickCount();\n'
    '// do something ...\n'
    't = ((double)getTickCount() - t)/getTickFrequency();\n'
    '@endcode\n'
    '@sa getTickCount, TickMeter']
parse_name: cv.getTickFrequency with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getTickFrequency namespace:cv classpath: classname: name:getTickFrequency
register (function) getTickFrequency (cv_getTickFrequency)

--- Incoming ---
[   'class cv.TickMeter',
    '',
    [],
    [],
    None,
    '@brief a Class to measure passing time.\n'
    '\n'
    'The class computes passing time by counting the number of ticks per '
    'second. That is, the following code computes the\n'
    'execution time in seconds:\n'
    '@code\n'
    'TickMeter tm;\n'
    'tm.start();\n'
    '// do something ...\n'
    'tm.stop();\n'
    'std::cout << tm.getTimeSec();\n'
    '@endcode\n'
    '\n'
    'It is also possible to compute the average time over multiple runs:\n'
    '@code\n'
    'TickMeter tm;\n'
    'for (int i = 0; i < 100; i++)\n'
    '{\n'
    'tm.start();\n'
    '// do something ...\n'
    'tm.stop();\n'
    '}\n'
    'double average_time = tm.getTimeSec() / tm.getCounter();\n'
    'std::cout << "Average time in second per iteration is: " << average_time '
    '<< std::endl;\n'
    '@endcode\n'
    '@sa getTickCount, getTickFrequency']
parse_name: class cv.TickMeter with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter namespace:cv classpath: classname: name:TickMeter
register class cv::TickMeter (['class cv.TickMeter', '', [], [], None, '@brief a Class to measure passing time.\n\nThe class computes passing time by counting the number of ticks per second. That is, the following code computes the\nexecution time in seconds:\n@code\nTickMeter tm;\ntm.start();\n// do something ...\ntm.stop();\nstd::cout << tm.getTimeSec();\n@endcode\n\nIt is also possible to compute the average time over multiple runs:\n@code\nTickMeter tm;\nfor (int i = 0; i < 100; i++)\n{\ntm.start();\n// do something ...\ntm.stop();\n}\ndouble average_time = tm.getTimeSec() / tm.getCounter();\nstd::cout << "Average time in second per iteration is: " << average_time << std::endl;\n@endcode\n@sa getTickCount, getTickFrequency'])

--- Incoming ---
['cv.TickMeter.TickMeter', 'T', [], [], None, 'the default constructor']
parse_name: cv.TickMeter.TickMeter with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::TickMeter namespace:cv classpath:TickMeter classname:TickMeter name:TickMeter
register (constructor) default in cv::TickMeter (cv_TickMeter_TickMeter)

--- Incoming ---
['cv.TickMeter.start', 'void', [], [], None, 'starts counting ticks.']
parse_name: cv.TickMeter.start with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::start namespace:cv classpath:TickMeter classname:TickMeter name:start
register (method) start in cv::TickMeter (cv_TickMeter_start)

--- Incoming ---
['cv.TickMeter.stop', 'void', [], [], None, 'stops counting ticks.']
parse_name: cv.TickMeter.stop with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::stop namespace:cv classpath:TickMeter classname:TickMeter name:stop
register (method) stop in cv::TickMeter (cv_TickMeter_stop)

--- Incoming ---
[   'cv.TickMeter.getTimeTicks',
    'int64',
    ['/C'],
    [],
    None,
    'returns counted ticks.']
parse_name: cv.TickMeter.getTimeTicks with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::getTimeTicks namespace:cv classpath:TickMeter classname:TickMeter name:getTimeTicks
register (method) getTimeTicks in cv::TickMeter (cv_TickMeter_getTimeTicks_const)

--- Incoming ---
[   'cv.TickMeter.getTimeMicro',
    'double',
    ['/C'],
    [],
    None,
    'returns passed time in microseconds.']
parse_name: cv.TickMeter.getTimeMicro with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::getTimeMicro namespace:cv classpath:TickMeter classname:TickMeter name:getTimeMicro
register (method) getTimeMicro in cv::TickMeter (cv_TickMeter_getTimeMicro_const)

--- Incoming ---
[   'cv.TickMeter.getTimeMilli',
    'double',
    ['/C'],
    [],
    None,
    'returns passed time in milliseconds.']
parse_name: cv.TickMeter.getTimeMilli with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::getTimeMilli namespace:cv classpath:TickMeter classname:TickMeter name:getTimeMilli
register (method) getTimeMilli in cv::TickMeter (cv_TickMeter_getTimeMilli_const)

--- Incoming ---
[   'cv.TickMeter.getTimeSec',
    'double',
    ['/C'],
    [],
    None,
    'returns passed time in seconds.']
parse_name: cv.TickMeter.getTimeSec with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::getTimeSec namespace:cv classpath:TickMeter classname:TickMeter name:getTimeSec
register (method) getTimeSec in cv::TickMeter (cv_TickMeter_getTimeSec_const)

--- Incoming ---
[   'cv.TickMeter.getCounter',
    'int64',
    ['/C'],
    [],
    None,
    'returns internal counter value.']
parse_name: cv.TickMeter.getCounter with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::getCounter namespace:cv classpath:TickMeter classname:TickMeter name:getCounter
register (method) getCounter in cv::TickMeter (cv_TickMeter_getCounter_const)

--- Incoming ---
['cv.TickMeter.reset', 'void', [], [], None, 'resets internal values.']
parse_name: cv.TickMeter.reset with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TickMeter::reset namespace:cv classpath:TickMeter classname:TickMeter name:reset
register (method) reset in cv::TickMeter (cv_TickMeter_reset)

--- Incoming ---
[   'cv.operator <<',
    'std::ostream&',
    [],
    [['std::ostream&', 'out', '', []], ['const TickMeter&', 'tm', '', []]],
    None,
    '@brief output operator\n'
    '@code\n'
    'TickMeter tm;\n'
    'tm.start();\n'
    '// do something ...\n'
    'tm.stop();\n'
    'std::cout << tm;\n'
    '@endcode']
parse_name: cv.operator << with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::operator << namespace:cv classpath: classname: name:operator <<
Registering an unknown type: std::ostream
ignore (function) operator << in None

--- Incoming ---
[   'cv.getCPUTickCount',
    'int64',
    [],
    [],
    None,
    '@brief Returns the number of CPU ticks.\n'
    '\n'
    'The function returns the current number of CPU ticks on some '
    'architectures (such as x86, x64,\n'
    'PowerPC). On other platforms the function is equivalent to getTickCount. '
    'It can also be used for\n'
    'very accurate time measurements, as well as for RNG initialization. Note '
    'that in case of multi-CPU\n'
    'systems a thread, from which getCPUTickCount is called, can be suspended '
    'and resumed at another CPU\n'
    'with its own counter. So, theoretically (and practically) the subsequent '
    'calls to the function do\n'
    'not necessary return the monotonously increasing values. Also, since a '
    'modern CPU varies the CPU\n'
    'frequency depending on the load, the number of CPU clocks spent in some '
    'code cannot be directly\n'
    'converted to time units. Therefore, getTickCount is generally a '
    'preferable solution for measuring\n'
    'execution time.']
parse_name: cv.getCPUTickCount with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getCPUTickCount namespace:cv classpath: classname: name:getCPUTickCount
register (function) getCPUTickCount (cv_getCPUTickCount)

--- Incoming ---
[   'cv.checkHardwareSupport',
    'bool',
    [],
    [['int', 'feature', '', []]],
    None,
    '@brief Returns true if the specified feature is supported by the host '
    'hardware.\n'
    '\n'
    'The function returns true if the host hardware supports the specified '
    'feature. When user calls\n'
    'setUseOptimized(false), the subsequent calls to checkHardwareSupport() '
    'will return false until\n'
    'setUseOptimized(true) is called. This way user can dynamically switch on '
    'and off the optimized code\n'
    'in OpenCV.\n'
    '@param feature The feature of interest, one of cv::CpuFeatures']
parse_name: cv.checkHardwareSupport with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::checkHardwareSupport namespace:cv classpath: classname: name:checkHardwareSupport
register (function) checkHardwareSupport (cv_checkHardwareSupport_int)

--- Incoming ---
[   'cv.getHardwareFeatureName',
    'String',
    [],
    [['int', 'feature', '', []]],
    None,
    '@brief Returns feature name by ID\n'
    '\n'
    'Returns empty string if feature is not defined']
parse_name: cv.getHardwareFeatureName with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getHardwareFeatureName namespace:cv classpath: classname: name:getHardwareFeatureName
register (function) getHardwareFeatureName (cv_getHardwareFeatureName_int)

--- Incoming ---
[   'cv.getCPUFeaturesLine',
    'std::string',
    [],
    [],
    None,
    '@brief Returns list of CPU features enabled during compilation.\n'
    '\n'
    'Returned value is a string containing space separated list of CPU '
    'features with following markers:\n'
    '\n'
    '- no markers - baseline features\n'
    '- prefix `*` - features enabled in dispatcher\n'
    '- suffix `?` - features enabled but not available in HW\n'
    '\n'
    'Example: `SSE SSE2 SSE3 *SSE4.1 *SSE4.2 *FP16 *AVX *AVX2 *AVX512-SKX?`']
parse_name: cv.getCPUFeaturesLine with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getCPUFeaturesLine namespace:cv classpath: classname: name:getCPUFeaturesLine
register (function) getCPUFeaturesLine (cv_getCPUFeaturesLine)

--- Incoming ---
[   'cv.getNumberOfCPUs',
    'int',
    [],
    [],
    None,
    '@brief Returns the number of logical CPUs available for the process.']
parse_name: cv.getNumberOfCPUs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getNumberOfCPUs namespace:cv classpath: classname: name:getNumberOfCPUs
register (function) getNumberOfCPUs (cv_getNumberOfCPUs)

--- Incoming ---
[   'cv.alignPtr',
    'template<typename _Tp> _Tp*',
    [],
    [['_Tp*', 'ptr', '', []], ['int', 'n', '(int)sizeof(_Tp)', []]],
    None,
    '@brief Aligns a pointer to the specified number of bytes.\n'
    '\n'
    'The function returns the aligned pointer of the same type as the input '
    'pointer:\n'
    '\\f[\\texttt{(_Tp*)(((size_t)ptr + n-1) & -n)}\\f]\n'
    '@param ptr Aligned pointer.\n'
    '@param n Alignment size that must be a power of two.']
parse_name: cv.alignPtr with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::alignPtr namespace:cv classpath: classname: name:alignPtr
register (function) alignPtr (cv_alignPtr__Tp*_int)

--- Incoming ---
[   'cv.alignSize',
    'size_t',
    [],
    [['size_t', 'sz', '', []], ['int', 'n', '', []]],
    None,
    '@brief Aligns a buffer size to the specified number of bytes.\n'
    '\n'
    'The function returns the minimum number that is greater than or equal to '
    'sz and is divisible by n :\n'
    '\\f[\\texttt{(sz + n-1) & -n}\\f]\n'
    '@param sz Buffer size to align.\n'
    '@param n Alignment size that must be a power of two.']
parse_name: cv.alignSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::alignSize namespace:cv classpath: classname: name:alignSize
register (function) alignSize (cv_alignSize_size_t_int)

--- Incoming ---
[   'cv.divUp',
    'int',
    [],
    [['int', 'a', '', []], ['unsigned int', 'b', '', []]],
    None,
    '@brief Integer division with result round up.\n'
    '\n'
    'Use this function instead of `ceil((float)a / b)` expressions.\n'
    '\n'
    '@sa alignSize']
parse_name: cv.divUp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::divUp namespace:cv classpath: classname: name:divUp
register (function) divUp (cv_divUp_int_unsigned_int)

--- Incoming ---
[   'cv.divUp',
    'size_t',
    [],
    [['size_t', 'a', '', []], ['unsigned int', 'b', '', []]],
    None,
    '@overload']
parse_name: cv.divUp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::divUp namespace:cv classpath: classname: name:divUp
register (function) divUp (cv_divUp_size_t_unsigned_int)

--- Incoming ---
[   'cv.roundUp',
    'int',
    [],
    [['int', 'a', '', []], ['unsigned int', 'b', '', []]],
    None,
    '@brief Round first value up to the nearest multiple of second value.\n'
    '\n'
    'Use this function instead of `ceil((float)a / b) * b` expressions.\n'
    '\n'
    '@sa divUp']
parse_name: cv.roundUp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::roundUp namespace:cv classpath: classname: name:roundUp
register (function) roundUp (cv_roundUp_int_unsigned_int)

--- Incoming ---
[   'cv.roundUp',
    'size_t',
    [],
    [['size_t', 'a', '', []], ['unsigned int', 'b', '', []]],
    None,
    '@overload']
parse_name: cv.roundUp with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::roundUp namespace:cv classpath: classname: name:roundUp
register (function) roundUp (cv_roundUp_size_t_unsigned_int)

--- Incoming ---
[   'cv.setUseOptimized',
    'void',
    [],
    [['bool', 'onoff', '', []]],
    None,
    '@brief Enables or disables the optimized code.\n'
    '\n'
    'The function can be used to dynamically turn on and off optimized '
    'dispatched code (code that uses SSE4.2, AVX/AVX2,\n'
    'and other instructions on the platforms that support it). It sets a '
    'global flag that is further\n'
    'checked by OpenCV functions. Since the flag is not checked in the inner '
    'OpenCV loops, it is only\n'
    'safe to call the function on the very top level in your application where '
    'you can be sure that no\n'
    'other OpenCV function is currently executed.\n'
    '\n'
    'By default, the optimized code is enabled unless you disable it in CMake. '
    'The current status can be\n'
    'retrieved using useOptimized.\n'
    '@param onoff The boolean flag specifying whether the optimized code '
    'should be used (onoff=true)\n'
    'or not (onoff=false).']
parse_name: cv.setUseOptimized with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::setUseOptimized namespace:cv classpath: classname: name:setUseOptimized
register (function) setUseOptimized (cv_setUseOptimized_bool)

--- Incoming ---
[   'cv.useOptimized',
    'bool',
    [],
    [],
    None,
    '@brief Returns the status of optimized code usage.\n'
    '\n'
    'The function returns true if the optimized code is enabled. Otherwise, it '
    'returns false.']
parse_name: cv.useOptimized with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::useOptimized namespace:cv classpath: classname: name:useOptimized
register (function) useOptimized (cv_useOptimized)

--- Incoming ---
['cv.getElemSize', 'size_t', [], [['int', 'type', '', []]], None, '']
parse_name: cv.getElemSize with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::getElemSize namespace:cv classpath: classname: name:getElemSize
register (function) getElemSize (cv_getElemSize_int)

--- Incoming ---
[   'class cv.ParallelLoopBody',
    '',
    [],
    [],
    None,
    '@brief Base class for parallel data processors']
parse_name: class cv.ParallelLoopBody with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ParallelLoopBody namespace:cv classpath: classname: name:ParallelLoopBody
register class cv::ParallelLoopBody (['class cv.ParallelLoopBody', '', [], [], None, '@brief Base class for parallel data processors'])

--- Incoming ---
['cv.ParallelLoopBody.~ParallelLoopBody', '~', [], [], None, '']
parse_name: cv.ParallelLoopBody.~ParallelLoopBody with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ParallelLoopBody::~ParallelLoopBody namespace:cv classpath:ParallelLoopBody classname:ParallelLoopBody name:~ParallelLoopBody
ignore destructor (method) ~ParallelLoopBody in cv::ParallelLoopBody

--- Incoming ---
[   'cv.ParallelLoopBody.operator ()',
    'void',
    ['/A', '/C'],
    [['const Range&', 'range', '', []]],
    None,
    '']
parse_name: cv.ParallelLoopBody.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ParallelLoopBody::operator () namespace:cv classpath:ParallelLoopBody classname:ParallelLoopBody name:operator ()
ignore (method) operator () in cv::ParallelLoopBody (trait)

--- Incoming ---
[   'cv.parallel_for_',
    'void',
    [],
    [   ['const Range&', 'range', '', []],
        ['const ParallelLoopBody&', 'body', '', []],
        ['double', 'nstripes', '-1.', []]],
    None,
    '@brief Parallel data processor']
parse_name: cv.parallel_for_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::parallel_for_ namespace:cv classpath: classname: name:parallel_for_
register (function) parallel_for_ (cv_parallel_for__Range_ParallelLoopBody_double)

--- Incoming ---
[   'class cv.ParallelLoopBodyLambdaWrapper',
    ': cv::ParallelLoopBody',
    [],
    [],
    None,
    '']
parse_name: class cv.ParallelLoopBodyLambdaWrapper with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ParallelLoopBodyLambdaWrapper namespace:cv classpath: classname: name:ParallelLoopBodyLambdaWrapper
register class cv::ParallelLoopBodyLambdaWrapper (['class cv.ParallelLoopBodyLambdaWrapper', ': cv::ParallelLoopBody', [], [], None, '']) impl:cv::ParallelLoopBody

--- Incoming ---
[   'cv.ParallelLoopBodyLambdaWrapper.ParallelLoopBodyLambdaWrapper',
    'P',
    [],
    [['std::function<void(const Range&)>', 'functor', '', []]],
    None,
    '']
parse_name: cv.ParallelLoopBodyLambdaWrapper.ParallelLoopBodyLambdaWrapper with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ParallelLoopBodyLambdaWrapper::ParallelLoopBodyLambdaWrapper namespace:cv classpath:ParallelLoopBodyLambdaWrapper classname:ParallelLoopBodyLambdaWrapper name:ParallelLoopBodyLambdaWrapper
Registering an unknown type: std::function<void(Range&)>
register (constructor) new in cv::ParallelLoopBodyLambdaWrapper (cv_ParallelLoopBodyLambdaWrapper_ParallelLoopBodyLambdaWrapper_std_function<void(Range&)>)

--- Incoming ---
[   'cv.ParallelLoopBodyLambdaWrapper.operator ()',
    'void',
    ['/C'],
    [['const cv::Range&', 'range', '', []]],
    None,
    '']
parse_name: cv.ParallelLoopBodyLambdaWrapper.operator () with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::ParallelLoopBodyLambdaWrapper::operator () namespace:cv classpath:ParallelLoopBodyLambdaWrapper classname:ParallelLoopBodyLambdaWrapper name:operator ()
ignore (method) operator () in cv::ParallelLoopBodyLambdaWrapper

--- Incoming ---
[   'cv.parallel_for_',
    'void',
    [],
    [   ['const Range&', 'range', '', []],
        ['std::function<void(const Range&)>', 'functor', '', []],
        ['double', 'nstripes', '-1.', []]],
    None,
    '']
parse_name: cv.parallel_for_ with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::parallel_for_ namespace:cv classpath: classname: name:parallel_for_
register (function) parallel_for_ (cv_parallel_for__Range_std_function<void(Range&)>_double)

--- Incoming ---
['typedef cv.Mutex', 'std::recursive_mutex', '', [], None, '']
parse_name: typedef cv.Mutex with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::Mutex namespace:cv classpath: classname: name:Mutex
Registering an unknown type: std::recursive_mutex

--- Incoming ---
['typedef cv.AutoLock', 'std::lock_guard<cv::Mutex>', '', [], None, '']
parse_name: typedef cv.AutoLock with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::AutoLock namespace:cv classpath: classname: name:AutoLock
Registering an unknown type: std::lock_guard<cv::Mutex>

--- Incoming ---
['class cv.TLSDataContainer', '', [], [], None, '']
parse_name: class cv.TLSDataContainer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer namespace:cv classpath: classname: name:TLSDataContainer
register class cv::TLSDataContainer (['class cv.TLSDataContainer', '', [], [], None, '']) [ignored]

--- Incoming ---
['cv.TLSDataContainer.TLSDataContainer', 'T', ['/H'], [], None, '']
parse_name: cv.TLSDataContainer.TLSDataContainer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer::TLSDataContainer namespace:cv classpath:TLSDataContainer classname:TLSDataContainer name:TLSDataContainer
Registering an unknown type: TLSDataContainer

--- Incoming ---
['cv.TLSDataContainer.~TLSDataContainer', '~', ['/H'], [], None, '']
parse_name: cv.TLSDataContainer.~TLSDataContainer with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer::~TLSDataContainer namespace:cv classpath:TLSDataContainer classname:TLSDataContainer name:~TLSDataContainer
ignore destructor (method) ~TLSDataContainer in cv::TLSDataContainer (ignored)

--- Incoming ---
[   'cv.TLSDataContainer.gatherData',
    'void',
    ['/C', '/H'],
    [['std::vector<void*> &', 'data', '', []]],
    None,
    '']
parse_name: cv.TLSDataContainer.gatherData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer::gatherData namespace:cv classpath:TLSDataContainer classname:TLSDataContainer name:gatherData

--- Incoming ---
['cv.TLSDataContainer.getData', 'void*', ['/C', '/H'], [], None, '']
parse_name: cv.TLSDataContainer.getData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer::getData namespace:cv classpath:TLSDataContainer classname:TLSDataContainer name:getData

--- Incoming ---
['cv.TLSDataContainer.release', 'void', ['/H'], [], None, '']
parse_name: cv.TLSDataContainer.release with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer::release namespace:cv classpath:TLSDataContainer classname:TLSDataContainer name:release

--- Incoming ---
['cv.TLSDataContainer.cleanup', 'void', [], [], None, '']
parse_name: cv.TLSDataContainer.cleanup with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::TLSDataContainer::cleanup namespace:cv classpath:TLSDataContainer classname:TLSDataContainer name:cleanup
register (method) cleanup in cv::TLSDataContainer (ignored) (cv_TLSDataContainer_cleanup)

--- Incoming ---
[   'class cv.CommandLineParser',
    '',
    [],
    [],
    None,
    '@brief Designed for command line parsing\n'
    '\n'
    'The sample below demonstrates how to use CommandLineParser:\n'
    '@code\n'
    'CommandLineParser parser(argc, argv, keys);\n'
    'parser.about("Application name v1.0.0");\n'
    '\n'
    'if (parser.has("help"))\n'
    '{\n'
    'parser.printMessage();\n'
    'return 0;\n'
    '}\n'
    '\n'
    'int N = parser.get<int>("N");\n'
    'double fps = parser.get<double>("fps");\n'
    'String path = parser.get<String>("path");\n'
    '\n'
    'use_time_stamp = parser.has("timestamp");\n'
    '\n'
    'String img1 = parser.get<String>(0);\n'
    'String img2 = parser.get<String>(1);\n'
    '\n'
    'int repeat = parser.get<int>(2);\n'
    '\n'
    'if (!parser.check())\n'
    '{\n'
    'parser.printErrors();\n'
    'return 0;\n'
    '}\n'
    '@endcode\n'
    '\n'
    '### Keys syntax\n'
    '\n'
    'The keys parameter is a string containing several blocks, each one is '
    'enclosed in curly braces and\n'
    'describes one argument. Each argument contains three parts separated by '
    'the `|` symbol:\n'
    '\n'
    '-# argument names is a space-separated list of option synonyms (to mark '
    'argument as positional, prefix it with the `@` symbol)\n'
    '-# default value will be used if the argument was not provided (can be '
    'empty)\n'
    '-# help message (can be empty)\n'
    '\n'
    'For example:\n'
    '\n'
    '@code{.cpp}\n'
    'const String keys =\n'
    '"{help h usage ? |      | print this message   }"\n'
    '"{@image1        |      | image1 for compare   }"\n'
    '"{@image2        |<none>| image2 for compare   }"\n'
    '"{@repeat        |1     | number               }"\n'
    '"{path           |.     | path to file         }"\n'
    '"{fps            | -1.0 | fps for output video }"\n'
    '"{N count        |100   | count of objects     }"\n'
    '"{ts timestamp   |      | use time stamp       }"\n'
    ';\n'
    '}\n'
    '@endcode\n'
    '\n'
    'Note that there are no default values for `help` and `timestamp` so we '
    'can check their presence using the `has()` method.\n'
    'Arguments with default values are considered to be always present. Use '
    'the `get()` method in these cases to check their\n'
    'actual value instead.\n'
    '\n'
    'String keys like `get<String>("@image1")` return the empty string `""` by '
    'default - even with an empty default value.\n'
    'Use the special `<none>` default value to enforce that the returned '
    'string must not be empty. (like in `get<String>("@image2")`)\n'
    '\n'
    '### Usage\n'
    '\n'
    'For the described keys:\n'
    '\n'
    '@code{.sh}\n'
    '# Good call (3 positional parameters: image1, image2 and repeat; N is '
    '200, ts is true)\n'
    '$ ./app -N=200 1.png 2.jpg 19 -ts\n'
    '\n'
    '# Bad call\n'
    '$ ./app -fps=aaa\n'
    'ERRORS:\n'
    "Parameter 'fps': can not convert: [aaa] to [double]\n"
    '@endcode']
parse_name: class cv.CommandLineParser with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser namespace:cv classpath: classname: name:CommandLineParser
register class cv::CommandLineParser (['class cv.CommandLineParser', '', [], [], None, '@brief Designed for command line parsing\n\nThe sample below demonstrates how to use CommandLineParser:\n@code\nCommandLineParser parser(argc, argv, keys);\nparser.about("Application name v1.0.0");\n\nif (parser.has("help"))\n{\nparser.printMessage();\nreturn 0;\n}\n\nint N = parser.get<int>("N");\ndouble fps = parser.get<double>("fps");\nString path = parser.get<String>("path");\n\nuse_time_stamp = parser.has("timestamp");\n\nString img1 = parser.get<String>(0);\nString img2 = parser.get<String>(1);\n\nint repeat = parser.get<int>(2);\n\nif (!parser.check())\n{\nparser.printErrors();\nreturn 0;\n}\n@endcode\n\n### Keys syntax\n\nThe keys parameter is a string containing several blocks, each one is enclosed in curly braces and\ndescribes one argument. Each argument contains three parts separated by the `|` symbol:\n\n-# argument names is a space-separated list of option synonyms (to mark argument as positional, prefix it with the `@` symbol)\n-# default value will be used if the argument was not provided (can be empty)\n-# help message (can be empty)\n\nFor example:\n\n@code{.cpp}\nconst String keys =\n"{help h usage ? |      | print this message   }"\n"{@image1        |      | image1 for compare   }"\n"{@image2        |<none>| image2 for compare   }"\n"{@repeat        |1     | number               }"\n"{path           |.     | path to file         }"\n"{fps            | -1.0 | fps for output video }"\n"{N count        |100   | count of objects     }"\n"{ts timestamp   |      | use time stamp       }"\n;\n}\n@endcode\n\nNote that there are no default values for `help` and `timestamp` so we can check their presence using the `has()` method.\nArguments with default values are considered to be always present. Use the `get()` method in these cases to check their\nactual value instead.\n\nString keys like `get<String>("@image1")` return the empty string `""` by default - even with an empty default value.\nUse the special `<none>` default value to enforce that the returned string must not be empty. (like in `get<String>("@image2")`)\n\n### Usage\n\nFor the described keys:\n\n@code{.sh}\n# Good call (3 positional parameters: image1, image2 and repeat; N is 200, ts is true)\n$ ./app -N=200 1.png 2.jpg 19 -ts\n\n# Bad call\n$ ./app -fps=aaa\nERRORS:\nParameter \'fps\': can not convert: [aaa] to [double]\n@endcode'])

--- Incoming ---
[   'cv.CommandLineParser.CommandLineParser',
    'C',
    [],
    [   ['int', 'argc', '', []],
        ['const char* const[]', 'argv', '', []],
        ['const String&', 'keys', '', []]],
    None,
    '@brief Constructor\n'
    '\n'
    'Initializes command line parser object\n'
    '\n'
    '@param argc number of command line arguments (from main())\n'
    '@param argv array of command line arguments (from main())\n'
    '@param keys string describing acceptable command line parameters (see '
    'class description for syntax)']
parse_name: cv.CommandLineParser.CommandLineParser with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::CommandLineParser namespace:cv classpath:CommandLineParser classname:CommandLineParser name:CommandLineParser
Registering an unknown type: char* const
register (constructor) new in cv::CommandLineParser (cv_CommandLineParser_CommandLineParser_int_char* const[]_String)

--- Incoming ---
[   'cv.CommandLineParser.CommandLineParser',
    'C',
    [],
    [['const CommandLineParser&', 'parser', '', []]],
    None,
    '@brief Copy constructor']
parse_name: cv.CommandLineParser.CommandLineParser with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::CommandLineParser namespace:cv classpath:CommandLineParser classname:CommandLineParser name:CommandLineParser
register (constructor) copy in cv::CommandLineParser (cv_CommandLineParser_CommandLineParser_CommandLineParser)

--- Incoming ---
[   'cv.CommandLineParser.operator =',
    'CommandLineParser&',
    [],
    [['const CommandLineParser&', 'parser', '', []]],
    None,
    '@brief Assignment operator']
parse_name: cv.CommandLineParser.operator = with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::operator = namespace:cv classpath:CommandLineParser classname:CommandLineParser name:operator =
ignore (method) operator = in cv::CommandLineParser

--- Incoming ---
[   'cv.CommandLineParser.~CommandLineParser',
    '~',
    [],
    [],
    None,
    '@brief Destructor']
parse_name: cv.CommandLineParser.~CommandLineParser with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::~CommandLineParser namespace:cv classpath:CommandLineParser classname:CommandLineParser name:~CommandLineParser
ignore destructor (method) ~CommandLineParser in cv::CommandLineParser

--- Incoming ---
[   'cv.CommandLineParser.getPathToApplication',
    'String',
    ['/C'],
    [],
    None,
    '@brief Returns application path\n'
    '\n'
    'This method returns the path to the executable from the command line '
    '(`argv[0]`).\n'
    '\n'
    'For example, if the application has been started with such a command:\n'
    '@code{.sh}\n'
    '$ ./bin/my-executable\n'
    '@endcode\n'
    'this method will return `./bin`.']
parse_name: cv.CommandLineParser.getPathToApplication with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::getPathToApplication namespace:cv classpath:CommandLineParser classname:CommandLineParser name:getPathToApplication
register (method) getPathToApplication in cv::CommandLineParser (cv_CommandLineParser_getPathToApplication_const)

--- Incoming ---
[   'cv.CommandLineParser.get',
    'template <typename T> T',
    ['/C'],
    [['const String&', 'name', '', []], ['bool', 'space_delete', 'true', []]],
    None,
    '@brief Access arguments by name\n'
    '\n'
    'Returns argument converted to selected type. If the argument is not known '
    'or can not be\n'
    'converted to selected type, the error flag is set (can be checked with '
    '@ref check).\n'
    '\n'
    'For example, define:\n'
    '@code{.cpp}\n'
    'String keys = "{N count||}";\n'
    '@endcode\n'
    '\n'
    'Call:\n'
    '@code{.sh}\n'
    '$ ./my-app -N=20\n'
    '# or\n'
    '$ ./my-app --count=20\n'
    '@endcode\n'
    '\n'
    'Access:\n'
    '@code{.cpp}\n'
    'int N = parser.get<int>("N");\n'
    '@endcode\n'
    '\n'
    '@param name name of the argument\n'
    '@param space_delete remove spaces from the left and right of the string\n'
    '@tparam T the argument will be converted to this type if possible\n'
    '\n'
    '@note You can access positional arguments by their `@`-prefixed name:\n'
    '@code{.cpp}\n'
    'parser.get<String>("@image");\n'
    '@endcode']
parse_name: cv.CommandLineParser.get with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::get namespace:cv classpath:CommandLineParser classname:CommandLineParser name:get
Registering an unknown type: template <typename T> T
register (method) get in cv::CommandLineParser (cv_CommandLineParser_get_const_String_bool)

--- Incoming ---
[   'cv.CommandLineParser.get',
    'template <typename T> T',
    ['/C'],
    [['int', 'index', '', []], ['bool', 'space_delete', 'true', []]],
    None,
    '@brief Access positional arguments by index\n'
    '\n'
    'Returns argument converted to selected type. Indexes are counted from '
    'zero.\n'
    '\n'
    'For example, define:\n'
    '@code{.cpp}\n'
    'String keys = "{@arg1||}{@arg2||}"\n'
    '@endcode\n'
    '\n'
    'Call:\n'
    '@code{.sh}\n'
    './my-app abc qwe\n'
    '@endcode\n'
    '\n'
    'Access arguments:\n'
    '@code{.cpp}\n'
    'String val_1 = parser.get<String>(0); // returns "abc", arg1\n'
    'String val_2 = parser.get<String>(1); // returns "qwe", arg2\n'
    '@endcode\n'
    '\n'
    '@param index index of the argument\n'
    '@param space_delete remove spaces from the left and right of the string\n'
    '@tparam T the argument will be converted to this type if possible']
parse_name: cv.CommandLineParser.get with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::get namespace:cv classpath:CommandLineParser classname:CommandLineParser name:get
register (method) get in cv::CommandLineParser (cv_CommandLineParser_get_const_int_bool)

--- Incoming ---
[   'cv.CommandLineParser.has',
    'bool',
    ['/C'],
    [['const String&', 'name', '', []]],
    None,
    '@brief Check if field was provided in the command line\n'
    '\n'
    '@param name argument name to check']
parse_name: cv.CommandLineParser.has with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::has namespace:cv classpath:CommandLineParser classname:CommandLineParser name:has
register (method) has in cv::CommandLineParser (cv_CommandLineParser_has_const_String)

--- Incoming ---
[   'cv.CommandLineParser.check',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Check for parsing errors\n'
    '\n'
    'Returns false if error occurred while accessing the parameters (bad '
    'conversion, missing arguments,\n'
    'etc.). Call @ref printErrors to print error messages list.']
parse_name: cv.CommandLineParser.check with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::check namespace:cv classpath:CommandLineParser classname:CommandLineParser name:check
register (method) check in cv::CommandLineParser (cv_CommandLineParser_check_const)

--- Incoming ---
[   'cv.CommandLineParser.about',
    'void',
    [],
    [['const String&', 'message', '', []]],
    None,
    '@brief Set the about message\n'
    '\n'
    'The about message will be shown when @ref printMessage is called, right '
    'before arguments table.']
parse_name: cv.CommandLineParser.about with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::about namespace:cv classpath:CommandLineParser classname:CommandLineParser name:about
register (method) about in cv::CommandLineParser (cv_CommandLineParser_about_String)

--- Incoming ---
[   'cv.CommandLineParser.printMessage',
    'void',
    ['/C'],
    [],
    None,
    '@brief Print help message\n'
    '\n'
    'This method will print standard help message containing the about message '
    'and arguments description.\n'
    '\n'
    '@sa about']
parse_name: cv.CommandLineParser.printMessage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::printMessage namespace:cv classpath:CommandLineParser classname:CommandLineParser name:printMessage
register (method) printMessage in cv::CommandLineParser (cv_CommandLineParser_printMessage_const)

--- Incoming ---
[   'cv.CommandLineParser.printErrors',
    'void',
    ['/C'],
    [],
    None,
    '@brief Print list of errors occurred\n\n@sa check']
parse_name: cv.CommandLineParser.printErrors with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::printErrors namespace:cv classpath:CommandLineParser classname:CommandLineParser name:printErrors
register (method) printErrors in cv::CommandLineParser (cv_CommandLineParser_printErrors_const)

--- Incoming ---
[   'cv.CommandLineParser.getByName',
    'void',
    ['/C', '/H'],
    [   ['const String&', 'name', '', []],
        ['bool', 'space_delete', '', []],
        ['Param', 'type', '', []],
        ['void*', 'dst', '', []]],
    None,
    '']
parse_name: cv.CommandLineParser.getByName with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::getByName namespace:cv classpath:CommandLineParser classname:CommandLineParser name:getByName
Registering an unknown type: Param

--- Incoming ---
[   'cv.CommandLineParser.getByIndex',
    'void',
    ['/C', '/H'],
    [   ['int', 'index', '', []],
        ['bool', 'space_delete', '', []],
        ['Param', 'type', '', []],
        ['void*', 'dst', '', []]],
    None,
    '']
parse_name: cv.CommandLineParser.getByIndex with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::CommandLineParser::getByIndex namespace:cv classpath:CommandLineParser classname:CommandLineParser name:getByIndex

--- Incoming ---
[   'enum cv.instr.TYPE',
    '',
    [],
    [   ['const cv.instr.TYPE_GENERAL', '0', [], [], None, ''],
        ['const cv.instr.TYPE_MARKER', '0+1', [], [], None, ''],
        ['const cv.instr.TYPE_WRAPPER', '0+2', [], [], None, ''],
        ['const cv.instr.TYPE_FUN', '0+3', [], [], None, '']],
    None,
    '']
parse_name: const cv.instr.TYPE_GENERAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_GENERAL namespace:cv::instr classpath: classname: name:TYPE_GENERAL
parse_name: const cv.instr.TYPE_MARKER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_MARKER namespace:cv::instr classpath: classname: name:TYPE_MARKER
parse_name: const cv.instr.TYPE_WRAPPER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_WRAPPER namespace:cv::instr classpath: classname: name:TYPE_WRAPPER
parse_name: const cv.instr.TYPE_FUN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_FUN namespace:cv::instr classpath: classname: name:TYPE_FUN
parse_name: enum cv.instr.TYPE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE namespace:cv::instr classpath: classname: name:TYPE
parse_name: const cv.instr.TYPE_GENERAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_GENERAL namespace:cv::instr classpath: classname: name:TYPE_GENERAL
parse_name: const cv.instr.TYPE_MARKER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_MARKER namespace:cv::instr classpath: classname: name:TYPE_MARKER
parse_name: const cv.instr.TYPE_WRAPPER with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_WRAPPER namespace:cv::instr classpath: classname: name:TYPE_WRAPPER
parse_name: const cv.instr.TYPE_FUN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::TYPE_FUN namespace:cv::instr classpath: classname: name:TYPE_FUN

--- Incoming ---
[   'enum cv.instr.IMPL',
    '',
    [],
    [   ['const cv.instr.IMPL_PLAIN', '0', [], [], None, ''],
        ['const cv.instr.IMPL_IPP', '0+1', [], [], None, ''],
        ['const cv.instr.IMPL_OPENCL', '0+2', [], [], None, '']],
    None,
    '']
parse_name: const cv.instr.IMPL_PLAIN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL_PLAIN namespace:cv::instr classpath: classname: name:IMPL_PLAIN
parse_name: const cv.instr.IMPL_IPP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL_IPP namespace:cv::instr classpath: classname: name:IMPL_IPP
parse_name: const cv.instr.IMPL_OPENCL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL_OPENCL namespace:cv::instr classpath: classname: name:IMPL_OPENCL
parse_name: enum cv.instr.IMPL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL namespace:cv::instr classpath: classname: name:IMPL
parse_name: const cv.instr.IMPL_PLAIN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL_PLAIN namespace:cv::instr classpath: classname: name:IMPL_PLAIN
parse_name: const cv.instr.IMPL_IPP with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL_IPP namespace:cv::instr classpath: classname: name:IMPL_IPP
parse_name: const cv.instr.IMPL_OPENCL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::IMPL_OPENCL namespace:cv::instr classpath: classname: name:IMPL_OPENCL

--- Incoming ---
['struct cv.instr.NodeDataTls', '', [], [], None, '']
parse_name: struct cv.instr.NodeDataTls with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeDataTls namespace:cv::instr classpath: classname: name:NodeDataTls
register class cv::instr::NodeDataTls (['struct cv.instr.NodeDataTls', '', [], [], None, ''])

--- Incoming ---
['cv.instr.NodeDataTls.NodeDataTls', 'N', [], [], None, '']
parse_name: cv.instr.NodeDataTls.NodeDataTls with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeDataTls::NodeDataTls namespace:cv::instr classpath:NodeDataTls classname:NodeDataTls name:NodeDataTls
register (constructor) default in cv::instr::NodeDataTls (cv_instr_NodeDataTls_NodeDataTls)

--- Incoming ---
['class cv.instr.NodeData', '', [], [], None, '']
parse_name: class cv.instr.NodeData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData namespace:cv::instr classpath: classname: name:NodeData
register class cv::instr::NodeData (['class cv.instr.NodeData', '', [], [], None, ''])

--- Incoming ---
[   'cv.instr.NodeData.NodeData',
    'N',
    [],
    [   ['const char*', 'funName', '0', []],
        ['const char*', 'fileName', 'NULL', []],
        ['int', 'lineNum', '0', []],
        ['void*', 'retAddress', 'NULL', []],
        ['bool', 'alwaysExpand', 'false', []],
        ['cv::instr::TYPE', 'instrType', 'TYPE_GENERAL', []],
        ['cv::instr::IMPL', 'implType', 'IMPL_PLAIN', []]],
    None,
    '']
parse_name: cv.instr.NodeData.NodeData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData::NodeData namespace:cv::instr classpath:NodeData classname:NodeData name:NodeData
register (constructor) new in cv::instr::NodeData (cv_instr_NodeData_NodeData_const_char_X_const_char_X_int_void_X_bool_TYPE_IMPL)

--- Incoming ---
[   'cv.instr.NodeData.NodeData',
    'N',
    [],
    [['NodeData &', 'ref', '', []]],
    None,
    '']
parse_name: cv.instr.NodeData.NodeData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData::NodeData namespace:cv::instr classpath:NodeData classname:NodeData name:NodeData
register (constructor) copy in cv::instr::NodeData (cv_instr_NodeData_NodeData_NodeData)

--- Incoming ---
['cv.instr.NodeData.~NodeData', '~', [], [], None, '']
parse_name: cv.instr.NodeData.~NodeData with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData::~NodeData namespace:cv::instr classpath:NodeData classname:NodeData name:~NodeData
ignore destructor (method) ~NodeData in cv::instr::NodeData

--- Incoming ---
[   'cv.instr.NodeData.operator=',
    'NodeData&',
    [],
    [['const NodeData&', '', '', []]],
    None,
    '']
parse_name: cv.instr.NodeData.operator= with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData::operator= namespace:cv::instr classpath:NodeData classname:NodeData name:operator=
ignore (method) operator= in cv::instr::NodeData

--- Incoming ---
['cv.instr.NodeData.getTotalMs', 'double', ['/C'], [], None, '']
parse_name: cv.instr.NodeData.getTotalMs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData::getTotalMs namespace:cv::instr classpath:NodeData classname:NodeData name:getTotalMs
register (method) getTotalMs in cv::instr::NodeData (cv_instr_NodeData_getTotalMs_const)

--- Incoming ---
['cv.instr.NodeData.getMeanMs', 'double', ['/C'], [], None, '']
parse_name: cv.instr.NodeData.getMeanMs with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::NodeData::getMeanMs namespace:cv::instr classpath:NodeData classname:NodeData name:getMeanMs
register (method) getMeanMs in cv::instr::NodeData (cv_instr_NodeData_getMeanMs_const)

--- Incoming ---
[   'cv.instr.operator==',
    'bool',
    [],
    [['const NodeData&', 'lhs', '', []], ['const NodeData&', 'rhs', '', []]],
    None,
    '']
parse_name: cv.instr.operator== with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::operator== namespace:cv::instr classpath: classname: name:operator==
ignore (function) operator== in None

--- Incoming ---
['typedef cv.instr.InstrNode', 'Node<NodeData>', '', [], None, '']
parse_name: typedef cv.instr.InstrNode with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::InstrNode namespace:cv::instr classpath: classname: name:InstrNode
Registering an unknown type: Node<NodeData>

--- Incoming ---
['cv.instr.getTrace', 'InstrNode*', [], [], None, '']
parse_name: cv.instr.getTrace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::getTrace namespace:cv::instr classpath: classname: name:getTrace
Registering an unknown type: InstrNode
register (function) getTrace (cv_instr_getTrace)

--- Incoming ---
['cv.instr.useInstrumentation', 'bool', [], [], None, '']
parse_name: cv.instr.useInstrumentation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::useInstrumentation namespace:cv::instr classpath: classname: name:useInstrumentation
register (function) useInstrumentation (cv_instr_useInstrumentation)

--- Incoming ---
[   'cv.instr.setUseInstrumentation',
    'void',
    [],
    [['bool', 'flag', '', []]],
    None,
    '']
parse_name: cv.instr.setUseInstrumentation with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::setUseInstrumentation namespace:cv::instr classpath: classname: name:setUseInstrumentation
register (function) setUseInstrumentation (cv_instr_setUseInstrumentation_bool)

--- Incoming ---
['cv.instr.resetTrace', 'void', [], [], None, '']
parse_name: cv.instr.resetTrace with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::resetTrace namespace:cv::instr classpath: classname: name:resetTrace
register (function) resetTrace (cv_instr_resetTrace)

--- Incoming ---
[   'enum cv.instr.FLAGS',
    '',
    [],
    [   ['const cv.instr.FLAGS_NONE', '0', [], [], None, ''],
        ['const cv.instr.FLAGS_MAPPING', '0x01', [], [], None, ''],
        ['const cv.instr.FLAGS_EXPAND_SAME_NAMES', '0x02', [], [], None, '']],
    None,
    '']
parse_name: const cv.instr.FLAGS_NONE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS_NONE namespace:cv::instr classpath: classname: name:FLAGS_NONE
parse_name: const cv.instr.FLAGS_MAPPING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS_MAPPING namespace:cv::instr classpath: classname: name:FLAGS_MAPPING
parse_name: const cv.instr.FLAGS_EXPAND_SAME_NAMES with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS_EXPAND_SAME_NAMES namespace:cv::instr classpath: classname: name:FLAGS_EXPAND_SAME_NAMES
parse_name: enum cv.instr.FLAGS with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS namespace:cv::instr classpath: classname: name:FLAGS
parse_name: const cv.instr.FLAGS_NONE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS_NONE namespace:cv::instr classpath: classname: name:FLAGS_NONE
parse_name: const cv.instr.FLAGS_MAPPING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS_MAPPING namespace:cv::instr classpath: classname: name:FLAGS_MAPPING
parse_name: const cv.instr.FLAGS_EXPAND_SAME_NAMES with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::FLAGS_EXPAND_SAME_NAMES namespace:cv::instr classpath: classname: name:FLAGS_EXPAND_SAME_NAMES

--- Incoming ---
['cv.instr.setFlags', 'void', [], [['FLAGS', 'modeFlags', '', []]], None, '']
parse_name: cv.instr.setFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::setFlags namespace:cv::instr classpath: classname: name:setFlags
register (function) setFlags (cv_instr_setFlags_FLAGS)

--- Incoming ---
['cv.instr.setFlags', 'void', [], [['int', 'modeFlags', '', []]], None, '']
parse_name: cv.instr.setFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::setFlags namespace:cv::instr classpath: classname: name:setFlags
register (function) setFlags (cv_instr_setFlags_int)

--- Incoming ---
['cv.instr.getFlags', 'FLAGS', [], [], None, '']
parse_name: cv.instr.getFlags with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::instr::getFlags namespace:cv::instr classpath: classname: name:getFlags
register (function) getFlags (cv_instr_getFlags)

--- Incoming ---
[   'cv.samples.findFile',
    'cv::String',
    [],
    [   ['const cv::String&', 'relative_path', '', []],
        ['bool', 'required', 'true', []],
        ['bool', 'silentMode', 'false', []]],
    None,
    '@brief Try to find requested data file\n'
    '\n'
    'Search directories:\n'
    '\n'
    '1. Directories passed via `addSamplesDataSearchPath()`\n'
    '2. OPENCV_SAMPLES_DATA_PATH_HINT environment variable\n'
    '3. OPENCV_SAMPLES_DATA_PATH environment variable\n'
    'If parameter value is not empty and nothing is found then stop '
    'searching.\n'
    '4. Detects build/install path based on:\n'
    'a. current working directory (CWD)\n'
    "b. and/or binary module location (opencv_core/opencv_world, doesn't work "
    'with static linkage)\n'
    '5. Scan `<source>/{,data,samples/data}` directories if build directory is '
    'detected or the current directory is in source tree.\n'
    '6. Scan `<install>/share/OpenCV` directory if install directory is '
    'detected.\n'
    '\n'
    '@see cv::utils::findDataFile\n'
    '\n'
    '@param relative_path Relative path to data file\n'
    '@param required Specify "file not found" handling.\n'
    'If true, function prints information message and raises cv::Exception.\n'
    'If false, function returns empty result\n'
    '@param silentMode Disables messages\n'
    '@return Returns path (absolute or relative to the current directory) or '
    'empty string if file is not found']
parse_name: cv.samples.findFile with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::samples::findFile namespace:cv::samples classpath: classname: name:findFile
register (function) findFile (cv_samples_findFile_String_bool_bool)

--- Incoming ---
[   'cv.samples.findFileOrKeep',
    'cv::String',
    [],
    [   ['const cv::String&', 'relative_path', '', []],
        ['bool', 'silentMode', 'false', []]],
    None,
    '']
parse_name: cv.samples.findFileOrKeep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::samples::findFileOrKeep namespace:cv::samples classpath: classname: name:findFileOrKeep
register (function) findFileOrKeep (cv_samples_findFileOrKeep_String_bool)

--- Incoming ---
[   'cv.samples.findFileOrKeep',
    'cv::String',
    [],
    [   ['const cv::String&', 'relative_path', '', []],
        ['bool', 'silentMode', '', []]],
    None,
    '']
parse_name: cv.samples.findFileOrKeep with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::samples::findFileOrKeep namespace:cv::samples classpath: classname: name:findFileOrKeep
register (function) findFileOrKeep (cv_samples_findFileOrKeep_String_bool)

--- Incoming ---
[   'cv.samples.addSamplesDataSearchPath',
    'void',
    [],
    [['const cv::String&', 'path', '', []]],
    None,
    '@brief Override search data path by adding new search location\n'
    '\n'
    'Use this only to override default behavior\n'
    'Passed paths are used in LIFO order.\n'
    '\n'
    '@param path Path to used samples data']
parse_name: cv.samples.addSamplesDataSearchPath with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::samples::addSamplesDataSearchPath namespace:cv::samples classpath: classname: name:addSamplesDataSearchPath
register (function) addSamplesDataSearchPath (cv_samples_addSamplesDataSearchPath_String)

--- Incoming ---
[   'cv.samples.addSamplesDataSearchSubDirectory',
    'void',
    [],
    [['const cv::String&', 'subdir', '', []]],
    None,
    '@brief Append samples search data sub directory\n'
    '\n'
    'General usage is to add OpenCV modules name '
    '(`<opencv_contrib>/modules/<name>/samples/data` -> `<name>/samples/data` '
    '+ `modules/<name>/samples/data`).\n'
    'Passed subdirectories are used in LIFO order.\n'
    '\n'
    '@param subdir samples data sub directory']
parse_name: cv.samples.addSamplesDataSearchSubDirectory with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::samples::addSamplesDataSearchSubDirectory namespace:cv::samples classpath: classname: name:addSamplesDataSearchSubDirectory
register (function) addSamplesDataSearchSubDirectory (cv_samples_addSamplesDataSearchSubDirectory_String)

--- Incoming ---
['cv.utils.getThreadID', 'int', [], [], None, '']
parse_name: cv.utils.getThreadID with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::getThreadID namespace:cv::utils classpath: classname: name:getThreadID
register (function) getThreadID (cv_utils_getThreadID)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/utils/allocator_stats.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['class cv.utils.AllocatorStatisticsInterface', '', [], [], None, '']
parse_name: class cv.utils.AllocatorStatisticsInterface with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface namespace:cv::utils classpath: classname: name:AllocatorStatisticsInterface
register class cv::utils::AllocatorStatisticsInterface (['class cv.utils.AllocatorStatisticsInterface', '', [], [], None, ''])

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.AllocatorStatisticsInterface',
    'A',
    ['/H'],
    [],
    None,
    '']
parse_name: cv.utils.AllocatorStatisticsInterface.AllocatorStatisticsInterface with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::AllocatorStatisticsInterface namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:AllocatorStatisticsInterface

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.~AllocatorStatisticsInterface',
    '~',
    ['/H'],
    [],
    None,
    '']
parse_name: cv.utils.AllocatorStatisticsInterface.~AllocatorStatisticsInterface with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::~AllocatorStatisticsInterface namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:~AllocatorStatisticsInterface
ignore destructor (method) ~AllocatorStatisticsInterface in cv::utils::AllocatorStatisticsInterface

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.getCurrentUsage',
    'uint64_t',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.utils.AllocatorStatisticsInterface.getCurrentUsage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::getCurrentUsage namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:getCurrentUsage
register (method) getCurrentUsage in cv::utils::AllocatorStatisticsInterface (trait) (cv_utils_AllocatorStatisticsInterface_getCurrentUsage_const)

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.getTotalUsage',
    'uint64_t',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.utils.AllocatorStatisticsInterface.getTotalUsage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::getTotalUsage namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:getTotalUsage
register (method) getTotalUsage in cv::utils::AllocatorStatisticsInterface (trait) (cv_utils_AllocatorStatisticsInterface_getTotalUsage_const)

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.getNumberOfAllocations',
    'uint64_t',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.utils.AllocatorStatisticsInterface.getNumberOfAllocations with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::getNumberOfAllocations namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:getNumberOfAllocations
register (method) getNumberOfAllocations in cv::utils::AllocatorStatisticsInterface (trait) (cv_utils_AllocatorStatisticsInterface_getNumberOfAllocations_const)

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.getPeakUsage',
    'uint64_t',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.utils.AllocatorStatisticsInterface.getPeakUsage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::getPeakUsage namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:getPeakUsage
register (method) getPeakUsage in cv::utils::AllocatorStatisticsInterface (trait) (cv_utils_AllocatorStatisticsInterface_getPeakUsage_const)

--- Incoming ---
[   'cv.utils.AllocatorStatisticsInterface.resetPeakUsage',
    'void',
    ['/A'],
    [],
    None,
    'set peak usage = current usage']
parse_name: cv.utils.AllocatorStatisticsInterface.resetPeakUsage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils'] -> fullname:cv::utils::AllocatorStatisticsInterface::resetPeakUsage namespace:cv::utils classpath:AllocatorStatisticsInterface classname:AllocatorStatisticsInterface name:resetPeakUsage
register (method) resetPeakUsage in cv::utils::AllocatorStatisticsInterface (trait) (cv_utils_AllocatorStatisticsInterface_resetPeakUsage)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/utils/logger.defines.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils', 'cv.utils.logging']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'const CV_LOG_LEVEL_SILENT',
    '0          //!< for using in setLogLevel() call',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_SILENT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_SILENT namespace: classpath: classname: name:CV_LOG_LEVEL_SILENT

--- Incoming ---
[   'const CV_LOG_LEVEL_FATAL',
    '1           //!< Fatal (critical) error (unrecoverable internal error)',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_FATAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_FATAL namespace: classpath: classname: name:CV_LOG_LEVEL_FATAL

--- Incoming ---
[   'const CV_LOG_LEVEL_ERROR',
    '2           //!< Error message',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_ERROR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_ERROR namespace: classpath: classname: name:CV_LOG_LEVEL_ERROR

--- Incoming ---
[   'const CV_LOG_LEVEL_WARN',
    '3            //!< Warning message',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_WARN with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_WARN namespace: classpath: classname: name:CV_LOG_LEVEL_WARN

--- Incoming ---
[   'const CV_LOG_LEVEL_INFO',
    '4            //!< Info message',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_INFO with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_INFO namespace: classpath: classname: name:CV_LOG_LEVEL_INFO

--- Incoming ---
[   'const CV_LOG_LEVEL_DEBUG',
    '5           //!< Debug message. Disabled in the "Release" build.',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_DEBUG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_DEBUG namespace: classpath: classname: name:CV_LOG_LEVEL_DEBUG

--- Incoming ---
[   'const CV_LOG_LEVEL_VERBOSE',
    '6         //!< Verbose (trace) messages. Requires verbosity level. '
    'Disabled in the "Release" build.',
    [],
    [],
    '@addtogroup core_logging\n@{\n']
parse_name: const CV_LOG_LEVEL_VERBOSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:CV_LOG_LEVEL_VERBOSE namespace: classpath: classname: name:CV_LOG_LEVEL_VERBOSE

--- Incoming ---
[   'enum cv.utils.logging.LogLevel',
    '',
    [],
    [   [   'const cv.utils.logging.LOG_LEVEL_SILENT',
            '0',
            [],
            [],
            None,
            'for using in setLogVevel() call\n'],
        [   'const cv.utils.logging.LOG_LEVEL_FATAL',
            '1',
            [],
            [],
            None,
            'Fatal (critical) error (unrecoverable internal error)\n'],
        [   'const cv.utils.logging.LOG_LEVEL_ERROR',
            '2',
            [],
            [],
            None,
            'Error message\n'],
        [   'const cv.utils.logging.LOG_LEVEL_WARNING',
            '3',
            [],
            [],
            None,
            'Warning message\n'],
        [   'const cv.utils.logging.LOG_LEVEL_INFO',
            '4',
            [],
            [],
            None,
            'Info message\n'],
        [   'const cv.utils.logging.LOG_LEVEL_DEBUG',
            '5',
            [],
            [],
            None,
            'Debug message. Disabled in the "Release" build.\n'],
        [   'const cv.utils.logging.LOG_LEVEL_VERBOSE',
            '6',
            [],
            [],
            None,
            'Verbose (trace) messages. Requires verbosity level. Disabled in '
            'the "Release" build.\n'],
        [   'const cv.utils.logging.ENUM_LOG_LEVEL_FORCE_INT',
            'INT_MAX',
            [],
            [],
            None,
            '']],
    None,
    'Supported logging levels and their semantic']
parse_name: const cv.utils.logging.LOG_LEVEL_SILENT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_SILENT namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_SILENT
parse_name: const cv.utils.logging.LOG_LEVEL_FATAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_FATAL namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_FATAL
parse_name: const cv.utils.logging.LOG_LEVEL_ERROR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_ERROR namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_ERROR
parse_name: const cv.utils.logging.LOG_LEVEL_WARNING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_WARNING namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_WARNING
parse_name: const cv.utils.logging.LOG_LEVEL_INFO with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_INFO namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_INFO
parse_name: const cv.utils.logging.LOG_LEVEL_DEBUG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_DEBUG namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_DEBUG
parse_name: const cv.utils.logging.LOG_LEVEL_VERBOSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_VERBOSE namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_VERBOSE
parse_name: const cv.utils.logging.ENUM_LOG_LEVEL_FORCE_INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::ENUM_LOG_LEVEL_FORCE_INT namespace:cv::utils::logging classpath: classname: name:ENUM_LOG_LEVEL_FORCE_INT
ignored: CONST ENUM_LOG_LEVEL_FORCE_INT=INT_MAX
parse_name: enum cv.utils.logging.LogLevel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LogLevel namespace:cv::utils::logging classpath: classname: name:LogLevel
parse_name: const cv.utils.logging.LOG_LEVEL_SILENT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_SILENT namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_SILENT
parse_name: const cv.utils.logging.LOG_LEVEL_FATAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_FATAL namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_FATAL
parse_name: const cv.utils.logging.LOG_LEVEL_ERROR with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_ERROR namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_ERROR
parse_name: const cv.utils.logging.LOG_LEVEL_WARNING with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_WARNING namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_WARNING
parse_name: const cv.utils.logging.LOG_LEVEL_INFO with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_INFO namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_INFO
parse_name: const cv.utils.logging.LOG_LEVEL_DEBUG with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_DEBUG namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_DEBUG
parse_name: const cv.utils.logging.LOG_LEVEL_VERBOSE with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::LOG_LEVEL_VERBOSE namespace:cv::utils::logging classpath: classname: name:LOG_LEVEL_VERBOSE
parse_name: const cv.utils.logging.ENUM_LOG_LEVEL_FORCE_INT with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging'] -> fullname:cv::utils::logging::ENUM_LOG_LEVEL_FORCE_INT namespace:cv::utils::logging classpath: classname: name:ENUM_LOG_LEVEL_FORCE_INT


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/utils/logger.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils', 'cv.utils.logging', 'cv.utils.logging.internal']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'cv.utils.logging.setLogLevel',
    'LogLevel',
    [],
    [['LogLevel', 'logLevel', '', []]],
    None,
    'Set global logging level\n@return previous logging level']
parse_name: cv.utils.logging.setLogLevel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::setLogLevel namespace:cv::utils::logging classpath: classname: name:setLogLevel
register (function) setLogLevel (cv_utils_logging_setLogLevel_LogLevel)

--- Incoming ---
[   'cv.utils.logging.getLogLevel',
    'LogLevel',
    [],
    [],
    None,
    'Get global logging level']
parse_name: cv.utils.logging.getLogLevel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::getLogLevel namespace:cv::utils::logging classpath: classname: name:getLogLevel
register (function) getLogLevel (cv_utils_logging_getLogLevel)

--- Incoming ---
[   'cv.utils.logging.registerLogTag',
    'void',
    [],
    [['cv::utils::logging::LogTag*', 'plogtag', '', []]],
    None,
    '']
parse_name: cv.utils.logging.registerLogTag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::registerLogTag namespace:cv::utils::logging classpath: classname: name:registerLogTag
register (function) registerLogTag (cv_utils_logging_registerLogTag_LogTag)

--- Incoming ---
[   'cv.utils.logging.setLogTagLevel',
    'void',
    [],
    [   ['const char*', 'tag', '', []],
        ['cv::utils::logging::LogLevel', 'level', '', []]],
    None,
    '']
parse_name: cv.utils.logging.setLogTagLevel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::setLogTagLevel namespace:cv::utils::logging classpath: classname: name:setLogTagLevel
register (function) setLogTagLevel (cv_utils_logging_setLogTagLevel_const_char_X_LogLevel)

--- Incoming ---
[   'cv.utils.logging.getLogTagLevel',
    'cv::utils::logging::LogLevel',
    [],
    [['const char*', 'tag', '', []]],
    None,
    '']
parse_name: cv.utils.logging.getLogTagLevel with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::getLogTagLevel namespace:cv::utils::logging classpath: classname: name:getLogTagLevel
register (function) getLogTagLevel (cv_utils_logging_getLogTagLevel_const_char_X)

--- Incoming ---
[   'cv.utils.logging.internal.getGlobalLogTag',
    'cv::utils::logging::LogTag*',
    [],
    [],
    None,
    'Get global log tag']
parse_name: cv.utils.logging.internal.getGlobalLogTag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::internal::getGlobalLogTag namespace:cv::utils::logging::internal classpath: classname: name:getGlobalLogTag
register (function) getGlobalLogTag (cv_utils_logging_internal_getGlobalLogTag)

--- Incoming ---
[   'cv.utils.logging.internal.writeLogMessage',
    'void',
    [],
    [['LogLevel', 'logLevel', '', []], ['const char*', 'message', '', []]],
    None,
    'Write log message']
parse_name: cv.utils.logging.internal.writeLogMessage with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::internal::writeLogMessage namespace:cv::utils::logging::internal classpath: classname: name:writeLogMessage
register (function) writeLogMessage (cv_utils_logging_internal_writeLogMessage_LogLevel_const_char_X)

--- Incoming ---
[   'cv.utils.logging.internal.writeLogMessageEx',
    'void',
    [],
    [   ['LogLevel', 'logLevel', '', []],
        ['const char*', 'tag', '', []],
        ['const char*', 'file', '', []],
        ['int', 'line', '', []],
        ['const char*', 'func', '', []],
        ['const char*', 'message', '', []]],
    None,
    'Write log message']
parse_name: cv.utils.logging.internal.writeLogMessageEx with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::internal::writeLogMessageEx namespace:cv::utils::logging::internal classpath: classname: name:writeLogMessageEx
register (function) writeLogMessageEx (cv_utils_logging_internal_writeLogMessageEx_LogLevel_const_char_X_const_char_X_int_const_char_X_const_char_X)

--- Incoming ---
[   'struct cv.utils.logging.LogTagAuto',
    ': cv::utils::logging::LogTag',
    [],
    [],
    None,
    '']
parse_name: struct cv.utils.logging.LogTagAuto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::LogTagAuto namespace:cv::utils::logging classpath: classname: name:LogTagAuto
register class cv::utils::logging::LogTagAuto (['struct cv.utils.logging.LogTagAuto', ': cv::utils::logging::LogTag', [], [], None, '']) [ignored] impl:cv::utils::logging::LogTag

--- Incoming ---
[   'cv.utils.logging.LogTagAuto.LogTagAuto',
    'L',
    [],
    [['const char*', '_name', '', []], ['LogLevel', '_level', '', []]],
    None,
    '']
parse_name: cv.utils.logging.LogTagAuto.LogTagAuto with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::LogTagAuto::LogTagAuto namespace:cv::utils::logging classpath:LogTagAuto classname:LogTagAuto name:LogTagAuto
Registering an unknown type: LogTagAuto
register (constructor) new in cv::utils::logging::LogTagAuto (ignored) (cv_utils_logging_LogTagAuto_LogTagAuto_const_char_X_LogLevel)

--- Incoming ---
[   'const CV_LOGTAG_FALLBACK',
    'nullptr',
    [],
    [],
    '\n'
    '* \\def CV_LOG_STRIP_LEVEL\n'
    '*\n'
    '* Define '
    'CV_LOG_STRIP_LEVEL=CV_LOG_LEVEL_[DEBUG|INFO|WARN|ERROR|FATAL|SILENT] to '
    'compile out anything at that and before that logging level\n'
    '\n']
parse_name: const CV_LOGTAG_FALLBACK with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:CV_LOGTAG_FALLBACK namespace: classpath: classname: name:CV_LOGTAG_FALLBACK
ignored: CONST CV_LOGTAG_FALLBACK=nullptr

--- Incoming ---
[   'const CV_LOGTAG_GLOBAL',
    'cv::utils::logging::internal::getGlobalLogTag()',
    [],
    [],
    '\n'
    '* \\def CV_LOG_STRIP_LEVEL\n'
    '*\n'
    '* Define '
    'CV_LOG_STRIP_LEVEL=CV_LOG_LEVEL_[DEBUG|INFO|WARN|ERROR|FATAL|SILENT] to '
    'compile out anything at that and before that logging level\n'
    '\n']
parse_name: const CV_LOGTAG_GLOBAL with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:CV_LOGTAG_GLOBAL namespace: classpath: classname: name:CV_LOGTAG_GLOBAL
ignored: CONST CV_LOGTAG_GLOBAL=cv::utils::logging::internal::getGlobalLogTag()


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/utils/logtag.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils', 'cv.utils.logging', 'cv.utils.logging.internal']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['struct cv.utils.logging.LogTag', '', [], [], None, '']
parse_name: struct cv.utils.logging.LogTag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::LogTag namespace:cv::utils::logging classpath: classname: name:LogTag
register class cv::utils::logging::LogTag (['struct cv.utils.logging.LogTag', '', [], [], None, ''])

--- Incoming ---
[   'cv.utils.logging.LogTag.LogTag',
    'L',
    [],
    [['const char*', '_name', '', []], ['LogLevel', '_level', '', []]],
    None,
    '']
parse_name: cv.utils.logging.LogTag.LogTag with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal'] -> fullname:cv::utils::logging::LogTag::LogTag namespace:cv::utils::logging classpath:LogTag classname:LogTag name:LogTag
register (constructor) new in cv::utils::logging::LogTag (cv_utils_logging_LogTag_LogTag_const_char_X_LogLevel)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/va_intel.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils', 'cv.utils.logging', 'cv.utils.logging.internal', 'cv.va_intel', 'cv.va_intel.ocl']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
['typedef VADisplay', 'void*', '', [], None, '']
parse_name: typedef VADisplay with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:VADisplay namespace: classpath: classname: name:VADisplay
Registering an unknown type: VADisplay

--- Incoming ---
['typedef VASurfaceID', 'unsigned int', '', [], None, '']
parse_name: typedef VASurfaceID with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:VASurfaceID namespace: classpath: classname: name:VASurfaceID
Registering an unknown type: VASurfaceID

--- Incoming ---
[   'cv.va_intel.ocl.initializeContextFromVA',
    'Context&',
    [],
    [['VADisplay', 'display', '', []], ['bool', 'tryInterop', 'true', []]],
    None,
    '@brief Creates OpenCL context from VA.\n'
    '@param display    - VADisplay for which CL interop should be '
    'established.\n'
    '@param tryInterop - try to set up for interoperability, if true; set up '
    'for use slow copy if false.\n'
    '@return Returns reference to OpenCL Context']
parse_name: cv.va_intel.ocl.initializeContextFromVA with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:cv::va_intel::ocl::initializeContextFromVA namespace:cv::va_intel::ocl classpath: classname: name:initializeContextFromVA
register (function) initializeContextFromVA (cv_va_intel_ocl_initializeContextFromVA_void_X_bool)

--- Incoming ---
[   'cv.va_intel.convertToVASurface',
    'void',
    [],
    [   ['VADisplay', 'display', '', []],
        ['InputArray', 'src', '', []],
        ['VASurfaceID', 'surface', '', []],
        ['Size', 'size', '', []]],
    None,
    '@brief Converts InputArray to VASurfaceID object.\n'
    '@param display - VADisplay object.\n'
    '@param src     - source InputArray.\n'
    '@param surface - destination VASurfaceID object.\n'
    '@param size    - size of image represented by VASurfaceID object.']
parse_name: cv.va_intel.convertToVASurface with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:cv::va_intel::convertToVASurface namespace:cv::va_intel classpath: classname: name:convertToVASurface
register (function) convertToVASurface (cv_va_intel_convertToVASurface_void_X__InputArray_unsigned_int_Size)

--- Incoming ---
[   'cv.va_intel.convertFromVASurface',
    'void',
    [],
    [   ['VADisplay', 'display', '', []],
        ['VASurfaceID', 'surface', '', []],
        ['Size', 'size', '', []],
        ['OutputArray', 'dst', '', []]],
    None,
    '@brief Converts VASurfaceID object to OutputArray.\n'
    '@param display - VADisplay object.\n'
    '@param surface - source VASurfaceID object.\n'
    '@param size    - size of image represented by VASurfaceID object.\n'
    '@param dst     - destination OutputArray.']
parse_name: cv.va_intel.convertFromVASurface with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:cv::va_intel::convertFromVASurface namespace:cv::va_intel classpath: classname: name:convertFromVASurface
register (function) convertFromVASurface (cv_va_intel_convertFromVASurface_void_X_unsigned_int_Size__OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/core/vsx_utils.hpp ================


Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.debug_build_guard', 'cv.detail', 'cv.directx', 'cv.directx.ocl', 'cv.instr', 'cv.internal', 'cv.ipp', 'cv.ocl', 'cv.ocl.internal', 'cv.ogl', 'cv.samples', 'cv.traits', 'cv.traits.internal', 'cv.utils', 'cv.utils.logging', 'cv.utils.logging.internal', 'cv.va_intel', 'cv.va_intel.ocl']
Comment: {'core': '\n@defgroup core Core functionality\n@{\n@defgroup core_basic Basic structures\n@defgroup core_c C structures and operations\n@{\n@defgroup core_c_glue Connections with C++\n@}\n@defgroup core_array Operations on arrays\n@defgroup core_async Asynchronous API\n@defgroup core_xml XML/YAML Persistence\n@defgroup core_cluster Clustering\n@defgroup core_utils Utility and system functions and macros\n@{\n@defgroup core_utils_sse SSE utilities\n@defgroup core_utils_neon NEON utilities\n@defgroup core_utils_softfloat Softfloat support\n@defgroup core_utils_samples Utility functions for OpenCV samples\n@}\n@defgroup core_opengl OpenGL interoperability\n@defgroup core_ipp Intel IPP Asynchronous C/C++ Converters\n@defgroup core_optim Optimization Algorithms\n@defgroup core_directx DirectX interoperability\n@defgroup core_eigen Eigen support\n@defgroup core_opencl OpenCL support\n@defgroup core_va_intel Intel VA-API/OpenCL (CL-VA) interoperability\n@defgroup core_hal Hardware Acceleration Layer\n@{\n@defgroup core_hal_functions Functions\n@defgroup core_hal_interface Interface\n@defgroup core_hal_intrin Universal intrinsics\n@{\n@defgroup core_hal_intrin_impl Private implementation helpers\n@}\n@defgroup core_lowlevel_api Low-level API for external libraries / plugins\n@}\n@}\n\n'}

--- Incoming ---
[   'typedef vec_uchar16',
    '__vector unsigned char',
    '',
    [],
    None,
    '@addtogroup core_utils_vsx\n@{']
parse_name: typedef vec_uchar16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_uchar16 namespace: classpath: classname: name:vec_uchar16
Registering an unknown type: __vector unsigned char

--- Incoming ---
['typedef vec_char16', '__vector signed char', '', [], None, '']
parse_name: typedef vec_char16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_char16 namespace: classpath: classname: name:vec_char16
Registering an unknown type: __vector signed char

--- Incoming ---
['typedef vec_ushort8', '__vector unsigned short', '', [], None, '']
parse_name: typedef vec_ushort8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_ushort8 namespace: classpath: classname: name:vec_ushort8
Registering an unknown type: __vector unsigned short

--- Incoming ---
['typedef vec_short8', '__vector signed short', '', [], None, '']
parse_name: typedef vec_short8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_short8 namespace: classpath: classname: name:vec_short8
Registering an unknown type: __vector signed short

--- Incoming ---
['typedef vec_uint4', '__vector unsigned int', '', [], None, '']
parse_name: typedef vec_uint4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_uint4 namespace: classpath: classname: name:vec_uint4
Registering an unknown type: __vector unsigned int

--- Incoming ---
['typedef vec_int4', '__vector signed int', '', [], None, '']
parse_name: typedef vec_int4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_int4 namespace: classpath: classname: name:vec_int4
Registering an unknown type: __vector signed int

--- Incoming ---
['typedef vec_float4', '__vector float', '', [], None, '']
parse_name: typedef vec_float4 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_float4 namespace: classpath: classname: name:vec_float4
Registering an unknown type: __vector float

--- Incoming ---
['typedef vec_udword2', '__vector unsigned long long', '', [], None, '']
parse_name: typedef vec_udword2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_udword2 namespace: classpath: classname: name:vec_udword2
Registering an unknown type: __vector unsigned long long

--- Incoming ---
['typedef vec_dword2', '__vector signed long long', '', [], None, '']
parse_name: typedef vec_dword2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_dword2 namespace: classpath: classname: name:vec_dword2
Registering an unknown type: __vector signed long long

--- Incoming ---
['typedef vec_double2', '__vector double', '', [], None, '']
parse_name: typedef vec_double2 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:vec_double2 namespace: classpath: classname: name:vec_double2
Registering an unknown type: __vector double

--- Incoming ---
[   'const VSX_IMPL_MULH_P16',
    '0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30',
    [],
    [],
    '']
parse_name: const VSX_IMPL_MULH_P16 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:VSX_IMPL_MULH_P16 namespace: classpath: classname: name:VSX_IMPL_MULH_P16
ignored: CONST VSX_IMPL_MULH_P16=0, 16, 2, 18, 4, 20, 6, 22, 8, 24, 10, 26, 12, 28, 14, 30

--- Incoming ---
[   'const VSX_IMPL_MULH_P8',
    '0, 1, 16, 17, 4, 5, 20, 21, 8, 9, 24, 25, 12, 13, 28, 29',
    [],
    [],
    '']
parse_name: const VSX_IMPL_MULH_P8 with ['cv', 'cv::Error', 'cv::cuda', 'cv::cudev', 'cv::debug_build_guard', 'cv::detail', 'cv::directx', 'cv::directx::ocl', 'cv::instr', 'cv::internal', 'cv::ipp', 'cv::ocl', 'cv::ocl::internal', 'cv::ogl', 'cv::samples', 'cv::traits', 'cv::traits::internal', 'cv::utils', 'cv::utils::logging', 'cv::utils::logging::internal', 'cv::va_intel', 'cv::va_intel::ocl'] -> fullname:VSX_IMPL_MULH_P8 namespace: classpath: classname: name:VSX_IMPL_MULH_P8
ignored: CONST VSX_IMPL_MULH_P8=0, 1, 16, 17, 4, 5, 20, 21, 8, 9, 24, 25, 12, 13, 28, 29


===== Generating... =====
Generating func _Affine3
  ignored: return type class Unknown[template<typename T>] is ignored
Generating func _Affine3_Mat3_Vec3
  ignored: return type class Unknown[template<typename T>] is ignored
Generating func _Affine3_Mat4
  ignored: return type class Unknown[template<typename T>] is ignored
Generating func _Affine3_Mat_Vec3
  ignored: return type class Unknown[template<typename T>] is ignored
Generating func _Affine3_Vec3_Vec3
  ignored: return type class Unknown[template<typename T>] is ignored
Generating func _Affine3_float_type*
  ignored: return type class Unknown[template<typename T>] is ignored
Generating func _mm_deinterleave_epi16___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_deinterleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_deinterleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_deinterleave_epi8___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_deinterleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_deinterleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_deinterleave_ps___m128___m128___m128___m128
  ignored: can not map type Unknown[__m128] yet
Generating func _mm_deinterleave_ps___m128___m128___m128___m128___m128___m128
  ignored: can not map type Unknown[__m128] yet
Generating func _mm_deinterleave_ps___m128___m128___m128___m128___m128___m128___m128___m128
  ignored: can not map type Unknown[__m128] yet
Generating func _mm_interleave_epi16___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_interleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_interleave_epi16___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_interleave_epi8___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_interleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_interleave_epi8___m128i___m128i___m128i___m128i___m128i___m128i___m128i___m128i
  ignored: can not map type Unknown[__m128i] yet
Generating func _mm_interleave_ps___m128___m128___m128___m128
  ignored: can not map type Unknown[__m128] yet
Generating func _mm_interleave_ps___m128___m128___m128___m128___m128___m128
  ignored: can not map type Unknown[__m128] yet
Generating func _mm_interleave_ps___m128___m128___m128___m128___m128___m128___m128___m128
  ignored: can not map type Unknown[__m128] yet
Generating func cvCeil_softdouble
  ignored: can not map type Unknown[cv::softdouble] yet
Generating func cvCeil_softfloat
  ignored: can not map type Unknown[cv::softfloat] yet
Generating func cvFloor_softdouble
  ignored: can not map type Unknown[cv::softdouble] yet
Generating func cvFloor_softfloat
  ignored: can not map type Unknown[cv::softfloat] yet
Generating func cvRound64_softdouble
  ignored: can not map type Unknown[cv::softdouble] yet
Generating func cvRound_softdouble
  ignored: can not map type Unknown[cv::softdouble] yet
Generating func cvRound_softfloat
  ignored: can not map type Unknown[cv::softfloat] yet
Generating func cvTrunc_softdouble
  ignored: can not map type Unknown[cv::softdouble] yet
Generating func cvTrunc_softfloat
  ignored: can not map type Unknown[cv::softfloat] yet
Generating func cv_"C"_int_*ErrorCallback)( int_const_char_X_const_char_X_const_char_X_int_void_X
  ignored: return type class Unknown[extern "C" typedef] is ignored
Generating func cv_Cholesky_double_X_size_t_int_double_X_size_t_int
Generating func cv_Cholesky_float_X_size_t_int_float_X_size_t_int
Generating func cv_LUT__InputArray__InputArray__OutputArray
Generating func cv_LU_double_X_size_t_int_double_X_size_t_int
Generating func cv_LU_float_X_size_t_int_float_X_size_t_int
Generating func cv_Mahalanobis__InputArray__InputArray__InputArray
Generating func cv_PCABackProject__InputArray__InputArray__InputArray__OutputArray
Generating func cv_PCACompute__InputArray__InputOutputArray__OutputArray__OutputArray_double
Generating func cv_PCACompute__InputArray__InputOutputArray__OutputArray__OutputArray_int
Generating func cv_PCACompute__InputArray__InputOutputArray__OutputArray_double
Generating func cv_PCACompute__InputArray__InputOutputArray__OutputArray_int
Generating func cv_PCAProject__InputArray__InputArray__InputArray__OutputArray
Generating func cv_PSNR__InputArray__InputArray_double
Generating func cv_SVBackSubst__InputArray__InputArray__InputArray__InputArray__OutputArray
Generating func cv_SVDecomp__InputArray__OutputArray__OutputArray__OutputArray_int
Generating func cv_Vec3d_operator_*_Affine3d_Vec3d
  ignored: return type class RawPtr[Unknown[Vec3d operator]] is ignored
Generating func cv_Vec3f_operator_*_Affine3f_Vec3f
  ignored: return type class RawPtr[Unknown[Vec3f operator]] is ignored
Generating func cv__Complex
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Complex__Tp__Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point3_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point3__Point3_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point3__Point3_&& pt) CV_NOEXCEPT : x(std_move(pt.x))y(std_move(pt.y))z(std_move(pt.z)
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point3__Point_<_Tp>
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point3___Tp__Tp__Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point__Point_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point__Point_&& pt) CV_NOEXCEPT : x(std_move(pt.x))y(std_move(pt.y)
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point__Size_<_Tp>
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Point___Tp__Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Rect_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Rect__Rect_<_Tp>
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Rect__Rect_<_Tp>&& r) CV_NOEXCEPT : x(std_move(r.x))y(std_move(r.y))width(std_move(r.width))height(std_move(r.height)
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Rect___Tp__Tp__Tp__Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Scalar_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Scalar__Scalar_<_Tp>&
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Scalar___Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Scalar___Tp__Tp__Tp__Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Size_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Size__Point_<_Tp>
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Size__Size_
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Size__Size_&& sz) CV_NOEXCEPT : width(std_move(sz.width))height(std_move(sz.height)
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv__Size___Tp__Tp
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv_abs_Complex<_Tp>
  ignored: return type class Unknown[template<typename _Tp> double] is ignored
Generating func cv_abs_Mat
Generating func cv_abs_MatExpr
Generating func cv_abs_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_abs_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_absdiff__InputArray__InputArray__OutputArray
Generating func cv_addImpl_int_const_char_X
  ignored: ignored by rename table
Generating func cv_addWeighted__InputArray_double__InputArray_double_double__OutputArray_int
Generating func cv_add__InputArray__InputArray__OutputArray__InputArray_int
Generating func cv_alignPtr__Tp*_int
  ignored: return type class RawPtr[Unknown[template<typename _Tp> _Tp]] is ignored
Generating func cv_alignSize_size_t_int
Generating func cv_batchDistance__InputArray__InputArray__OutputArray_int__OutputArray_int_int__InputArray_int_bool
Generating func cv_bitwise_and__InputArray__InputArray__OutputArray__InputArray
Generating func cv_bitwise_not__InputArray__OutputArray__InputArray
Generating func cv_bitwise_or__InputArray__InputArray__OutputArray__InputArray
Generating func cv_bitwise_xor__InputArray__InputArray__OutputArray__InputArray
Generating func cv_borderInterpolate_int_int_int
Generating func cv_calcCovarMatrix__InputArray__OutputArray__InputOutputArray_int_int
Generating func cv_calcCovarMatrix_const_Mat_int_Mat_Mat_int_int
  ignored: ignored by rename table
Generating func cv_cartToPolar__InputArray__InputArray__OutputArray__OutputArray_bool
Generating func cv_cbrt_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_checkHardwareSupport_int
Generating func cv_checkRange__InputArray_bool_Point_X_double_double
Generating func cv_compare__InputArray__InputArray__OutputArray_int
Generating func cv_completeSymm__InputOutputArray_bool
Generating func cv_convertFp16__InputArray__OutputArray
Generating func cv_convertScaleAbs__InputArray__OutputArray_double_double
Generating func cv_copyMakeBorder__InputArray__OutputArray_int_int_int_int_int_Scalar
Generating func cv_copyTo__InputArray__OutputArray__InputArray
Generating func cv_cos_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_countNonZero__InputArray
Generating func cv_cubeRoot_float
Generating func cv_cv_abs__Tp
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_cv_abs_schar
Generating func cv_cv_abs_short
  ignored: ignored by rename table
Generating func cv_cv_abs_uchar
  ignored: ignored by rename table
Generating func cv_cv_abs_ushort
Generating func cv_dct__InputArray__OutputArray_int
Generating func cv_depthToString_int
Generating func cv_detail_check_failed_MatChannels_int_CheckContext
Generating func cv_detail_check_failed_MatChannels_int_int_CheckContext
Generating func cv_detail_check_failed_MatDepth_int_CheckContext
Generating func cv_detail_check_failed_MatDepth_int_int_CheckContext
Generating func cv_detail_check_failed_MatType_int_CheckContext
Generating func cv_detail_check_failed_MatType_int_int_CheckContext
Generating func cv_detail_check_failed_auto_Size_<int>_CheckContext
  ignored: can not map type Unknown[Size_<int>] yet
Generating func cv_detail_check_failed_auto_Size_<int>_Size_<int>_CheckContext
  ignored: can not map type Unknown[Size_<int>] yet
Generating func cv_detail_check_failed_auto_double_CheckContext
Generating func cv_detail_check_failed_auto_double_double_CheckContext
Generating func cv_detail_check_failed_auto_float_CheckContext
Generating func cv_detail_check_failed_auto_float_float_CheckContext
Generating func cv_detail_check_failed_auto_int_CheckContext
Generating func cv_detail_check_failed_auto_int_int_CheckContext
Generating func cv_detail_check_failed_auto_size_t_CheckContext
Generating func cv_detail_check_failed_auto_size_t_size_t_CheckContext
Generating func cv_detail_depthToString__int
  ignored: ignored by rename table
Generating func cv_detail_typeToString__int
  ignored: ignored by rename table
Generating func cv_determinant__InputArray
Generating func cv_dft__InputArray__OutputArray_int_int
Generating func cv_directx_convertFromD3D10Texture2D_ID3D10Texture2D*__OutputArray
  ignored: can not map type RawPtr[Unknown[ID3D10Texture2D]] yet
Generating func cv_directx_convertFromD3D11Texture2D_ID3D11Texture2D*__OutputArray
  ignored: can not map type RawPtr[Unknown[ID3D11Texture2D]] yet
Generating func cv_directx_convertFromDirect3DSurface9_IDirect3DSurface9*__OutputArray_void_X
  ignored: can not map type RawPtr[Unknown[IDirect3DSurface9]] yet
Generating func cv_directx_convertToD3D10Texture2D__InputArray_ID3D10Texture2D*
  ignored: can not map type RawPtr[Unknown[ID3D10Texture2D]] yet
Generating func cv_directx_convertToD3D11Texture2D__InputArray_ID3D11Texture2D*
  ignored: can not map type RawPtr[Unknown[ID3D11Texture2D]] yet
Generating func cv_directx_convertToDirect3DSurface9__InputArray_IDirect3DSurface9*_void_X
  ignored: can not map type RawPtr[Unknown[IDirect3DSurface9]] yet
Generating func cv_directx_getTypeFromD3DFORMAT_int
Generating func cv_directx_getTypeFromDXGI_FORMAT_int
Generating func cv_directx_ocl_initializeContextFromD3D10Device_ID3D10Device*
  ignored: return type class Unknown[Context] is ignored
Generating func cv_directx_ocl_initializeContextFromD3D11Device_ID3D11Device*
  ignored: return type class Unknown[Context] is ignored
Generating func cv_directx_ocl_initializeContextFromDirect3DDevice9Ex_IDirect3DDevice9Ex*
  ignored: return type class Unknown[Context] is ignored
Generating func cv_directx_ocl_initializeContextFromDirect3DDevice9_IDirect3DDevice9*
  ignored: return type class Unknown[Context] is ignored
Generating func cv_divUp_int_unsigned_int
Generating func cv_divUp_size_t_unsigned_int
Generating func cv_divide__InputArray__InputArray__OutputArray_double_int
Generating func cv_divide_double__InputArray__OutputArray_int
Generating func cv_eigenNonSymmetric__InputArray__OutputArray__OutputArray
Generating func cv_eigen__InputArray__OutputArray__OutputArray
Generating func cv_error_Exception
  ignored: can not map type Unknown[Exception] yet
Generating func cv_error_int_String_const_char_X_const_char_X_int
Generating func cv_exp__InputArray__OutputArray
Generating func cv_exp_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_exp_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_extractChannel__InputArray__OutputArray_int
Generating func cv_fastAtan2_float_float
Generating func cv_findNonZero__InputArray__OutputArray
Generating func cv_flip__InputArray__OutputArray_int
Generating func cv_gemm__InputArray__InputArray_double__InputArray_double__OutputArray_int
Generating func cv_getBuildInformation
Generating func cv_getCPUFeaturesLine
Generating func cv_getCPUTickCount
Generating func cv_getElemSize_int
Generating func cv_getHardwareFeatureName_int
Generating func cv_getImpl_VectorOfint_VectorOfString
  ignored: ignored by rename table
Generating func cv_getNumThreads
Generating func cv_getNumberOfCPUs
Generating func cv_getOptimalDFTSize_int
Generating func cv_getThreadNum
Generating func cv_getTickCount
Generating func cv_getTickFrequency
Generating func cv_getVersionMajor
Generating func cv_getVersionMinor
Generating func cv_getVersionRevision
Generating func cv_getVersionString
Generating func cv_glob_String_VectorOfString_bool
Generating func cv_haveOpenVX
Generating func cv_hconcat__InputArray__InputArray__OutputArray
Generating func cv_hconcat__InputArray__OutputArray
Generating func cv_hconcat_const_Mat_size_t__OutputArray
  ignored: ignored by rename table
Generating func cv_idct__InputArray__OutputArray_int
Generating func cv_idft__InputArray__OutputArray_int_int
Generating func cv_inRange__InputArray__InputArray__InputArray__OutputArray
Generating func cv_insertChannel__InputArray__InputOutputArray_int
Generating func cv_instr_getFlags
Generating func cv_instr_getTrace
  ignored: return type class RawPtr[Unknown[InstrNode]] is ignored
Generating func cv_instr_resetTrace
Generating func cv_instr_setFlags_FLAGS
Generating func cv_instr_setFlags_int
Generating func cv_instr_setUseInstrumentation_bool
Generating func cv_instr_useInstrumentation
Generating func cv_invert__InputArray__OutputArray_int
Generating func cv_ipp_getIppErrorLocation
Generating func cv_ipp_getIppFeatures
Generating func cv_ipp_getIppStatus
Generating func cv_ipp_getIppVersion
Generating func cv_ipp_setIppStatus_int_char * const_char * const_int
  ignored: can not map type Unknown[char * const] yet
Generating func cv_ipp_setUseIPP_NE_bool
Generating func cv_ipp_setUseIPP_NotExact_bool
Generating func cv_ipp_setUseIPP_bool
Generating func cv_ipp_useIPP
Generating func cv_ipp_useIPP_NE
Generating func cv_ipp_useIPP_NotExact
Generating func cv_kmeans__InputArray_int__InputOutputArray_TermCriteria_int_int__OutputArray
Generating func cv_log__InputArray__OutputArray
Generating func cv_log_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_log_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_magnitude__InputArray__InputArray__OutputArray
Generating func cv_max_Mat_Mat
Generating func cv_max_Mat_Mat_Mat
Generating func cv_max_Mat_double
Generating func cv_max_UMat_UMat_UMat
Generating func cv_max__InputArray__InputArray__OutputArray
Generating func cv_max_double_Mat
Generating func cv_max_softdouble_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_max_softfloat_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_meanStdDev__InputArray__OutputArray__OutputArray__InputArray
Generating func cv_mean__InputArray__InputArray
Generating func cv_merge__InputArray__OutputArray
Generating func cv_merge_const_Mat_size_t__OutputArray
  ignored: ignored by rename table
Generating func cv_minMaxIdx__InputArray_double_X_double_X_int_X_int_X__InputArray
Generating func cv_minMaxLoc_SparseMat_double_X_double_X_int_X_int_X
Generating func cv_minMaxLoc__InputArray_double_X_double_X_Point_X_Point_X__InputArray
Generating func cv_min_Mat_Mat
Generating func cv_min_Mat_Mat_Mat
Generating func cv_min_Mat_double
Generating func cv_min_UMat_UMat_UMat
Generating func cv_min__InputArray__InputArray__OutputArray
Generating func cv_min_double_Mat
Generating func cv_min_softdouble_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_min_softfloat_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_mixChannels__InputArray__InputOutputArray_VectorOfint
Generating func cv_mixChannels__InputArray__InputOutputArray_const_int_X_size_t
  ignored: ignored by rename table
Generating func cv_mixChannels_const_Mat_size_t_Mat_size_t_const_int_X_size_t
  ignored: ignored by rename table
Generating func cv_mulAdd_softdouble_softdouble_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_mulAdd_softfloat_softfloat_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_mulSpectrums__InputArray__InputArray__OutputArray_int_bool
Generating func cv_mulTransposed__InputArray__OutputArray_bool__InputArray_double_int
Generating func cv_multiply__InputArray__InputArray__OutputArray_double_int
Generating func cv_noArray
Generating func cv_normL1_const_float_X_const_float_X_int
Generating func cv_normL1_const_uchar_X_const_uchar_X_int
Generating func cv_normL2Sqr_<_double_>_Point2d
  ignored: return type class Unknown[template<> double] is ignored
Generating func cv_normL2Sqr_<_double_>_Point2f
  ignored: return type class Unknown[template<> double] is ignored
Generating func cv_normL2Sqr_<_double_>_Point2i
  ignored: return type class Unknown[template<> double] is ignored
Generating func cv_normL2Sqr_<_float_>_Point2f
  ignored: return type class Unknown[template<> float] is ignored
Generating func cv_normL2Sqr_<_int64_>_Point2l
  ignored: return type class Unknown[template<> int64] is ignored
Generating func cv_normL2Sqr_<_int_>_Point2i
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_normL2Sqr_Point2d
  ignored: return type class Unknown[template<typename _AccTp> _AccTp] is ignored
Generating func cv_normL2Sqr_Point2f
  ignored: return type class Unknown[template<typename _AccTp> _AccTp] is ignored
Generating func cv_normL2Sqr_Point2i
  ignored: return type class Unknown[template<typename _AccTp> _AccTp] is ignored
Generating func cv_normL2Sqr_Point2l
  ignored: return type class Unknown[template<typename _AccTp> _AccTp] is ignored
Generating func cv_normL2Sqr_const_float_X_const_float_X_int
Generating func cv_norm_Point3_<_Tp>
  ignored: return type class Unknown[template<typename _Tp> double] is ignored
Generating func cv_norm_Point_<_Tp>
  ignored: return type class Unknown[template<typename _Tp> double] is ignored
Generating func cv_norm_SparseMat_int
Generating func cv_norm__InputArray__InputArray_int__InputArray
Generating func cv_norm__InputArray_int__InputArray
Generating func cv_normalize_SparseMat_SparseMat_double_int
Generating func cv_normalize__InputArray__InputOutputArray_double_double_int_int__InputArray
Generating func cv_ocl_attachContext_String_void_X_void_X_void_X
Generating func cv_ocl_buildOptionsAddMatrixDescription_String_String__InputArray
Generating func cv_ocl_checkOptimalVectorWidth_const_int_X__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray_OclVectorStrategy
Generating func cv_ocl_convertFromBuffer_void_X_size_t_int_int_int_UMat
Generating func cv_ocl_convertFromImage_void_X_UMat
Generating func cv_ocl_convertTypeStr_int_int_int_char_X
Generating func cv_ocl_finish
Generating func cv_ocl_getOpenCLAllocator
  ignored: return type class RawPtr[Unknown[MatAllocator]] is ignored
Generating func cv_ocl_getOpenCLErrorString_int
Generating func cv_ocl_getPlatfomsInfo_VectorOfPlatformInfo
Generating func cv_ocl_haveAmdBlas
Generating func cv_ocl_haveAmdFft
Generating func cv_ocl_haveOpenCL
Generating func cv_ocl_haveSVM
Generating func cv_ocl_initializeContextFromHandle_Context_void_X_void_X_void_X
  ignored: can not map type Unknown[Context] yet
Generating func cv_ocl_internal_isCLBuffer_UMat
  ignored: ignored by rename table
Generating func cv_ocl_internal_isOpenCLForced
  ignored: ignored by rename table
Generating func cv_ocl_internal_isPerformanceCheckBypassed
  ignored: ignored by rename table
Generating func cv_ocl_kernelToStr__InputArray_int_const_char_X
Generating func cv_ocl_memopTypeToStr_int
Generating func cv_ocl_predictOptimalVectorWidthMax__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray
Generating func cv_ocl_predictOptimalVectorWidth__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray__InputArray_OclVectorStrategy
Generating func cv_ocl_setUseOpenCL_bool
Generating func cv_ocl_typeToStr_int
Generating func cv_ocl_useOpenCL
Generating func cv_ocl_vecopTypeToStr_int
Generating func cv_operator_std_string_const
  ignored: ignored by rename table
Generating func cv_operator_std_vector<_Tp>_const
  ignored: return type class Unknown[template<typename _Tp>] is ignored
Generating func cv_parallel_for__Range_ParallelLoopBody_double
Generating func cv_parallel_for__Range_std_function<void(Range&)>_double
  ignored: can not map type Unknown[std::function<void(Range&)>] yet
Generating func cv_patchNaNs__InputOutputArray_double
Generating func cv_perspectiveTransform__InputArray__OutputArray__InputArray
Generating func cv_phase__InputArray__InputArray__OutputArray_bool
Generating func cv_polarToCart__InputArray__InputArray__OutputArray__OutputArray_bool
Generating func cv_pow__InputArray_double__OutputArray
Generating func cv_pow_softdouble_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_pow_softfloat_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_randShuffle__InputOutputArray_double_RNG*
  ignored: can not map type RawPtr[Unknown[RNG]] yet
Generating func cv_randn__InputOutputArray__InputArray__InputArray
Generating func cv_randu__InputOutputArray__InputArray__InputArray
Generating func cv_rawInOut__Tp
  ignored: return type class Unknown[template<typename _Tp> _InputOutputArray] is ignored
Generating func cv_rawIn__Tp
  ignored: return type class Unknown[template<typename _Tp> _InputArray] is ignored
Generating func cv_rawOut__Tp
  ignored: return type class Unknown[template<typename _Tp> _OutputArray] is ignored
Generating func cv_read_FileNode_DMatch_DMatch
Generating func cv_read_FileNode_KeyPoint_KeyPoint
Generating func cv_read_FileNode_Mat_Mat
Generating func cv_read_FileNode_Range_Range
Generating func cv_read_FileNode_SparseMat_SparseMat
Generating func cv_read_FileNode_VectorOfDMatch
Generating func cv_read_FileNode_VectorOfDMatch_VectorOfDMatch
Generating func cv_read_FileNode_VectorOfKeyPoint
Generating func cv_read_FileNode_VectorOfKeyPoint_VectorOfKeyPoint
Generating func cv_read_FileNode_bool_bool
Generating func cv_read_FileNode_double_double
Generating func cv_read_FileNode_float_float
Generating func cv_read_FileNode_int_int
Generating func cv_read_FileNode_schar_schar
  ignored: ignored by rename table
Generating func cv_read_FileNode_short_short
Generating func cv_read_FileNode_std_string_std_string
Generating func cv_read_FileNode_uchar_uchar
Generating func cv_read_FileNode_ushort_ushort
Generating func cv_redirectError_ErrorCallback_void_X_void**
  ignored: return type class Unknown[ErrorCallback] is ignored
Generating func cv_reduce__InputArray__OutputArray_int_int_int
Generating func cv_repeat_Mat_int_int
Generating func cv_repeat__InputArray_int_int__OutputArray
Generating func cv_rotate__InputArray__OutputArray_int
Generating func cv_roundUp_int_unsigned_int
Generating func cv_roundUp_size_t_unsigned_int
Generating func cv_samples_addSamplesDataSearchPath_String
Generating func cv_samples_addSamplesDataSearchSubDirectory_String
Generating func cv_samples_findFileOrKeep_String_bool
Generating func cv_samples_findFile_String_bool_bool
Generating func cv_saturate_cast_<_float16_t_>_double
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_float
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_int
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_int64
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_schar
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_short
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_uchar
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_uint64
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_unsigned
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_float16_t_>_ushort
  ignored: return type class Unknown[template<> float16_t] is ignored
Generating func cv_saturate_cast_<_int64_>_uint64
  ignored: return type class Unknown[template<> int64] is ignored
Generating func cv_saturate_cast_<_int64_t_>_softdouble
  ignored: return type class Unknown[template<> int64_t] is ignored
Generating func cv_saturate_cast_<_int64_t_>_softfloat
  ignored: return type class Unknown[template<> int64_t] is ignored
Generating func cv_saturate_cast_<_int_>_double
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_int_>_float
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_int_>_int64
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_int_>_softdouble
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_int_>_softfloat
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_int_>_uint64
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_int_>_unsigned
  ignored: return type class Unknown[template<> int] is ignored
Generating func cv_saturate_cast_<_schar_>_double
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_float
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_int
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_int64
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_short
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_softdouble
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_softfloat
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_uchar
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_uint64
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_unsigned
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_schar_>_ushort
  ignored: return type class Unknown[template<> schar] is ignored
Generating func cv_saturate_cast_<_short_>_double
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_float
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_int
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_int64
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_softdouble
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_softfloat
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_uint64
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_unsigned
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_short_>_ushort
  ignored: return type class Unknown[template<> short] is ignored
Generating func cv_saturate_cast_<_uchar_>_double
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_float
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_int
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_int64
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_schar
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_short
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_softdouble
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_softfloat
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_uint64
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_unsigned
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uchar_>_ushort
  ignored: return type class Unknown[template<> uchar] is ignored
Generating func cv_saturate_cast_<_uint64_>_int
  ignored: return type class Unknown[template<> uint64] is ignored
Generating func cv_saturate_cast_<_uint64_>_int64
  ignored: return type class Unknown[template<> uint64] is ignored
Generating func cv_saturate_cast_<_uint64_>_schar
  ignored: return type class Unknown[template<> uint64] is ignored
Generating func cv_saturate_cast_<_uint64_>_short
  ignored: return type class Unknown[template<> uint64] is ignored
Generating func cv_saturate_cast_<_uint64_t_>_softdouble
  ignored: return type class Unknown[template<> uint64_t] is ignored
Generating func cv_saturate_cast_<_uint64_t_>_softfloat
  ignored: return type class Unknown[template<> uint64_t] is ignored
Generating func cv_saturate_cast_<_unsigned_>_double
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_float
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_int
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_int64
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_schar
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_short
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_softdouble
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_softfloat
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_unsigned_>_uint64
  ignored: return type class Unknown[template<> unsigned] is ignored
Generating func cv_saturate_cast_<_ushort_>_double
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_float
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_int
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_int64
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_schar
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_short
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_softdouble
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_softfloat
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_uint64
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_<_ushort_>_unsigned
  ignored: return type class Unknown[template<> ushort] is ignored
Generating func cv_saturate_cast_double
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_float
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_float16_t
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_int
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_int64
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_schar
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_short
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_softdouble
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_softfloat
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_uchar
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_uint64
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_unsigned
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_saturate_cast_ushort
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_scaleAdd__InputArray_double__InputArray__OutputArray
Generating func cv_setBreakOnError_bool
Generating func cv_setIdentity__InputOutputArray_Scalar
Generating func cv_setImpl_int
  ignored: ignored by rename table
Generating func cv_setNumThreads_int
Generating func cv_setRNGSeed_int
Generating func cv_setUseCollection_bool
  ignored: ignored by rename table
Generating func cv_setUseOpenVX_bool
Generating func cv_setUseOptimized_bool
Generating func cv_sin_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_solveCubic__InputArray__OutputArray
Generating func cv_solveLP__InputArray__InputArray__OutputArray
Generating func cv_solvePoly__InputArray__OutputArray_int
Generating func cv_solve__InputArray__InputArray__OutputArray_int
Generating func cv_sortIdx__InputArray__OutputArray_int
Generating func cv_sort__InputArray__OutputArray_int
Generating func cv_split_Mat_Mat
  ignored: ignored by rename table
Generating func cv_split__InputArray__OutputArray
Generating func cv_sqrt__InputArray__OutputArray
Generating func cv_sqrt_softdouble
  ignored: return type class Unknown[softdouble] is ignored
Generating func cv_sqrt_softfloat
  ignored: return type class Unknown[softfloat] is ignored
Generating func cv_subtract__InputArray__InputArray__OutputArray__InputArray_int
Generating func cv_sum__InputArray
Generating func cv_swap_Mat_Mat
Generating func cv_swap_UMat_UMat
Generating func cv_tempfile_const_char_X
Generating func cv_theRNG
  ignored: return type class Unknown[RNG] is ignored
Generating func cv_trace__InputArray
Generating func cv_transform__InputArray__OutputArray__InputArray
Generating func cv_transpose__InputArray__OutputArray
Generating func cv_typeToString_int
Generating func cv_useCollection
  ignored: ignored by rename table
Generating func cv_useOpenVX
Generating func cv_useOptimized
Generating func cv_utils_dumpInputArrayOfArrays__InputArray
Generating func cv_utils_dumpInputArray__InputArray
Generating func cv_utils_dumpInputOutputArrayOfArrays__InputOutputArray
Generating func cv_utils_dumpInputOutputArray__InputOutputArray
Generating func cv_utils_getThreadID
Generating func cv_utils_logging_getLogLevel
Generating func cv_utils_logging_getLogTagLevel_const_char_X
Generating func cv_utils_logging_internal_getGlobalLogTag
Generating func cv_utils_logging_internal_writeLogMessageEx_LogLevel_const_char_X_const_char_X_int_const_char_X_const_char_X
Generating func cv_utils_logging_internal_writeLogMessage_LogLevel_const_char_X
Generating func cv_utils_logging_registerLogTag_LogTag
Generating func cv_utils_logging_setLogLevel_LogLevel
Generating func cv_utils_logging_setLogTagLevel_const_char_X_LogLevel
Generating func cv_utils_testAsyncArray__InputArray
Generating func cv_utils_testAsyncException
Generating func cv_va_intel_convertFromVASurface_void_X_unsigned_int_Size__OutputArray
Generating func cv_va_intel_convertToVASurface_void_X__InputArray_unsigned_int_Size
Generating func cv_va_intel_ocl_initializeContextFromVA_void_X_bool
  ignored: return type class Unknown[Context] is ignored
Generating func cv_vconcat__InputArray__InputArray__OutputArray
Generating func cv_vconcat__InputArray__OutputArray
Generating func cv_vconcat_const_Mat_size_t__OutputArray
  ignored: ignored by rename table
Generating func cv_vrecp_f32_float32x2_t
  ignored: return type class Unknown[float32x2_t] is ignored
Generating func cv_vrecpq_f32_float32x4_t
  ignored: return type class Unknown[float32x4_t] is ignored
Generating func cv_vrnd_s32_f32_float32x2_t
  ignored: return type class Unknown[int32x2_t] is ignored
Generating func cv_vrnd_u32_f32_float32x2_t
  ignored: return type class Unknown[uint32x2_t] is ignored
Generating func cv_vrndq_s32_f32_float32x4_t
  ignored: return type class Unknown[int32x4_t] is ignored
Generating func cv_vrndq_u32_f32_float32x4_t
  ignored: return type class Unknown[uint32x4_t] is ignored
Generating func cv_vrsqrt_f32_float32x2_t
  ignored: return type class Unknown[float32x2_t] is ignored
Generating func cv_vrsqrtq_f32_float32x4_t
  ignored: return type class Unknown[float32x4_t] is ignored
Generating func cv_vsqrt_f32_float32x2_t
  ignored: return type class Unknown[float32x2_t] is ignored
Generating func cv_vsqrtq_f32_float32x4_t
  ignored: return type class Unknown[float32x4_t] is ignored
Generating func cv_writeScalar_FileStorage_String
Generating func cv_writeScalar_FileStorage_double
Generating func cv_writeScalar_FileStorage_float
Generating func cv_writeScalar_FileStorage_int
Generating func cv_write_FileStorage_DMatch
Generating func cv_write_FileStorage_KeyPoint
Generating func cv_write_FileStorage_Range
Generating func cv_write_FileStorage_String
  ignored: return type class Unknown[template<> void] is ignored
Generating func cv_write_FileStorage_String_DMatch
Generating func cv_write_FileStorage_String_KeyPoint
Generating func cv_write_FileStorage_String_Mat
Generating func cv_write_FileStorage_String_Range
Generating func cv_write_FileStorage_String_SparseMat
Generating func cv_write_FileStorage_String_String
Generating func cv_write_FileStorage_String_VectorOfDMatch
Generating func cv_write_FileStorage_String_VectorOfKeyPoint
Generating func cv_write_FileStorage_String_double
Generating func cv_write_FileStorage_String_float
Generating func cv_write_FileStorage_String_int
Generating func cv_write_FileStorage_VectorOfDMatch
Generating func cv_write_FileStorage_VectorOfKeyPoint
Generating func cv_write_FileStorage__Tp
  ignored: return type class Unknown[template<typename _Tp> void] is ignored
Generating func cv_write_FileStorage_double
  ignored: return type class Unknown[template<> void] is ignored
Generating func cv_write_FileStorage_float
  ignored: return type class Unknown[template<> void] is ignored
Generating func cv_write_FileStorage_int
  ignored: return type class Unknown[template<> void] is ignored
Generating impl for trait cv::Algorithm (trait)
Generating func cv_Algorithm_clear
Generating func cv_Algorithm_write_const_FileStorage
Generating func cv_Algorithm_write_const_PtrOfFileStorage_String
Generating func cv_Algorithm_read_FileNode
Generating func cv_Algorithm_empty_const
Generating func cv_Algorithm_Ptr_<__Tp_>_read_FileNode
  ignored: return type class Unknown[template<typename _Tp> static Ptr<_Tp>] is ignored
Generating func cv_Algorithm_Ptr_<__Tp_>_load_String_String
  ignored: return type class Unknown[template<typename _Tp> static Ptr<_Tp>] is ignored
Generating func cv_Algorithm_Ptr_<__Tp_>_loadFromString_String_String
  ignored: return type class Unknown[template<typename _Tp> static Ptr<_Tp>] is ignored
Generating func cv_Algorithm_save_const_String
Generating func cv_Algorithm_getDefaultName_const
Generating box for cv::Algorithm (trait)
Generating func cv_Algorithm_Algorithm
Generating func cv_Algorithm_clear
  ignored: already there
Generating func cv_Algorithm_write_const_FileStorage
  ignored: already there
Generating func cv_Algorithm_write_const_PtrOfFileStorage_String
  ignored: already there
Generating func cv_Algorithm_read_FileNode
  ignored: already there
Generating func cv_Algorithm_empty_const
  ignored: already there
Generating func cv_Algorithm_Ptr_<__Tp_>_read_FileNode
  ignored: return type class Unknown[template<typename _Tp> static Ptr<_Tp>] is ignored
Generating func cv_Algorithm_Ptr_<__Tp_>_load_String_String
  ignored: return type class Unknown[template<typename _Tp> static Ptr<_Tp>] is ignored
Generating func cv_Algorithm_Ptr_<__Tp_>_loadFromString_String_String
  ignored: return type class Unknown[template<typename _Tp> static Ptr<_Tp>] is ignored
Generating func cv_Algorithm_save_const_String
  ignored: already there
Generating func cv_Algorithm_getDefaultName_const
  ignored: already there
Generating box for cv::AsyncArray
Generating func cv_AsyncArray_AsyncArray
Generating func cv_AsyncArray_AsyncArray_AsyncArray
Generating func cv_AsyncArray_release
Generating func cv_AsyncArray_get_const__OutputArray
Generating func cv_AsyncArray_get_const__OutputArray_int64
Generating func cv_AsyncArray_get_const__OutputArray_double
Generating func cv_AsyncArray_wait_for_const_int64
Generating func cv_AsyncArray_wait_for_const_double
Generating func cv_AsyncArray_valid_const
Generating func cv_AsyncArray_AsyncArray_AsyncArray&
  ignored: can not map type Unknown[AsyncArray&] yet
Generating func cv_AsyncArray_getFutureMat_const
  ignored: return type class Unknown[std::future<Mat>] is ignored
Generating func cv_AsyncArray_getFutureUMat_const
  ignored: return type class Unknown[std::future<UMat>] is ignored
Generating func cv_AsyncArray__getImpl_const
  ignored: ignored by rename table
Generating impl for trait cv::BufferPoolController (trait)
Generating func cv_BufferPoolController_getReservedSize_const
Generating func cv_BufferPoolController_getMaxReservedSize_const
Generating func cv_BufferPoolController_setMaxReservedSize_size_t
Generating func cv_BufferPoolController_freeAllReservedBuffers
Generating box for cv::CommandLineParser
Generating func cv_CommandLineParser_CommandLineParser_int_char* const[]_String
  ignored: can not map type RawPtr[Unknown[char* const]] yet
Generating func cv_CommandLineParser_CommandLineParser_CommandLineParser
Generating func cv_CommandLineParser_getPathToApplication_const
Generating func cv_CommandLineParser_get_const_String_bool
  ignored: return type class Unknown[template <typename T> T] is ignored
Generating func cv_CommandLineParser_get_const_int_bool
  ignored: return type class Unknown[template <typename T> T] is ignored
Generating func cv_CommandLineParser_has_const_String
Generating func cv_CommandLineParser_check_const
Generating func cv_CommandLineParser_about_String
Generating func cv_CommandLineParser_printMessage_const
Generating func cv_CommandLineParser_printErrors_const
Generating box for cv::ConjGradSolver
Generating func cv_ConjGradSolver_create_PtrOfFunction_TermCriteria
Generating func cv_DMatch_DMatch
Generating func cv_DMatch_DMatch_int_int_float
Generating func cv_DMatch_DMatch_int_int_int_float
Generating func cv_DMatch_DMatch
  ignored: already there
Generating func cv_DMatch_DMatch_int_int_float
  ignored: already there
Generating func cv_DMatch_DMatch_int_int_int_float
  ignored: already there
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Generating impl for trait cv::DownhillSolver (trait)
Generating func cv_DownhillSolver_getInitStep_const__OutputArray
Generating func cv_DownhillSolver_setInitStep__InputArray
Generating func cv_DownhillSolver_create_PtrOfFunction__InputArray_TermCriteria
Manual ignore class cv::Exception (ignored)
Ghost class cv::Feature2D (ghost, trait), ignoring
Generating box for cv::FileNode
Generating func cv_FileNode_FileNode
Generating func cv_FileNode_FileNode_const_FileStorage_size_t_size_t
Generating func cv_FileNode_FileNode_FileNode
Generating func cv_FileNode_keys_const
Generating func cv_FileNode_type_const
Generating func cv_FileNode_empty_const
Generating func cv_FileNode_isNone_const
Generating func cv_FileNode_isSeq_const
Generating func cv_FileNode_isMap_const
Generating func cv_FileNode_isInt_const
Generating func cv_FileNode_isReal_const
Generating func cv_FileNode_isString_const
Generating func cv_FileNode_isNamed_const
Generating func cv_FileNode_name_const
Generating func cv_FileNode_size_const
Generating func cv_FileNode_rawSize_const
Generating func cv_FileNode_operator_int_const
Generating func cv_FileNode_operator_float_const
Generating func cv_FileNode_operator_double_const
Generating func cv_FileNode_isMap_int
Generating func cv_FileNode_isSeq_int
Generating func cv_FileNode_isCollection_int
Generating func cv_FileNode_isEmptyCollection_int
Generating func cv_FileNode_isFlow_int
Generating func cv_FileNode_ptr
Generating func cv_FileNode_ptr_const
Generating func cv_FileNode_begin_const
  ignored: return type class Unknown[FileNodeIterator] is ignored
Generating func cv_FileNode_end_const
  ignored: return type class Unknown[FileNodeIterator] is ignored
Generating func cv_FileNode_readRaw_const_String_void_X_size_t
Generating func cv_FileNode_setValue_int_const_void_X_int
Generating func cv_FileNode_real_const
Generating func cv_FileNode_string_const
Generating func cv_FileNode_mat_const
Generating box for cv::FileNodeIterator
Generating func cv_FileNodeIterator_FileNodeIterator
  ignored: return type class Unknown[FileNodeIterator] is ignored
Generating func cv_FileNodeIterator_FileNodeIterator_FileNode_bool
  ignored: return type class Unknown[FileNodeIterator] is ignored
Generating func cv_FileNodeIterator_FileNodeIterator_FileNodeIterator
  ignored: return type class Unknown[FileNodeIterator] is ignored
Generating func cv_FileNodeIterator_readRaw_String_void_X_size_t
Generating func cv_FileNodeIterator_remaining_const
Generating func cv_FileNodeIterator_equalTo_const_FileNodeIterator
Generating box for cv::FileStorage
Generating func cv_FileStorage_FileStorage
Generating func cv_FileStorage_FileStorage_String_int_String
Generating func cv_FileStorage_open_String_int_String
Generating func cv_FileStorage_isOpened_const
Generating func cv_FileStorage_release
Generating func cv_FileStorage_releaseAndGetString
Generating func cv_FileStorage_getFirstTopLevelNode_const
Generating func cv_FileStorage_root_const_int
Generating func cv_FileStorage_write_String_int
Generating func cv_FileStorage_write_String_double
Generating func cv_FileStorage_write_String_String
Generating func cv_FileStorage_write_String_Mat
Generating func cv_FileStorage_write_String_VectorOfString
Generating func cv_FileStorage_writeRaw_String_const_void_X_size_t
Generating func cv_FileStorage_writeComment_String_bool
Generating func cv_FileStorage_startWriteStruct_String_int_String
Generating func cv_FileStorage_endWriteStruct
Generating func cv_FileStorage_getDefaultObjectName_String
Generating func cv_FileStorage_getFormat_const
Generating impl for trait cv::Formatted (trait)
Generating func cv_Formatted_next
Generating func cv_Formatted_reset
Generating impl for trait cv::Formatter (trait)
Generating func cv_Formatter_format_const_Mat
Generating func cv_Formatter_set16fPrecision_int
Generating func cv_Formatter_set32fPrecision_int
Generating func cv_Formatter_set64fPrecision_int
Generating func cv_Formatter_setMultiline_bool
Generating func cv_Formatter_get_Formatter_FormatType
Generating box for cv::Hamming
Generating func cv_KeyPoint_KeyPoint
Generating func cv_KeyPoint_KeyPoint_Point2f_float_float_float_int_int
Generating func cv_KeyPoint_KeyPoint_float_float_float_float_float_int_int
Generating func cv_KeyPoint_hash_const
Generating func cv_KeyPoint_convert_VectorOfKeyPoint_VectorOfPoint2f_VectorOfint
Generating func cv_KeyPoint_convert_VectorOfPoint2f_VectorOfKeyPoint_float_float_int_int
Generating func cv_KeyPoint_overlap_KeyPoint_KeyPoint
Generating func cv_KeyPoint_KeyPoint
  ignored: already there
Generating func cv_KeyPoint_KeyPoint_Point2f_float_float_float_int_int
  ignored: already there
Generating func cv_KeyPoint_KeyPoint_float_float_float_float_float_int_int
  ignored: already there
Generating box for cv::LDA
Generating func cv_LDA_LDA_int
Generating func cv_LDA_LDA__InputArray__InputArray_int
Generating func cv_LDA_save_const_String
Generating func cv_LDA_load_String
Generating func cv_LDA_save_const_FileStorage
Generating func cv_LDA_load_FileStorage
Generating func cv_LDA_compute__InputArray__InputArray
Generating func cv_LDA_project__InputArray
Generating func cv_LDA_reconstruct__InputArray
Generating func cv_LDA_eigenvectors_const
Generating func cv_LDA_eigenvalues_const
Generating func cv_LDA_subspaceProject__InputArray__InputArray__InputArray
Generating func cv_LDA_subspaceReconstruct__InputArray__InputArray__InputArray
Generating box for cv::Mat
Generating func cv_Mat_flags_const
Generating func cv_Mat_dims_const
Generating func cv_Mat_rows_const
Generating func cv_Mat_cols_const
Generating func cv_Mat_data
Generating func cv_Mat_set_data_uchar_X
Generating func cv_Mat_datastart_const
Generating func cv_Mat_dataend_const
Generating func cv_Mat_datalimit_const
Generating func cv_Mat_allocator
  ignored: return type class RawPtr[Unknown[MatAllocator]] is ignored
Generating func cv_Mat_u
  ignored: return type class RawPtr[Unknown[UMatData]] is ignored
Generating func cv_Mat_size_const
Generating func cv_Mat_set_size_MatSize
  ignored: ignored by rename table
Generating func cv_Mat_step_const
Generating func cv_Mat_set_step_MatStep
  ignored: ignored by rename table
Generating func cv_Mat_Mat
Generating func cv_Mat_Mat_int_int_int
Generating func cv_Mat_Mat_Size_int
Generating func cv_Mat_Mat_int_int_int_Scalar
Generating func cv_Mat_Mat_Size_int_Scalar
Generating func cv_Mat_Mat_int_const_int_X_int
  ignored: ignored by rename table
Generating func cv_Mat_Mat_VectorOfint_int
Generating func cv_Mat_Mat_int_const_int_X_int_Scalar
  ignored: ignored by rename table
Generating func cv_Mat_Mat_VectorOfint_int_Scalar
Generating func cv_Mat_Mat_Mat
Generating func cv_Mat_Mat_int_int_int_void_X_size_t
Generating func cv_Mat_Mat_Size_int_void_X_size_t
Generating func cv_Mat_Mat_int_const_int_X_int_void_X_const_size_t_X
  ignored: ignored by rename table
Generating func cv_Mat_Mat_VectorOfint_int_void_X_const_size_t_X
Generating func cv_Mat_Mat_Mat_Range_Range
Generating func cv_Mat_Mat_Mat_Rect
Generating func cv_Mat_Mat_Mat_const_Range
  ignored: ignored by rename table
Generating func cv_Mat_Mat_Mat_VectorOfRange
Generating func cv_Mat_Mat_std_vector<_Tp>_bool
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv_Mat_Mat_Point_<_Tp>_bool
  ignored: can not map type Unknown[Point_<_Tp>] yet
Generating func cv_Mat_Mat_Point3_<_Tp>_bool
  ignored: can not map type Unknown[Point3_<_Tp>] yet
Generating func cv_Mat_Mat_MatCommaInitializer_<_Tp>
  ignored: can not map type Unknown[MatCommaInitializer_<_Tp>] yet
Generating func cv_Mat_Mat_cuda_GpuMat
  ignored: can not map type Unknown[cuda::GpuMat] yet
Generating func cv_Mat_getUMat_const_AccessFlag_UMatUsageFlags
Generating func cv_Mat_row_const_int
Generating func cv_Mat_col_const_int
Generating func cv_Mat_rowRange_const_int_int
Generating func cv_Mat_rowRange_const_Range
Generating func cv_Mat_colRange_const_int_int
Generating func cv_Mat_colRange_const_Range
Generating func cv_Mat_diag_const_int
Generating func cv_Mat_diag_Mat
Generating func cv_Mat_clone_const
Generating func cv_Mat_copyTo_const__OutputArray
Generating func cv_Mat_copyTo_const__OutputArray__InputArray
Generating func cv_Mat_convertTo_const__OutputArray_int_double_double
Generating func cv_Mat_assignTo_const_Mat_int
Generating func cv_Mat_setTo__InputArray__InputArray
Generating func cv_Mat_reshape_const_int_int
Generating func cv_Mat_reshape_const_int_int_const_int_X
  ignored: ignored by rename table
Generating func cv_Mat_reshape_const_int_VectorOfint
Generating func cv_Mat_t_const
Generating func cv_Mat_inv_const_int
Generating func cv_Mat_mul_const__InputArray_double
Generating func cv_Mat_cross_const__InputArray
Generating func cv_Mat_dot_const__InputArray
Generating func cv_Mat_zeros_int_int_int
Generating func cv_Mat_zeros_Size_int
Generating func cv_Mat_zeros_int_const_int_X_int
Generating func cv_Mat_ones_int_int_int
Generating func cv_Mat_ones_Size_int
Generating func cv_Mat_ones_int_const_int_X_int
Generating func cv_Mat_eye_int_int_int
Generating func cv_Mat_eye_Size_int
Generating func cv_Mat_create_int_int_int
Generating func cv_Mat_create_Size_int
Generating func cv_Mat_create_int_const_int_X_int
  ignored: ignored by rename table
Generating func cv_Mat_create_VectorOfint_int
Generating func cv_Mat_addref
Generating func cv_Mat_release
Generating func cv_Mat_deallocate
Generating func cv_Mat_copySize_Mat
  ignored: ignored by rename table
Generating func cv_Mat_reserve_size_t
Generating func cv_Mat_reserveBuffer_size_t
Generating func cv_Mat_resize_size_t
Generating func cv_Mat_resize_size_t_Scalar
Generating func cv_Mat_push_back__const_void_X
  ignored: ignored by rename table
Generating func cv_Mat_push_back__Tp
  ignored: return type class Unknown[template<typename _Tp> void] is ignored
Generating func cv_Mat_push_back_Mat_<_Tp>
  ignored: return type class Unknown[template<typename _Tp> void] is ignored
Generating func cv_Mat_push_back_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> void] is ignored
Generating func cv_Mat_push_back_Mat
Generating func cv_Mat_pop_back_size_t
Generating func cv_Mat_locateROI_const_Size_Point
Generating func cv_Mat_adjustROI_int_int_int_int
Generating func cv_Mat_isContinuous_const
Generating func cv_Mat_isSubmatrix_const
Generating func cv_Mat_elemSize_const
Generating func cv_Mat_elemSize1_const
Generating func cv_Mat_type_const
Generating func cv_Mat_depth_const
Generating func cv_Mat_channels_const
Generating func cv_Mat_step1_const_int
Generating func cv_Mat_empty_const
Generating func cv_Mat_total_const
Generating func cv_Mat_total_const_int_int
Generating func cv_Mat_checkVector_const_int_int_bool
Generating func cv_Mat_ptr_int
Generating func cv_Mat_ptr_const_int
Generating func cv_Mat_ptr_int_int
Generating func cv_Mat_ptr_const_int_int
Generating func cv_Mat_ptr_int_int_int
Generating func cv_Mat_ptr_const_int_int_int
Generating func cv_Mat_ptr_const_int_X
Generating func cv_Mat_ptr_const_const_int_X
Generating func cv_Mat_ptr_int
  ignored: already there
Generating func cv_Mat_ptr_const_int
  ignored: already there
Generating func cv_Mat_ptr_int_int
  ignored: already there
Generating func cv_Mat_ptr_const_int_int
  ignored: already there
Generating func cv_Mat_ptr_int_int_int
  ignored: already there
Generating func cv_Mat_ptr_const_int_int_int
  ignored: already there
Generating func cv_Mat_ptr_const_int_X
  ignored: already there
Generating func cv_Mat_ptr_const_const_int_X
  ignored: already there
Generating func cv_Mat_at_int
Generating func cv_Mat_at_const_int
Generating func cv_Mat_at_int_int
Generating func cv_Mat_at_const_int_int
Generating func cv_Mat_at_int_int_int
Generating func cv_Mat_at_const_int_int_int
Generating func cv_Mat_at_const_int_X
Generating func cv_Mat_at_const_const_int_X
Generating func cv_Mat_at_Point
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_Mat_at_const_Point
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_Mat_begin
  ignored: return type class Unknown[template<typename _Tp> MatIterator_<_Tp>] is ignored
Generating func cv_Mat_begin_const
  ignored: return type class Unknown[template<typename _Tp> MatConstIterator_<_Tp>] is ignored
Generating func cv_Mat_end
  ignored: return type class Unknown[template<typename _Tp> MatIterator_<_Tp>] is ignored
Generating func cv_Mat_end_const
  ignored: return type class Unknown[template<typename _Tp> MatConstIterator_<_Tp>] is ignored
Generating func cv_Mat_Mat_Mat&
  ignored: can not map type Unknown[Mat&] yet
Generating func cv_Mat_getStdAllocator
  ignored: return type class RawPtr[Unknown[MatAllocator]] is ignored
Generating func cv_Mat_getDefaultAllocator
  ignored: return type class RawPtr[Unknown[MatAllocator]] is ignored
Generating func cv_Mat_setDefaultAllocator_MatAllocator*
  ignored: can not map type RawPtr[Unknown[MatAllocator]] yet
Generating func cv_Mat_updateContinuityFlag
Manual ignore class cv::MatAllocator (ignored, trait)
Generating box for cv::MatConstIterator
Generating func cv_MatConstIterator_MatConstIterator
Generating func cv_MatConstIterator_MatConstIterator_const_Mat
Generating func cv_MatConstIterator_MatConstIterator_const_Mat_int_int
Generating func cv_MatConstIterator_MatConstIterator_const_Mat_Point
Generating func cv_MatConstIterator_MatConstIterator_const_Mat_const_int_X
Generating func cv_MatConstIterator_MatConstIterator_MatConstIterator
Generating func cv_MatConstIterator_pos_const
Generating func cv_MatConstIterator_pos_const_int_X
Generating func cv_MatConstIterator_lpos_const
Generating func cv_MatConstIterator_seek_ptrdiff_t_bool
Generating func cv_MatConstIterator_seek_const_int_X_bool
Generating box for cv::MatExpr
Generating func cv_MatExpr_MatExpr
Generating func cv_MatExpr_MatExpr_Mat
Generating func cv_MatExpr_MatExpr_const_MatOp_int_Mat_Mat_Mat_double_double_Scalar
Generating func cv_MatExpr_operator_Mat_const
Generating func cv_MatExpr_size_const
Generating func cv_MatExpr_type_const
Generating func cv_MatExpr_row_const_int
Generating func cv_MatExpr_col_const_int
Generating func cv_MatExpr_diag_const_int
Generating func cv_MatExpr_t_const
Generating func cv_MatExpr_inv_const_int
Generating func cv_MatExpr_mul_const_MatExpr_double
Generating func cv_MatExpr_mul_const_Mat_double
Generating func cv_MatExpr_cross_const_Mat
Generating func cv_MatExpr_dot_const_Mat
Generating impl for trait cv::MatOp (trait)
Generating func cv_MatOp_elementWise_const_MatExpr
Generating func cv_MatOp_assign_const_MatExpr_Mat_int
Generating func cv_MatOp_roi_const_MatExpr_Range_Range_MatExpr
Generating func cv_MatOp_diag_const_MatExpr_int_MatExpr
Generating func cv_MatOp_augAssignAdd_const_MatExpr_Mat
Generating func cv_MatOp_augAssignSubtract_const_MatExpr_Mat
Generating func cv_MatOp_augAssignMultiply_const_MatExpr_Mat
Generating func cv_MatOp_augAssignDivide_const_MatExpr_Mat
Generating func cv_MatOp_augAssignAnd_const_MatExpr_Mat
Generating func cv_MatOp_augAssignOr_const_MatExpr_Mat
Generating func cv_MatOp_augAssignXor_const_MatExpr_Mat
Generating func cv_MatOp_add_const_MatExpr_MatExpr_MatExpr
Generating func cv_MatOp_add_const_MatExpr_Scalar_MatExpr
Generating func cv_MatOp_subtract_const_MatExpr_MatExpr_MatExpr
Generating func cv_MatOp_subtract_const_Scalar_MatExpr_MatExpr
Generating func cv_MatOp_multiply_const_MatExpr_MatExpr_MatExpr_double
Generating func cv_MatOp_multiply_const_MatExpr_double_MatExpr
Generating func cv_MatOp_divide_const_MatExpr_MatExpr_MatExpr_double
Generating func cv_MatOp_divide_const_double_MatExpr_MatExpr
Generating func cv_MatOp_abs_const_MatExpr_MatExpr
Generating func cv_MatOp_transpose_const_MatExpr_MatExpr
Generating func cv_MatOp_matmul_const_MatExpr_MatExpr_MatExpr
Generating func cv_MatOp_invert_const_MatExpr_int_MatExpr
Generating func cv_MatOp_size_const_MatExpr
Generating func cv_MatOp_type_const_MatExpr
Generating box for cv::MatSize
Generating func cv_MatSize_MatSize_int_X
Generating func cv_MatSize_dims_const
Generating box for cv::MatStep
Generating func cv_MatStep_MatStep
Generating func cv_MatStep_MatStep_size_t
Generating func cv_MatStep_operator_size_t_const
Generating box for cv::Matx_AddOp
Generating func cv_Matx_AddOp_Matx_AddOp
Generating func cv_Matx_AddOp_Matx_AddOp_Matx_AddOp
Generating box for cv::Matx_DivOp
Generating func cv_Matx_DivOp_Matx_DivOp
Generating func cv_Matx_DivOp_Matx_DivOp_Matx_DivOp
Generating box for cv::Matx_MatMulOp
Generating func cv_Matx_MatMulOp_Matx_MatMulOp
Generating func cv_Matx_MatMulOp_Matx_MatMulOp_Matx_MatMulOp
Generating box for cv::Matx_MulOp
Generating func cv_Matx_MulOp_Matx_MulOp
Generating func cv_Matx_MulOp_Matx_MulOp_Matx_MulOp
Generating box for cv::Matx_ScaleOp
Generating func cv_Matx_ScaleOp_Matx_ScaleOp
Generating func cv_Matx_ScaleOp_Matx_ScaleOp_Matx_ScaleOp
Generating box for cv::Matx_SubOp
Generating func cv_Matx_SubOp_Matx_SubOp
Generating func cv_Matx_SubOp_Matx_SubOp_Matx_SubOp
Generating box for cv::Matx_TOp
Generating func cv_Matx_TOp_Matx_TOp
Generating func cv_Matx_TOp_Matx_TOp_Matx_TOp
Generating impl for trait cv::MinProblemSolver (trait)
Generating func cv_MinProblemSolver_getFunction_const
Generating func cv_MinProblemSolver_setFunction_PtrOfFunction
Generating func cv_MinProblemSolver_getTermCriteria_const
Generating func cv_MinProblemSolver_setTermCriteria_TermCriteria
Generating func cv_MinProblemSolver_minimize__InputOutputArray
Generating impl for trait cv::MinProblemSolver::Function (trait)
Generating func cv_MinProblemSolver_Function_getDims_const
Generating func cv_MinProblemSolver_Function_getGradientEps_const
Generating func cv_MinProblemSolver_Function_calc_const_const_double_X
Generating func cv_MinProblemSolver_Function_getGradient_const_double_X_double_X
Generating func cv_Moments_Moments
Generating func cv_Moments_Moments_double_double_double_double_double_double_double_double_double_double
Generating box for cv::NAryMatIterator
Generating func cv_NAryMatIterator_NAryMatIterator
Generating func cv_NAryMatIterator_NAryMatIterator_Mat**_uchar**_int
  ignored: can not map type RawPtr[RawPtr[cv::Mat (boxed)]] yet
Generating func cv_NAryMatIterator_NAryMatIterator_Mat**_Mat_int
  ignored: can not map type RawPtr[RawPtr[cv::Mat (boxed)]] yet
Generating func cv_NAryMatIterator_init_Mat**_Mat_uchar**_int
  ignored: can not map type RawPtr[RawPtr[cv::Mat (boxed)]] yet
Generating box for cv::PCA
Generating func cv_PCA_PCA
Generating func cv_PCA_PCA__InputArray__InputArray_int_int
Generating func cv_PCA_PCA__InputArray__InputArray_int_double
Generating func cv_PCA_project_const__InputArray
Generating func cv_PCA_project_const__InputArray__OutputArray
Generating func cv_PCA_backProject_const__InputArray
Generating func cv_PCA_backProject_const__InputArray__OutputArray
Generating func cv_PCA_write_const_FileStorage
Generating func cv_PCA_read_FileNode
Generating impl for trait cv::ParallelLoopBody (trait)
Generating box for cv::ParallelLoopBodyLambdaWrapper
Generating func cv_ParallelLoopBodyLambdaWrapper_ParallelLoopBodyLambdaWrapper_std_function<void(Range&)>
  ignored: can not map type Unknown[std::function<void(Range&)>] yet
Manual ignore class cv::RNG (ignored)
Manual ignore class cv::RNG_MT19937 (ignored)
Generating box for cv::Range
Generating func cv_Range_start_const
Generating func cv_Range_end_const
Generating func cv_Range_Range
Generating func cv_Range_Range_int_int
Generating func cv_Range_size_const
Generating func cv_Range_empty_const
Generating func cv_Range_all
Generating func cv_Range_Range
  ignored: already there
Generating func cv_Range_Range_int_int
  ignored: already there
Generating func cv_Range_size_const
  ignored: already there
Generating func cv_Range_empty_const
  ignored: already there
Generating func cv_Range_all
  ignored: already there
Generating box for cv::RotatedRect
Generating func cv_RotatedRect_center_const
Generating func cv_RotatedRect_size_const
Generating func cv_RotatedRect_angle_const
Generating func cv_RotatedRect_RotatedRect
Generating func cv_RotatedRect_RotatedRect_Point2f_Size2f_float
Generating func cv_RotatedRect_RotatedRect_Point2f_Point2f_Point2f
Generating func cv_RotatedRect_points_const_Point2f_X
Generating func cv_RotatedRect_boundingRect_const
Generating func cv_RotatedRect_boundingRect2f_const
Generating func cv_RotatedRect_RotatedRect
  ignored: already there
Generating func cv_RotatedRect_RotatedRect_Point2f_Size2f_float
  ignored: already there
Manual ignore class cv::SVD (ignored)
Generating box for cv::SparseMat
Generating func cv_SparseMat_SparseMat
Generating func cv_SparseMat_SparseMat_int_const_int_X_int
Generating func cv_SparseMat_SparseMat_SparseMat
Generating func cv_SparseMat_SparseMat_Mat
Generating func cv_SparseMat_clone_const
Generating func cv_SparseMat_copyTo_const_SparseMat
Generating func cv_SparseMat_copyTo_const_Mat
Generating func cv_SparseMat_convertTo_const_SparseMat_int_double
Generating func cv_SparseMat_convertTo_const_Mat_int_double_double
Generating func cv_SparseMat_assignTo_const_SparseMat_int
Generating func cv_SparseMat_create_int_const_int_X_int
Generating func cv_SparseMat_clear
Generating func cv_SparseMat_addref
Generating func cv_SparseMat_release
Generating func cv_SparseMat_elemSize_const
Generating func cv_SparseMat_elemSize1_const
Generating func cv_SparseMat_type_const
Generating func cv_SparseMat_depth_const
Generating func cv_SparseMat_channels_const
Generating func cv_SparseMat_size_const
Generating func cv_SparseMat_size_const_int
Generating func cv_SparseMat_dims_const
Generating func cv_SparseMat_nzcount_const
Generating func cv_SparseMat_hash_const_int
Generating func cv_SparseMat_hash_const_int_int
Generating func cv_SparseMat_hash_const_int_int_int
Generating func cv_SparseMat_hash_const_const_int_X
Generating func cv_SparseMat_ptr_int_bool_size_t_X
Generating func cv_SparseMat_ptr_int_int_bool_size_t_X
Generating func cv_SparseMat_ptr_int_int_int_bool_size_t_X
Generating func cv_SparseMat_ptr_const_int_X_bool_size_t_X
Generating func cv_SparseMat_ref_int_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_ref_int_int_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_ref_int_int_int_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_ref_const_int_X_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_value_const_int_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_value_const_int_int_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_value_const_int_int_int_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_value_const_const_int_X_size_t_X
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_find_const_int_size_t_X
  ignored: return type class RawPtr[Unknown[template<typename _Tp> _Tp]] is ignored
Generating func cv_SparseMat_find_const_int_int_size_t_X
  ignored: return type class RawPtr[Unknown[template<typename _Tp> _Tp]] is ignored
Generating func cv_SparseMat_find_const_int_int_int_size_t_X
  ignored: return type class RawPtr[Unknown[template<typename _Tp> _Tp]] is ignored
Generating func cv_SparseMat_find_const_const_int_X_size_t_X
  ignored: return type class RawPtr[Unknown[template<typename _Tp> _Tp]] is ignored
Generating func cv_SparseMat_erase_int_int_size_t_X
Generating func cv_SparseMat_erase_int_int_int_size_t_X
Generating func cv_SparseMat_erase_const_int_X_size_t_X
Generating func cv_SparseMat_begin
  ignored: return type class Unknown[SparseMatIterator] is ignored
Generating func cv_SparseMat_begin
  ignored: return type class Unknown[template<typename _Tp> SparseMatIterator_<_Tp>] is ignored
Generating func cv_SparseMat_begin_const
  ignored: return type class Unknown[SparseMatConstIterator] is ignored
Generating func cv_SparseMat_begin_const
  ignored: return type class Unknown[template<typename _Tp> SparseMatConstIterator_<_Tp>] is ignored
Generating func cv_SparseMat_end
  ignored: return type class Unknown[SparseMatIterator] is ignored
Generating func cv_SparseMat_end_const
  ignored: return type class Unknown[SparseMatConstIterator] is ignored
Generating func cv_SparseMat_end
  ignored: return type class Unknown[template<typename _Tp> SparseMatIterator_<_Tp>] is ignored
Generating func cv_SparseMat_end_const
  ignored: return type class Unknown[template<typename _Tp> SparseMatConstIterator_<_Tp>] is ignored
Generating func cv_SparseMat_value_Node
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_value_const_const_Node
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMat_node_size_t
Generating func cv_SparseMat_node_const_size_t
Generating func cv_SparseMat_newNode_const_int_X_size_t
Generating func cv_SparseMat_removeNode_size_t_size_t_size_t
Generating func cv_SparseMat_resizeHashTab_size_t
Generating box for cv::SparseMat::Hdr
Generating func cv_SparseMat_Hdr_Hdr_int_const_int_X_int
Generating func cv_SparseMat_Hdr_clear
Generating box for cv::SparseMat::Node
Generating impl for trait cv::SparseMatConstIterator (trait)
Generating func cv_SparseMatConstIterator_value_const
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMatConstIterator_node_const
Generating func cv_SparseMatConstIterator_seekEnd
Generating box for cv::SparseMatConstIterator (trait)
Generating func cv_SparseMatConstIterator_SparseMatConstIterator
  ignored: return type class Unknown[SparseMatConstIterator] is ignored
Generating func cv_SparseMatConstIterator_SparseMatConstIterator_const_SparseMat
  ignored: return type class Unknown[SparseMatConstIterator] is ignored
Generating func cv_SparseMatConstIterator_SparseMatConstIterator_SparseMatConstIterator
  ignored: return type class Unknown[SparseMatConstIterator] is ignored
Generating func cv_SparseMatConstIterator_value_const
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMatConstIterator_node_const
  ignored: already there
Generating func cv_SparseMatConstIterator_seekEnd
  ignored: already there
Generating box for cv::SparseMatIterator
Generating func cv_SparseMatIterator_SparseMatIterator
  ignored: return type class Unknown[SparseMatIterator] is ignored
Generating func cv_SparseMatIterator_SparseMatIterator_SparseMat
  ignored: return type class Unknown[SparseMatIterator] is ignored
Generating func cv_SparseMatIterator_SparseMatIterator_SparseMat_const_int_X
  ignored: return type class Unknown[SparseMatIterator] is ignored
Generating func cv_SparseMatIterator_SparseMatIterator_SparseMatIterator
  ignored: return type class Unknown[SparseMatIterator] is ignored
Generating func cv_SparseMatIterator_value_const
  ignored: return type class Unknown[template<typename _Tp> _Tp] is ignored
Generating func cv_SparseMatIterator_node_const
Manual ignore class cv::TLSDataContainer (ignored)
Generating box for cv::TermCriteria
Generating func cv_TermCriteria_type_const
Generating func cv_TermCriteria_maxCount_const
Generating func cv_TermCriteria_epsilon_const
Generating func cv_TermCriteria_TermCriteria
Generating func cv_TermCriteria_TermCriteria_int_int_double
Generating func cv_TermCriteria_isValid_const
Generating func cv_TermCriteria_TermCriteria
  ignored: already there
Generating func cv_TermCriteria_TermCriteria_int_int_double
  ignored: already there
Generating box for cv::TickMeter
Generating func cv_TickMeter_TickMeter
Generating func cv_TickMeter_start
Generating func cv_TickMeter_stop
Generating func cv_TickMeter_getTimeTicks_const
Generating func cv_TickMeter_getTimeMicro_const
Generating func cv_TickMeter_getTimeMilli_const
Generating func cv_TickMeter_getTimeSec_const
Generating func cv_TickMeter_getCounter_const
Generating func cv_TickMeter_reset
Generating box for cv::UMat
Generating func cv_UMat_flags_const
Generating func cv_UMat_dims_const
Generating func cv_UMat_rows_const
Generating func cv_UMat_cols_const
Generating func cv_UMat_allocator
  ignored: return type class RawPtr[Unknown[MatAllocator]] is ignored
Generating func cv_UMat_usageFlags_const
Generating func cv_UMat_u
  ignored: return type class RawPtr[Unknown[UMatData]] is ignored
Generating func cv_UMat_offset_const
Generating func cv_UMat_size_const
Generating func cv_UMat_set_size_MatSize
  ignored: ignored by rename table
Generating func cv_UMat_step_const
Generating func cv_UMat_set_step_MatStep
  ignored: ignored by rename table
Generating func cv_UMat_UMat_UMatUsageFlags
Generating func cv_UMat_UMat_int_int_int_UMatUsageFlags
Generating func cv_UMat_UMat_Size_int_UMatUsageFlags
Generating func cv_UMat_UMat_int_int_int_Scalar_UMatUsageFlags
Generating func cv_UMat_UMat_Size_int_Scalar_UMatUsageFlags
Generating func cv_UMat_UMat_int_const_int_X_int_UMatUsageFlags
Generating func cv_UMat_UMat_int_const_int_X_int_Scalar_UMatUsageFlags
Generating func cv_UMat_UMat_UMat
Generating func cv_UMat_UMat_UMat_Range_Range
Generating func cv_UMat_UMat_UMat_Rect
Generating func cv_UMat_UMat_UMat_const_Range
  ignored: ignored by rename table
Generating func cv_UMat_UMat_UMat_VectorOfRange
Generating func cv_UMat_UMat_std_vector<_Tp>_bool
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv_UMat_UMat_Point_<_Tp>_bool
  ignored: can not map type Unknown[Point_<_Tp>] yet
Generating func cv_UMat_UMat_Point3_<_Tp>_bool
  ignored: can not map type Unknown[Point3_<_Tp>] yet
Generating func cv_UMat_UMat_MatCommaInitializer_<_Tp>
  ignored: can not map type Unknown[MatCommaInitializer_<_Tp>] yet
Generating func cv_UMat_getMat_const_AccessFlag
Generating func cv_UMat_row_const_int
Generating func cv_UMat_col_const_int
Generating func cv_UMat_rowRange_const_int_int
Generating func cv_UMat_rowRange_const_Range
Generating func cv_UMat_colRange_const_int_int
Generating func cv_UMat_colRange_const_Range
Generating func cv_UMat_diag_const_int
Generating func cv_UMat_diag_UMat
Generating func cv_UMat_clone_const
Generating func cv_UMat_copyTo_const__OutputArray
Generating func cv_UMat_copyTo_const__OutputArray__InputArray
Generating func cv_UMat_convertTo_const__OutputArray_int_double_double
Generating func cv_UMat_assignTo_const_UMat_int
Generating func cv_UMat_setTo__InputArray__InputArray
Generating func cv_UMat_reshape_const_int_int
Generating func cv_UMat_reshape_const_int_int_const_int_X
Generating func cv_UMat_t_const
Generating func cv_UMat_inv_const_int
Generating func cv_UMat_mul_const__InputArray_double
Generating func cv_UMat_dot_const__InputArray
Generating func cv_UMat_zeros_int_int_int
Generating func cv_UMat_zeros_Size_int
Generating func cv_UMat_zeros_int_const_int_X_int
Generating func cv_UMat_ones_int_int_int
Generating func cv_UMat_ones_Size_int
Generating func cv_UMat_ones_int_const_int_X_int
Generating func cv_UMat_eye_int_int_int
Generating func cv_UMat_eye_Size_int
Generating func cv_UMat_create_int_int_int_UMatUsageFlags
Generating func cv_UMat_create_Size_int_UMatUsageFlags
Generating func cv_UMat_create_int_const_int_X_int_UMatUsageFlags
  ignored: ignored by rename table
Generating func cv_UMat_create_VectorOfint_int_UMatUsageFlags
Generating func cv_UMat_addref
Generating func cv_UMat_release
Generating func cv_UMat_deallocate
Generating func cv_UMat_copySize_UMat
  ignored: ignored by rename table
Generating func cv_UMat_locateROI_const_Size_Point
Generating func cv_UMat_adjustROI_int_int_int_int
Generating func cv_UMat_isContinuous_const
Generating func cv_UMat_isSubmatrix_const
Generating func cv_UMat_elemSize_const
Generating func cv_UMat_elemSize1_const
Generating func cv_UMat_type_const
Generating func cv_UMat_depth_const
Generating func cv_UMat_channels_const
Generating func cv_UMat_step1_const_int
Generating func cv_UMat_empty_const
Generating func cv_UMat_total_const
Generating func cv_UMat_checkVector_const_int_int_bool
Generating func cv_UMat_UMat_UMat&
  ignored: can not map type Unknown[UMat&] yet
Generating func cv_UMat_handle_const_AccessFlag
Generating func cv_UMat_ndoffset_const_size_t_X
Generating func cv_UMat_getStdAllocator
  ignored: return type class RawPtr[Unknown[MatAllocator]] is ignored
Generating func cv_UMat_updateContinuityFlag
Generating box for cv::UMatData
Generating func cv_UMatData_UMatData_MatAllocator*
  ignored: return type class Unknown[UMatData] is ignored
Generating func cv_UMatData_lock
Generating func cv_UMatData_unlock
Generating func cv_UMatData_hostCopyObsolete_const
Generating func cv_UMatData_deviceCopyObsolete_const
Generating func cv_UMatData_deviceMemMapped_const
Generating func cv_UMatData_copyOnMap_const
Generating func cv_UMatData_tempUMat_const
Generating func cv_UMatData_tempCopiedUMat_const
Generating func cv_UMatData_markHostCopyObsolete_bool
Generating func cv_UMatData_markDeviceCopyObsolete_bool
Generating func cv_UMatData_markDeviceMemMapped_bool
Generating impl for trait cv::_InputArray (trait)
Generating func cv__InputArray__InputArray_rawIn_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> static _InputArray] is ignored
Generating func cv__InputArray_getMat_const_int
Generating func cv__InputArray_getMat__const_int
Generating func cv__InputArray_getUMat_const_int
Generating func cv__InputArray_getMatVector_const_VectorOfMat
Generating func cv__InputArray_getUMatVector_const_VectorOfUMat
Generating func cv__InputArray_getGpuMatVector_const_std_vector<cuda_GpuMat>
  ignored: can not map type Vector[Unknown[cuda::GpuMat]] yet
Generating func cv__InputArray_getGpuMat_const
  ignored: return type class Unknown[cuda::GpuMat] is ignored
Generating func cv__InputArray_getOGlBuffer_const
  ignored: return type class Unknown[ogl::Buffer] is ignored
Generating func cv__InputArray_getFlags_const
Generating func cv__InputArray_getObj_const
Generating func cv__InputArray_getSz_const
Generating func cv__InputArray_kind_const
Generating func cv__InputArray_dims_const_int
Generating func cv__InputArray_cols_const_int
Generating func cv__InputArray_rows_const_int
Generating func cv__InputArray_size_const_int
Generating func cv__InputArray_sizend_const_int_X_int
Generating func cv__InputArray_sameSize_const__InputArray
Generating func cv__InputArray_total_const_int
Generating func cv__InputArray_type_const_int
Generating func cv__InputArray_depth_const_int
Generating func cv__InputArray_channels_const_int
Generating func cv__InputArray_isContinuous_const_int
Generating func cv__InputArray_isSubmatrix_const_int
Generating func cv__InputArray_empty_const
Generating func cv__InputArray_copyTo_const__OutputArray
Generating func cv__InputArray_copyTo_const__OutputArray__InputArray
Generating func cv__InputArray_offset_const_int
Generating func cv__InputArray_step_const_int
Generating func cv__InputArray_isMat_const
Generating func cv__InputArray_isUMat_const
Generating func cv__InputArray_isMatVector_const
Generating func cv__InputArray_isUMatVector_const
Generating func cv__InputArray_isMatx_const
Generating func cv__InputArray_isVector_const
Generating func cv__InputArray_isGpuMat_const
Generating func cv__InputArray_isGpuMatVector_const
Generating box for cv::_InputArray (trait)
Generating func cv__InputArray__InputArray
Generating func cv__InputArray__InputArray_int_void_X
Generating func cv__InputArray__InputArray_Mat
Generating func cv__InputArray__InputArray_MatExpr
Generating func cv__InputArray__InputArray_VectorOfMat
Generating func cv__InputArray__InputArray_Mat_<_Tp>
  ignored: can not map type Unknown[Mat_<_Tp>] yet
Generating func cv__InputArray__InputArray_std_vector<_Tp>
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv__InputArray__InputArray_VectorOfbool
Generating func cv__InputArray__InputArray_std_vector<std_vector<_Tp> >
  ignored: can not map type Vector[Vector[Unknown[_Tp]]] yet
Generating func cv__InputArray__InputArray_std_vector<Mat_<_Tp> >
  ignored: can not map type Vector[Unknown[Mat_<_Tp>]] yet
Generating func cv__InputArray__InputArray__Tp*_int
  ignored: can not map type RawPtr[Unknown[_Tp]] yet
Generating func cv__InputArray__InputArray_double
Generating func cv__InputArray__InputArray_cuda_GpuMat
  ignored: can not map type Unknown[cuda::GpuMat] yet
Generating func cv__InputArray__InputArray_std_vector<cuda_GpuMat>
  ignored: can not map type Vector[Unknown[cuda::GpuMat]] yet
Generating func cv__InputArray__InputArray_ogl_Buffer
  ignored: can not map type Unknown[ogl::Buffer] yet
Generating func cv__InputArray__InputArray_cuda_HostMem
  ignored: can not map type Unknown[cuda::HostMem] yet
Generating func cv__InputArray__InputArray_cudev_GpuMat_<_Tp>
  ignored: can not map type Unknown[cudev::GpuMat_<_Tp>] yet
Generating func cv__InputArray__InputArray_UMat
Generating func cv__InputArray__InputArray_VectorOfUMat
Generating func cv__InputArray__InputArray_rawIn_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> static _InputArray] is ignored
Generating func cv__InputArray_getMat_const_int
  ignored: already there
Generating func cv__InputArray_getMat__const_int
  ignored: already there
Generating func cv__InputArray_getUMat_const_int
  ignored: already there
Generating func cv__InputArray_getMatVector_const_VectorOfMat
  ignored: already there
Generating func cv__InputArray_getUMatVector_const_VectorOfUMat
  ignored: already there
Generating func cv__InputArray_getGpuMatVector_const_std_vector<cuda_GpuMat>
  ignored: can not map type Vector[Unknown[cuda::GpuMat]] yet
Generating func cv__InputArray_getGpuMat_const
  ignored: return type class Unknown[cuda::GpuMat] is ignored
Generating func cv__InputArray_getOGlBuffer_const
  ignored: return type class Unknown[ogl::Buffer] is ignored
Generating func cv__InputArray_getFlags_const
  ignored: already there
Generating func cv__InputArray_getObj_const
  ignored: already there
Generating func cv__InputArray_getSz_const
  ignored: already there
Generating func cv__InputArray_kind_const
  ignored: already there
Generating func cv__InputArray_dims_const_int
  ignored: already there
Generating func cv__InputArray_cols_const_int
  ignored: already there
Generating func cv__InputArray_rows_const_int
  ignored: already there
Generating func cv__InputArray_size_const_int
  ignored: already there
Generating func cv__InputArray_sizend_const_int_X_int
  ignored: already there
Generating func cv__InputArray_sameSize_const__InputArray
  ignored: already there
Generating func cv__InputArray_total_const_int
  ignored: already there
Generating func cv__InputArray_type_const_int
  ignored: already there
Generating func cv__InputArray_depth_const_int
  ignored: already there
Generating func cv__InputArray_channels_const_int
  ignored: already there
Generating func cv__InputArray_isContinuous_const_int
  ignored: already there
Generating func cv__InputArray_isSubmatrix_const_int
  ignored: already there
Generating func cv__InputArray_empty_const
  ignored: already there
Generating func cv__InputArray_copyTo_const__OutputArray
  ignored: already there
Generating func cv__InputArray_copyTo_const__OutputArray__InputArray
  ignored: already there
Generating func cv__InputArray_offset_const_int
  ignored: already there
Generating func cv__InputArray_step_const_int
  ignored: already there
Generating func cv__InputArray_isMat_const
  ignored: already there
Generating func cv__InputArray_isUMat_const
  ignored: already there
Generating func cv__InputArray_isMatVector_const
  ignored: already there
Generating func cv__InputArray_isUMatVector_const
  ignored: already there
Generating func cv__InputArray_isMatx_const
  ignored: already there
Generating func cv__InputArray_isVector_const
  ignored: already there
Generating func cv__InputArray_isGpuMat_const
  ignored: already there
Generating func cv__InputArray_isGpuMatVector_const
  ignored: already there
Generating impl for trait cv::_InputOutputArray (trait)
Generating func cv__InputOutputArray__InputOutputArray_rawInOut_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> static _InputOutputArray] is ignored
Generating box for cv::_InputOutputArray (trait)
Generating func cv__InputOutputArray__InputOutputArray
Generating func cv__InputOutputArray__InputOutputArray_int_void_X
Generating func cv__InputOutputArray__InputOutputArray_Mat
Generating func cv__InputOutputArray__InputOutputArray_VectorOfMat
Generating func cv__InputOutputArray__InputOutputArray_cuda_GpuMat
  ignored: can not map type Unknown[cuda::GpuMat] yet
Generating func cv__InputOutputArray__InputOutputArray_ogl_Buffer
  ignored: can not map type Unknown[ogl::Buffer] yet
Generating func cv__InputOutputArray__InputOutputArray_cuda_HostMem
  ignored: can not map type Unknown[cuda::HostMem] yet
Generating func cv__InputOutputArray__InputOutputArray_cudev_GpuMat_<_Tp>
  ignored: can not map type Unknown[cudev::GpuMat_<_Tp>] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<_Tp>
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<std_vector<_Tp> >
  ignored: can not map type Vector[Vector[Unknown[_Tp]]] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<Mat_<_Tp> >
  ignored: can not map type Vector[Unknown[Mat_<_Tp>]] yet
Generating func cv__InputOutputArray__InputOutputArray_Mat_<_Tp>
  ignored: can not map type Unknown[Mat_<_Tp>] yet
Generating func cv__InputOutputArray__InputOutputArray__Tp*_int
  ignored: can not map type RawPtr[Unknown[_Tp]] yet
Generating func cv__InputOutputArray__InputOutputArray_UMat
Generating func cv__InputOutputArray__InputOutputArray_VectorOfUMat
Generating func cv__InputOutputArray__InputOutputArray_Mat
  ignored: already there
Generating func cv__InputOutputArray__InputOutputArray_VectorOfMat
  ignored: already there
Generating func cv__InputOutputArray__InputOutputArray_cuda_GpuMat
  ignored: can not map type Unknown[cuda::GpuMat] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<cuda_GpuMat>
  ignored: can not map type Vector[Unknown[cuda::GpuMat]] yet
Generating func cv__InputOutputArray__InputOutputArray_ogl_Buffer
  ignored: can not map type Unknown[ogl::Buffer] yet
Generating func cv__InputOutputArray__InputOutputArray_cuda_HostMem
  ignored: can not map type Unknown[cuda::HostMem] yet
Generating func cv__InputOutputArray__InputOutputArray_cudev_GpuMat_<_Tp>
  ignored: can not map type Unknown[cudev::GpuMat_<_Tp>] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<_Tp>
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<std_vector<_Tp> >
  ignored: can not map type Vector[Vector[Unknown[_Tp]]] yet
Generating func cv__InputOutputArray__InputOutputArray_std_vector<Mat_<_Tp> >
  ignored: can not map type Vector[Unknown[Mat_<_Tp>]] yet
Generating func cv__InputOutputArray__InputOutputArray_Mat_<_Tp>
  ignored: can not map type Unknown[Mat_<_Tp>] yet
Generating func cv__InputOutputArray__InputOutputArray__Tp*_int
  ignored: can not map type RawPtr[Unknown[_Tp]] yet
Generating func cv__InputOutputArray__InputOutputArray_UMat
  ignored: already there
Generating func cv__InputOutputArray__InputOutputArray_VectorOfUMat
  ignored: already there
Generating func cv__InputOutputArray__InputOutputArray_rawInOut_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> static _InputOutputArray] is ignored
Generating impl for trait cv::_OutputArray (trait)
Generating func cv__OutputArray__OutputArray_rawOut_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> static _OutputArray] is ignored
Generating func cv__OutputArray_fixedSize_const
Generating func cv__OutputArray_fixedType_const
Generating func cv__OutputArray_needed_const
Generating func cv__OutputArray_getMatRef_const_int
Generating func cv__OutputArray_getUMatRef_const_int
Generating func cv__OutputArray_getGpuMatRef_const
  ignored: return type class Unknown[cuda::GpuMat] is ignored
Generating func cv__OutputArray_getGpuMatVecRef_const
  ignored: return type class Vector[Unknown[cuda::GpuMat]] is ignored
Generating func cv__OutputArray_getOGlBufferRef_const
  ignored: return type class Unknown[ogl::Buffer] is ignored
Generating func cv__OutputArray_getHostMemRef_const
  ignored: return type class Unknown[cuda::HostMem] is ignored
Generating func cv__OutputArray_create_const_Size_int_int_bool__OutputArray_DepthMask
Generating func cv__OutputArray_create_const_int_int_int_int_bool__OutputArray_DepthMask
Generating func cv__OutputArray_create_const_int_const_int_X_int_int_bool__OutputArray_DepthMask
Generating func cv__OutputArray_createSameSize_const__InputArray_int
Generating func cv__OutputArray_release_const
Generating func cv__OutputArray_clear_const
Generating func cv__OutputArray_setTo_const__InputArray__InputArray
Generating func cv__OutputArray_assign_const_UMat
Generating func cv__OutputArray_assign_const_Mat
Generating func cv__OutputArray_assign_const_VectorOfUMat
Generating func cv__OutputArray_assign_const_VectorOfMat
Generating func cv__OutputArray_move_const_UMat
Generating func cv__OutputArray_move_const_Mat
Generating box for cv::_OutputArray (trait)
Generating func cv__OutputArray__OutputArray
Generating func cv__OutputArray__OutputArray_int_void_X
Generating func cv__OutputArray__OutputArray_Mat
Generating func cv__OutputArray__OutputArray_VectorOfMat
Generating func cv__OutputArray__OutputArray_cuda_GpuMat
  ignored: can not map type Unknown[cuda::GpuMat] yet
Generating func cv__OutputArray__OutputArray_std_vector<cuda_GpuMat>
  ignored: can not map type Vector[Unknown[cuda::GpuMat]] yet
Generating func cv__OutputArray__OutputArray_ogl_Buffer
  ignored: can not map type Unknown[ogl::Buffer] yet
Generating func cv__OutputArray__OutputArray_cuda_HostMem
  ignored: can not map type Unknown[cuda::HostMem] yet
Generating func cv__OutputArray__OutputArray_cudev_GpuMat_<_Tp>
  ignored: can not map type Unknown[cudev::GpuMat_<_Tp>] yet
Generating func cv__OutputArray__OutputArray_std_vector<_Tp>
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv__OutputArray__OutputArray_std_vector<std_vector<_Tp> >
  ignored: can not map type Vector[Vector[Unknown[_Tp]]] yet
Generating func cv__OutputArray__OutputArray_std_vector<Mat_<_Tp> >
  ignored: can not map type Vector[Unknown[Mat_<_Tp>]] yet
Generating func cv__OutputArray__OutputArray_Mat_<_Tp>
  ignored: can not map type Unknown[Mat_<_Tp>] yet
Generating func cv__OutputArray__OutputArray__Tp*_int
  ignored: can not map type RawPtr[Unknown[_Tp]] yet
Generating func cv__OutputArray__OutputArray_UMat
Generating func cv__OutputArray__OutputArray_VectorOfUMat
Generating func cv__OutputArray__OutputArray_Mat
  ignored: already there
Generating func cv__OutputArray__OutputArray_VectorOfMat
  ignored: already there
Generating func cv__OutputArray__OutputArray_cuda_GpuMat
  ignored: can not map type Unknown[cuda::GpuMat] yet
Generating func cv__OutputArray__OutputArray_std_vector<cuda_GpuMat>
  ignored: can not map type Vector[Unknown[cuda::GpuMat]] yet
Generating func cv__OutputArray__OutputArray_ogl_Buffer
  ignored: can not map type Unknown[ogl::Buffer] yet
Generating func cv__OutputArray__OutputArray_cuda_HostMem
  ignored: can not map type Unknown[cuda::HostMem] yet
Generating func cv__OutputArray__OutputArray_cudev_GpuMat_<_Tp>
  ignored: can not map type Unknown[cudev::GpuMat_<_Tp>] yet
Generating func cv__OutputArray__OutputArray_std_vector<_Tp>
  ignored: can not map type Vector[Unknown[_Tp]] yet
Generating func cv__OutputArray__OutputArray_std_vector<std_vector<_Tp> >
  ignored: can not map type Vector[Vector[Unknown[_Tp]]] yet
Generating func cv__OutputArray__OutputArray_std_vector<Mat_<_Tp> >
  ignored: can not map type Vector[Unknown[Mat_<_Tp>]] yet
Generating func cv__OutputArray__OutputArray_Mat_<_Tp>
  ignored: can not map type Unknown[Mat_<_Tp>] yet
Generating func cv__OutputArray__OutputArray__Tp*_int
  ignored: can not map type RawPtr[Unknown[_Tp]] yet
Generating func cv__OutputArray__OutputArray_UMat
  ignored: already there
Generating func cv__OutputArray__OutputArray_VectorOfUMat
  ignored: already there
Generating func cv__OutputArray__OutputArray_rawOut_std_vector<_Tp>
  ignored: return type class Unknown[template<typename _Tp> static _OutputArray] is ignored
Generating func cv__OutputArray_fixedSize_const
  ignored: already there
Generating func cv__OutputArray_fixedType_const
  ignored: already there
Generating func cv__OutputArray_needed_const
  ignored: already there
Generating func cv__OutputArray_getMatRef_const_int
  ignored: already there
Generating func cv__OutputArray_getUMatRef_const_int
  ignored: already there
Generating func cv__OutputArray_getGpuMatRef_const
  ignored: return type class Unknown[cuda::GpuMat] is ignored
Generating func cv__OutputArray_getGpuMatVecRef_const
  ignored: return type class Vector[Unknown[cuda::GpuMat]] is ignored
Generating func cv__OutputArray_getOGlBufferRef_const
  ignored: return type class Unknown[ogl::Buffer] is ignored
Generating func cv__OutputArray_getHostMemRef_const
  ignored: return type class Unknown[cuda::HostMem] is ignored
Generating func cv__OutputArray_create_const_Size_int_int_bool__OutputArray_DepthMask
  ignored: already there
Generating func cv__OutputArray_create_const_int_int_int_int_bool__OutputArray_DepthMask
  ignored: already there
Generating func cv__OutputArray_create_const_int_const_int_X_int_int_bool__OutputArray_DepthMask
  ignored: already there
Generating func cv__OutputArray_createSameSize_const__InputArray_int
  ignored: already there
Generating func cv__OutputArray_release_const
  ignored: already there
Generating func cv__OutputArray_clear_const
  ignored: already there
Generating func cv__OutputArray_setTo_const__InputArray__InputArray
  ignored: already there
Generating func cv__OutputArray_assign_const_UMat
  ignored: already there
Generating func cv__OutputArray_assign_const_Mat
  ignored: already there
Generating func cv__OutputArray_assign_const_VectorOfUMat
  ignored: already there
Generating func cv__OutputArray_assign_const_VectorOfMat
  ignored: already there
Generating func cv__OutputArray_move_const_UMat
  ignored: already there
Generating func cv__OutputArray_move_const_Mat
  ignored: already there
Generating box for cv::detail::CheckContext
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Manual ignore class cv::float16_t (ignored)
Generating box for cv::instr::NodeData
Generating func cv_instr_NodeData_NodeData_const_char_X_const_char_X_int_void_X_bool_TYPE_IMPL
Generating func cv_instr_NodeData_NodeData_NodeData
Generating func cv_instr_NodeData_getTotalMs_const
Generating func cv_instr_NodeData_getMeanMs_const
Generating box for cv::instr::NodeDataTls
Generating func cv_instr_NodeDataTls_NodeDataTls
Generating box for cv::internal::WriteStructContext
Generating func cv_internal_WriteStructContext_WriteStructContext_FileStorage_String_int_String
Generating box for cv::ocl::Context
Generating func cv_ocl_Context_Context
Generating func cv_ocl_Context_Context_int
Generating func cv_ocl_Context_Context_Context
Generating func cv_ocl_Context_create
Generating func cv_ocl_Context_create_int
Generating func cv_ocl_Context_ndevices_const
Generating func cv_ocl_Context_device_const_size_t
Generating func cv_ocl_Context_getProg_ProgramSource_String_String
  ignored: return type class Unknown[Program] is ignored
Generating func cv_ocl_Context_unloadProg_Program
  ignored: can not map type Unknown[Program] yet
Generating func cv_ocl_Context_getDefault_bool
  ignored: return type class Unknown[Context] is ignored
Generating func cv_ocl_Context_ptr_const
Generating func cv_ocl_Context_void_initializeContextFromHandle_Context_void_X_void_X_void_X
  ignored: return type class Unknown[friend void] is ignored
Generating func cv_ocl_Context_useSVM_const
Generating func cv_ocl_Context_setUseSVM_bool
Generating func cv_ocl_Context_getImpl_const
  ignored: return type class RawPtr[Unknown[Impl]] is ignored
Generating box for cv::ocl::Device
Generating func cv_ocl_Device_Device
Generating func cv_ocl_Device_Device_void_X
Generating func cv_ocl_Device_Device_Device
Generating func cv_ocl_Device_set_void_X
Generating func cv_ocl_Device_name_const
Generating func cv_ocl_Device_extensions_const
Generating func cv_ocl_Device_isExtensionSupported_const_String
Generating func cv_ocl_Device_version_const
Generating func cv_ocl_Device_vendorName_const
Generating func cv_ocl_Device_OpenCL_C_Version_const
Generating func cv_ocl_Device_OpenCLVersion_const
Generating func cv_ocl_Device_deviceVersionMajor_const
Generating func cv_ocl_Device_deviceVersionMinor_const
Generating func cv_ocl_Device_driverVersion_const
Generating func cv_ocl_Device_ptr_const
Generating func cv_ocl_Device_type_const
Generating func cv_ocl_Device_addressBits_const
Generating func cv_ocl_Device_available_const
Generating func cv_ocl_Device_compilerAvailable_const
Generating func cv_ocl_Device_linkerAvailable_const
Generating func cv_ocl_Device_doubleFPConfig_const
Generating func cv_ocl_Device_singleFPConfig_const
Generating func cv_ocl_Device_halfFPConfig_const
Generating func cv_ocl_Device_endianLittle_const
Generating func cv_ocl_Device_errorCorrectionSupport_const
Generating func cv_ocl_Device_executionCapabilities_const
Generating func cv_ocl_Device_globalMemCacheSize_const
Generating func cv_ocl_Device_globalMemCacheType_const
Generating func cv_ocl_Device_globalMemCacheLineSize_const
Generating func cv_ocl_Device_globalMemSize_const
Generating func cv_ocl_Device_localMemSize_const
Generating func cv_ocl_Device_localMemType_const
Generating func cv_ocl_Device_hostUnifiedMemory_const
Generating func cv_ocl_Device_imageSupport_const
Generating func cv_ocl_Device_imageFromBufferSupport_const
Generating func cv_ocl_Device_imagePitchAlignment_const
Generating func cv_ocl_Device_imageBaseAddressAlignment_const
Generating func cv_ocl_Device_intelSubgroupsSupport_const
Generating func cv_ocl_Device_image2DMaxWidth_const
Generating func cv_ocl_Device_image2DMaxHeight_const
Generating func cv_ocl_Device_image3DMaxWidth_const
Generating func cv_ocl_Device_image3DMaxHeight_const
Generating func cv_ocl_Device_image3DMaxDepth_const
Generating func cv_ocl_Device_imageMaxBufferSize_const
Generating func cv_ocl_Device_imageMaxArraySize_const
Generating func cv_ocl_Device_vendorID_const
Generating func cv_ocl_Device_isAMD_const
Generating func cv_ocl_Device_isIntel_const
Generating func cv_ocl_Device_isNVidia_const
Generating func cv_ocl_Device_maxClockFrequency_const
Generating func cv_ocl_Device_maxComputeUnits_const
Generating func cv_ocl_Device_maxConstantArgs_const
Generating func cv_ocl_Device_maxConstantBufferSize_const
Generating func cv_ocl_Device_maxMemAllocSize_const
Generating func cv_ocl_Device_maxParameterSize_const
Generating func cv_ocl_Device_maxReadImageArgs_const
Generating func cv_ocl_Device_maxWriteImageArgs_const
Generating func cv_ocl_Device_maxSamplers_const
Generating func cv_ocl_Device_maxWorkGroupSize_const
Generating func cv_ocl_Device_maxWorkItemDims_const
Generating func cv_ocl_Device_maxWorkItemSizes_const_size_t_X
Generating func cv_ocl_Device_memBaseAddrAlign_const
Generating func cv_ocl_Device_nativeVectorWidthChar_const
Generating func cv_ocl_Device_nativeVectorWidthShort_const
Generating func cv_ocl_Device_nativeVectorWidthInt_const
Generating func cv_ocl_Device_nativeVectorWidthLong_const
Generating func cv_ocl_Device_nativeVectorWidthFloat_const
Generating func cv_ocl_Device_nativeVectorWidthDouble_const
Generating func cv_ocl_Device_nativeVectorWidthHalf_const
Generating func cv_ocl_Device_preferredVectorWidthChar_const
Generating func cv_ocl_Device_preferredVectorWidthShort_const
Generating func cv_ocl_Device_preferredVectorWidthInt_const
Generating func cv_ocl_Device_preferredVectorWidthLong_const
Generating func cv_ocl_Device_preferredVectorWidthFloat_const
Generating func cv_ocl_Device_preferredVectorWidthDouble_const
Generating func cv_ocl_Device_preferredVectorWidthHalf_const
Generating func cv_ocl_Device_printfBufferSize_const
Generating func cv_ocl_Device_profilingTimerResolution_const
Generating func cv_ocl_Device_getDefault
Generating box for cv::ocl::Image2D
Generating func cv_ocl_Image2D_Image2D
Generating func cv_ocl_Image2D_Image2D_UMat_bool_bool
Generating func cv_ocl_Image2D_Image2D_Image2D
Generating func cv_ocl_Image2D_canCreateAlias_UMat
Generating func cv_ocl_Image2D_isFormatSupported_int_int_bool
Generating func cv_ocl_Image2D_ptr_const
Generating box for cv::ocl::Kernel
Generating func cv_ocl_Kernel_Kernel
Generating func cv_ocl_Kernel_Kernel_const_char_X_Program
  ignored: can not map type Unknown[Program] yet
Generating func cv_ocl_Kernel_Kernel_const_char_X_ProgramSource_String_String_X
  ignored: can not map type Unknown[ProgramSource] yet
Generating func cv_ocl_Kernel_Kernel_Kernel
Generating func cv_ocl_Kernel_empty_const
Generating func cv_ocl_Kernel_create_const_char_X_Program
  ignored: can not map type Unknown[Program] yet
Generating func cv_ocl_Kernel_create_const_char_X_ProgramSource_String_String_X
  ignored: can not map type Unknown[ProgramSource] yet
Generating func cv_ocl_Kernel_set_int_const_void_X_size_t
Generating func cv_ocl_Kernel_set_int_Image2D
  ignored: can not map type Unknown[Image2D] yet
Generating func cv_ocl_Kernel_set_int_UMat
Generating func cv_ocl_Kernel_set_int_KernelArg
Generating func cv_ocl_Kernel_set_int__Tp
  ignored: return type class Unknown[template<typename _Tp> int] is ignored
Generating func cv_ocl_Kernel_args__Tps&...
  ignored: return type class Unknown[template<typename... _Tps> Kernel] is ignored
Generating func cv_ocl_Kernel_run_int_size_t_X_size_t_X_bool_Queue
Generating func cv_ocl_Kernel_runTask_bool_Queue
Generating func cv_ocl_Kernel_runProfiling_int_size_t_X_size_t_X_Queue
Generating func cv_ocl_Kernel_workGroupSize_const
Generating func cv_ocl_Kernel_preferedWorkGroupSizeMultiple_const
Generating func cv_ocl_Kernel_compileWorkGroupSize_const_size_t_X
Generating func cv_ocl_Kernel_localMemSize_const
Generating func cv_ocl_Kernel_ptr_const
Generating box for cv::ocl::KernelArg
Generating func cv_ocl_KernelArg_KernelArg_int_UMat_int_int_const_void_X_size_t
Generating func cv_ocl_KernelArg_KernelArg
Generating func cv_ocl_KernelArg_Local_size_t
Generating func cv_ocl_KernelArg_PtrWriteOnly_UMat
Generating func cv_ocl_KernelArg_PtrReadOnly_UMat
Generating func cv_ocl_KernelArg_PtrReadWrite_UMat
Generating func cv_ocl_KernelArg_ReadWrite_UMat_int_int
Generating func cv_ocl_KernelArg_ReadWriteNoSize_UMat_int_int
Generating func cv_ocl_KernelArg_ReadOnly_UMat_int_int
Generating func cv_ocl_KernelArg_WriteOnly_UMat_int_int
Generating func cv_ocl_KernelArg_ReadOnlyNoSize_UMat_int_int
Generating func cv_ocl_KernelArg_WriteOnlyNoSize_UMat_int_int
Generating func cv_ocl_KernelArg_Constant_Mat
Generating func cv_ocl_KernelArg_KernelArg_Constant__Tp*_size_t
  ignored: return type class Unknown[template<typename _Tp> static KernelArg] is ignored
Generating box for cv::ocl::Platform
Generating func cv_ocl_Platform_Platform
Generating func cv_ocl_Platform_Platform_Platform
Generating func cv_ocl_Platform_ptr_const
Generating func cv_ocl_Platform_getDefault
Generating func cv_ocl_Platform_void_initializeContextFromHandle_Context_void_X_void_X_void_X
  ignored: return type class Unknown[friend void] is ignored
Generating box for cv::ocl::PlatformInfo
Generating func cv_ocl_PlatformInfo_PlatformInfo
Generating func cv_ocl_PlatformInfo_PlatformInfo_void_X
Generating func cv_ocl_PlatformInfo_PlatformInfo_PlatformInfo
Generating func cv_ocl_PlatformInfo_name_const
Generating func cv_ocl_PlatformInfo_vendor_const
Generating func cv_ocl_PlatformInfo_version_const
Generating func cv_ocl_PlatformInfo_deviceNumber_const
Generating func cv_ocl_PlatformInfo_getDevice_const_Device_int
Generating box for cv::ocl::Program
Generating func cv_ocl_Program_Program
  ignored: return type class Unknown[Program] is ignored
Generating func cv_ocl_Program_Program_ProgramSource_String_String
  ignored: return type class Unknown[Program] is ignored
Generating func cv_ocl_Program_Program_Program
  ignored: return type class Unknown[Program] is ignored
Generating func cv_ocl_Program_create_ProgramSource_String_String
  ignored: can not map type Unknown[ProgramSource] yet
Generating func cv_ocl_Program_ptr_const
Generating func cv_ocl_Program_getBinary_const_VectorOfchar
Generating func cv_ocl_Program_getImpl_const
  ignored: return type class RawPtr[Unknown[Impl]] is ignored
Generating func cv_ocl_Program_read_String_String
Generating func cv_ocl_Program_write_const_String
Generating func cv_ocl_Program_source_const
  ignored: return type class Unknown[ProgramSource] is ignored
Generating func cv_ocl_Program_getPrefix_const
Generating func cv_ocl_Program_getPrefix_String
Generating box for cv::ocl::ProgramSource
Generating func cv_ocl_ProgramSource_ProgramSource
Generating func cv_ocl_ProgramSource_ProgramSource_String_String_String_String
Generating func cv_ocl_ProgramSource_ProgramSource_String
Generating func cv_ocl_ProgramSource_ProgramSource_const_char_X
  ignored: ignored by rename table
Generating func cv_ocl_ProgramSource_ProgramSource_ProgramSource
  ignored: can not map type Unknown[ProgramSource] yet
Generating func cv_ocl_ProgramSource_source_const
Generating func cv_ocl_ProgramSource_hash_const
Generating func cv_ocl_ProgramSource_fromBinary_String_String_const_unsigned_char_X_size_t_String
Generating func cv_ocl_ProgramSource_fromSPIR_String_String_const_unsigned_char_X_size_t_String
Generating func cv_ocl_ProgramSource_getImpl_const
  ignored: return type class RawPtr[Unknown[Impl]] is ignored
Generating box for cv::ocl::Queue
Generating func cv_ocl_Queue_Queue
Generating func cv_ocl_Queue_Queue_Context_Device
Generating func cv_ocl_Queue_Queue_Queue
Generating func cv_ocl_Queue_create_Context_Device
Generating func cv_ocl_Queue_finish
Generating func cv_ocl_Queue_ptr_const
Generating func cv_ocl_Queue_getDefault
Generating func cv_ocl_Queue_getProfilingQueue_const
Generating func cv_ocl_Queue_getImpl_const
  ignored: return type class RawPtr[Unknown[Impl]] is ignored
Generating box for cv::ocl::Timer
Generating func cv_ocl_Timer_Timer_Queue
Generating func cv_ocl_Timer_start
Generating func cv_ocl_Timer_stop
Generating func cv_ocl_Timer_durationNS_const
Generating box for cv::ocl::internal::ProgramEntry
Manual ignore class cv::softdouble (ignored)
Manual ignore class cv::softfloat (ignored)
Generating impl for trait cv::utils::AllocatorStatisticsInterface (trait)
Generating func cv_utils_AllocatorStatisticsInterface_getCurrentUsage_const
Generating func cv_utils_AllocatorStatisticsInterface_getTotalUsage_const
Generating func cv_utils_AllocatorStatisticsInterface_getNumberOfAllocations_const
Generating func cv_utils_AllocatorStatisticsInterface_getPeakUsage_const
Generating func cv_utils_AllocatorStatisticsInterface_resetPeakUsage
Generating box for cv::utils::logging::LogTag
Generating func cv_utils_logging_LogTag_LogTag_const_char_X_LogLevel
Manual ignore class cv::utils::logging::LogTagAuto (ignored)
