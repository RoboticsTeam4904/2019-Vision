
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash.hpp ================


Namespaces: []
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/average_hash.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'class cv.img_hash.AverageHash',
    ': cv::img_hash::ImgHashBase',
    [],
    [],
    None,
    '@brief Computes average hash value of the input image\n'
    '\n'
    'This is a fast image hashing algorithm, but only work on simple case. For '
    'more details, please\n'
    'refer to @cite lookslikeit']
parse_name: class cv.img_hash.AverageHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::AverageHash namespace:cv::img_hash classpath: classname: name:AverageHash
register class cv::img_hash::AverageHash (['class cv.img_hash.AverageHash', ': cv::img_hash::ImgHashBase', [], [], None, '@brief Computes average hash value of the input image\n\nThis is a fast image hashing algorithm, but only work on simple case. For more details, please\nrefer to @cite lookslikeit']) impl:cv::img_hash::ImgHashBase

--- Incoming ---
['cv.img_hash.AverageHash.create', 'Ptr<AverageHash>', ['/S'], [], None, '']
parse_name: cv.img_hash.AverageHash.create with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::AverageHash::create namespace:cv::img_hash classpath:AverageHash classname:AverageHash name:create
register (method) create in cv::img_hash::AverageHash (cv_img_hash_AverageHash_create)

--- Incoming ---
['cv.img_hash.AverageHash.AverageHash', 'A', ['/H'], [], None, '']
parse_name: cv.img_hash.AverageHash.AverageHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::AverageHash::AverageHash namespace:cv::img_hash classpath:AverageHash classname:AverageHash name:AverageHash

--- Incoming ---
[   'cv.img_hash.averageHash',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []]],
    None,
    '@brief Calculates img_hash::AverageHash in one call\n'
    '@param inputArr input image want to compute hash value, type should be '
    'CV_8UC4, CV_8UC3 or CV_8UC1.\n'
    '@param outputArr Hash value of input, it will contain 16 hex decimal '
    'number, return type is CV_8U']
parse_name: cv.img_hash.averageHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::averageHash namespace:cv::img_hash classpath: classname: name:averageHash
Registering an unknown type: cv::InputArray
Registering an unknown type: cv::OutputArray
register (function) averageHash (cv_img_hash_averageHash_InputArray_OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/block_mean_hash.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'enum cv.img_hash.BlockMeanHashMode',
    '',
    [],
    [   [   'const cv.img_hash.BLOCK_MEAN_HASH_MODE_0',
            '0',
            [],
            [],
            None,
            'use fewer block and generate 16*16/8 uchar hash value\n'],
        [   'const cv.img_hash.BLOCK_MEAN_HASH_MODE_1',
            '1',
            [],
            [],
            None,
            'use block blocks(step sizes/2), generate 31*31/8 + 1 uchar hash '
            'value\n']],
    None,
    '@addtogroup img_hash\n@{']
parse_name: const cv.img_hash.BLOCK_MEAN_HASH_MODE_0 with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BLOCK_MEAN_HASH_MODE_0 namespace:cv::img_hash classpath: classname: name:BLOCK_MEAN_HASH_MODE_0
parse_name: const cv.img_hash.BLOCK_MEAN_HASH_MODE_1 with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BLOCK_MEAN_HASH_MODE_1 namespace:cv::img_hash classpath: classname: name:BLOCK_MEAN_HASH_MODE_1
parse_name: enum cv.img_hash.BlockMeanHashMode with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BlockMeanHashMode namespace:cv::img_hash classpath: classname: name:BlockMeanHashMode
parse_name: const cv.img_hash.BLOCK_MEAN_HASH_MODE_0 with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BLOCK_MEAN_HASH_MODE_0 namespace:cv::img_hash classpath: classname: name:BLOCK_MEAN_HASH_MODE_0
parse_name: const cv.img_hash.BLOCK_MEAN_HASH_MODE_1 with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BLOCK_MEAN_HASH_MODE_1 namespace:cv::img_hash classpath: classname: name:BLOCK_MEAN_HASH_MODE_1

--- Incoming ---
[   'class cv.img_hash.BlockMeanHash',
    ': cv::img_hash::ImgHashBase',
    [],
    [],
    None,
    '@brief Image hash based on block mean.\n'
    '\n'
    'See @cite zauner2010implementation for details.']
parse_name: class cv.img_hash.BlockMeanHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BlockMeanHash namespace:cv::img_hash classpath: classname: name:BlockMeanHash
register class cv::img_hash::BlockMeanHash (['class cv.img_hash.BlockMeanHash', ': cv::img_hash::ImgHashBase', [], [], None, '@brief Image hash based on block mean.\n\nSee @cite zauner2010implementation for details.']) impl:cv::img_hash::ImgHashBase

--- Incoming ---
[   'cv.img_hash.BlockMeanHash.setMode',
    'void',
    [],
    [['int', 'mode', '', []]],
    None,
    '@brief Create BlockMeanHash object\n@param mode the mode']
parse_name: cv.img_hash.BlockMeanHash.setMode with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BlockMeanHash::setMode namespace:cv::img_hash classpath:BlockMeanHash classname:BlockMeanHash name:setMode
register (method) setMode in cv::img_hash::BlockMeanHash (cv_img_hash_BlockMeanHash_setMode_int)

--- Incoming ---
[   'cv.img_hash.BlockMeanHash.getMean',
    'std::vector<double>',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.img_hash.BlockMeanHash.getMean with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BlockMeanHash::getMean namespace:cv::img_hash classpath:BlockMeanHash classname:BlockMeanHash name:getMean
register (method) getMean in cv::img_hash::BlockMeanHash (cv_img_hash_BlockMeanHash_getMean_const)

--- Incoming ---
[   'cv.img_hash.BlockMeanHash.create',
    'Ptr<BlockMeanHash>',
    ['/S'],
    [['int', 'mode', 'BLOCK_MEAN_HASH_MODE_0', []]],
    None,
    '']
parse_name: cv.img_hash.BlockMeanHash.create with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BlockMeanHash::create namespace:cv::img_hash classpath:BlockMeanHash classname:BlockMeanHash name:create
register (method) create in cv::img_hash::BlockMeanHash (cv_img_hash_BlockMeanHash_create_int)

--- Incoming ---
['cv.img_hash.BlockMeanHash.BlockMeanHash', 'B', ['/H'], [], None, '']
parse_name: cv.img_hash.BlockMeanHash.BlockMeanHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::BlockMeanHash::BlockMeanHash namespace:cv::img_hash classpath:BlockMeanHash classname:BlockMeanHash name:BlockMeanHash

--- Incoming ---
[   'cv.img_hash.blockMeanHash',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []],
        ['int', 'mode', 'BLOCK_MEAN_HASH_MODE_0', []]],
    None,
    '@brief Computes block mean hash of the input image\n'
    '@param inputArr input image want to compute hash value, type should be '
    'CV_8UC4, CV_8UC3 or CV_8UC1.\n'
    '@param outputArr Hash value of input, it will contain 16 hex decimal '
    'number, return type is CV_8U\n'
    '@param mode the mode']
parse_name: cv.img_hash.blockMeanHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::blockMeanHash namespace:cv::img_hash classpath: classname: name:blockMeanHash
register (function) blockMeanHash (cv_img_hash_blockMeanHash_InputArray_OutputArray_int)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/color_moment_hash.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'class cv.img_hash.ColorMomentHash',
    ': cv::img_hash::ImgHashBase',
    [],
    [],
    None,
    '@brief Image hash based on color moments.\n'
    '\n'
    'See @cite tang2012perceptual for details.']
parse_name: class cv.img_hash.ColorMomentHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ColorMomentHash namespace:cv::img_hash classpath: classname: name:ColorMomentHash
register class cv::img_hash::ColorMomentHash (['class cv.img_hash.ColorMomentHash', ': cv::img_hash::ImgHashBase', [], [], None, '@brief Image hash based on color moments.\n\nSee @cite tang2012perceptual for details.']) impl:cv::img_hash::ImgHashBase

--- Incoming ---
[   'cv.img_hash.ColorMomentHash.create',
    'Ptr<ColorMomentHash>',
    ['/S'],
    [],
    None,
    '']
parse_name: cv.img_hash.ColorMomentHash.create with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ColorMomentHash::create namespace:cv::img_hash classpath:ColorMomentHash classname:ColorMomentHash name:create
register (method) create in cv::img_hash::ColorMomentHash (cv_img_hash_ColorMomentHash_create)

--- Incoming ---
['cv.img_hash.ColorMomentHash.ColorMomentHash', 'C', ['/H'], [], None, '']
parse_name: cv.img_hash.ColorMomentHash.ColorMomentHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ColorMomentHash::ColorMomentHash namespace:cv::img_hash classpath:ColorMomentHash classname:ColorMomentHash name:ColorMomentHash

--- Incoming ---
[   'cv.img_hash.colorMomentHash',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []]],
    None,
    '@brief Computes color moment hash of the input, the algorithm\n'
    'is come from the paper "Perceptual  Hashing  for  Color  Images\n'
    'Using  Invariant Moments"\n'
    '@param inputArr input image want to compute hash value,\n'
    'type should be CV_8UC4, CV_8UC3 or CV_8UC1.\n'
    '@param outputArr 42 hash values with type CV_64F(double)']
parse_name: cv.img_hash.colorMomentHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::colorMomentHash namespace:cv::img_hash classpath: classname: name:colorMomentHash
register (function) colorMomentHash (cv_img_hash_colorMomentHash_InputArray_OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/img_hash_base.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'class cv.img_hash.ImgHashBase',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief The base class for image hash algorithms']
parse_name: class cv.img_hash.ImgHashBase with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ImgHashBase namespace:cv::img_hash classpath: classname: name:ImgHashBase
register class cv::img_hash::ImgHashBase (['class cv.img_hash.ImgHashBase', ': cv::Algorithm', [], [], None, '@brief The base class for image hash algorithms']) impl:cv::Algorithm

--- Incoming ---
['cv.img_hash.ImgHashBase.~ImgHashBase', '~', [], [], None, '']
parse_name: cv.img_hash.ImgHashBase.~ImgHashBase with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ImgHashBase::~ImgHashBase namespace:cv::img_hash classpath:ImgHashBase classname:ImgHashBase name:~ImgHashBase
Registering an unknown type: ~
ignore destructor (method) ~ImgHashBase in cv::img_hash::ImgHashBase

--- Incoming ---
[   'cv.img_hash.ImgHashBase.compute',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []]],
    None,
    '@brief Computes hash of the input image\n'
    '@param inputArr input image want to compute hash value\n'
    '@param outputArr hash of the image']
parse_name: cv.img_hash.ImgHashBase.compute with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ImgHashBase::compute namespace:cv::img_hash classpath:ImgHashBase classname:ImgHashBase name:compute
register (method) compute in cv::img_hash::ImgHashBase (cv_img_hash_ImgHashBase_compute_InputArray_OutputArray)

--- Incoming ---
[   'cv.img_hash.ImgHashBase.compare',
    'double',
    ['/C'],
    [   ['cv::InputArray', 'hashOne', '', []],
        ['cv::InputArray', 'hashTwo', '', []]],
    None,
    '@brief Compare the hash value between inOne and inTwo\n'
    '@param hashOne Hash value one\n'
    '@param hashTwo Hash value two\n'
    '@return value indicate similarity between inOne and inTwo, the meaning\n'
    'of the value vary from algorithms to algorithms']
parse_name: cv.img_hash.ImgHashBase.compare with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ImgHashBase::compare namespace:cv::img_hash classpath:ImgHashBase classname:ImgHashBase name:compare
register (method) compare in cv::img_hash::ImgHashBase (cv_img_hash_ImgHashBase_compare_const_InputArray_InputArray)

--- Incoming ---
['cv.img_hash.ImgHashBase.ImgHashBase', 'I', ['/H'], [], None, '']
parse_name: cv.img_hash.ImgHashBase.ImgHashBase with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::ImgHashBase::ImgHashBase namespace:cv::img_hash classpath:ImgHashBase classname:ImgHashBase name:ImgHashBase


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/marr_hildreth_hash.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'class cv.img_hash.MarrHildrethHash',
    ': cv::img_hash::ImgHashBase',
    [],
    [],
    None,
    '@brief Marr-Hildreth Operator Based Hash, slowest but more '
    'discriminative.\n'
    '\n'
    'See @cite zauner2010implementation for details.']
parse_name: class cv.img_hash.MarrHildrethHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::MarrHildrethHash namespace:cv::img_hash classpath: classname: name:MarrHildrethHash
register class cv::img_hash::MarrHildrethHash (['class cv.img_hash.MarrHildrethHash', ': cv::img_hash::ImgHashBase', [], [], None, '@brief Marr-Hildreth Operator Based Hash, slowest but more discriminative.\n\nSee @cite zauner2010implementation for details.']) impl:cv::img_hash::ImgHashBase

--- Incoming ---
[   'cv.img_hash.MarrHildrethHash.getAlpha',
    'float',
    ['/C'],
    [],
    None,
    '* @brief self explain']
parse_name: cv.img_hash.MarrHildrethHash.getAlpha with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::MarrHildrethHash::getAlpha namespace:cv::img_hash classpath:MarrHildrethHash classname:MarrHildrethHash name:getAlpha
register (method) getAlpha in cv::img_hash::MarrHildrethHash (cv_img_hash_MarrHildrethHash_getAlpha_const)

--- Incoming ---
[   'cv.img_hash.MarrHildrethHash.getScale',
    'float',
    ['/C'],
    [],
    None,
    '* @brief self explain']
parse_name: cv.img_hash.MarrHildrethHash.getScale with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::MarrHildrethHash::getScale namespace:cv::img_hash classpath:MarrHildrethHash classname:MarrHildrethHash name:getScale
register (method) getScale in cv::img_hash::MarrHildrethHash (cv_img_hash_MarrHildrethHash_getScale_const)

--- Incoming ---
[   'cv.img_hash.MarrHildrethHash.setKernelParam',
    'void',
    [],
    [['float', 'alpha', '', []], ['float', 'scale', '', []]],
    None,
    '@brief Set Mh kernel parameters\n'
    '@param alpha int scale factor for marr wavelet (default=2).\n'
    '@param scale int level of scale factor (default = 1)']
parse_name: cv.img_hash.MarrHildrethHash.setKernelParam with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::MarrHildrethHash::setKernelParam namespace:cv::img_hash classpath:MarrHildrethHash classname:MarrHildrethHash name:setKernelParam
register (method) setKernelParam in cv::img_hash::MarrHildrethHash (cv_img_hash_MarrHildrethHash_setKernelParam_float_float)

--- Incoming ---
[   'cv.img_hash.MarrHildrethHash.create',
    'Ptr<MarrHildrethHash>',
    ['/S'],
    [['float', 'alpha', '2.0f', []], ['float', 'scale', '1.0f', []]],
    None,
    '@param alpha int scale factor for marr wavelet (default=2).\n'
    '@param scale int level of scale factor (default = 1)']
parse_name: cv.img_hash.MarrHildrethHash.create with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::MarrHildrethHash::create namespace:cv::img_hash classpath:MarrHildrethHash classname:MarrHildrethHash name:create
register (method) create in cv::img_hash::MarrHildrethHash (cv_img_hash_MarrHildrethHash_create_float_float)

--- Incoming ---
['cv.img_hash.MarrHildrethHash.MarrHildrethHash', 'M', ['/H'], [], None, '']
parse_name: cv.img_hash.MarrHildrethHash.MarrHildrethHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::MarrHildrethHash::MarrHildrethHash namespace:cv::img_hash classpath:MarrHildrethHash classname:MarrHildrethHash name:MarrHildrethHash

--- Incoming ---
[   'cv.img_hash.marrHildrethHash',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []],
        ['float', 'alpha', '2.0f', []],
        ['float', 'scale', '1.0f', []]],
    None,
    '@brief Computes average hash value of the input image\n'
    '@param inputArr input image want to compute hash value,\n'
    'type should be CV_8UC4, CV_8UC3, CV_8UC1.\n'
    '@param outputArr Hash value of input, it will contain 16 hex\n'
    'decimal number, return type is CV_8U\n'
    '@param alpha int scale factor for marr wavelet (default=2).\n'
    '@param scale int level of scale factor (default = 1)']
parse_name: cv.img_hash.marrHildrethHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::marrHildrethHash namespace:cv::img_hash classpath: classname: name:marrHildrethHash
register (function) marrHildrethHash (cv_img_hash_marrHildrethHash_InputArray_OutputArray_float_float)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/phash.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'class cv.img_hash.PHash',
    ': cv::img_hash::ImgHashBase',
    [],
    [],
    None,
    '@brief pHash\n'
    '\n'
    'Slower than average_hash, but tolerant of minor modifications\n'
    '\n'
    'This algorithm can combat more variation than averageHash, for more '
    'details please refer to @cite lookslikeit']
parse_name: class cv.img_hash.PHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::PHash namespace:cv::img_hash classpath: classname: name:PHash
register class cv::img_hash::PHash (['class cv.img_hash.PHash', ': cv::img_hash::ImgHashBase', [], [], None, '@brief pHash\n\nSlower than average_hash, but tolerant of minor modifications\n\nThis algorithm can combat more variation than averageHash, for more details please refer to @cite lookslikeit']) impl:cv::img_hash::ImgHashBase

--- Incoming ---
['cv.img_hash.PHash.create', 'Ptr<PHash>', ['/S'], [], None, '']
parse_name: cv.img_hash.PHash.create with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::PHash::create namespace:cv::img_hash classpath:PHash classname:PHash name:create
register (method) create in cv::img_hash::PHash (cv_img_hash_PHash_create)

--- Incoming ---
['cv.img_hash.PHash.PHash', 'P', ['/H'], [], None, '']
parse_name: cv.img_hash.PHash.PHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::PHash::PHash namespace:cv::img_hash classpath:PHash classname:PHash name:PHash

--- Incoming ---
[   'cv.img_hash.pHash',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []]],
    None,
    '@brief Computes pHash value of the input image\n'
    '@param inputArr input image want to compute hash value,\n'
    'type should be CV_8UC4, CV_8UC3, CV_8UC1.\n'
    '@param outputArr Hash value of input, it will contain 8 uchar value']
parse_name: cv.img_hash.pHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::pHash namespace:cv::img_hash classpath: classname: name:pHash
register (function) pHash (cv_img_hash_pHash_InputArray_OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/img_hash/radial_variance_hash.hpp ================


Namespaces: ['cv', 'cv.img_hash']
Comment: {'img_hash': '\n@defgroup img_hash The module brings implementations of different image hashing algorithms.\n\nProvide algorithms to extract the hash of images and fast way to figure out most similar images in\nhuge data set.\n\nNamespace for all functions is cv::img_hash.\n\n### Supported Algorithms\n\n- Average hash (also called Different hash)\n- PHash (also called Perceptual hash)\n- Marr Hildreth Hash\n- Radial Variance Hash\n- Block Mean Hash (modes 0 and 1)\n- Color Moment Hash (this is the one and only hash algorithm resist to rotation attack(-90~90 degree))\n\nYou can study more about image hashing from following paper and websites:\n\n- "Implementation and benchmarking of perceptual image hash functions" @cite zauner2010implementation\n- "Looks Like It" @cite lookslikeit\n\n### Code Example\n\n@include samples/hash_samples.cpp\n\n### Performance under different attacks\n\n![Performance chart](img_hash/doc/attack_performance.JPG)\n\n### Speed comparison with PHash library (100 images from ukbench)\n\n![Hash Computation chart](img_hash/doc/hash_computation_chart.JPG)\n![Hash comparison chart](img_hash/doc/hash_comparison_chart.JPG)\n\nAs you can see, hash computation speed of img_hash module outperform [PHash library](http://www.phash.org/) a lot.\n\nPS : I do not list out the comparison of Average hash, PHash and Color Moment hash, because I cannot\nfind them in PHash.\n\n### Motivation\n\nCollects useful image hash algorithms into opencv, so we do not need to rewrite them by ourselves\nagain and again or rely on another 3rd party library(ex : PHash library). BOVW or correlation\nmatching are good and robust, but they are very slow compare with image hash, if you need to deal\nwith large scale CBIR(content based image retrieval) problem, image hash is a more reasonable\nsolution.\n\n### More info\n\nYou can learn more about img_hash modules from following links, these links show you how to find\nsimilar image from ukbench dataset, provide thorough benchmark of different attacks(contrast, blur,\nnoise(gaussion,pepper and salt), jpeg compression, watermark, resize).\n\n* [Introduction to image hash module of opencv](http://qtandopencv.blogspot.my/2016/06/introduction-to-image-hash-module-of.html)\n* [Speed up image hashing of opencv(img_hash) and introduce color moment hash](http://qtandopencv.blogspot.my/2016/06/speed-up-image-hashing-of-opencvimghash.html)\n\n### Contributors\n\nTham Ngap Wei, thamngapwei@gmail.com\n\n\n'}

--- Incoming ---
[   'class cv.img_hash.RadialVarianceHash',
    ': cv::img_hash::ImgHashBase',
    [],
    [],
    None,
    '@brief Image hash based on Radon transform.\n'
    '\n'
    'See @cite tang2012perceptual for details.']
parse_name: class cv.img_hash.RadialVarianceHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash namespace:cv::img_hash classpath: classname: name:RadialVarianceHash
register class cv::img_hash::RadialVarianceHash (['class cv.img_hash.RadialVarianceHash', ': cv::img_hash::ImgHashBase', [], [], None, '@brief Image hash based on Radon transform.\n\nSee @cite tang2012perceptual for details.']) impl:cv::img_hash::ImgHashBase

--- Incoming ---
[   'cv.img_hash.RadialVarianceHash.create',
    'Ptr<RadialVarianceHash>',
    ['/S'],
    [['double', 'sigma', '1', []], ['int', 'numOfAngleLine', '180', []]],
    None,
    '']
parse_name: cv.img_hash.RadialVarianceHash.create with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::create namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:create
register (method) create in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_create_double_int)

--- Incoming ---
[   'cv.img_hash.RadialVarianceHash.getNumOfAngleLine',
    'int',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.img_hash.RadialVarianceHash.getNumOfAngleLine with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::getNumOfAngleLine namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:getNumOfAngleLine
register (method) getNumOfAngleLine in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_getNumOfAngleLine_const)

--- Incoming ---
['cv.img_hash.RadialVarianceHash.getSigma', 'double', ['/C'], [], None, '']
parse_name: cv.img_hash.RadialVarianceHash.getSigma with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::getSigma namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:getSigma
register (method) getSigma in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_getSigma_const)

--- Incoming ---
[   'cv.img_hash.RadialVarianceHash.setNumOfAngleLine',
    'void',
    [],
    [['int', 'value', '', []]],
    None,
    '']
parse_name: cv.img_hash.RadialVarianceHash.setNumOfAngleLine with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::setNumOfAngleLine namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:setNumOfAngleLine
register (method) setNumOfAngleLine in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_setNumOfAngleLine_int)

--- Incoming ---
[   'cv.img_hash.RadialVarianceHash.setSigma',
    'void',
    [],
    [['double', 'value', '', []]],
    None,
    '']
parse_name: cv.img_hash.RadialVarianceHash.setSigma with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::setSigma namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:setSigma
register (method) setSigma in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_setSigma_double)

--- Incoming ---
[   'cv.img_hash.RadialVarianceHash.getFeatures',
    'std::vector<double>',
    [],
    [],
    None,
    '']
parse_name: cv.img_hash.RadialVarianceHash.getFeatures with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::getFeatures namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:getFeatures
register (method) getFeatures in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_getFeatures)

--- Incoming ---
['cv.img_hash.RadialVarianceHash.getHash', 'cv::Mat', [], [], None, '']
parse_name: cv.img_hash.RadialVarianceHash.getHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::getHash namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:getHash
register (method) getHash in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_getHash)

--- Incoming ---
[   'cv.img_hash.RadialVarianceHash.getPixPerLine',
    'Mat',
    [],
    [['Mat const &', 'input', '', []]],
    None,
    '']
parse_name: cv.img_hash.RadialVarianceHash.getPixPerLine with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::getPixPerLine namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:getPixPerLine
Registering an unknown type: Mat const
register (method) getPixPerLine in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_getPixPerLine_Mat const)

--- Incoming ---
['cv.img_hash.RadialVarianceHash.getProjection', 'Mat', [], [], None, '']
parse_name: cv.img_hash.RadialVarianceHash.getProjection with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::getProjection namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:getProjection
register (method) getProjection in cv::img_hash::RadialVarianceHash (cv_img_hash_RadialVarianceHash_getProjection)

--- Incoming ---
['cv.img_hash.RadialVarianceHash.RadialVarianceHash', 'R', ['/H'], [], None, '']
parse_name: cv.img_hash.RadialVarianceHash.RadialVarianceHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::RadialVarianceHash::RadialVarianceHash namespace:cv::img_hash classpath:RadialVarianceHash classname:RadialVarianceHash name:RadialVarianceHash

--- Incoming ---
[   'cv.img_hash.radialVarianceHash',
    'void',
    [],
    [   ['cv::InputArray', 'inputArr', '', []],
        ['cv::OutputArray', 'outputArr', '', []],
        ['double', 'sigma', '1', []],
        ['int', 'numOfAngleLine', '180', []]],
    None,
    '@brief Computes radial variance hash of the input image\n'
    '@param inputArr input image want to compute hash value,\n'
    'type should be CV_8UC4, CV_8UC3, CV_8UC1.\n'
    '@param outputArr Hash value of input\n'
    '@param sigma Gaussian kernel standard deviation\n'
    '@param numOfAngleLine The number of angles to consider']
parse_name: cv.img_hash.radialVarianceHash with ['cv', 'cv::img_hash'] -> fullname:cv::img_hash::radialVarianceHash namespace:cv::img_hash classpath: classname: name:radialVarianceHash
register (function) radialVarianceHash (cv_img_hash_radialVarianceHash_InputArray_OutputArray_double_int)


===== Generating... =====
Generating func cv_img_hash_averageHash_InputArray_OutputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_blockMeanHash_InputArray_OutputArray_int
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_colorMomentHash_InputArray_OutputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_marrHildrethHash_InputArray_OutputArray_float_float
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_pHash_InputArray_OutputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_radialVarianceHash_InputArray_OutputArray_double_int
  ignored: can not map type Unknown[cv::InputArray] yet
Ghost class cv::Algorithm (ghost, trait), ignoring
Ghost class cv::DMatch (simple, ghost), ignoring
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Ghost class cv::Feature2D (ghost, trait), ignoring
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Ghost class cv::KeyPoint (simple, ghost), ignoring
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Ghost class cv::TermCriteria (ghost), ignoring
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Generating box for cv::img_hash::AverageHash
Generating func cv_img_hash_AverageHash_create
Generating box for cv::img_hash::BlockMeanHash
Generating func cv_img_hash_BlockMeanHash_setMode_int
Generating func cv_img_hash_BlockMeanHash_getMean_const
Generating func cv_img_hash_BlockMeanHash_create_int
Generating box for cv::img_hash::ColorMomentHash
Generating func cv_img_hash_ColorMomentHash_create
Generating impl for trait cv::img_hash::ImgHashBase (trait)
Generating func cv_img_hash_ImgHashBase_compute_InputArray_OutputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_ImgHashBase_compare_const_InputArray_InputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating box for cv::img_hash::ImgHashBase (trait)
Generating func cv_img_hash_ImgHashBase_compute_InputArray_OutputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating func cv_img_hash_ImgHashBase_compare_const_InputArray_InputArray
  ignored: can not map type Unknown[cv::InputArray] yet
Generating box for cv::img_hash::MarrHildrethHash
Generating func cv_img_hash_MarrHildrethHash_getAlpha_const
Generating func cv_img_hash_MarrHildrethHash_getScale_const
Generating func cv_img_hash_MarrHildrethHash_setKernelParam_float_float
Generating func cv_img_hash_MarrHildrethHash_create_float_float
Generating box for cv::img_hash::PHash
Generating func cv_img_hash_PHash_create
Generating box for cv::img_hash::RadialVarianceHash
Generating func cv_img_hash_RadialVarianceHash_create_double_int
Generating func cv_img_hash_RadialVarianceHash_getNumOfAngleLine_const
Generating func cv_img_hash_RadialVarianceHash_getSigma_const
Generating func cv_img_hash_RadialVarianceHash_setNumOfAngleLine_int
Generating func cv_img_hash_RadialVarianceHash_setSigma_double
Generating func cv_img_hash_RadialVarianceHash_getFeatures
Generating func cv_img_hash_RadialVarianceHash_getHash
Generating func cv_img_hash_RadialVarianceHash_getPixPerLine_Mat const
  ignored: can not map type Unknown[Mat const] yet
Generating func cv_img_hash_RadialVarianceHash_getProjection
Ghost class cv::utils::logging::LogTag (ghost), ignoring
