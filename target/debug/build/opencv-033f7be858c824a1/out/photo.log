
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/photo.hpp ================


Namespaces: ['cv']
Comment: {'photo': '\n@defgroup photo Computational Photography\n\nThis module includes photo processing algorithms\n@{\n@defgroup photo_inpaint Inpainting\n@defgroup photo_denoise Denoising\n@defgroup photo_hdr HDR imaging\n\nThis section describes high dynamic range imaging algorithms namely tonemapping, exposure alignment,\ncamera calibration with multiple exposures and exposure fusion.\n\n@defgroup photo_decolor Contrast Preserving Decolorization\n\nUseful links:\n\nhttp://www.cse.cuhk.edu.hk/leojia/projects/color2gray/index.html\n\n@defgroup photo_clone Seamless Cloning\n\nUseful links:\n\nhttps://www.learnopencv.com/seamless-cloning-using-opencv-python-cpp\n\n@defgroup photo_render Non-Photorealistic Rendering\n\nUseful links:\n\nhttp://www.inf.ufrgs.br/~eslgastal/DomainTransform\n\nhttps://www.learnopencv.com/non-photorealistic-rendering-using-opencv-python-c/\n@}\n\n'}

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   [   'const cv.INPAINT_NS',
            '0',
            [],
            [],
            None,
            'Use Navier-Stokes based method\n'],
        [   'const cv.INPAINT_TELEA',
            '1',
            [],
            [],
            None,
            'Use the algorithm proposed by Alexandru Telea @cite Telea04\n']],
    None,
    '@addtogroup photo\n'
    '@{\n'
    '@addtogroup photo_inpaint\n'
    '@{\n'
    'the inpainting algorithm']
parse_name: const cv.INPAINT_NS with ['cv'] -> fullname:cv::INPAINT_NS namespace:cv classpath: classname: name:INPAINT_NS
parse_name: const cv.INPAINT_TELEA with ['cv'] -> fullname:cv::INPAINT_TELEA namespace:cv classpath: classname: name:INPAINT_TELEA

--- Incoming ---
[   'cv.inpaint',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'inpaintMask', '', []],
        ['OutputArray', 'dst', '', []],
        ['double', 'inpaintRadius', '', []],
        ['int', 'flags', '', []]],
    None,
    '@brief Restores the selected region in an image using the region '
    'neighborhood.\n'
    '\n'
    '@param src Input 8-bit, 16-bit unsigned or 32-bit float 1-channel or '
    '8-bit 3-channel image.\n'
    '@param inpaintMask Inpainting mask, 8-bit 1-channel image. Non-zero '
    'pixels indicate the area that\n'
    'needs to be inpainted.\n'
    '@param dst Output image with the same size and type as src .\n'
    '@param inpaintRadius Radius of a circular neighborhood of each point '
    'inpainted that is considered\n'
    'by the algorithm.\n'
    '@param flags Inpainting method that could be cv::INPAINT_NS or '
    'cv::INPAINT_TELEA\n'
    '\n'
    'The function reconstructs the selected image area from the pixel near the '
    'area boundary. The\n'
    'function may be used to remove dust and scratches from a scanned photo, '
    'or to remove undesirable\n'
    'objects from still images or video. See '
    '<http://en.wikipedia.org/wiki/Inpainting> for more details.\n'
    '\n'
    '@note\n'
    '-   An example using the inpainting technique can be found at\n'
    'opencv_source_code/samples/cpp/inpaint.cpp\n'
    '-   (Python) An example using the inpainting technique can be found at\n'
    'opencv_source_code/samples/python/inpaint.py']
parse_name: cv.inpaint with ['cv'] -> fullname:cv::inpaint namespace:cv classpath: classname: name:inpaint
register (function) inpaint (cv_inpaint__InputArray__InputArray__OutputArray_double_int)

--- Incoming ---
[   'cv.fastNlMeansDenoising',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'h', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    None,
    '@brief Perform image denoising using Non-local Means Denoising algorithm\n'
    '<http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/> with several '
    'computational\n'
    'optimizations. Noise expected to be a gaussian white noise\n'
    '\n'
    '@param src Input 8-bit 1-channel, 2-channel, 3-channel or 4-channel '
    'image.\n'
    '@param dst Output image with the same size and type as src .\n'
    '@param templateWindowSize Size in pixels of the template patch that is '
    'used to compute weights.\n'
    'Should be odd. Recommended value 7 pixels\n'
    '@param searchWindowSize Size in pixels of the window that is used to '
    'compute weighted average for\n'
    'given pixel. Should be odd. Affect performance linearly: greater '
    'searchWindowsSize - greater\n'
    'denoising time. Recommended value 21 pixels\n'
    '@param h Parameter regulating filter strength. Big h value perfectly '
    'removes noise but also\n'
    'removes image details, smaller h value preserves details but also '
    'preserves some noise\n'
    '\n'
    'This function expected to be applied to grayscale images. For colored '
    'images look at\n'
    'fastNlMeansDenoisingColored. Advanced usage of this functions can be '
    'manual denoising of colored\n'
    'image in different colorspaces. Such approach is used in '
    'fastNlMeansDenoisingColored by converting\n'
    'image to CIELAB colorspace and then separately denoise L and AB '
    'components with different h\n'
    'parameter.']
parse_name: cv.fastNlMeansDenoising with ['cv'] -> fullname:cv::fastNlMeansDenoising namespace:cv classpath: classname: name:fastNlMeansDenoising
register (function) fastNlMeansDenoising (cv_fastNlMeansDenoising__InputArray__OutputArray_float_int_int)

--- Incoming ---
[   'cv.fastNlMeansDenoising',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['const std::vector<float>&', 'h', '', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []],
        ['int', 'normType', 'NORM_L2', []]],
    None,
    '@brief Perform image denoising using Non-local Means Denoising algorithm\n'
    '<http://www.ipol.im/pub/algo/bcm_non_local_means_denoising/> with several '
    'computational\n'
    'optimizations. Noise expected to be a gaussian white noise\n'
    '\n'
    '@param src Input 8-bit or 16-bit (only with NORM_L1) 1-channel,\n'
    '2-channel, 3-channel or 4-channel image.\n'
    '@param dst Output image with the same size and type as src .\n'
    '@param templateWindowSize Size in pixels of the template patch that is '
    'used to compute weights.\n'
    'Should be odd. Recommended value 7 pixels\n'
    '@param searchWindowSize Size in pixels of the window that is used to '
    'compute weighted average for\n'
    'given pixel. Should be odd. Affect performance linearly: greater '
    'searchWindowsSize - greater\n'
    'denoising time. Recommended value 21 pixels\n'
    '@param h Array of parameters regulating filter strength, either one\n'
    'parameter applied to all channels or one per channel in dst. Big h value\n'
    'perfectly removes noise but also removes image details, smaller h\n'
    'value preserves details but also preserves some noise\n'
    '@param normType Type of norm used for weight calculation. Can be either '
    'NORM_L2 or NORM_L1\n'
    '\n'
    'This function expected to be applied to grayscale images. For colored '
    'images look at\n'
    'fastNlMeansDenoisingColored. Advanced usage of this functions can be '
    'manual denoising of colored\n'
    'image in different colorspaces. Such approach is used in '
    'fastNlMeansDenoisingColored by converting\n'
    'image to CIELAB colorspace and then separately denoise L and AB '
    'components with different h\n'
    'parameter.']
parse_name: cv.fastNlMeansDenoising with ['cv'] -> fullname:cv::fastNlMeansDenoising namespace:cv classpath: classname: name:fastNlMeansDenoising
register (function) fastNlMeansDenoising (cv_fastNlMeansDenoising__InputArray__OutputArray_VectorOffloat_int_int_int)

--- Incoming ---
[   'cv.fastNlMeansDenoisingColored',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'h', '3', []],
        ['float', 'hColor', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    None,
    '@brief Modification of fastNlMeansDenoising function for colored images\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param dst Output image with the same size and type as src .\n'
    '@param templateWindowSize Size in pixels of the template patch that is '
    'used to compute weights.\n'
    'Should be odd. Recommended value 7 pixels\n'
    '@param searchWindowSize Size in pixels of the window that is used to '
    'compute weighted average for\n'
    'given pixel. Should be odd. Affect performance linearly: greater '
    'searchWindowsSize - greater\n'
    'denoising time. Recommended value 21 pixels\n'
    '@param h Parameter regulating filter strength for luminance component. '
    'Bigger h value perfectly\n'
    'removes noise but also removes image details, smaller h value preserves '
    'details but also preserves\n'
    'some noise\n'
    '@param hColor The same as h but for color components. For most images '
    'value equals 10\n'
    'will be enough to remove colored noise and do not distort colors\n'
    '\n'
    'The function converts image to CIELAB colorspace and then separately '
    'denoise L and AB components\n'
    'with given h parameters using fastNlMeansDenoising function.']
parse_name: cv.fastNlMeansDenoisingColored with ['cv'] -> fullname:cv::fastNlMeansDenoisingColored namespace:cv classpath: classname: name:fastNlMeansDenoisingColored
register (function) fastNlMeansDenoisingColored (cv_fastNlMeansDenoisingColored__InputArray__OutputArray_float_float_int_int)

--- Incoming ---
[   'cv.fastNlMeansDenoisingMulti',
    'void',
    [],
    [   ['InputArrayOfArrays', 'srcImgs', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['float', 'h', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    None,
    '@brief Modification of fastNlMeansDenoising function for images sequence '
    'where consecutive images have been\n'
    'captured in small period of time. For example video. This version of the '
    'function is for grayscale\n'
    'images or for manual manipulation with colorspaces. For more details see\n'
    '<http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394>\n'
    '\n'
    '@param srcImgs Input 8-bit 1-channel, 2-channel, 3-channel or\n'
    '4-channel images sequence. All images should have the same type and\n'
    'size.\n'
    '@param imgToDenoiseIndex Target image to denoise index in srcImgs '
    'sequence\n'
    '@param temporalWindowSize Number of surrounding images to use for target '
    'image denoising. Should\n'
    'be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to\n'
    'imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to '
    'denoise\n'
    'srcImgs[imgToDenoiseIndex] image.\n'
    '@param dst Output image with the same size and type as srcImgs images.\n'
    '@param templateWindowSize Size in pixels of the template patch that is '
    'used to compute weights.\n'
    'Should be odd. Recommended value 7 pixels\n'
    '@param searchWindowSize Size in pixels of the window that is used to '
    'compute weighted average for\n'
    'given pixel. Should be odd. Affect performance linearly: greater '
    'searchWindowsSize - greater\n'
    'denoising time. Recommended value 21 pixels\n'
    '@param h Parameter regulating filter strength. Bigger h value\n'
    'perfectly removes noise but also removes image details, smaller h\n'
    'value preserves details but also preserves some noise']
parse_name: cv.fastNlMeansDenoisingMulti with ['cv'] -> fullname:cv::fastNlMeansDenoisingMulti namespace:cv classpath: classname: name:fastNlMeansDenoisingMulti
register (function) fastNlMeansDenoisingMulti (cv_fastNlMeansDenoisingMulti__InputArray__OutputArray_int_int_float_int_int)

--- Incoming ---
[   'cv.fastNlMeansDenoisingMulti',
    'void',
    [],
    [   ['InputArrayOfArrays', 'srcImgs', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['const std::vector<float>&', 'h', '', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []],
        ['int', 'normType', 'NORM_L2', []]],
    None,
    '@brief Modification of fastNlMeansDenoising function for images sequence '
    'where consecutive images have been\n'
    'captured in small period of time. For example video. This version of the '
    'function is for grayscale\n'
    'images or for manual manipulation with colorspaces. For more details see\n'
    '<http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.131.6394>\n'
    '\n'
    '@param srcImgs Input 8-bit or 16-bit (only with NORM_L1) 1-channel,\n'
    '2-channel, 3-channel or 4-channel images sequence. All images should\n'
    'have the same type and size.\n'
    '@param imgToDenoiseIndex Target image to denoise index in srcImgs '
    'sequence\n'
    '@param temporalWindowSize Number of surrounding images to use for target '
    'image denoising. Should\n'
    'be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to\n'
    'imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to '
    'denoise\n'
    'srcImgs[imgToDenoiseIndex] image.\n'
    '@param dst Output image with the same size and type as srcImgs images.\n'
    '@param templateWindowSize Size in pixels of the template patch that is '
    'used to compute weights.\n'
    'Should be odd. Recommended value 7 pixels\n'
    '@param searchWindowSize Size in pixels of the window that is used to '
    'compute weighted average for\n'
    'given pixel. Should be odd. Affect performance linearly: greater '
    'searchWindowsSize - greater\n'
    'denoising time. Recommended value 21 pixels\n'
    '@param h Array of parameters regulating filter strength, either one\n'
    'parameter applied to all channels or one per channel in dst. Big h value\n'
    'perfectly removes noise but also removes image details, smaller h\n'
    'value preserves details but also preserves some noise\n'
    '@param normType Type of norm used for weight calculation. Can be either '
    'NORM_L2 or NORM_L1']
parse_name: cv.fastNlMeansDenoisingMulti with ['cv'] -> fullname:cv::fastNlMeansDenoisingMulti namespace:cv classpath: classname: name:fastNlMeansDenoisingMulti
register (function) fastNlMeansDenoisingMulti (cv_fastNlMeansDenoisingMulti__InputArray__OutputArray_int_int_VectorOffloat_int_int_int)

--- Incoming ---
[   'cv.fastNlMeansDenoisingColoredMulti',
    'void',
    [],
    [   ['InputArrayOfArrays', 'srcImgs', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['float', 'h', '3', []],
        ['float', 'hColor', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    None,
    '@brief Modification of fastNlMeansDenoisingMulti function for colored '
    'images sequences\n'
    '\n'
    '@param srcImgs Input 8-bit 3-channel images sequence. All images should '
    'have the same type and\n'
    'size.\n'
    '@param imgToDenoiseIndex Target image to denoise index in srcImgs '
    'sequence\n'
    '@param temporalWindowSize Number of surrounding images to use for target '
    'image denoising. Should\n'
    'be odd. Images from imgToDenoiseIndex - temporalWindowSize / 2 to\n'
    'imgToDenoiseIndex - temporalWindowSize / 2 from srcImgs will be used to '
    'denoise\n'
    'srcImgs[imgToDenoiseIndex] image.\n'
    '@param dst Output image with the same size and type as srcImgs images.\n'
    '@param templateWindowSize Size in pixels of the template patch that is '
    'used to compute weights.\n'
    'Should be odd. Recommended value 7 pixels\n'
    '@param searchWindowSize Size in pixels of the window that is used to '
    'compute weighted average for\n'
    'given pixel. Should be odd. Affect performance linearly: greater '
    'searchWindowsSize - greater\n'
    'denoising time. Recommended value 21 pixels\n'
    '@param h Parameter regulating filter strength for luminance component. '
    'Bigger h value perfectly\n'
    'removes noise but also removes image details, smaller h value preserves '
    'details but also preserves\n'
    'some noise.\n'
    '@param hColor The same as h but for color components.\n'
    '\n'
    'The function converts images to CIELAB colorspace and then separately '
    'denoise L and AB components\n'
    'with given h parameters using fastNlMeansDenoisingMulti function.']
parse_name: cv.fastNlMeansDenoisingColoredMulti with ['cv'] -> fullname:cv::fastNlMeansDenoisingColoredMulti namespace:cv classpath: classname: name:fastNlMeansDenoisingColoredMulti
register (function) fastNlMeansDenoisingColoredMulti (cv_fastNlMeansDenoisingColoredMulti__InputArray__OutputArray_int_int_float_float_int_int)

--- Incoming ---
[   'cv.denoise_TVL1',
    'void',
    [],
    [   ['const std::vector<Mat>&', 'observations', '', []],
        ['Mat&', 'result', '', []],
        ['double', 'lambda', '1.0', []],
        ['int', 'niters', '30', []]],
    None,
    '@brief Primal-dual algorithm is an algorithm for solving special types of '
    'variational problems (that is,\n'
    'finding a function to minimize some functional). As the image denoising, '
    'in particular, may be seen\n'
    'as the variational problem, primal-dual algorithm then can be used to '
    'perform denoising and this is\n'
    'exactly what is implemented.\n'
    '\n'
    'It should be noted, that this implementation was taken from the July 2013 '
    'blog entry\n'
    '@cite MA13 , which also contained (slightly more general) ready-to-use '
    'source code on Python.\n'
    'Subsequently, that code was rewritten on C++ with the usage of openCV by '
    'Vadim Pisarevsky at the end\n'
    'of July 2013 and finally it was slightly adapted by later authors.\n'
    '\n'
    'Although the thorough discussion and justification of the algorithm '
    'involved may be found in\n'
    '@cite ChambolleEtAl, it might make sense to skim over it here, following '
    '@cite MA13 . To begin\n'
    'with, we consider the 1-byte gray-level images as the functions from the '
    'rectangular domain of\n'
    'pixels (it may be seen as set\n'
    '\\f$\\left\\{(x,y)\\in\\mathbb{N}\\times\\mathbb{N}\\mid 1\\leq x\\leq '
    'n,\\;1\\leq y\\leq m\\right\\}\\f$ for some\n'
    '\\f$m,\\;n\\in\\mathbb{N}\\f$) into \\f$\\{0,1,\\dots,255\\}\\f$. We '
    'shall denote the noised images as \\f$f_i\\f$ and with\n'
    'this view, given some image \\f$x\\f$ of the same size, we may measure '
    'how bad it is by the formula\n'
    '\n'
    '\\f[\\left\\|\\left\\|\\nabla x\\right\\|\\right\\| + '
    '\\lambda\\sum_i\\left\\|\\left\\|x-f_i\\right\\|\\right\\|\\f]\n'
    '\n'
    '\\f$\\|\\|\\cdot\\|\\|\\f$ here denotes \\f$L_2\\f$-norm and as you see, '
    'the first addend states that we want our\n'
    'image to be smooth (ideally, having zero gradient, thus being constant) '
    'and the second states that\n'
    "we want our result to be close to the observations we've got. If we treat "
    '\\f$x\\f$ as a function, this is\n'
    'exactly the functional what we seek to minimize and here the Primal-Dual '
    'algorithm comes into play.\n'
    '\n'
    '@param observations This array should contain one or more noised versions '
    'of the image that is to\n'
    'be restored.\n'
    '@param result Here the denoised image will be stored. There is no need to '
    'do pre-allocation of\n'
    'storage space, as it will be automatically allocated, if necessary.\n'
    '@param lambda Corresponds to \\f$\\lambda\\f$ in the formulas above. As '
    'it is enlarged, the smooth\n'
    '(blurred) images are treated more favorably than detailed (but maybe more '
    'noised) ones. Roughly\n'
    'speaking, as it becomes smaller, the result will be more blur but more '
    'sever outliers will be\n'
    'removed.\n'
    '@param niters Number of iterations that the algorithm will run. Of '
    'course, as more iterations as\n'
    'better, but it is hard to quantitatively refine this statement, so just '
    'use the default and\n'
    'increase it if the results are poor.']
parse_name: cv.denoise_TVL1 with ['cv'] -> fullname:cv::denoise_TVL1 namespace:cv classpath: classname: name:denoise_TVL1
register (function) denoise_TVL1 (cv_denoise_TVL1_VectorOfMat_Mat_double_int)

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [['const cv.LDR_SIZE', '256', [], [], None, '']],
    None,
    '@} photo_denoise\n@addtogroup photo_hdr\n@{']
parse_name: const cv.LDR_SIZE with ['cv'] -> fullname:cv::LDR_SIZE namespace:cv classpath: classname: name:LDR_SIZE

--- Incoming ---
[   'class cv.Tonemap',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief Base class for tonemapping algorithms - tools that are used to map '
    'HDR image to 8-bit range.']
parse_name: class cv.Tonemap with ['cv'] -> fullname:cv::Tonemap namespace:cv classpath: classname: name:Tonemap
register class cv::Tonemap (['class cv.Tonemap', ': cv::Algorithm', [], [], None, '@brief Base class for tonemapping algorithms - tools that are used to map HDR image to 8-bit range.']) impl:cv::Algorithm

--- Incoming ---
[   'cv.Tonemap.process',
    'void',
    ['/A'],
    [['InputArray', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    '@brief Tonemaps image\n'
    '\n'
    '@param src source image - CV_32FC3 Mat (float 32 bits 3 channels)\n'
    '@param dst destination image - CV_32FC3 Mat with values in [0, 1] range']
parse_name: cv.Tonemap.process with ['cv'] -> fullname:cv::Tonemap::process namespace:cv classpath:Tonemap classname:Tonemap name:process
register (method) process in cv::Tonemap (trait) (cv_Tonemap_process__InputArray__OutputArray)

--- Incoming ---
['cv.Tonemap.getGamma', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.Tonemap.getGamma with ['cv'] -> fullname:cv::Tonemap::getGamma namespace:cv classpath:Tonemap classname:Tonemap name:getGamma
register (method) getGamma in cv::Tonemap (trait) (cv_Tonemap_getGamma_const)

--- Incoming ---
['cv.Tonemap.setGamma', 'void', ['/A'], [['float', 'gamma', '', []]], None, '']
parse_name: cv.Tonemap.setGamma with ['cv'] -> fullname:cv::Tonemap::setGamma namespace:cv classpath:Tonemap classname:Tonemap name:setGamma
register (method) setGamma in cv::Tonemap (trait) (cv_Tonemap_setGamma_float)

--- Incoming ---
[   'cv.createTonemap',
    'Ptr<Tonemap>',
    [],
    [['float', 'gamma', '1.0f', []]],
    None,
    '@brief Creates simple linear mapper with gamma correction\n'
    '\n'
    '@param gamma positive value for gamma correction. Gamma value of 1.0 '
    'implies no correction, gamma\n'
    'equal to 2.2f is suitable for most displays.\n'
    'Generally gamma \\> 1 brightens the image and gamma \\< 1 darkens it.']
parse_name: cv.createTonemap with ['cv'] -> fullname:cv::createTonemap namespace:cv classpath: classname: name:createTonemap
register (function) createTonemap (cv_createTonemap_float)

--- Incoming ---
[   'class cv.TonemapDrago',
    ': cv::Tonemap',
    [],
    [],
    None,
    '@brief Adaptive logarithmic mapping is a fast global tonemapping '
    'algorithm that scales the image in\n'
    'logarithmic domain.\n'
    '\n'
    "Since it's a global operator the same function is applied to all the "
    'pixels, it is controlled by the\n'
    'bias parameter.\n'
    '\n'
    'Optional saturation enhancement is possible as described in @cite FL02 .\n'
    '\n'
    'For more information see @cite DM03 .']
parse_name: class cv.TonemapDrago with ['cv'] -> fullname:cv::TonemapDrago namespace:cv classpath: classname: name:TonemapDrago
register class cv::TonemapDrago (['class cv.TonemapDrago', ': cv::Tonemap', [], [], None, "@brief Adaptive logarithmic mapping is a fast global tonemapping algorithm that scales the image in\nlogarithmic domain.\n\nSince it's a global operator the same function is applied to all the pixels, it is controlled by the\nbias parameter.\n\nOptional saturation enhancement is possible as described in @cite FL02 .\n\nFor more information see @cite DM03 ."]) impl:cv::Tonemap

--- Incoming ---
['cv.TonemapDrago.getSaturation', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapDrago.getSaturation with ['cv'] -> fullname:cv::TonemapDrago::getSaturation namespace:cv classpath:TonemapDrago classname:TonemapDrago name:getSaturation
register (method) getSaturation in cv::TonemapDrago (trait) (cv_TonemapDrago_getSaturation_const)

--- Incoming ---
[   'cv.TonemapDrago.setSaturation',
    'void',
    ['/A'],
    [['float', 'saturation', '', []]],
    None,
    '']
parse_name: cv.TonemapDrago.setSaturation with ['cv'] -> fullname:cv::TonemapDrago::setSaturation namespace:cv classpath:TonemapDrago classname:TonemapDrago name:setSaturation
register (method) setSaturation in cv::TonemapDrago (trait) (cv_TonemapDrago_setSaturation_float)

--- Incoming ---
['cv.TonemapDrago.getBias', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapDrago.getBias with ['cv'] -> fullname:cv::TonemapDrago::getBias namespace:cv classpath:TonemapDrago classname:TonemapDrago name:getBias
register (method) getBias in cv::TonemapDrago (trait) (cv_TonemapDrago_getBias_const)

--- Incoming ---
[   'cv.TonemapDrago.setBias',
    'void',
    ['/A'],
    [['float', 'bias', '', []]],
    None,
    '']
parse_name: cv.TonemapDrago.setBias with ['cv'] -> fullname:cv::TonemapDrago::setBias namespace:cv classpath:TonemapDrago classname:TonemapDrago name:setBias
register (method) setBias in cv::TonemapDrago (trait) (cv_TonemapDrago_setBias_float)

--- Incoming ---
[   'cv.createTonemapDrago',
    'Ptr<TonemapDrago>',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'saturation', '1.0f', []],
        ['float', 'bias', '0.85f', []]],
    None,
    '@brief Creates TonemapDrago object\n'
    '\n'
    '@param gamma gamma value for gamma correction. See createTonemap\n'
    '@param saturation positive saturation enhancement value. 1.0 preserves '
    'saturation, values greater\n'
    'than 1 increase saturation and values less than 1 decrease it.\n'
    '@param bias value for bias function in [0, 1] range. Values from 0.7 to '
    '0.9 usually give best\n'
    'results, default value is 0.85.']
parse_name: cv.createTonemapDrago with ['cv'] -> fullname:cv::createTonemapDrago namespace:cv classpath: classname: name:createTonemapDrago
register (function) createTonemapDrago (cv_createTonemapDrago_float_float_float)

--- Incoming ---
[   'class cv.TonemapReinhard',
    ': cv::Tonemap',
    [],
    [],
    None,
    '@brief This is a global tonemapping operator that models human visual '
    'system.\n'
    '\n'
    'Mapping function is controlled by adaptation parameter, that is computed '
    'using light adaptation and\n'
    'color adaptation.\n'
    '\n'
    'For more information see @cite RD05 .']
parse_name: class cv.TonemapReinhard with ['cv'] -> fullname:cv::TonemapReinhard namespace:cv classpath: classname: name:TonemapReinhard
register class cv::TonemapReinhard (['class cv.TonemapReinhard', ': cv::Tonemap', [], [], None, '@brief This is a global tonemapping operator that models human visual system.\n\nMapping function is controlled by adaptation parameter, that is computed using light adaptation and\ncolor adaptation.\n\nFor more information see @cite RD05 .']) impl:cv::Tonemap

--- Incoming ---
['cv.TonemapReinhard.getIntensity', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapReinhard.getIntensity with ['cv'] -> fullname:cv::TonemapReinhard::getIntensity namespace:cv classpath:TonemapReinhard classname:TonemapReinhard name:getIntensity
register (method) getIntensity in cv::TonemapReinhard (trait) (cv_TonemapReinhard_getIntensity_const)

--- Incoming ---
[   'cv.TonemapReinhard.setIntensity',
    'void',
    ['/A'],
    [['float', 'intensity', '', []]],
    None,
    '']
parse_name: cv.TonemapReinhard.setIntensity with ['cv'] -> fullname:cv::TonemapReinhard::setIntensity namespace:cv classpath:TonemapReinhard classname:TonemapReinhard name:setIntensity
register (method) setIntensity in cv::TonemapReinhard (trait) (cv_TonemapReinhard_setIntensity_float)

--- Incoming ---
['cv.TonemapReinhard.getLightAdaptation', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapReinhard.getLightAdaptation with ['cv'] -> fullname:cv::TonemapReinhard::getLightAdaptation namespace:cv classpath:TonemapReinhard classname:TonemapReinhard name:getLightAdaptation
register (method) getLightAdaptation in cv::TonemapReinhard (trait) (cv_TonemapReinhard_getLightAdaptation_const)

--- Incoming ---
[   'cv.TonemapReinhard.setLightAdaptation',
    'void',
    ['/A'],
    [['float', 'light_adapt', '', []]],
    None,
    '']
parse_name: cv.TonemapReinhard.setLightAdaptation with ['cv'] -> fullname:cv::TonemapReinhard::setLightAdaptation namespace:cv classpath:TonemapReinhard classname:TonemapReinhard name:setLightAdaptation
register (method) setLightAdaptation in cv::TonemapReinhard (trait) (cv_TonemapReinhard_setLightAdaptation_float)

--- Incoming ---
['cv.TonemapReinhard.getColorAdaptation', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapReinhard.getColorAdaptation with ['cv'] -> fullname:cv::TonemapReinhard::getColorAdaptation namespace:cv classpath:TonemapReinhard classname:TonemapReinhard name:getColorAdaptation
register (method) getColorAdaptation in cv::TonemapReinhard (trait) (cv_TonemapReinhard_getColorAdaptation_const)

--- Incoming ---
[   'cv.TonemapReinhard.setColorAdaptation',
    'void',
    ['/A'],
    [['float', 'color_adapt', '', []]],
    None,
    '']
parse_name: cv.TonemapReinhard.setColorAdaptation with ['cv'] -> fullname:cv::TonemapReinhard::setColorAdaptation namespace:cv classpath:TonemapReinhard classname:TonemapReinhard name:setColorAdaptation
register (method) setColorAdaptation in cv::TonemapReinhard (trait) (cv_TonemapReinhard_setColorAdaptation_float)

--- Incoming ---
[   'cv.createTonemapReinhard',
    'Ptr<TonemapReinhard>',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'intensity', '0.0f', []],
        ['float', 'light_adapt', '1.0f', []],
        ['float', 'color_adapt', '0.0f', []]],
    None,
    '@brief Creates TonemapReinhard object\n'
    '\n'
    '@param gamma gamma value for gamma correction. See createTonemap\n'
    '@param intensity result intensity in [-8, 8] range. Greater intensity '
    'produces brighter results.\n'
    '@param light_adapt light adaptation in [0, 1] range. If 1 adaptation is '
    'based only on pixel\n'
    "value, if 0 it's global, otherwise it's a weighted mean of this two "
    'cases.\n'
    '@param color_adapt chromatic adaptation in [0, 1] range. If 1 channels '
    'are treated independently,\n'
    'if 0 adaptation level is the same for each channel.']
parse_name: cv.createTonemapReinhard with ['cv'] -> fullname:cv::createTonemapReinhard namespace:cv classpath: classname: name:createTonemapReinhard
register (function) createTonemapReinhard (cv_createTonemapReinhard_float_float_float_float)

--- Incoming ---
[   'class cv.TonemapMantiuk',
    ': cv::Tonemap',
    [],
    [],
    None,
    '@brief This algorithm transforms image to contrast using gradients on all '
    'levels of gaussian pyramid,\n'
    'transforms contrast values to HVS response and scales the response. After '
    'this the image is\n'
    'reconstructed from new contrast values.\n'
    '\n'
    'For more information see @cite MM06 .']
parse_name: class cv.TonemapMantiuk with ['cv'] -> fullname:cv::TonemapMantiuk namespace:cv classpath: classname: name:TonemapMantiuk
register class cv::TonemapMantiuk (['class cv.TonemapMantiuk', ': cv::Tonemap', [], [], None, '@brief This algorithm transforms image to contrast using gradients on all levels of gaussian pyramid,\ntransforms contrast values to HVS response and scales the response. After this the image is\nreconstructed from new contrast values.\n\nFor more information see @cite MM06 .']) impl:cv::Tonemap

--- Incoming ---
['cv.TonemapMantiuk.getScale', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapMantiuk.getScale with ['cv'] -> fullname:cv::TonemapMantiuk::getScale namespace:cv classpath:TonemapMantiuk classname:TonemapMantiuk name:getScale
register (method) getScale in cv::TonemapMantiuk (trait) (cv_TonemapMantiuk_getScale_const)

--- Incoming ---
[   'cv.TonemapMantiuk.setScale',
    'void',
    ['/A'],
    [['float', 'scale', '', []]],
    None,
    '']
parse_name: cv.TonemapMantiuk.setScale with ['cv'] -> fullname:cv::TonemapMantiuk::setScale namespace:cv classpath:TonemapMantiuk classname:TonemapMantiuk name:setScale
register (method) setScale in cv::TonemapMantiuk (trait) (cv_TonemapMantiuk_setScale_float)

--- Incoming ---
['cv.TonemapMantiuk.getSaturation', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.TonemapMantiuk.getSaturation with ['cv'] -> fullname:cv::TonemapMantiuk::getSaturation namespace:cv classpath:TonemapMantiuk classname:TonemapMantiuk name:getSaturation
register (method) getSaturation in cv::TonemapMantiuk (trait) (cv_TonemapMantiuk_getSaturation_const)

--- Incoming ---
[   'cv.TonemapMantiuk.setSaturation',
    'void',
    ['/A'],
    [['float', 'saturation', '', []]],
    None,
    '']
parse_name: cv.TonemapMantiuk.setSaturation with ['cv'] -> fullname:cv::TonemapMantiuk::setSaturation namespace:cv classpath:TonemapMantiuk classname:TonemapMantiuk name:setSaturation
register (method) setSaturation in cv::TonemapMantiuk (trait) (cv_TonemapMantiuk_setSaturation_float)

--- Incoming ---
[   'cv.createTonemapMantiuk',
    'Ptr<TonemapMantiuk>',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'scale', '0.7f', []],
        ['float', 'saturation', '1.0f', []]],
    None,
    '@brief Creates TonemapMantiuk object\n'
    '\n'
    '@param gamma gamma value for gamma correction. See createTonemap\n'
    '@param scale contrast scale factor. HVS response is multiplied by this '
    'parameter, thus compressing\n'
    'dynamic range. Values from 0.6 to 0.9 produce best results.\n'
    '@param saturation saturation enhancement value. See createTonemapDrago']
parse_name: cv.createTonemapMantiuk with ['cv'] -> fullname:cv::createTonemapMantiuk namespace:cv classpath: classname: name:createTonemapMantiuk
register (function) createTonemapMantiuk (cv_createTonemapMantiuk_float_float_float)

--- Incoming ---
[   'class cv.AlignExposures',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief The base class for algorithms that align images of the same scene '
    'with different exposures']
parse_name: class cv.AlignExposures with ['cv'] -> fullname:cv::AlignExposures namespace:cv classpath: classname: name:AlignExposures
register class cv::AlignExposures (['class cv.AlignExposures', ': cv::Algorithm', [], [], None, '@brief The base class for algorithms that align images of the same scene with different exposures']) impl:cv::Algorithm

--- Incoming ---
[   'cv.AlignExposures.process',
    'void',
    ['/A'],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['std::vector<Mat>&', 'dst', '', []],
        ['InputArray', 'times', '', []],
        ['InputArray', 'response', '', []]],
    None,
    '@brief Aligns images\n'
    '\n'
    '@param src vector of input images\n'
    '@param dst vector of aligned images\n'
    '@param times vector of exposure time values for each image\n'
    '@param response 256x1 matrix with inverse camera response function for '
    'each pixel value, it should\n'
    'have the same number of channels as images.']
parse_name: cv.AlignExposures.process with ['cv'] -> fullname:cv::AlignExposures::process namespace:cv classpath:AlignExposures classname:AlignExposures name:process
register (method) process in cv::AlignExposures (trait) (cv_AlignExposures_process__InputArray_VectorOfMat__InputArray__InputArray)

--- Incoming ---
[   'class cv.AlignMTB',
    ': cv::AlignExposures',
    [],
    [],
    None,
    '@brief This algorithm converts images to median threshold bitmaps (1 for '
    'pixels brighter than median\n'
    'luminance and 0 otherwise) and than aligns the resulting bitmaps using '
    'bit operations.\n'
    '\n'
    'It is invariant to exposure, so exposure values and camera response are '
    'not necessary.\n'
    '\n'
    'In this implementation new image regions are filled with zeros.\n'
    '\n'
    'For more information see @cite GW03 .']
parse_name: class cv.AlignMTB with ['cv'] -> fullname:cv::AlignMTB namespace:cv classpath: classname: name:AlignMTB
register class cv::AlignMTB (['class cv.AlignMTB', ': cv::AlignExposures', [], [], None, '@brief This algorithm converts images to median threshold bitmaps (1 for pixels brighter than median\nluminance and 0 otherwise) and than aligns the resulting bitmaps using bit operations.\n\nIt is invariant to exposure, so exposure values and camera response are not necessary.\n\nIn this implementation new image regions are filled with zeros.\n\nFor more information see @cite GW03 .']) impl:cv::AlignExposures

--- Incoming ---
[   'cv.AlignMTB.process',
    'void',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['std::vector<Mat>&', 'dst', '', []],
        ['InputArray', 'times', '', []],
        ['InputArray', 'response', '', []]],
    None,
    '']
parse_name: cv.AlignMTB.process with ['cv'] -> fullname:cv::AlignMTB::process namespace:cv classpath:AlignMTB classname:AlignMTB name:process
register (method) process in cv::AlignMTB (cv_AlignMTB_process__InputArray_VectorOfMat__InputArray__InputArray)

--- Incoming ---
[   'cv.AlignMTB.process',
    'void',
    ['/A'],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['std::vector<Mat>&', 'dst', '', []]],
    None,
    "@brief Short version of process, that doesn't take extra arguments.\n"
    '\n'
    '@param src vector of input images\n'
    '@param dst vector of aligned images']
parse_name: cv.AlignMTB.process with ['cv'] -> fullname:cv::AlignMTB::process namespace:cv classpath:AlignMTB classname:AlignMTB name:process
register (method) process in cv::AlignMTB (trait) (cv_AlignMTB_process__InputArray_VectorOfMat)

--- Incoming ---
[   'cv.AlignMTB.calculateShift',
    'Point',
    ['/A'],
    [['InputArray', 'img0', '', []], ['InputArray', 'img1', '', []]],
    None,
    '@brief Calculates shift between two images, i. e. how to shift the second '
    'image to correspond it with the\n'
    'first.\n'
    '\n'
    '@param img0 first image\n'
    '@param img1 second image']
parse_name: cv.AlignMTB.calculateShift with ['cv'] -> fullname:cv::AlignMTB::calculateShift namespace:cv classpath:AlignMTB classname:AlignMTB name:calculateShift
register (method) calculateShift in cv::AlignMTB (trait) (cv_AlignMTB_calculateShift__InputArray__InputArray)

--- Incoming ---
[   'cv.AlignMTB.shiftMat',
    'void',
    ['/A'],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['const Point', 'shift', '', []]],
    None,
    '@brief Helper function, that shift Mat filling new regions with zeros.\n'
    '\n'
    '@param src input image\n'
    '@param dst result image\n'
    '@param shift shift value']
parse_name: cv.AlignMTB.shiftMat with ['cv'] -> fullname:cv::AlignMTB::shiftMat namespace:cv classpath:AlignMTB classname:AlignMTB name:shiftMat
register (method) shiftMat in cv::AlignMTB (trait) (cv_AlignMTB_shiftMat__InputArray__OutputArray_Point)

--- Incoming ---
[   'cv.AlignMTB.computeBitmaps',
    'void',
    ['/A'],
    [   ['InputArray', 'img', '', []],
        ['OutputArray', 'tb', '', []],
        ['OutputArray', 'eb', '', []]],
    None,
    '@brief Computes median threshold and exclude bitmaps of given image.\n'
    '\n'
    '@param img input image\n'
    '@param tb median threshold bitmap\n'
    '@param eb exclude bitmap']
parse_name: cv.AlignMTB.computeBitmaps with ['cv'] -> fullname:cv::AlignMTB::computeBitmaps namespace:cv classpath:AlignMTB classname:AlignMTB name:computeBitmaps
register (method) computeBitmaps in cv::AlignMTB (trait) (cv_AlignMTB_computeBitmaps__InputArray__OutputArray__OutputArray)

--- Incoming ---
['cv.AlignMTB.getMaxBits', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AlignMTB.getMaxBits with ['cv'] -> fullname:cv::AlignMTB::getMaxBits namespace:cv classpath:AlignMTB classname:AlignMTB name:getMaxBits
register (method) getMaxBits in cv::AlignMTB (trait) (cv_AlignMTB_getMaxBits_const)

--- Incoming ---
[   'cv.AlignMTB.setMaxBits',
    'void',
    ['/A'],
    [['int', 'max_bits', '', []]],
    None,
    '']
parse_name: cv.AlignMTB.setMaxBits with ['cv'] -> fullname:cv::AlignMTB::setMaxBits namespace:cv classpath:AlignMTB classname:AlignMTB name:setMaxBits
register (method) setMaxBits in cv::AlignMTB (trait) (cv_AlignMTB_setMaxBits_int)

--- Incoming ---
['cv.AlignMTB.getExcludeRange', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AlignMTB.getExcludeRange with ['cv'] -> fullname:cv::AlignMTB::getExcludeRange namespace:cv classpath:AlignMTB classname:AlignMTB name:getExcludeRange
register (method) getExcludeRange in cv::AlignMTB (trait) (cv_AlignMTB_getExcludeRange_const)

--- Incoming ---
[   'cv.AlignMTB.setExcludeRange',
    'void',
    ['/A'],
    [['int', 'exclude_range', '', []]],
    None,
    '']
parse_name: cv.AlignMTB.setExcludeRange with ['cv'] -> fullname:cv::AlignMTB::setExcludeRange namespace:cv classpath:AlignMTB classname:AlignMTB name:setExcludeRange
register (method) setExcludeRange in cv::AlignMTB (trait) (cv_AlignMTB_setExcludeRange_int)

--- Incoming ---
['cv.AlignMTB.getCut', 'bool', ['/A', '/C'], [], None, '']
parse_name: cv.AlignMTB.getCut with ['cv'] -> fullname:cv::AlignMTB::getCut namespace:cv classpath:AlignMTB classname:AlignMTB name:getCut
register (method) getCut in cv::AlignMTB (trait) (cv_AlignMTB_getCut_const)

--- Incoming ---
['cv.AlignMTB.setCut', 'void', ['/A'], [['bool', 'value', '', []]], None, '']
parse_name: cv.AlignMTB.setCut with ['cv'] -> fullname:cv::AlignMTB::setCut namespace:cv classpath:AlignMTB classname:AlignMTB name:setCut
register (method) setCut in cv::AlignMTB (trait) (cv_AlignMTB_setCut_bool)

--- Incoming ---
[   'cv.createAlignMTB',
    'Ptr<AlignMTB>',
    [],
    [   ['int', 'max_bits', '6', []],
        ['int', 'exclude_range', '4', []],
        ['bool', 'cut', 'true', []]],
    None,
    '@brief Creates AlignMTB object\n'
    '\n'
    '@param max_bits logarithm to the base 2 of maximal shift in each '
    'dimension. Values of 5 and 6 are\n'
    'usually good enough (31 and 63 pixels shift respectively).\n'
    '@param exclude_range range for exclusion bitmap that is constructed to '
    'suppress noise around the\n'
    'median value.\n'
    '@param cut if true cuts images, otherwise fills the new regions with '
    'zeros.']
parse_name: cv.createAlignMTB with ['cv'] -> fullname:cv::createAlignMTB namespace:cv classpath: classname: name:createAlignMTB
register (function) createAlignMTB (cv_createAlignMTB_int_int_bool)

--- Incoming ---
[   'class cv.CalibrateCRF',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief The base class for camera response calibration algorithms.']
parse_name: class cv.CalibrateCRF with ['cv'] -> fullname:cv::CalibrateCRF namespace:cv classpath: classname: name:CalibrateCRF
register class cv::CalibrateCRF (['class cv.CalibrateCRF', ': cv::Algorithm', [], [], None, '@brief The base class for camera response calibration algorithms.']) impl:cv::Algorithm

--- Incoming ---
[   'cv.CalibrateCRF.process',
    'void',
    ['/A'],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []]],
    None,
    '@brief Recovers inverse camera response.\n'
    '\n'
    '@param src vector of input images\n'
    '@param dst 256x1 matrix with inverse camera response function\n'
    '@param times vector of exposure time values for each image']
parse_name: cv.CalibrateCRF.process with ['cv'] -> fullname:cv::CalibrateCRF::process namespace:cv classpath:CalibrateCRF classname:CalibrateCRF name:process
register (method) process in cv::CalibrateCRF (trait) (cv_CalibrateCRF_process__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'class cv.CalibrateDebevec',
    ': cv::CalibrateCRF',
    [],
    [],
    None,
    '@brief Inverse camera response function is extracted for each brightness '
    'value by minimizing an objective\n'
    'function as linear system. Objective function is constructed using pixel '
    'values on the same position\n'
    'in all images, extra term is added to make the result smoother.\n'
    '\n'
    'For more information see @cite DM97 .']
parse_name: class cv.CalibrateDebevec with ['cv'] -> fullname:cv::CalibrateDebevec namespace:cv classpath: classname: name:CalibrateDebevec
register class cv::CalibrateDebevec (['class cv.CalibrateDebevec', ': cv::CalibrateCRF', [], [], None, '@brief Inverse camera response function is extracted for each brightness value by minimizing an objective\nfunction as linear system. Objective function is constructed using pixel values on the same position\nin all images, extra term is added to make the result smoother.\n\nFor more information see @cite DM97 .']) impl:cv::CalibrateCRF

--- Incoming ---
['cv.CalibrateDebevec.getLambda', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.CalibrateDebevec.getLambda with ['cv'] -> fullname:cv::CalibrateDebevec::getLambda namespace:cv classpath:CalibrateDebevec classname:CalibrateDebevec name:getLambda
register (method) getLambda in cv::CalibrateDebevec (trait) (cv_CalibrateDebevec_getLambda_const)

--- Incoming ---
[   'cv.CalibrateDebevec.setLambda',
    'void',
    ['/A'],
    [['float', 'lambda', '', []]],
    None,
    '']
parse_name: cv.CalibrateDebevec.setLambda with ['cv'] -> fullname:cv::CalibrateDebevec::setLambda namespace:cv classpath:CalibrateDebevec classname:CalibrateDebevec name:setLambda
register (method) setLambda in cv::CalibrateDebevec (trait) (cv_CalibrateDebevec_setLambda_float)

--- Incoming ---
['cv.CalibrateDebevec.getSamples', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.CalibrateDebevec.getSamples with ['cv'] -> fullname:cv::CalibrateDebevec::getSamples namespace:cv classpath:CalibrateDebevec classname:CalibrateDebevec name:getSamples
register (method) getSamples in cv::CalibrateDebevec (trait) (cv_CalibrateDebevec_getSamples_const)

--- Incoming ---
[   'cv.CalibrateDebevec.setSamples',
    'void',
    ['/A'],
    [['int', 'samples', '', []]],
    None,
    '']
parse_name: cv.CalibrateDebevec.setSamples with ['cv'] -> fullname:cv::CalibrateDebevec::setSamples namespace:cv classpath:CalibrateDebevec classname:CalibrateDebevec name:setSamples
register (method) setSamples in cv::CalibrateDebevec (trait) (cv_CalibrateDebevec_setSamples_int)

--- Incoming ---
['cv.CalibrateDebevec.getRandom', 'bool', ['/A', '/C'], [], None, '']
parse_name: cv.CalibrateDebevec.getRandom with ['cv'] -> fullname:cv::CalibrateDebevec::getRandom namespace:cv classpath:CalibrateDebevec classname:CalibrateDebevec name:getRandom
register (method) getRandom in cv::CalibrateDebevec (trait) (cv_CalibrateDebevec_getRandom_const)

--- Incoming ---
[   'cv.CalibrateDebevec.setRandom',
    'void',
    ['/A'],
    [['bool', 'random', '', []]],
    None,
    '']
parse_name: cv.CalibrateDebevec.setRandom with ['cv'] -> fullname:cv::CalibrateDebevec::setRandom namespace:cv classpath:CalibrateDebevec classname:CalibrateDebevec name:setRandom
register (method) setRandom in cv::CalibrateDebevec (trait) (cv_CalibrateDebevec_setRandom_bool)

--- Incoming ---
[   'cv.createCalibrateDebevec',
    'Ptr<CalibrateDebevec>',
    [],
    [   ['int', 'samples', '70', []],
        ['float', 'lambda', '10.0f', []],
        ['bool', 'random', 'false', []]],
    None,
    '@brief Creates CalibrateDebevec object\n'
    '\n'
    '@param samples number of pixel locations to use\n'
    '@param lambda smoothness term weight. Greater values produce smoother '
    'results, but can alter the\n'
    'response.\n'
    '@param random if true sample pixel locations are chosen at random, '
    'otherwise they form a\n'
    'rectangular grid.']
parse_name: cv.createCalibrateDebevec with ['cv'] -> fullname:cv::createCalibrateDebevec namespace:cv classpath: classname: name:createCalibrateDebevec
register (function) createCalibrateDebevec (cv_createCalibrateDebevec_int_float_bool)

--- Incoming ---
[   'class cv.CalibrateRobertson',
    ': cv::CalibrateCRF',
    [],
    [],
    None,
    '@brief Inverse camera response function is extracted for each brightness '
    'value by minimizing an objective\n'
    'function as linear system. This algorithm uses all image pixels.\n'
    '\n'
    'For more information see @cite RB99 .']
parse_name: class cv.CalibrateRobertson with ['cv'] -> fullname:cv::CalibrateRobertson namespace:cv classpath: classname: name:CalibrateRobertson
register class cv::CalibrateRobertson (['class cv.CalibrateRobertson', ': cv::CalibrateCRF', [], [], None, '@brief Inverse camera response function is extracted for each brightness value by minimizing an objective\nfunction as linear system. This algorithm uses all image pixels.\n\nFor more information see @cite RB99 .']) impl:cv::CalibrateCRF

--- Incoming ---
['cv.CalibrateRobertson.getMaxIter', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.CalibrateRobertson.getMaxIter with ['cv'] -> fullname:cv::CalibrateRobertson::getMaxIter namespace:cv classpath:CalibrateRobertson classname:CalibrateRobertson name:getMaxIter
register (method) getMaxIter in cv::CalibrateRobertson (trait) (cv_CalibrateRobertson_getMaxIter_const)

--- Incoming ---
[   'cv.CalibrateRobertson.setMaxIter',
    'void',
    ['/A'],
    [['int', 'max_iter', '', []]],
    None,
    '']
parse_name: cv.CalibrateRobertson.setMaxIter with ['cv'] -> fullname:cv::CalibrateRobertson::setMaxIter namespace:cv classpath:CalibrateRobertson classname:CalibrateRobertson name:setMaxIter
register (method) setMaxIter in cv::CalibrateRobertson (trait) (cv_CalibrateRobertson_setMaxIter_int)

--- Incoming ---
['cv.CalibrateRobertson.getThreshold', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.CalibrateRobertson.getThreshold with ['cv'] -> fullname:cv::CalibrateRobertson::getThreshold namespace:cv classpath:CalibrateRobertson classname:CalibrateRobertson name:getThreshold
register (method) getThreshold in cv::CalibrateRobertson (trait) (cv_CalibrateRobertson_getThreshold_const)

--- Incoming ---
[   'cv.CalibrateRobertson.setThreshold',
    'void',
    ['/A'],
    [['float', 'threshold', '', []]],
    None,
    '']
parse_name: cv.CalibrateRobertson.setThreshold with ['cv'] -> fullname:cv::CalibrateRobertson::setThreshold namespace:cv classpath:CalibrateRobertson classname:CalibrateRobertson name:setThreshold
register (method) setThreshold in cv::CalibrateRobertson (trait) (cv_CalibrateRobertson_setThreshold_float)

--- Incoming ---
['cv.CalibrateRobertson.getRadiance', 'Mat', ['/A', '/C'], [], None, '']
parse_name: cv.CalibrateRobertson.getRadiance with ['cv'] -> fullname:cv::CalibrateRobertson::getRadiance namespace:cv classpath:CalibrateRobertson classname:CalibrateRobertson name:getRadiance
register (method) getRadiance in cv::CalibrateRobertson (trait) (cv_CalibrateRobertson_getRadiance_const)

--- Incoming ---
[   'cv.createCalibrateRobertson',
    'Ptr<CalibrateRobertson>',
    [],
    [['int', 'max_iter', '30', []], ['float', 'threshold', '0.01f', []]],
    None,
    '@brief Creates CalibrateRobertson object\n'
    '\n'
    '@param max_iter maximal number of Gauss-Seidel solver iterations.\n'
    '@param threshold target difference between results of two successive '
    'steps of the minimization.']
parse_name: cv.createCalibrateRobertson with ['cv'] -> fullname:cv::createCalibrateRobertson namespace:cv classpath: classname: name:createCalibrateRobertson
register (function) createCalibrateRobertson (cv_createCalibrateRobertson_int_float)

--- Incoming ---
[   'class cv.MergeExposures',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief The base class algorithms that can merge exposure sequence to a '
    'single image.']
parse_name: class cv.MergeExposures with ['cv'] -> fullname:cv::MergeExposures namespace:cv classpath: classname: name:MergeExposures
register class cv::MergeExposures (['class cv.MergeExposures', ': cv::Algorithm', [], [], None, '@brief The base class algorithms that can merge exposure sequence to a single image.']) impl:cv::Algorithm

--- Incoming ---
[   'cv.MergeExposures.process',
    'void',
    ['/A'],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []],
        ['InputArray', 'response', '', []]],
    None,
    '@brief Merges images.\n'
    '\n'
    '@param src vector of input images\n'
    '@param dst result image\n'
    '@param times vector of exposure time values for each image\n'
    '@param response 256x1 matrix with inverse camera response function for '
    'each pixel value, it should\n'
    'have the same number of channels as images.']
parse_name: cv.MergeExposures.process with ['cv'] -> fullname:cv::MergeExposures::process namespace:cv classpath:MergeExposures classname:MergeExposures name:process
register (method) process in cv::MergeExposures (trait) (cv_MergeExposures_process__InputArray__OutputArray__InputArray__InputArray)

--- Incoming ---
[   'class cv.MergeDebevec',
    ': cv::MergeExposures',
    [],
    [],
    None,
    '@brief The resulting HDR image is calculated as weighted average of the '
    'exposures considering exposure\n'
    'values and camera response.\n'
    '\n'
    'For more information see @cite DM97 .']
parse_name: class cv.MergeDebevec with ['cv'] -> fullname:cv::MergeDebevec namespace:cv classpath: classname: name:MergeDebevec
register class cv::MergeDebevec (['class cv.MergeDebevec', ': cv::MergeExposures', [], [], None, '@brief The resulting HDR image is calculated as weighted average of the exposures considering exposure\nvalues and camera response.\n\nFor more information see @cite DM97 .']) impl:cv::MergeExposures

--- Incoming ---
[   'cv.MergeDebevec.process',
    'void',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []],
        ['InputArray', 'response', '', []]],
    None,
    '']
parse_name: cv.MergeDebevec.process with ['cv'] -> fullname:cv::MergeDebevec::process namespace:cv classpath:MergeDebevec classname:MergeDebevec name:process
register (method) process in cv::MergeDebevec (cv_MergeDebevec_process__InputArray__OutputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.MergeDebevec.process',
    'void',
    ['/A'],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []]],
    None,
    '']
parse_name: cv.MergeDebevec.process with ['cv'] -> fullname:cv::MergeDebevec::process namespace:cv classpath:MergeDebevec classname:MergeDebevec name:process
register (method) process in cv::MergeDebevec (trait) (cv_MergeDebevec_process__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.createMergeDebevec',
    'Ptr<MergeDebevec>',
    [],
    [],
    None,
    '@brief Creates MergeDebevec object']
parse_name: cv.createMergeDebevec with ['cv'] -> fullname:cv::createMergeDebevec namespace:cv classpath: classname: name:createMergeDebevec
register (function) createMergeDebevec (cv_createMergeDebevec)

--- Incoming ---
[   'class cv.MergeMertens',
    ': cv::MergeExposures',
    [],
    [],
    None,
    '@brief Pixels are weighted using contrast, saturation and '
    'well-exposedness measures, than images are\n'
    'combined using laplacian pyramids.\n'
    '\n'
    'The resulting image weight is constructed as weighted average of '
    'contrast, saturation and\n'
    'well-exposedness measures.\n'
    '\n'
    "The resulting image doesn't require tonemapping and can be converted to "
    '8-bit image by multiplying\n'
    "by 255, but it's recommended to apply gamma correction and/or linear "
    'tonemapping.\n'
    '\n'
    'For more information see @cite MK07 .']
parse_name: class cv.MergeMertens with ['cv'] -> fullname:cv::MergeMertens namespace:cv classpath: classname: name:MergeMertens
register class cv::MergeMertens (['class cv.MergeMertens', ': cv::MergeExposures', [], [], None, "@brief Pixels are weighted using contrast, saturation and well-exposedness measures, than images are\ncombined using laplacian pyramids.\n\nThe resulting image weight is constructed as weighted average of contrast, saturation and\nwell-exposedness measures.\n\nThe resulting image doesn't require tonemapping and can be converted to 8-bit image by multiplying\nby 255, but it's recommended to apply gamma correction and/or linear tonemapping.\n\nFor more information see @cite MK07 ."]) impl:cv::MergeExposures

--- Incoming ---
[   'cv.MergeMertens.process',
    'void',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []],
        ['InputArray', 'response', '', []]],
    None,
    '']
parse_name: cv.MergeMertens.process with ['cv'] -> fullname:cv::MergeMertens::process namespace:cv classpath:MergeMertens classname:MergeMertens name:process
register (method) process in cv::MergeMertens (cv_MergeMertens_process__InputArray__OutputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.MergeMertens.process',
    'void',
    ['/A'],
    [['InputArrayOfArrays', 'src', '', []], ['OutputArray', 'dst', '', []]],
    None,
    "@brief Short version of process, that doesn't take extra arguments.\n"
    '\n'
    '@param src vector of input images\n'
    '@param dst result image']
parse_name: cv.MergeMertens.process with ['cv'] -> fullname:cv::MergeMertens::process namespace:cv classpath:MergeMertens classname:MergeMertens name:process
register (method) process in cv::MergeMertens (trait) (cv_MergeMertens_process__InputArray__OutputArray)

--- Incoming ---
['cv.MergeMertens.getContrastWeight', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.MergeMertens.getContrastWeight with ['cv'] -> fullname:cv::MergeMertens::getContrastWeight namespace:cv classpath:MergeMertens classname:MergeMertens name:getContrastWeight
register (method) getContrastWeight in cv::MergeMertens (trait) (cv_MergeMertens_getContrastWeight_const)

--- Incoming ---
[   'cv.MergeMertens.setContrastWeight',
    'void',
    ['/A'],
    [['float', 'contrast_weiht', '', []]],
    None,
    '']
parse_name: cv.MergeMertens.setContrastWeight with ['cv'] -> fullname:cv::MergeMertens::setContrastWeight namespace:cv classpath:MergeMertens classname:MergeMertens name:setContrastWeight
register (method) setContrastWeight in cv::MergeMertens (trait) (cv_MergeMertens_setContrastWeight_float)

--- Incoming ---
['cv.MergeMertens.getSaturationWeight', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.MergeMertens.getSaturationWeight with ['cv'] -> fullname:cv::MergeMertens::getSaturationWeight namespace:cv classpath:MergeMertens classname:MergeMertens name:getSaturationWeight
register (method) getSaturationWeight in cv::MergeMertens (trait) (cv_MergeMertens_getSaturationWeight_const)

--- Incoming ---
[   'cv.MergeMertens.setSaturationWeight',
    'void',
    ['/A'],
    [['float', 'saturation_weight', '', []]],
    None,
    '']
parse_name: cv.MergeMertens.setSaturationWeight with ['cv'] -> fullname:cv::MergeMertens::setSaturationWeight namespace:cv classpath:MergeMertens classname:MergeMertens name:setSaturationWeight
register (method) setSaturationWeight in cv::MergeMertens (trait) (cv_MergeMertens_setSaturationWeight_float)

--- Incoming ---
['cv.MergeMertens.getExposureWeight', 'float', ['/A', '/C'], [], None, '']
parse_name: cv.MergeMertens.getExposureWeight with ['cv'] -> fullname:cv::MergeMertens::getExposureWeight namespace:cv classpath:MergeMertens classname:MergeMertens name:getExposureWeight
register (method) getExposureWeight in cv::MergeMertens (trait) (cv_MergeMertens_getExposureWeight_const)

--- Incoming ---
[   'cv.MergeMertens.setExposureWeight',
    'void',
    ['/A'],
    [['float', 'exposure_weight', '', []]],
    None,
    '']
parse_name: cv.MergeMertens.setExposureWeight with ['cv'] -> fullname:cv::MergeMertens::setExposureWeight namespace:cv classpath:MergeMertens classname:MergeMertens name:setExposureWeight
register (method) setExposureWeight in cv::MergeMertens (trait) (cv_MergeMertens_setExposureWeight_float)

--- Incoming ---
[   'cv.createMergeMertens',
    'Ptr<MergeMertens>',
    [],
    [   ['float', 'contrast_weight', '1.0f', []],
        ['float', 'saturation_weight', '1.0f', []],
        ['float', 'exposure_weight', '0.0f', []]],
    None,
    '@brief Creates MergeMertens object\n'
    '\n'
    '@param contrast_weight contrast measure weight. See MergeMertens.\n'
    '@param saturation_weight saturation measure weight\n'
    '@param exposure_weight well-exposedness measure weight']
parse_name: cv.createMergeMertens with ['cv'] -> fullname:cv::createMergeMertens namespace:cv classpath: classname: name:createMergeMertens
register (function) createMergeMertens (cv_createMergeMertens_float_float_float)

--- Incoming ---
[   'class cv.MergeRobertson',
    ': cv::MergeExposures',
    [],
    [],
    None,
    '@brief The resulting HDR image is calculated as weighted average of the '
    'exposures considering exposure\n'
    'values and camera response.\n'
    '\n'
    'For more information see @cite RB99 .']
parse_name: class cv.MergeRobertson with ['cv'] -> fullname:cv::MergeRobertson namespace:cv classpath: classname: name:MergeRobertson
register class cv::MergeRobertson (['class cv.MergeRobertson', ': cv::MergeExposures', [], [], None, '@brief The resulting HDR image is calculated as weighted average of the exposures considering exposure\nvalues and camera response.\n\nFor more information see @cite RB99 .']) impl:cv::MergeExposures

--- Incoming ---
[   'cv.MergeRobertson.process',
    'void',
    [],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []],
        ['InputArray', 'response', '', []]],
    None,
    '']
parse_name: cv.MergeRobertson.process with ['cv'] -> fullname:cv::MergeRobertson::process namespace:cv classpath:MergeRobertson classname:MergeRobertson name:process
register (method) process in cv::MergeRobertson (cv_MergeRobertson_process__InputArray__OutputArray__InputArray__InputArray)

--- Incoming ---
[   'cv.MergeRobertson.process',
    'void',
    ['/A'],
    [   ['InputArrayOfArrays', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['InputArray', 'times', '', []]],
    None,
    '']
parse_name: cv.MergeRobertson.process with ['cv'] -> fullname:cv::MergeRobertson::process namespace:cv classpath:MergeRobertson classname:MergeRobertson name:process
register (method) process in cv::MergeRobertson (trait) (cv_MergeRobertson_process__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.createMergeRobertson',
    'Ptr<MergeRobertson>',
    [],
    [],
    None,
    '@brief Creates MergeRobertson object']
parse_name: cv.createMergeRobertson with ['cv'] -> fullname:cv::createMergeRobertson namespace:cv classpath: classname: name:createMergeRobertson
register (function) createMergeRobertson (cv_createMergeRobertson)

--- Incoming ---
[   'cv.decolor',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'grayscale', '', []],
        ['OutputArray', 'color_boost', '', []]],
    None,
    '@brief Transforms a color image to a grayscale image. It is a basic tool '
    'in digital printing, stylized\n'
    'black-and-white photograph rendering, and in many single channel image '
    'processing applications\n'
    '@cite CL12 .\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param grayscale Output 8-bit 1-channel image.\n'
    '@param color_boost Output 8-bit 3-channel image.\n'
    '\n'
    'This function is to be applied on color images.']
parse_name: cv.decolor with ['cv'] -> fullname:cv::decolor namespace:cv classpath: classname: name:decolor
register (function) decolor (cv_decolor__InputArray__OutputArray__OutputArray)

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.NORMAL_CLONE', '1', [], [], None, ''],
        ['const cv.MIXED_CLONE', '2', [], [], None, ''],
        ['const cv.MONOCHROME_TRANSFER', '3', [], [], None, '']],
    None,
    '@} photo_decolor\n'
    '@addtogroup photo_clone\n'
    '@{\n'
    'seamlessClone algorithm flags']
parse_name: const cv.NORMAL_CLONE with ['cv'] -> fullname:cv::NORMAL_CLONE namespace:cv classpath: classname: name:NORMAL_CLONE
parse_name: const cv.MIXED_CLONE with ['cv'] -> fullname:cv::MIXED_CLONE namespace:cv classpath: classname: name:MIXED_CLONE
parse_name: const cv.MONOCHROME_TRANSFER with ['cv'] -> fullname:cv::MONOCHROME_TRANSFER namespace:cv classpath: classname: name:MONOCHROME_TRANSFER

--- Incoming ---
[   'cv.seamlessClone',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'dst', '', []],
        ['InputArray', 'mask', '', []],
        ['Point', 'p', '', []],
        ['OutputArray', 'blend', '', []],
        ['int', 'flags', '', []]],
    None,
    '@brief Image editing tasks concern either global changes (color/intensity '
    'corrections, filters,\n'
    'deformations) or local changes concerned to a selection. Here we are '
    'interested in achieving local\n'
    'changes, ones that are restricted to a region manually selected (ROI), in '
    'a seamless and effortless\n'
    'manner. The extent of the changes ranges from slight distortions to '
    'complete replacement by novel\n'
    'content @cite PM03 .\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param dst Input 8-bit 3-channel image.\n'
    '@param mask Input 8-bit 1 or 3-channel image.\n'
    '@param p Point in dst image where object is placed.\n'
    '@param blend Output image with the same size and type as dst.\n'
    '@param flags Cloning method that could be cv::NORMAL_CLONE, '
    'cv::MIXED_CLONE or cv::MONOCHROME_TRANSFER']
parse_name: cv.seamlessClone with ['cv'] -> fullname:cv::seamlessClone namespace:cv classpath: classname: name:seamlessClone
register (function) seamlessClone (cv_seamlessClone__InputArray__InputArray__InputArray_Point__OutputArray_int)

--- Incoming ---
[   'cv.colorChange',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'mask', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'red_mul', '1.0f', []],
        ['float', 'green_mul', '1.0f', []],
        ['float', 'blue_mul', '1.0f', []]],
    None,
    '@brief Given an original color image, two differently colored versions of '
    'this image can be mixed\n'
    'seamlessly.\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param mask Input 8-bit 1 or 3-channel image.\n'
    '@param dst Output image with the same size and type as src .\n'
    '@param red_mul R-channel multiply factor.\n'
    '@param green_mul G-channel multiply factor.\n'
    '@param blue_mul B-channel multiply factor.\n'
    '\n'
    'Multiplication factor is between .5 to 2.5.']
parse_name: cv.colorChange with ['cv'] -> fullname:cv::colorChange namespace:cv classpath: classname: name:colorChange
register (function) colorChange (cv_colorChange__InputArray__InputArray__OutputArray_float_float_float)

--- Incoming ---
[   'cv.illuminationChange',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'mask', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'alpha', '0.2f', []],
        ['float', 'beta', '0.4f', []]],
    None,
    '@brief Applying an appropriate non-linear transformation to the gradient '
    'field inside the selection and\n'
    'then integrating back with a Poisson solver, modifies locally the '
    'apparent illumination of an image.\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param mask Input 8-bit 1 or 3-channel image.\n'
    '@param dst Output image with the same size and type as src.\n'
    '@param alpha Value ranges between 0-2.\n'
    '@param beta Value ranges between 0-2.\n'
    '\n'
    'This is useful to highlight under-exposed foreground objects or to reduce '
    'specular reflections.']
parse_name: cv.illuminationChange with ['cv'] -> fullname:cv::illuminationChange namespace:cv classpath: classname: name:illuminationChange
register (function) illuminationChange (cv_illuminationChange__InputArray__InputArray__OutputArray_float_float)

--- Incoming ---
[   'cv.textureFlattening',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['InputArray', 'mask', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'low_threshold', '30', []],
        ['float', 'high_threshold', '45', []],
        ['int', 'kernel_size', '3', []]],
    None,
    '@brief By retaining only the gradients at edge locations, before '
    'integrating with the Poisson solver, one\n'
    'washes out the texture of the selected region, giving its contents a flat '
    'aspect. Here Canny Edge %Detector is used.\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param mask Input 8-bit 1 or 3-channel image.\n'
    '@param dst Output image with the same size and type as src.\n'
    '@param low_threshold %Range from 0 to 100.\n'
    '@param high_threshold Value \\> 100.\n'
    '@param kernel_size The size of the Sobel kernel to be used.\n'
    '\n'
    '@note\n'
    'The algorithm assumes that the color of the source image is close to that '
    'of the destination. This\n'
    "assumption means that when the colors don't match, the source image color "
    'gets tinted toward the\n'
    'color of the destination image.']
parse_name: cv.textureFlattening with ['cv'] -> fullname:cv::textureFlattening namespace:cv classpath: classname: name:textureFlattening
register (function) textureFlattening (cv_textureFlattening__InputArray__InputArray__OutputArray_float_float_int)

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.RECURS_FILTER', '1', [], [], None, 'Recursive Filtering\n'],
        [   'const cv.NORMCONV_FILTER',
            '2',
            [],
            [],
            None,
            'Normalized Convolution Filtering\n']],
    None,
    '@} photo_clone\n@addtogroup photo_render\n@{\nEdge preserving filters']
parse_name: const cv.RECURS_FILTER with ['cv'] -> fullname:cv::RECURS_FILTER namespace:cv classpath: classname: name:RECURS_FILTER
parse_name: const cv.NORMCONV_FILTER with ['cv'] -> fullname:cv::NORMCONV_FILTER namespace:cv classpath: classname: name:NORMCONV_FILTER

--- Incoming ---
[   'cv.edgePreservingFilter',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['int', 'flags', '1', []],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.4f', []]],
    None,
    '@brief Filtering is the fundamental operation in image and video '
    'processing. Edge-preserving smoothing\n'
    'filters are used in many different applications @cite EM11 .\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param dst Output 8-bit 3-channel image.\n'
    '@param flags Edge preserving filters: cv::RECURS_FILTER or '
    'cv::NORMCONV_FILTER\n'
    '@param sigma_s %Range between 0 to 200.\n'
    '@param sigma_r %Range between 0 to 1.']
parse_name: cv.edgePreservingFilter with ['cv'] -> fullname:cv::edgePreservingFilter namespace:cv classpath: classname: name:edgePreservingFilter
register (function) edgePreservingFilter (cv_edgePreservingFilter__InputArray__OutputArray_int_float_float)

--- Incoming ---
[   'cv.detailEnhance',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'sigma_s', '10', []],
        ['float', 'sigma_r', '0.15f', []]],
    None,
    '@brief This filter enhances the details of a particular image.\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param dst Output image with the same size and type as src.\n'
    '@param sigma_s %Range between 0 to 200.\n'
    '@param sigma_r %Range between 0 to 1.']
parse_name: cv.detailEnhance with ['cv'] -> fullname:cv::detailEnhance namespace:cv classpath: classname: name:detailEnhance
register (function) detailEnhance (cv_detailEnhance__InputArray__OutputArray_float_float)

--- Incoming ---
[   'cv.pencilSketch',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst1', '', []],
        ['OutputArray', 'dst2', '', []],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.07f', []],
        ['float', 'shade_factor', '0.02f', []]],
    None,
    '@brief Pencil-like non-photorealistic line drawing\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param dst1 Output 8-bit 1-channel image.\n'
    '@param dst2 Output image with the same size and type as src.\n'
    '@param sigma_s %Range between 0 to 200.\n'
    '@param sigma_r %Range between 0 to 1.\n'
    '@param shade_factor %Range between 0 to 0.1.']
parse_name: cv.pencilSketch with ['cv'] -> fullname:cv::pencilSketch namespace:cv classpath: classname: name:pencilSketch
register (function) pencilSketch (cv_pencilSketch__InputArray__OutputArray__OutputArray_float_float_float)

--- Incoming ---
[   'cv.stylization',
    'void',
    [],
    [   ['InputArray', 'src', '', []],
        ['OutputArray', 'dst', '', []],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.45f', []]],
    None,
    '@brief Stylization aims to produce digital imagery with a wide variety of '
    'effects not focused on\n'
    'photorealism. Edge-aware filters are ideal for stylization, as they can '
    'abstract regions of low\n'
    'contrast while preserving, or enhancing, high-contrast features.\n'
    '\n'
    '@param src Input 8-bit 3-channel image.\n'
    '@param dst Output image with the same size and type as src.\n'
    '@param sigma_s %Range between 0 to 200.\n'
    '@param sigma_r %Range between 0 to 1.']
parse_name: cv.stylization with ['cv'] -> fullname:cv::stylization namespace:cv classpath: classname: name:stylization
register (function) stylization (cv_stylization__InputArray__OutputArray_float_float)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/photo/photo.hpp ================


Namespaces: ['cv']
Comment: {'photo': '\n@defgroup photo Computational Photography\n\nThis module includes photo processing algorithms\n@{\n@defgroup photo_inpaint Inpainting\n@defgroup photo_denoise Denoising\n@defgroup photo_hdr HDR imaging\n\nThis section describes high dynamic range imaging algorithms namely tonemapping, exposure alignment,\ncamera calibration with multiple exposures and exposure fusion.\n\n@defgroup photo_decolor Contrast Preserving Decolorization\n\nUseful links:\n\nhttp://www.cse.cuhk.edu.hk/leojia/projects/color2gray/index.html\n\n@defgroup photo_clone Seamless Cloning\n\nUseful links:\n\nhttps://www.learnopencv.com/seamless-cloning-using-opencv-python-cpp\n\n@defgroup photo_render Non-Photorealistic Rendering\n\nUseful links:\n\nhttp://www.inf.ufrgs.br/~eslgastal/DomainTransform\n\nhttps://www.learnopencv.com/non-photorealistic-rendering-using-opencv-python-c/\n@}\n\n'}


===== Generating... =====
Generating func cv_colorChange__InputArray__InputArray__OutputArray_float_float_float
Generating func cv_createAlignMTB_int_int_bool
Generating func cv_createCalibrateDebevec_int_float_bool
Generating func cv_createCalibrateRobertson_int_float
Generating func cv_createMergeDebevec
Generating func cv_createMergeMertens_float_float_float
Generating func cv_createMergeRobertson
Generating func cv_createTonemapDrago_float_float_float
Generating func cv_createTonemapMantiuk_float_float_float
Generating func cv_createTonemapReinhard_float_float_float_float
Generating func cv_createTonemap_float
Generating func cv_decolor__InputArray__OutputArray__OutputArray
Generating func cv_denoise_TVL1_VectorOfMat_Mat_double_int
Generating func cv_detailEnhance__InputArray__OutputArray_float_float
Generating func cv_edgePreservingFilter__InputArray__OutputArray_int_float_float
Generating func cv_fastNlMeansDenoisingColoredMulti__InputArray__OutputArray_int_int_float_float_int_int
Generating func cv_fastNlMeansDenoisingColored__InputArray__OutputArray_float_float_int_int
Generating func cv_fastNlMeansDenoisingMulti__InputArray__OutputArray_int_int_VectorOffloat_int_int_int
Generating func cv_fastNlMeansDenoisingMulti__InputArray__OutputArray_int_int_float_int_int
Generating func cv_fastNlMeansDenoising__InputArray__OutputArray_VectorOffloat_int_int_int
Generating func cv_fastNlMeansDenoising__InputArray__OutputArray_float_int_int
Generating func cv_illuminationChange__InputArray__InputArray__OutputArray_float_float
Generating func cv_inpaint__InputArray__InputArray__OutputArray_double_int
Generating func cv_pencilSketch__InputArray__OutputArray__OutputArray_float_float_float
Generating func cv_seamlessClone__InputArray__InputArray__InputArray_Point__OutputArray_int
Generating func cv_stylization__InputArray__OutputArray_float_float
Generating func cv_textureFlattening__InputArray__InputArray__OutputArray_float_float_int
Ghost class cv::Algorithm (ghost, trait), ignoring
Generating impl for trait cv::AlignExposures (trait)
Generating func cv_AlignExposures_process__InputArray_VectorOfMat__InputArray__InputArray
Generating impl for trait cv::AlignMTB (trait)
Generating func cv_AlignMTB_process__InputArray_VectorOfMat__InputArray__InputArray
Generating func cv_AlignMTB_process__InputArray_VectorOfMat
Generating func cv_AlignMTB_calculateShift__InputArray__InputArray
Generating func cv_AlignMTB_shiftMat__InputArray__OutputArray_Point
Generating func cv_AlignMTB_computeBitmaps__InputArray__OutputArray__OutputArray
Generating func cv_AlignMTB_getMaxBits_const
Generating func cv_AlignMTB_setMaxBits_int
Generating func cv_AlignMTB_getExcludeRange_const
Generating func cv_AlignMTB_setExcludeRange_int
Generating func cv_AlignMTB_getCut_const
Generating func cv_AlignMTB_setCut_bool
Generating impl for trait cv::CalibrateCRF (trait)
Generating func cv_CalibrateCRF_process__InputArray__OutputArray__InputArray
Generating impl for trait cv::CalibrateDebevec (trait)
Generating func cv_CalibrateDebevec_getLambda_const
Generating func cv_CalibrateDebevec_setLambda_float
Generating func cv_CalibrateDebevec_getSamples_const
Generating func cv_CalibrateDebevec_setSamples_int
Generating func cv_CalibrateDebevec_getRandom_const
Generating func cv_CalibrateDebevec_setRandom_bool
Generating impl for trait cv::CalibrateRobertson (trait)
Generating func cv_CalibrateRobertson_getMaxIter_const
Generating func cv_CalibrateRobertson_setMaxIter_int
Generating func cv_CalibrateRobertson_getThreshold_const
Generating func cv_CalibrateRobertson_setThreshold_float
Generating func cv_CalibrateRobertson_getRadiance_const
Ghost class cv::DMatch (simple, ghost), ignoring
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Ghost class cv::Feature2D (ghost, trait), ignoring
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Ghost class cv::KeyPoint (simple, ghost), ignoring
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Generating impl for trait cv::MergeDebevec (trait)
Generating func cv_MergeDebevec_process__InputArray__OutputArray__InputArray__InputArray
Generating func cv_MergeDebevec_process__InputArray__OutputArray__InputArray
Generating impl for trait cv::MergeExposures (trait)
Generating func cv_MergeExposures_process__InputArray__OutputArray__InputArray__InputArray
Generating impl for trait cv::MergeMertens (trait)
Generating func cv_MergeMertens_process__InputArray__OutputArray__InputArray__InputArray
Generating func cv_MergeMertens_process__InputArray__OutputArray
Generating func cv_MergeMertens_getContrastWeight_const
Generating func cv_MergeMertens_setContrastWeight_float
Generating func cv_MergeMertens_getSaturationWeight_const
Generating func cv_MergeMertens_setSaturationWeight_float
Generating func cv_MergeMertens_getExposureWeight_const
Generating func cv_MergeMertens_setExposureWeight_float
Generating impl for trait cv::MergeRobertson (trait)
Generating func cv_MergeRobertson_process__InputArray__OutputArray__InputArray__InputArray
Generating func cv_MergeRobertson_process__InputArray__OutputArray__InputArray
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Ghost class cv::TermCriteria (ghost), ignoring
Generating impl for trait cv::Tonemap (trait)
Generating func cv_Tonemap_process__InputArray__OutputArray
Generating func cv_Tonemap_getGamma_const
Generating func cv_Tonemap_setGamma_float
Generating impl for trait cv::TonemapDrago (trait)
Generating func cv_TonemapDrago_getSaturation_const
Generating func cv_TonemapDrago_setSaturation_float
Generating func cv_TonemapDrago_getBias_const
Generating func cv_TonemapDrago_setBias_float
Generating impl for trait cv::TonemapMantiuk (trait)
Generating func cv_TonemapMantiuk_getScale_const
Generating func cv_TonemapMantiuk_setScale_float
Generating func cv_TonemapMantiuk_getSaturation_const
Generating func cv_TonemapMantiuk_setSaturation_float
Generating impl for trait cv::TonemapReinhard (trait)
Generating func cv_TonemapReinhard_getIntensity_const
Generating func cv_TonemapReinhard_setIntensity_float
Generating func cv_TonemapReinhard_getLightAdaptation_const
Generating func cv_TonemapReinhard_setLightAdaptation_float
Generating func cv_TonemapReinhard_getColorAdaptation_const
Generating func cv_TonemapReinhard_setColorAdaptation_float
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Ghost class cv::utils::logging::LogTag (ghost), ignoring
