
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/plot.hpp ================


Namespaces: ['cv', 'cv.plot']
Comment: {'plot': '\n@defgroup plot Plot function for Mat data\n\n'}

--- Incoming ---
[   'class cv.plot.Plot2d',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@addtogroup plot\n@{']
parse_name: class cv.plot.Plot2d with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d namespace:cv::plot classpath: classname: name:Plot2d
register class cv::plot::Plot2d (['class cv.plot.Plot2d', ': cv::Algorithm', [], [], None, '@addtogroup plot\n@{']) impl:cv::Algorithm

--- Incoming ---
[   'cv.plot.Plot2d.setMinX',
    'void',
    ['/A'],
    [['double', '_plotMinX', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setMinX with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setMinX namespace:cv::plot classpath:Plot2d classname:Plot2d name:setMinX
register (method) setMinX in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setMinX_double)

--- Incoming ---
[   'cv.plot.Plot2d.setMinY',
    'void',
    ['/A'],
    [['double', '_plotMinY', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setMinY with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setMinY namespace:cv::plot classpath:Plot2d classname:Plot2d name:setMinY
register (method) setMinY in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setMinY_double)

--- Incoming ---
[   'cv.plot.Plot2d.setMaxX',
    'void',
    ['/A'],
    [['double', '_plotMaxX', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setMaxX with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setMaxX namespace:cv::plot classpath:Plot2d classname:Plot2d name:setMaxX
register (method) setMaxX in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setMaxX_double)

--- Incoming ---
[   'cv.plot.Plot2d.setMaxY',
    'void',
    ['/A'],
    [['double', '_plotMaxY', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setMaxY with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setMaxY namespace:cv::plot classpath:Plot2d classname:Plot2d name:setMaxY
register (method) setMaxY in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setMaxY_double)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotLineWidth',
    'void',
    ['/A'],
    [['int', '_plotLineWidth', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotLineWidth with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotLineWidth namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotLineWidth
register (method) setPlotLineWidth in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotLineWidth_int)

--- Incoming ---
[   'cv.plot.Plot2d.setNeedPlotLine',
    'void',
    ['/A'],
    [['bool', '_needPlotLine', '', []]],
    None,
    '* @brief Switches data visualization mode\n'
    '*\n'
    '* @param _needPlotLine if true then neighbour plot points will be '
    'connected by lines.\n'
    '* In other case data will be plotted as a set of standalone points.']
parse_name: cv.plot.Plot2d.setNeedPlotLine with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setNeedPlotLine namespace:cv::plot classpath:Plot2d classname:Plot2d name:setNeedPlotLine
register (method) setNeedPlotLine in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setNeedPlotLine_bool)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotLineColor',
    'void',
    ['/A'],
    [['Scalar', '_plotLineColor', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotLineColor with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotLineColor namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotLineColor
register (method) setPlotLineColor in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotLineColor_Scalar)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotBackgroundColor',
    'void',
    ['/A'],
    [['Scalar', '_plotBackgroundColor', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotBackgroundColor with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotBackgroundColor namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotBackgroundColor
register (method) setPlotBackgroundColor in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotBackgroundColor_Scalar)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotAxisColor',
    'void',
    ['/A'],
    [['Scalar', '_plotAxisColor', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotAxisColor with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotAxisColor namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotAxisColor
register (method) setPlotAxisColor in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotAxisColor_Scalar)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotGridColor',
    'void',
    ['/A'],
    [['Scalar', '_plotGridColor', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotGridColor with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotGridColor namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotGridColor
register (method) setPlotGridColor in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotGridColor_Scalar)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotTextColor',
    'void',
    ['/A'],
    [['Scalar', '_plotTextColor', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotTextColor with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotTextColor namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotTextColor
register (method) setPlotTextColor in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotTextColor_Scalar)

--- Incoming ---
[   'cv.plot.Plot2d.setPlotSize',
    'void',
    ['/A'],
    [['int', '_plotSizeWidth', '', []], ['int', '_plotSizeHeight', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setPlotSize with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPlotSize namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPlotSize
register (method) setPlotSize in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPlotSize_int_int)

--- Incoming ---
[   'cv.plot.Plot2d.setShowGrid',
    'void',
    ['/A'],
    [['bool', 'needShowGrid', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setShowGrid with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setShowGrid namespace:cv::plot classpath:Plot2d classname:Plot2d name:setShowGrid
register (method) setShowGrid in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setShowGrid_bool)

--- Incoming ---
[   'cv.plot.Plot2d.setShowText',
    'void',
    ['/A'],
    [['bool', 'needShowText', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setShowText with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setShowText namespace:cv::plot classpath:Plot2d classname:Plot2d name:setShowText
register (method) setShowText in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setShowText_bool)

--- Incoming ---
[   'cv.plot.Plot2d.setGridLinesNumber',
    'void',
    ['/A'],
    [['int', 'gridLinesNumber', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setGridLinesNumber with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setGridLinesNumber namespace:cv::plot classpath:Plot2d classname:Plot2d name:setGridLinesNumber
register (method) setGridLinesNumber in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setGridLinesNumber_int)

--- Incoming ---
[   'cv.plot.Plot2d.setInvertOrientation',
    'void',
    ['/A'],
    [['bool', '_invertOrientation', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.setInvertOrientation with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setInvertOrientation namespace:cv::plot classpath:Plot2d classname:Plot2d name:setInvertOrientation
register (method) setInvertOrientation in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setInvertOrientation_bool)

--- Incoming ---
[   'cv.plot.Plot2d.setPointIdxToPrint',
    'void',
    ['/A'],
    [['int', 'pointIdx', '', []]],
    None,
    '* @brief Sets the index of a point which coordinates will be printed on '
    'the top left corner of the plot (if ShowText flag is true).\n'
    '*\n'
    '* @param pointIdx index of the required point in data array.']
parse_name: cv.plot.Plot2d.setPointIdxToPrint with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::setPointIdxToPrint namespace:cv::plot classpath:Plot2d classname:Plot2d name:setPointIdxToPrint
register (method) setPointIdxToPrint in cv::plot::Plot2d (trait) (cv_plot_Plot2d_setPointIdxToPrint_int)

--- Incoming ---
[   'cv.plot.Plot2d.render',
    'void',
    ['/A'],
    [['OutputArray', '_plotResult', '', []]],
    None,
    '']
parse_name: cv.plot.Plot2d.render with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::render namespace:cv::plot classpath:Plot2d classname:Plot2d name:render
register (method) render in cv::plot::Plot2d (trait) (cv_plot_Plot2d_render__OutputArray)

--- Incoming ---
[   'cv.plot.Plot2d.create',
    'Ptr<Plot2d>',
    ['/S'],
    [['InputArray', 'data', '', []]],
    None,
    '* @brief Creates Plot2d object\n'
    '*\n'
    '* @param data \\f$1xN\\f$ or \\f$Nx1\\f$ matrix containing \\f$Y\\f$ '
    'values of points to plot. \\f$X\\f$ values\n'
    '* will be equal to indexes of correspondind elements in data matrix.']
parse_name: cv.plot.Plot2d.create with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::create namespace:cv::plot classpath:Plot2d classname:Plot2d name:create
register (method) create in cv::plot::Plot2d (trait) (cv_plot_Plot2d_create__InputArray)

--- Incoming ---
[   'cv.plot.Plot2d.create',
    'Ptr<Plot2d>',
    ['/S'],
    [['InputArray', 'dataX', '', []], ['InputArray', 'dataY', '', []]],
    None,
    '* @brief Creates Plot2d object\n'
    '*\n'
    '* @param dataX \\f$1xN\\f$ or \\f$Nx1\\f$ matrix \\f$X\\f$ values of '
    'points to plot.\n'
    '* @param dataY \\f$1xN\\f$ or \\f$Nx1\\f$ matrix containing \\f$Y\\f$ '
    'values of points to plot.']
parse_name: cv.plot.Plot2d.create with ['cv', 'cv::plot'] -> fullname:cv::plot::Plot2d::create namespace:cv::plot classpath:Plot2d classname:Plot2d name:create
register (method) create in cv::plot::Plot2d (trait) (cv_plot_Plot2d_create__InputArray__InputArray)


===== Generating... =====
Ghost class cv::Algorithm (ghost, trait), ignoring
Ghost class cv::DMatch (simple, ghost), ignoring
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Ghost class cv::Feature2D (ghost, trait), ignoring
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Ghost class cv::KeyPoint (simple, ghost), ignoring
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Ghost class cv::TermCriteria (ghost), ignoring
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Generating impl for trait cv::plot::Plot2d (trait)
Generating func cv_plot_Plot2d_setMinX_double
Generating func cv_plot_Plot2d_setMinY_double
Generating func cv_plot_Plot2d_setMaxX_double
Generating func cv_plot_Plot2d_setMaxY_double
Generating func cv_plot_Plot2d_setPlotLineWidth_int
Generating func cv_plot_Plot2d_setNeedPlotLine_bool
Generating func cv_plot_Plot2d_setPlotLineColor_Scalar
Generating func cv_plot_Plot2d_setPlotBackgroundColor_Scalar
Generating func cv_plot_Plot2d_setPlotAxisColor_Scalar
Generating func cv_plot_Plot2d_setPlotGridColor_Scalar
Generating func cv_plot_Plot2d_setPlotTextColor_Scalar
Generating func cv_plot_Plot2d_setPlotSize_int_int
Generating func cv_plot_Plot2d_setShowGrid_bool
Generating func cv_plot_Plot2d_setShowText_bool
Generating func cv_plot_Plot2d_setGridLinesNumber_int
Generating func cv_plot_Plot2d_setInvertOrientation_bool
Generating func cv_plot_Plot2d_setPointIdxToPrint_int
Generating func cv_plot_Plot2d_render__OutputArray
Generating func cv_plot_Plot2d_create__InputArray
Generating func cv_plot_Plot2d_create__InputArray__InputArray
Ghost class cv::utils::logging::LogTag (ghost), ignoring
