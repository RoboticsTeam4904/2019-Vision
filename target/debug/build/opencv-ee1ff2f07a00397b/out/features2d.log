
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/features2d.hpp ================


Namespaces: ['cv']
Comment: {'features2d': '\n@defgroup features2d 2D Features Framework\n@{\n@defgroup features2d_main Feature Detection and Description\n@defgroup features2d_match Descriptor Matchers\n\nMatchers of keypoint descriptors in OpenCV have wrappers with a common interface that enables you to\neasily switch between different algorithms solving the same problem. This section is devoted to\nmatching descriptors that are represented as vectors in a multidimensional space. All objects that\nimplement vector descriptor matchers inherit the DescriptorMatcher interface.\n\n@note\n-   An example explaining keypoint matching can be found at\nopencv_source_code/samples/cpp/descriptor_extractor_matcher.cpp\n-   An example on descriptor matching evaluation can be found at\nopencv_source_code/samples/cpp/detector_descriptor_matcher_evaluation.cpp\n-   An example on one to many image matching can be found at\nopencv_source_code/samples/cpp/matching_to_many_images.cpp\n\n@defgroup features2d_draw Drawing Function of Keypoints and Matches\n@defgroup features2d_category Object Categorization\n\nThis section describes approaches based on local 2D features and used to categorize objects.\n\n@note\n-   A complete Bag-Of-Words sample can be found at\nopencv_source_code/samples/cpp/bagofwords_classification.cpp\n-   (Python) An example using the features2D framework to perform object categorization can be\nfound at opencv_source_code/samples/python/find_obj.py\n\n@}\n\n'}

--- Incoming ---
[   'class cv.KeyPointsFilter',
    '',
    [],
    [],
    None,
    '@brief A class filters a vector of keypoints.\n'
    '\n'
    'Because now it is difficult to provide a convenient interface for all '
    'usage scenarios of the\n'
    'keypoints filter class, it has only several needed by now static methods.']
parse_name: class cv.KeyPointsFilter with ['cv'] -> fullname:cv::KeyPointsFilter namespace:cv classpath: classname: name:KeyPointsFilter
register class cv::KeyPointsFilter (['class cv.KeyPointsFilter', '', [], [], None, '@brief A class filters a vector of keypoints.\n\nBecause now it is difficult to provide a convenient interface for all usage scenarios of the\nkeypoints filter class, it has only several needed by now static methods.'])

--- Incoming ---
['cv.KeyPointsFilter.KeyPointsFilter', 'K', [], [], None, '']
parse_name: cv.KeyPointsFilter.KeyPointsFilter with ['cv'] -> fullname:cv::KeyPointsFilter::KeyPointsFilter namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:KeyPointsFilter
register (constructor) default in cv::KeyPointsFilter (cv_KeyPointsFilter_KeyPointsFilter)

--- Incoming ---
[   'cv.KeyPointsFilter.runByImageBorder',
    'void',
    ['/S'],
    [   ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['Size', 'imageSize', '', []],
        ['int', 'borderSize', '', []]],
    None,
    '']
parse_name: cv.KeyPointsFilter.runByImageBorder with ['cv'] -> fullname:cv::KeyPointsFilter::runByImageBorder namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:runByImageBorder
register (method) runByImageBorder in cv::KeyPointsFilter (cv_KeyPointsFilter_runByImageBorder_VectorOfKeyPoint_Size_int)

--- Incoming ---
[   'cv.KeyPointsFilter.runByKeypointSize',
    'void',
    ['/S'],
    [   ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['float', 'minSize', '', []],
        ['float', 'maxSize', 'FLT_MAX', []]],
    None,
    '']
parse_name: cv.KeyPointsFilter.runByKeypointSize with ['cv'] -> fullname:cv::KeyPointsFilter::runByKeypointSize namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:runByKeypointSize
register (method) runByKeypointSize in cv::KeyPointsFilter (cv_KeyPointsFilter_runByKeypointSize_VectorOfKeyPoint_float_float)

--- Incoming ---
[   'cv.KeyPointsFilter.runByPixelsMask',
    'void',
    ['/S'],
    [   ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['const Mat&', 'mask', '', []]],
    None,
    '']
parse_name: cv.KeyPointsFilter.runByPixelsMask with ['cv'] -> fullname:cv::KeyPointsFilter::runByPixelsMask namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:runByPixelsMask
register (method) runByPixelsMask in cv::KeyPointsFilter (cv_KeyPointsFilter_runByPixelsMask_VectorOfKeyPoint_Mat)

--- Incoming ---
[   'cv.KeyPointsFilter.removeDuplicated',
    'void',
    ['/S'],
    [['std::vector<KeyPoint>&', 'keypoints', '', []]],
    None,
    '']
parse_name: cv.KeyPointsFilter.removeDuplicated with ['cv'] -> fullname:cv::KeyPointsFilter::removeDuplicated namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:removeDuplicated
register (method) removeDuplicated in cv::KeyPointsFilter (cv_KeyPointsFilter_removeDuplicated_VectorOfKeyPoint)

--- Incoming ---
[   'cv.KeyPointsFilter.removeDuplicatedSorted',
    'void',
    ['/S'],
    [['std::vector<KeyPoint>&', 'keypoints', '', []]],
    None,
    '']
parse_name: cv.KeyPointsFilter.removeDuplicatedSorted with ['cv'] -> fullname:cv::KeyPointsFilter::removeDuplicatedSorted namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:removeDuplicatedSorted
register (method) removeDuplicatedSorted in cv::KeyPointsFilter (cv_KeyPointsFilter_removeDuplicatedSorted_VectorOfKeyPoint)

--- Incoming ---
[   'cv.KeyPointsFilter.retainBest',
    'void',
    ['/S'],
    [   ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['int', 'npoints', '', []]],
    None,
    '']
parse_name: cv.KeyPointsFilter.retainBest with ['cv'] -> fullname:cv::KeyPointsFilter::retainBest namespace:cv classpath:KeyPointsFilter classname:KeyPointsFilter name:retainBest
register (method) retainBest in cv::KeyPointsFilter (cv_KeyPointsFilter_retainBest_VectorOfKeyPoint_int)

--- Incoming ---
[   'class cv.Feature2D',
    ': cv::Algorithm, cv::class, cv::Feature2D, cv::Algorithm',
    [],
    [],
    None,
    '@brief Abstract base class for 2D image feature detectors and descriptor '
    'extractors']
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (['class cv.Feature2D', ': cv::Algorithm, cv::class, cv::Feature2D, cv::Algorithm', [], [], None, '@brief Abstract base class for 2D image feature detectors and descriptor extractors']) impl:cv::Algorithm,cv::class

--- Incoming ---
['cv.Feature2D.~Feature2D', '~', [], [], None, '']
parse_name: cv.Feature2D.~Feature2D with ['cv'] -> fullname:cv::Feature2D::~Feature2D namespace:cv classpath:Feature2D classname:Feature2D name:~Feature2D
Registering an unknown type: ~
ignore destructor (method) ~Feature2D in cv::Feature2D (trait)

--- Incoming ---
[   'cv.Feature2D.detect',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Detects keypoints in an image (first variant) or image set (second '
    'variant).\n'
    '\n'
    '@param image Image.\n'
    '@param keypoints The detected keypoints. In the second variant of the '
    'method keypoints[i] is a set\n'
    'of keypoints detected in images[i] .\n'
    '@param mask Mask specifying where to look for keypoints (optional). It '
    'must be a 8-bit integer\n'
    'matrix with non-zero values in the region of interest.']
parse_name: cv.Feature2D.detect with ['cv'] -> fullname:cv::Feature2D::detect namespace:cv classpath:Feature2D classname:Feature2D name:detect
register (method) detect in cv::Feature2D (trait) (cv_Feature2D_detect__InputArray_VectorOfKeyPoint__InputArray)

--- Incoming ---
[   'cv.Feature2D.detect',
    'void',
    [],
    [   ['InputArrayOfArrays', 'images', '', []],
        ['std::vector<std::vector<KeyPoint> >&', 'keypoints', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []]],
    None,
    '@overload\n'
    '@param images Image set.\n'
    '@param keypoints The detected keypoints. In the second variant of the '
    'method keypoints[i] is a set\n'
    'of keypoints detected in images[i] .\n'
    '@param masks Masks for each input image specifying where to look for '
    'keypoints (optional).\n'
    'masks[i] is a mask for images[i].']
parse_name: cv.Feature2D.detect with ['cv'] -> fullname:cv::Feature2D::detect namespace:cv classpath:Feature2D classname:Feature2D name:detect
register (method) detect in cv::Feature2D (trait) (cv_Feature2D_detect__InputArray_VectorOfVectorOfKeyPoint__InputArray)

--- Incoming ---
[   'cv.Feature2D.compute',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['OutputArray', 'descriptors', '', []]],
    None,
    '@brief Computes the descriptors for a set of keypoints detected in an '
    'image (first variant) or image set\n'
    '(second variant).\n'
    '\n'
    '@param image Image.\n'
    '@param keypoints Input collection of keypoints. Keypoints for which a '
    'descriptor cannot be\n'
    'computed are removed. Sometimes new keypoints can be added, for example: '
    'SIFT duplicates keypoint\n'
    'with several dominant orientations (for each orientation).\n'
    '@param descriptors Computed descriptors. In the second variant of the '
    'method descriptors[i] are\n'
    'descriptors computed for a keypoints[i]. Row j is the keypoints (or '
    'keypoints[i]) is the\n'
    'descriptor for keypoint j-th keypoint.']
parse_name: cv.Feature2D.compute with ['cv'] -> fullname:cv::Feature2D::compute namespace:cv classpath:Feature2D classname:Feature2D name:compute
register (method) compute in cv::Feature2D (trait) (cv_Feature2D_compute__InputArray_VectorOfKeyPoint__OutputArray)

--- Incoming ---
[   'cv.Feature2D.compute',
    'void',
    [],
    [   ['InputArrayOfArrays', 'images', '', []],
        ['std::vector<std::vector<KeyPoint> >&', 'keypoints', '', []],
        ['OutputArrayOfArrays', 'descriptors', '', []]],
    None,
    '@overload\n'
    '\n'
    '@param images Image set.\n'
    '@param keypoints Input collection of keypoints. Keypoints for which a '
    'descriptor cannot be\n'
    'computed are removed. Sometimes new keypoints can be added, for example: '
    'SIFT duplicates keypoint\n'
    'with several dominant orientations (for each orientation).\n'
    '@param descriptors Computed descriptors. In the second variant of the '
    'method descriptors[i] are\n'
    'descriptors computed for a keypoints[i]. Row j is the keypoints (or '
    'keypoints[i]) is the\n'
    'descriptor for keypoint j-th keypoint.']
parse_name: cv.Feature2D.compute with ['cv'] -> fullname:cv::Feature2D::compute namespace:cv classpath:Feature2D classname:Feature2D name:compute
register (method) compute in cv::Feature2D (trait) (cv_Feature2D_compute__InputArray_VectorOfVectorOfKeyPoint__OutputArray)

--- Incoming ---
[   'cv.Feature2D.detectAndCompute',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['InputArray', 'mask', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['OutputArray', 'descriptors', '', []],
        ['bool', 'useProvidedKeypoints', 'false', []]],
    None,
    'Detects keypoints and computes the descriptors']
parse_name: cv.Feature2D.detectAndCompute with ['cv'] -> fullname:cv::Feature2D::detectAndCompute namespace:cv classpath:Feature2D classname:Feature2D name:detectAndCompute
register (method) detectAndCompute in cv::Feature2D (trait) (cv_Feature2D_detectAndCompute__InputArray__InputArray_VectorOfKeyPoint__OutputArray_bool)

--- Incoming ---
['cv.Feature2D.descriptorSize', 'int', ['/C'], [], None, '']
parse_name: cv.Feature2D.descriptorSize with ['cv'] -> fullname:cv::Feature2D::descriptorSize namespace:cv classpath:Feature2D classname:Feature2D name:descriptorSize
register (method) descriptorSize in cv::Feature2D (trait) (cv_Feature2D_descriptorSize_const)

--- Incoming ---
['cv.Feature2D.descriptorType', 'int', ['/C'], [], None, '']
parse_name: cv.Feature2D.descriptorType with ['cv'] -> fullname:cv::Feature2D::descriptorType namespace:cv classpath:Feature2D classname:Feature2D name:descriptorType
register (method) descriptorType in cv::Feature2D (trait) (cv_Feature2D_descriptorType_const)

--- Incoming ---
['cv.Feature2D.defaultNorm', 'int', ['/C'], [], None, '']
parse_name: cv.Feature2D.defaultNorm with ['cv'] -> fullname:cv::Feature2D::defaultNorm namespace:cv classpath:Feature2D classname:Feature2D name:defaultNorm
register (method) defaultNorm in cv::Feature2D (trait) (cv_Feature2D_defaultNorm_const)

--- Incoming ---
[   'cv.Feature2D.write',
    'void',
    ['/C'],
    [['const String&', 'fileName', '', []]],
    None,
    '']
parse_name: cv.Feature2D.write with ['cv'] -> fullname:cv::Feature2D::write namespace:cv classpath:Feature2D classname:Feature2D name:write
register (method) write in cv::Feature2D (trait) (cv_Feature2D_write_const_String)

--- Incoming ---
[   'cv.Feature2D.read',
    'void',
    [],
    [['const String&', 'fileName', '', []]],
    None,
    '']
parse_name: cv.Feature2D.read with ['cv'] -> fullname:cv::Feature2D::read namespace:cv classpath:Feature2D classname:Feature2D name:read
register (method) read in cv::Feature2D (trait) (cv_Feature2D_read_String)

--- Incoming ---
['cv.Feature2D.write', 'void', ['/C'], [['FileStorage&', '', '', []]], None, '']
parse_name: cv.Feature2D.write with ['cv'] -> fullname:cv::Feature2D::write namespace:cv classpath:Feature2D classname:Feature2D name:write
register (method) write in cv::Feature2D (trait) (cv_Feature2D_write_const_FileStorage)

--- Incoming ---
['cv.Feature2D.read', 'void', [], [['const FileNode&', '', '', []]], None, '']
parse_name: cv.Feature2D.read with ['cv'] -> fullname:cv::Feature2D::read namespace:cv classpath:Feature2D classname:Feature2D name:read
register (method) read in cv::Feature2D (trait) (cv_Feature2D_read_FileNode)

--- Incoming ---
[   'cv.Feature2D.empty',
    'bool',
    ['/C'],
    [],
    None,
    'Return true if detector object is empty']
parse_name: cv.Feature2D.empty with ['cv'] -> fullname:cv::Feature2D::empty namespace:cv classpath:Feature2D classname:Feature2D name:empty
register (method) empty in cv::Feature2D (trait) (cv_Feature2D_empty_const)

--- Incoming ---
['cv.Feature2D.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.Feature2D.getDefaultName with ['cv'] -> fullname:cv::Feature2D::getDefaultName namespace:cv classpath:Feature2D classname:Feature2D name:getDefaultName
register (method) getDefaultName in cv::Feature2D (trait) (cv_Feature2D_getDefaultName_const)

--- Incoming ---
[   'cv.Feature2D.write',
    'void',
    ['/C'],
    [   ['const Ptr<FileStorage>&', 'fs', '', []],
        ['const String&', 'name', 'String()', []]],
    None,
    '']
parse_name: cv.Feature2D.write with ['cv'] -> fullname:cv::Feature2D::write namespace:cv classpath:Feature2D classname:Feature2D name:write
register (method) write in cv::Feature2D (trait) (cv_Feature2D_write_const_PtrOfFileStorage_String)

--- Incoming ---
[   'typedef cv.FeatureDetector',
    'Feature2D',
    '',
    [],
    None,
    'Feature detectors in OpenCV have wrappers with a common interface that '
    'enables you to easily switch\n'
    'between different algorithms solving the same problem. All objects that '
    'implement keypoint detectors\n'
    'inherit the FeatureDetector interface.']
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector

--- Incoming ---
[   'typedef cv.DescriptorExtractor',
    'Feature2D',
    '',
    [],
    None,
    'Extractors of keypoint descriptors in OpenCV have wrappers with a common '
    'interface that enables you\n'
    'to easily switch between different algorithms solving the same problem. '
    'This section is devoted to\n'
    'computing descriptors represented as vectors in a multidimensional space. '
    'All objects that implement\n'
    'the vector descriptor extractors inherit the DescriptorExtractor '
    'interface.']
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor

--- Incoming ---
[   'class cv.BRISK',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Class implementing the BRISK keypoint detector and descriptor '
    'extractor, described in @cite LCS11 .']
parse_name: class cv.BRISK with ['cv'] -> fullname:cv::BRISK namespace:cv classpath: classname: name:BRISK
register class cv::BRISK (['class cv.BRISK', ': cv::Feature2D', [], [], None, '@brief Class implementing the BRISK keypoint detector and descriptor extractor, described in @cite LCS11 .']) impl:cv::Feature2D

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr<BRISK>',
    ['/S'],
    [   ['int', 'thresh', '30', []],
        ['int', 'octaves', '3', []],
        ['float', 'patternScale', '1.0f', []]],
    None,
    '@brief The BRISK constructor\n'
    '\n'
    '@param thresh AGAST detection threshold score.\n'
    '@param octaves detection octaves. Use 0 to do single scale.\n'
    '@param patternScale apply this scale to the pattern used for sampling the '
    'neighbourhood of a\n'
    'keypoint.']
parse_name: cv.BRISK.create with ['cv'] -> fullname:cv::BRISK::create namespace:cv classpath:BRISK classname:BRISK name:create
register (method) create in cv::BRISK (cv_BRISK_create_int_int_float)

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr<BRISK>',
    ['/S'],
    [   ['const std::vector<float> &', 'radiusList', '', []],
        ['const std::vector<int> &', 'numberList', '', []],
        ['float', 'dMax', '5.85f', []],
        ['float', 'dMin', '8.2f', []],
        ['const std::vector<int>&', 'indexChange', 'std::vector<int>()', []]],
    None,
    '@brief The BRISK constructor for a custom pattern\n'
    '\n'
    '@param radiusList defines the radii (in pixels) where the samples around '
    'a keypoint are taken (for\n'
    'keypoint scale 1).\n'
    '@param numberList defines the number of sampling points on the sampling '
    'circle. Must be the same\n'
    'size as radiusList..\n'
    '@param dMax threshold for the short pairings used for descriptor '
    'formation (in pixels for keypoint\n'
    'scale 1).\n'
    '@param dMin threshold for the long pairings used for orientation '
    'determination (in pixels for\n'
    'keypoint scale 1).\n'
    '@param indexChange index remapping of the bits.']
parse_name: cv.BRISK.create with ['cv'] -> fullname:cv::BRISK::create namespace:cv classpath:BRISK classname:BRISK name:create
register (method) create in cv::BRISK (cv_BRISK_create_VectorOffloat_VectorOfint_float_float_VectorOfint)

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr<BRISK>',
    ['/S'],
    [   ['int', 'thresh', '', []],
        ['int', 'octaves', '', []],
        ['const std::vector<float> &', 'radiusList', '', []],
        ['const std::vector<int> &', 'numberList', '', []],
        ['float', 'dMax', '5.85f', []],
        ['float', 'dMin', '8.2f', []],
        ['const std::vector<int>&', 'indexChange', 'std::vector<int>()', []]],
    None,
    '@brief The BRISK constructor for a custom pattern, detection threshold '
    'and octaves\n'
    '\n'
    '@param thresh AGAST detection threshold score.\n'
    '@param octaves detection octaves. Use 0 to do single scale.\n'
    '@param radiusList defines the radii (in pixels) where the samples around '
    'a keypoint are taken (for\n'
    'keypoint scale 1).\n'
    '@param numberList defines the number of sampling points on the sampling '
    'circle. Must be the same\n'
    'size as radiusList..\n'
    '@param dMax threshold for the short pairings used for descriptor '
    'formation (in pixels for keypoint\n'
    'scale 1).\n'
    '@param dMin threshold for the long pairings used for orientation '
    'determination (in pixels for\n'
    'keypoint scale 1).\n'
    '@param indexChange index remapping of the bits.']
parse_name: cv.BRISK.create with ['cv'] -> fullname:cv::BRISK::create namespace:cv classpath:BRISK classname:BRISK name:create
register (method) create in cv::BRISK (cv_BRISK_create_int_int_VectorOffloat_VectorOfint_float_float_VectorOfint)

--- Incoming ---
['cv.BRISK.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.BRISK.getDefaultName with ['cv'] -> fullname:cv::BRISK::getDefaultName namespace:cv classpath:BRISK classname:BRISK name:getDefaultName
register (method) getDefaultName in cv::BRISK (cv_BRISK_getDefaultName_const)

--- Incoming ---
[   'cv.BRISK.setThreshold',
    'void',
    [],
    [['int', 'threshold', '', []]],
    None,
    '@brief Set detection threshold.\n'
    '@param threshold AGAST detection threshold score.']
parse_name: cv.BRISK.setThreshold with ['cv'] -> fullname:cv::BRISK::setThreshold namespace:cv classpath:BRISK classname:BRISK name:setThreshold
register (method) setThreshold in cv::BRISK (cv_BRISK_setThreshold_int)

--- Incoming ---
['cv.BRISK.getThreshold', 'int', ['/C'], [], None, '']
parse_name: cv.BRISK.getThreshold with ['cv'] -> fullname:cv::BRISK::getThreshold namespace:cv classpath:BRISK classname:BRISK name:getThreshold
register (method) getThreshold in cv::BRISK (cv_BRISK_getThreshold_const)

--- Incoming ---
[   'cv.BRISK.setOctaves',
    'void',
    [],
    [['int', 'octaves', '', []]],
    None,
    '@brief Set detection octaves.\n'
    '@param octaves detection octaves. Use 0 to do single scale.']
parse_name: cv.BRISK.setOctaves with ['cv'] -> fullname:cv::BRISK::setOctaves namespace:cv classpath:BRISK classname:BRISK name:setOctaves
register (method) setOctaves in cv::BRISK (cv_BRISK_setOctaves_int)

--- Incoming ---
['cv.BRISK.getOctaves', 'int', ['/C'], [], None, '']
parse_name: cv.BRISK.getOctaves with ['cv'] -> fullname:cv::BRISK::getOctaves namespace:cv classpath:BRISK classname:BRISK name:getOctaves
register (method) getOctaves in cv::BRISK (cv_BRISK_getOctaves_const)

--- Incoming ---
[   'class cv.ORB',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Class implementing the ORB (*oriented BRIEF*) keypoint detector '
    'and descriptor extractor\n'
    '\n'
    'described in @cite RRKB11 . The algorithm uses FAST in pyramids to detect '
    'stable keypoints, selects\n'
    'the strongest features using FAST or Harris response, finds their '
    'orientation using first-order\n'
    'moments and computes the descriptors using BRIEF (where the coordinates '
    'of random point pairs (or\n'
    'k-tuples) are rotated according to the measured orientation).']
parse_name: class cv.ORB with ['cv'] -> fullname:cv::ORB namespace:cv classpath: classname: name:ORB
register class cv::ORB (['class cv.ORB', ': cv::Feature2D', [], [], None, '@brief Class implementing the ORB (*oriented BRIEF*) keypoint detector and descriptor extractor\n\ndescribed in @cite RRKB11 . The algorithm uses FAST in pyramids to detect stable keypoints, selects\nthe strongest features using FAST or Harris response, finds their orientation using first-order\nmoments and computes the descriptors using BRIEF (where the coordinates of random point pairs (or\nk-tuples) are rotated according to the measured orientation).']) impl:cv::Feature2D

--- Incoming ---
[   'enum cv.ORB.ScoreType',
    '',
    [],
    [   ['const cv.ORB.HARRIS_SCORE', '0', [], [], None, ''],
        ['const cv.ORB.FAST_SCORE', '1', [], [], None, '']],
    None,
    '']
parse_name: const cv.ORB.HARRIS_SCORE with ['cv'] -> fullname:cv::ORB::HARRIS_SCORE namespace:cv classpath:ORB classname:ORB name:HARRIS_SCORE
parse_name: const cv.ORB.FAST_SCORE with ['cv'] -> fullname:cv::ORB::FAST_SCORE namespace:cv classpath:ORB classname:ORB name:FAST_SCORE
parse_name: enum cv.ORB.ScoreType with ['cv'] -> fullname:cv::ORB::ScoreType namespace:cv classpath:ORB classname:ORB name:ScoreType
parse_name: const cv.ORB.HARRIS_SCORE with ['cv'] -> fullname:cv::ORB::HARRIS_SCORE namespace:cv classpath:ORB classname:ORB name:HARRIS_SCORE
parse_name: const cv.ORB.FAST_SCORE with ['cv'] -> fullname:cv::ORB::FAST_SCORE namespace:cv classpath:ORB classname:ORB name:FAST_SCORE

--- Incoming ---
[   'cv.ORB.create',
    'Ptr<ORB>',
    ['/S'],
    [   ['int', 'nfeatures', '500', []],
        ['float', 'scaleFactor', '1.2f', []],
        ['int', 'nlevels', '8', []],
        ['int', 'edgeThreshold', '31', []],
        ['int', 'firstLevel', '0', []],
        ['int', 'WTA_K', '2', []],
        ['ORB::ScoreType', 'scoreType', 'ORB::HARRIS_SCORE', []],
        ['int', 'patchSize', '31', []],
        ['int', 'fastThreshold', '20', []]],
    None,
    '@brief The ORB constructor\n'
    '\n'
    '@param nfeatures The maximum number of features to retain.\n'
    '@param scaleFactor Pyramid decimation ratio, greater than 1. '
    'scaleFactor==2 means the classical\n'
    'pyramid, where each next level has 4x less pixels than the previous, but '
    'such a big scale factor\n'
    'will degrade feature matching scores dramatically. On the other hand, too '
    'close to 1 scale factor\n'
    'will mean that to cover certain scale range you will need more pyramid '
    'levels and so the speed\n'
    'will suffer.\n'
    '@param nlevels The number of pyramid levels. The smallest level will have '
    'linear size equal to\n'
    'input_image_linear_size/pow(scaleFactor, nlevels - firstLevel).\n'
    '@param edgeThreshold This is size of the border where the features are '
    'not detected. It should\n'
    'roughly match the patchSize parameter.\n'
    '@param firstLevel The level of pyramid to put source image to. Previous '
    'layers are filled\n'
    'with upscaled source image.\n'
    '@param WTA_K The number of points that produce each element of the '
    'oriented BRIEF descriptor. The\n'
    'default value 2 means the BRIEF where we take a random point pair and '
    'compare their brightnesses,\n'
    'so we get 0/1 response. Other possible values are 3 and 4. For example, 3 '
    'means that we take 3\n'
    'random points (of course, those point coordinates are random, but they '
    'are generated from the\n'
    'pre-defined seed, so each element of BRIEF descriptor is computed '
    'deterministically from the pixel\n'
    'rectangle), find point of maximum brightness and output index of the '
    'winner (0, 1 or 2). Such\n'
    'output will occupy 2 bits, and therefore it will need a special variant '
    'of Hamming distance,\n'
    'denoted as NORM_HAMMING2 (2 bits per bin). When WTA_K=4, we take 4 random '
    'points to compute each\n'
    'bin (that will also occupy 2 bits with possible values 0, 1, 2 or 3).\n'
    '@param scoreType The default HARRIS_SCORE means that Harris algorithm is '
    'used to rank features\n'
    '(the score is written to KeyPoint::score and is used to retain best '
    'nfeatures features);\n'
    'FAST_SCORE is alternative value of the parameter that produces slightly '
    'less stable keypoints,\n'
    'but it is a little faster to compute.\n'
    '@param patchSize size of the patch used by the oriented BRIEF descriptor. '
    'Of course, on smaller\n'
    'pyramid layers the perceived image area covered by a feature will be '
    'larger.\n'
    '@param fastThreshold the fast threshold']
parse_name: cv.ORB.create with ['cv'] -> fullname:cv::ORB::create namespace:cv classpath:ORB classname:ORB name:create
register (method) create in cv::ORB (cv_ORB_create_int_float_int_int_int_int_ORB_ScoreType_int_int)

--- Incoming ---
[   'cv.ORB.setMaxFeatures',
    'void',
    ['/A'],
    [['int', 'maxFeatures', '', []]],
    None,
    '']
parse_name: cv.ORB.setMaxFeatures with ['cv'] -> fullname:cv::ORB::setMaxFeatures namespace:cv classpath:ORB classname:ORB name:setMaxFeatures
register (method) setMaxFeatures in cv::ORB (trait) (cv_ORB_setMaxFeatures_int)

--- Incoming ---
['cv.ORB.getMaxFeatures', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getMaxFeatures with ['cv'] -> fullname:cv::ORB::getMaxFeatures namespace:cv classpath:ORB classname:ORB name:getMaxFeatures
register (method) getMaxFeatures in cv::ORB (trait) (cv_ORB_getMaxFeatures_const)

--- Incoming ---
[   'cv.ORB.setScaleFactor',
    'void',
    ['/A'],
    [['double', 'scaleFactor', '', []]],
    None,
    '']
parse_name: cv.ORB.setScaleFactor with ['cv'] -> fullname:cv::ORB::setScaleFactor namespace:cv classpath:ORB classname:ORB name:setScaleFactor
register (method) setScaleFactor in cv::ORB (trait) (cv_ORB_setScaleFactor_double)

--- Incoming ---
['cv.ORB.getScaleFactor', 'double', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getScaleFactor with ['cv'] -> fullname:cv::ORB::getScaleFactor namespace:cv classpath:ORB classname:ORB name:getScaleFactor
register (method) getScaleFactor in cv::ORB (trait) (cv_ORB_getScaleFactor_const)

--- Incoming ---
['cv.ORB.setNLevels', 'void', ['/A'], [['int', 'nlevels', '', []]], None, '']
parse_name: cv.ORB.setNLevels with ['cv'] -> fullname:cv::ORB::setNLevels namespace:cv classpath:ORB classname:ORB name:setNLevels
register (method) setNLevels in cv::ORB (trait) (cv_ORB_setNLevels_int)

--- Incoming ---
['cv.ORB.getNLevels', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getNLevels with ['cv'] -> fullname:cv::ORB::getNLevels namespace:cv classpath:ORB classname:ORB name:getNLevels
register (method) getNLevels in cv::ORB (trait) (cv_ORB_getNLevels_const)

--- Incoming ---
[   'cv.ORB.setEdgeThreshold',
    'void',
    ['/A'],
    [['int', 'edgeThreshold', '', []]],
    None,
    '']
parse_name: cv.ORB.setEdgeThreshold with ['cv'] -> fullname:cv::ORB::setEdgeThreshold namespace:cv classpath:ORB classname:ORB name:setEdgeThreshold
register (method) setEdgeThreshold in cv::ORB (trait) (cv_ORB_setEdgeThreshold_int)

--- Incoming ---
['cv.ORB.getEdgeThreshold', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getEdgeThreshold with ['cv'] -> fullname:cv::ORB::getEdgeThreshold namespace:cv classpath:ORB classname:ORB name:getEdgeThreshold
register (method) getEdgeThreshold in cv::ORB (trait) (cv_ORB_getEdgeThreshold_const)

--- Incoming ---
[   'cv.ORB.setFirstLevel',
    'void',
    ['/A'],
    [['int', 'firstLevel', '', []]],
    None,
    '']
parse_name: cv.ORB.setFirstLevel with ['cv'] -> fullname:cv::ORB::setFirstLevel namespace:cv classpath:ORB classname:ORB name:setFirstLevel
register (method) setFirstLevel in cv::ORB (trait) (cv_ORB_setFirstLevel_int)

--- Incoming ---
['cv.ORB.getFirstLevel', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getFirstLevel with ['cv'] -> fullname:cv::ORB::getFirstLevel namespace:cv classpath:ORB classname:ORB name:getFirstLevel
register (method) getFirstLevel in cv::ORB (trait) (cv_ORB_getFirstLevel_const)

--- Incoming ---
['cv.ORB.setWTA_K', 'void', ['/A'], [['int', 'wta_k', '', []]], None, '']
parse_name: cv.ORB.setWTA_K with ['cv'] -> fullname:cv::ORB::setWTA_K namespace:cv classpath:ORB classname:ORB name:setWTA_K
register (method) setWTA_K in cv::ORB (trait) (cv_ORB_setWTA_K_int)

--- Incoming ---
['cv.ORB.getWTA_K', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getWTA_K with ['cv'] -> fullname:cv::ORB::getWTA_K namespace:cv classpath:ORB classname:ORB name:getWTA_K
register (method) getWTA_K in cv::ORB (trait) (cv_ORB_getWTA_K_const)

--- Incoming ---
[   'cv.ORB.setScoreType',
    'void',
    ['/A'],
    [['ORB::ScoreType', 'scoreType', '', []]],
    None,
    '']
parse_name: cv.ORB.setScoreType with ['cv'] -> fullname:cv::ORB::setScoreType namespace:cv classpath:ORB classname:ORB name:setScoreType
register (method) setScoreType in cv::ORB (trait) (cv_ORB_setScoreType_ORB_ScoreType)

--- Incoming ---
['cv.ORB.getScoreType', 'ORB::ScoreType', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getScoreType with ['cv'] -> fullname:cv::ORB::getScoreType namespace:cv classpath:ORB classname:ORB name:getScoreType
register (method) getScoreType in cv::ORB (trait) (cv_ORB_getScoreType_const)

--- Incoming ---
[   'cv.ORB.setPatchSize',
    'void',
    ['/A'],
    [['int', 'patchSize', '', []]],
    None,
    '']
parse_name: cv.ORB.setPatchSize with ['cv'] -> fullname:cv::ORB::setPatchSize namespace:cv classpath:ORB classname:ORB name:setPatchSize
register (method) setPatchSize in cv::ORB (trait) (cv_ORB_setPatchSize_int)

--- Incoming ---
['cv.ORB.getPatchSize', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getPatchSize with ['cv'] -> fullname:cv::ORB::getPatchSize namespace:cv classpath:ORB classname:ORB name:getPatchSize
register (method) getPatchSize in cv::ORB (trait) (cv_ORB_getPatchSize_const)

--- Incoming ---
[   'cv.ORB.setFastThreshold',
    'void',
    ['/A'],
    [['int', 'fastThreshold', '', []]],
    None,
    '']
parse_name: cv.ORB.setFastThreshold with ['cv'] -> fullname:cv::ORB::setFastThreshold namespace:cv classpath:ORB classname:ORB name:setFastThreshold
register (method) setFastThreshold in cv::ORB (trait) (cv_ORB_setFastThreshold_int)

--- Incoming ---
['cv.ORB.getFastThreshold', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.ORB.getFastThreshold with ['cv'] -> fullname:cv::ORB::getFastThreshold namespace:cv classpath:ORB classname:ORB name:getFastThreshold
register (method) getFastThreshold in cv::ORB (trait) (cv_ORB_getFastThreshold_const)

--- Incoming ---
['cv.ORB.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.ORB.getDefaultName with ['cv'] -> fullname:cv::ORB::getDefaultName namespace:cv classpath:ORB classname:ORB name:getDefaultName
register (method) getDefaultName in cv::ORB (trait) (cv_ORB_getDefaultName_const)

--- Incoming ---
[   'class cv.MSER',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Maximally stable extremal region extractor\n'
    '\n'
    'The class encapsulates all the parameters of the %MSER extraction '
    'algorithm (see [wiki\n'
    'article](http://en.wikipedia.org/wiki/Maximally_stable_extremal_regions)).\n'
    '\n'
    '- there are two different implementation of %MSER: one for grey image, '
    'one for color image\n'
    '\n'
    '- the grey image algorithm is taken from: @cite nister2008linear ;  the '
    'paper claims to be faster\n'
    'than union-find method; it actually get 1.5~2m/s on my centrino L7200 '
    '1.2GHz laptop.\n'
    '\n'
    '- the color image algorithm is taken from: @cite forssen2007maximally ; '
    'it should be much slower\n'
    'than grey image method ( 3~4 times ); the chi_table.h file is taken '
    "directly from paper's source\n"
    'code which is distributed under GPL.\n'
    '\n'
    '- (Python) A complete example showing the use of the %MSER detector can '
    'be found at samples/python/mser.py']
parse_name: class cv.MSER with ['cv'] -> fullname:cv::MSER namespace:cv classpath: classname: name:MSER
register class cv::MSER (['class cv.MSER', ': cv::Feature2D', [], [], None, "@brief Maximally stable extremal region extractor\n\nThe class encapsulates all the parameters of the %MSER extraction algorithm (see [wiki\narticle](http://en.wikipedia.org/wiki/Maximally_stable_extremal_regions)).\n\n- there are two different implementation of %MSER: one for grey image, one for color image\n\n- the grey image algorithm is taken from: @cite nister2008linear ;  the paper claims to be faster\nthan union-find method; it actually get 1.5~2m/s on my centrino L7200 1.2GHz laptop.\n\n- the color image algorithm is taken from: @cite forssen2007maximally ; it should be much slower\nthan grey image method ( 3~4 times ); the chi_table.h file is taken directly from paper's source\ncode which is distributed under GPL.\n\n- (Python) A complete example showing the use of the %MSER detector can be found at samples/python/mser.py"]) impl:cv::Feature2D

--- Incoming ---
[   'cv.MSER.create',
    'Ptr<MSER>',
    ['/S'],
    [   ['int', '_delta', '5', []],
        ['int', '_min_area', '60', []],
        ['int', '_max_area', '14400', []],
        ['double', '_max_variation', '0.25', []],
        ['double', '_min_diversity', '.2', []],
        ['int', '_max_evolution', '200', []],
        ['double', '_area_threshold', '1.01', []],
        ['double', '_min_margin', '0.003', []],
        ['int', '_edge_blur_size', '5', []]],
    None,
    '@brief Full consturctor for %MSER detector\n'
    '\n'
    '@param _delta it compares '
    '\\f$(size_{i}-size_{i-delta})/size_{i-delta}\\f$\n'
    '@param _min_area prune the area which smaller than minArea\n'
    '@param _max_area prune the area which bigger than maxArea\n'
    '@param _max_variation prune the area have similar size to its children\n'
    '@param _min_diversity for color image, trace back to cut off mser with '
    'diversity less than min_diversity\n'
    '@param _max_evolution  for color image, the evolution steps\n'
    '@param _area_threshold for color image, the area threshold to cause '
    're-initialize\n'
    '@param _min_margin for color image, ignore too small margin\n'
    '@param _edge_blur_size for color image, the aperture size for edge blur']
parse_name: cv.MSER.create with ['cv'] -> fullname:cv::MSER::create namespace:cv classpath:MSER classname:MSER name:create
register (method) create in cv::MSER (cv_MSER_create_int_int_int_double_double_int_double_double_int)

--- Incoming ---
[   'cv.MSER.detectRegions',
    'void',
    ['/A'],
    [   ['InputArray', 'image', '', []],
        ['std::vector<std::vector<Point> >&', 'msers', '', []],
        ['std::vector<Rect>&', 'bboxes', '', []]],
    None,
    '@brief Detect %MSER regions\n'
    '\n'
    '@param image input image (8UC1, 8UC3 or 8UC4, must be greater or equal '
    'than 3x3)\n'
    '@param msers resulting list of point sets\n'
    '@param bboxes resulting bounding boxes']
parse_name: cv.MSER.detectRegions with ['cv'] -> fullname:cv::MSER::detectRegions namespace:cv classpath:MSER classname:MSER name:detectRegions
register (method) detectRegions in cv::MSER (trait) (cv_MSER_detectRegions__InputArray_VectorOfVectorOfPoint_VectorOfRect)

--- Incoming ---
['cv.MSER.setDelta', 'void', ['/A'], [['int', 'delta', '', []]], None, '']
parse_name: cv.MSER.setDelta with ['cv'] -> fullname:cv::MSER::setDelta namespace:cv classpath:MSER classname:MSER name:setDelta
register (method) setDelta in cv::MSER (trait) (cv_MSER_setDelta_int)

--- Incoming ---
['cv.MSER.getDelta', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.MSER.getDelta with ['cv'] -> fullname:cv::MSER::getDelta namespace:cv classpath:MSER classname:MSER name:getDelta
register (method) getDelta in cv::MSER (trait) (cv_MSER_getDelta_const)

--- Incoming ---
['cv.MSER.setMinArea', 'void', ['/A'], [['int', 'minArea', '', []]], None, '']
parse_name: cv.MSER.setMinArea with ['cv'] -> fullname:cv::MSER::setMinArea namespace:cv classpath:MSER classname:MSER name:setMinArea
register (method) setMinArea in cv::MSER (trait) (cv_MSER_setMinArea_int)

--- Incoming ---
['cv.MSER.getMinArea', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.MSER.getMinArea with ['cv'] -> fullname:cv::MSER::getMinArea namespace:cv classpath:MSER classname:MSER name:getMinArea
register (method) getMinArea in cv::MSER (trait) (cv_MSER_getMinArea_const)

--- Incoming ---
['cv.MSER.setMaxArea', 'void', ['/A'], [['int', 'maxArea', '', []]], None, '']
parse_name: cv.MSER.setMaxArea with ['cv'] -> fullname:cv::MSER::setMaxArea namespace:cv classpath:MSER classname:MSER name:setMaxArea
register (method) setMaxArea in cv::MSER (trait) (cv_MSER_setMaxArea_int)

--- Incoming ---
['cv.MSER.getMaxArea', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.MSER.getMaxArea with ['cv'] -> fullname:cv::MSER::getMaxArea namespace:cv classpath:MSER classname:MSER name:getMaxArea
register (method) getMaxArea in cv::MSER (trait) (cv_MSER_getMaxArea_const)

--- Incoming ---
['cv.MSER.setPass2Only', 'void', ['/A'], [['bool', 'f', '', []]], None, '']
parse_name: cv.MSER.setPass2Only with ['cv'] -> fullname:cv::MSER::setPass2Only namespace:cv classpath:MSER classname:MSER name:setPass2Only
register (method) setPass2Only in cv::MSER (trait) (cv_MSER_setPass2Only_bool)

--- Incoming ---
['cv.MSER.getPass2Only', 'bool', ['/A', '/C'], [], None, '']
parse_name: cv.MSER.getPass2Only with ['cv'] -> fullname:cv::MSER::getPass2Only namespace:cv classpath:MSER classname:MSER name:getPass2Only
register (method) getPass2Only in cv::MSER (trait) (cv_MSER_getPass2Only_const)

--- Incoming ---
['cv.MSER.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.MSER.getDefaultName with ['cv'] -> fullname:cv::MSER::getDefaultName namespace:cv classpath:MSER classname:MSER name:getDefaultName
register (method) getDefaultName in cv::MSER (trait) (cv_MSER_getDefaultName_const)

--- Incoming ---
[   'class cv.FastFeatureDetector',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Wrapping class for feature detection using the FAST method. :']
parse_name: class cv.FastFeatureDetector with ['cv'] -> fullname:cv::FastFeatureDetector namespace:cv classpath: classname: name:FastFeatureDetector
register class cv::FastFeatureDetector (['class cv.FastFeatureDetector', ': cv::Feature2D', [], [], None, '@brief Wrapping class for feature detection using the FAST method. :']) impl:cv::Feature2D

--- Incoming ---
[   'enum cv.FastFeatureDetector.DetectorType',
    '',
    [],
    [   ['const cv.FastFeatureDetector.TYPE_5_8', '0', [], [], None, ''],
        ['const cv.FastFeatureDetector.TYPE_7_12', '1', [], [], None, ''],
        ['const cv.FastFeatureDetector.TYPE_9_16', '2', [], [], None, '']],
    None,
    '']
parse_name: const cv.FastFeatureDetector.TYPE_5_8 with ['cv'] -> fullname:cv::FastFeatureDetector::TYPE_5_8 namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:TYPE_5_8
parse_name: const cv.FastFeatureDetector.TYPE_7_12 with ['cv'] -> fullname:cv::FastFeatureDetector::TYPE_7_12 namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:TYPE_7_12
parse_name: const cv.FastFeatureDetector.TYPE_9_16 with ['cv'] -> fullname:cv::FastFeatureDetector::TYPE_9_16 namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:TYPE_9_16
parse_name: enum cv.FastFeatureDetector.DetectorType with ['cv'] -> fullname:cv::FastFeatureDetector::DetectorType namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:DetectorType
parse_name: const cv.FastFeatureDetector.TYPE_5_8 with ['cv'] -> fullname:cv::FastFeatureDetector::TYPE_5_8 namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:TYPE_5_8
parse_name: const cv.FastFeatureDetector.TYPE_7_12 with ['cv'] -> fullname:cv::FastFeatureDetector::TYPE_7_12 namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:TYPE_7_12
parse_name: const cv.FastFeatureDetector.TYPE_9_16 with ['cv'] -> fullname:cv::FastFeatureDetector::TYPE_9_16 namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:TYPE_9_16

--- Incoming ---
[   'enum cv.FastFeatureDetector.<unnamed>',
    '',
    [],
    [   ['const cv.FastFeatureDetector.THRESHOLD', '10000', [], [], None, ''],
        [   'const cv.FastFeatureDetector.NONMAX_SUPPRESSION',
            '10001',
            [],
            [],
            None,
            ''],
        ['const cv.FastFeatureDetector.FAST_N', '10002', [], [], None, '']],
    None,
    '']
parse_name: const cv.FastFeatureDetector.THRESHOLD with ['cv'] -> fullname:cv::FastFeatureDetector::THRESHOLD namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:THRESHOLD
parse_name: const cv.FastFeatureDetector.NONMAX_SUPPRESSION with ['cv'] -> fullname:cv::FastFeatureDetector::NONMAX_SUPPRESSION namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:NONMAX_SUPPRESSION
parse_name: const cv.FastFeatureDetector.FAST_N with ['cv'] -> fullname:cv::FastFeatureDetector::FAST_N namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:FAST_N

--- Incoming ---
[   'cv.FastFeatureDetector.create',
    'Ptr<FastFeatureDetector>',
    ['/S'],
    [   ['int', 'threshold', '10', []],
        ['bool', 'nonmaxSuppression', 'true', []],
        [   'FastFeatureDetector::DetectorType',
            'type',
            'FastFeatureDetector::TYPE_9_16',
            []]],
    None,
    '']
parse_name: cv.FastFeatureDetector.create with ['cv'] -> fullname:cv::FastFeatureDetector::create namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:create
register (method) create in cv::FastFeatureDetector (cv_FastFeatureDetector_create_int_bool_FastFeatureDetector_DetectorType)

--- Incoming ---
[   'cv.FastFeatureDetector.setThreshold',
    'void',
    ['/A'],
    [['int', 'threshold', '', []]],
    None,
    '']
parse_name: cv.FastFeatureDetector.setThreshold with ['cv'] -> fullname:cv::FastFeatureDetector::setThreshold namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:setThreshold
register (method) setThreshold in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_setThreshold_int)

--- Incoming ---
['cv.FastFeatureDetector.getThreshold', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.FastFeatureDetector.getThreshold with ['cv'] -> fullname:cv::FastFeatureDetector::getThreshold namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:getThreshold
register (method) getThreshold in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_getThreshold_const)

--- Incoming ---
[   'cv.FastFeatureDetector.setNonmaxSuppression',
    'void',
    ['/A'],
    [['bool', 'f', '', []]],
    None,
    '']
parse_name: cv.FastFeatureDetector.setNonmaxSuppression with ['cv'] -> fullname:cv::FastFeatureDetector::setNonmaxSuppression namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:setNonmaxSuppression
register (method) setNonmaxSuppression in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_setNonmaxSuppression_bool)

--- Incoming ---
[   'cv.FastFeatureDetector.getNonmaxSuppression',
    'bool',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.FastFeatureDetector.getNonmaxSuppression with ['cv'] -> fullname:cv::FastFeatureDetector::getNonmaxSuppression namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:getNonmaxSuppression
register (method) getNonmaxSuppression in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_getNonmaxSuppression_const)

--- Incoming ---
[   'cv.FastFeatureDetector.setType',
    'void',
    ['/A'],
    [['FastFeatureDetector::DetectorType', 'type', '', []]],
    None,
    '']
parse_name: cv.FastFeatureDetector.setType with ['cv'] -> fullname:cv::FastFeatureDetector::setType namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:setType
register (method) setType in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_setType_FastFeatureDetector_DetectorType)

--- Incoming ---
[   'cv.FastFeatureDetector.getType',
    'FastFeatureDetector::DetectorType',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.FastFeatureDetector.getType with ['cv'] -> fullname:cv::FastFeatureDetector::getType namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:getType
register (method) getType in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_getType_const)

--- Incoming ---
['cv.FastFeatureDetector.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.FastFeatureDetector.getDefaultName with ['cv'] -> fullname:cv::FastFeatureDetector::getDefaultName namespace:cv classpath:FastFeatureDetector classname:FastFeatureDetector name:getDefaultName
register (method) getDefaultName in cv::FastFeatureDetector (trait) (cv_FastFeatureDetector_getDefaultName_const)

--- Incoming ---
[   'cv.FAST',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['int', 'threshold', '', []],
        ['bool', 'nonmaxSuppression', 'true', []]],
    None,
    '@overload']
parse_name: cv.FAST with ['cv'] -> fullname:cv::FAST namespace:cv classpath: classname: name:FAST
register (function) FAST (cv_FAST__InputArray_VectorOfKeyPoint_int_bool)

--- Incoming ---
[   'cv.FAST',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['int', 'threshold', '', []],
        ['bool', 'nonmaxSuppression', '', []],
        ['FastFeatureDetector::DetectorType', 'type', '', []]],
    None,
    '@brief Detects corners using the FAST algorithm\n'
    '\n'
    '@param image grayscale image where keypoints (corners) are detected.\n'
    '@param keypoints keypoints detected on the image.\n'
    '@param threshold threshold on difference between intensity of the central '
    'pixel and pixels of a\n'
    'circle around this pixel.\n'
    '@param nonmaxSuppression if true, non-maximum suppression is applied to '
    'detected corners\n'
    '(keypoints).\n'
    '@param type one of the three neighborhoods as defined in the paper:\n'
    'FastFeatureDetector::TYPE_9_16, FastFeatureDetector::TYPE_7_12,\n'
    'FastFeatureDetector::TYPE_5_8\n'
    '\n'
    'Detects corners using the FAST algorithm by @cite Rosten06 .\n'
    '\n'
    '@note In Python API, types are given as '
    'cv.FAST_FEATURE_DETECTOR_TYPE_5_8,\n'
    'cv.FAST_FEATURE_DETECTOR_TYPE_7_12 and '
    'cv.FAST_FEATURE_DETECTOR_TYPE_9_16. For corner\n'
    'detection, use cv.FAST.detect() method.']
parse_name: cv.FAST with ['cv'] -> fullname:cv::FAST namespace:cv classpath: classname: name:FAST
register (function) FAST (cv_FAST__InputArray_VectorOfKeyPoint_int_bool_FastFeatureDetector_DetectorType)

--- Incoming ---
[   'class cv.AgastFeatureDetector',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Wrapping class for feature detection using the AGAST method. :']
parse_name: class cv.AgastFeatureDetector with ['cv'] -> fullname:cv::AgastFeatureDetector namespace:cv classpath: classname: name:AgastFeatureDetector
register class cv::AgastFeatureDetector (['class cv.AgastFeatureDetector', ': cv::Feature2D', [], [], None, '@brief Wrapping class for feature detection using the AGAST method. :']) impl:cv::Feature2D

--- Incoming ---
[   'enum cv.AgastFeatureDetector.DetectorType',
    '',
    [],
    [   ['const cv.AgastFeatureDetector.AGAST_5_8', '0', [], [], None, ''],
        ['const cv.AgastFeatureDetector.AGAST_7_12d', '1', [], [], None, ''],
        ['const cv.AgastFeatureDetector.AGAST_7_12s', '2', [], [], None, ''],
        ['const cv.AgastFeatureDetector.OAST_9_16', '3', [], [], None, '']],
    None,
    '']
parse_name: const cv.AgastFeatureDetector.AGAST_5_8 with ['cv'] -> fullname:cv::AgastFeatureDetector::AGAST_5_8 namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:AGAST_5_8
parse_name: const cv.AgastFeatureDetector.AGAST_7_12d with ['cv'] -> fullname:cv::AgastFeatureDetector::AGAST_7_12d namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:AGAST_7_12d
parse_name: const cv.AgastFeatureDetector.AGAST_7_12s with ['cv'] -> fullname:cv::AgastFeatureDetector::AGAST_7_12s namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:AGAST_7_12s
parse_name: const cv.AgastFeatureDetector.OAST_9_16 with ['cv'] -> fullname:cv::AgastFeatureDetector::OAST_9_16 namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:OAST_9_16
parse_name: enum cv.AgastFeatureDetector.DetectorType with ['cv'] -> fullname:cv::AgastFeatureDetector::DetectorType namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:DetectorType
parse_name: const cv.AgastFeatureDetector.AGAST_5_8 with ['cv'] -> fullname:cv::AgastFeatureDetector::AGAST_5_8 namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:AGAST_5_8
parse_name: const cv.AgastFeatureDetector.AGAST_7_12d with ['cv'] -> fullname:cv::AgastFeatureDetector::AGAST_7_12d namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:AGAST_7_12d
parse_name: const cv.AgastFeatureDetector.AGAST_7_12s with ['cv'] -> fullname:cv::AgastFeatureDetector::AGAST_7_12s namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:AGAST_7_12s
parse_name: const cv.AgastFeatureDetector.OAST_9_16 with ['cv'] -> fullname:cv::AgastFeatureDetector::OAST_9_16 namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:OAST_9_16

--- Incoming ---
[   'enum cv.AgastFeatureDetector.<unnamed>',
    '',
    [],
    [   ['const cv.AgastFeatureDetector.THRESHOLD', '10000', [], [], None, ''],
        [   'const cv.AgastFeatureDetector.NONMAX_SUPPRESSION',
            '10001',
            [],
            [],
            None,
            '']],
    None,
    '']
parse_name: const cv.AgastFeatureDetector.THRESHOLD with ['cv'] -> fullname:cv::AgastFeatureDetector::THRESHOLD namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:THRESHOLD
parse_name: const cv.AgastFeatureDetector.NONMAX_SUPPRESSION with ['cv'] -> fullname:cv::AgastFeatureDetector::NONMAX_SUPPRESSION namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:NONMAX_SUPPRESSION

--- Incoming ---
[   'cv.AgastFeatureDetector.create',
    'Ptr<AgastFeatureDetector>',
    ['/S'],
    [   ['int', 'threshold', '10', []],
        ['bool', 'nonmaxSuppression', 'true', []],
        [   'AgastFeatureDetector::DetectorType',
            'type',
            'AgastFeatureDetector::OAST_9_16',
            []]],
    None,
    '']
parse_name: cv.AgastFeatureDetector.create with ['cv'] -> fullname:cv::AgastFeatureDetector::create namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:create
register (method) create in cv::AgastFeatureDetector (cv_AgastFeatureDetector_create_int_bool_AgastFeatureDetector_DetectorType)

--- Incoming ---
[   'cv.AgastFeatureDetector.setThreshold',
    'void',
    ['/A'],
    [['int', 'threshold', '', []]],
    None,
    '']
parse_name: cv.AgastFeatureDetector.setThreshold with ['cv'] -> fullname:cv::AgastFeatureDetector::setThreshold namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:setThreshold
register (method) setThreshold in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_setThreshold_int)

--- Incoming ---
['cv.AgastFeatureDetector.getThreshold', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AgastFeatureDetector.getThreshold with ['cv'] -> fullname:cv::AgastFeatureDetector::getThreshold namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:getThreshold
register (method) getThreshold in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_getThreshold_const)

--- Incoming ---
[   'cv.AgastFeatureDetector.setNonmaxSuppression',
    'void',
    ['/A'],
    [['bool', 'f', '', []]],
    None,
    '']
parse_name: cv.AgastFeatureDetector.setNonmaxSuppression with ['cv'] -> fullname:cv::AgastFeatureDetector::setNonmaxSuppression namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:setNonmaxSuppression
register (method) setNonmaxSuppression in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_setNonmaxSuppression_bool)

--- Incoming ---
[   'cv.AgastFeatureDetector.getNonmaxSuppression',
    'bool',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.AgastFeatureDetector.getNonmaxSuppression with ['cv'] -> fullname:cv::AgastFeatureDetector::getNonmaxSuppression namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:getNonmaxSuppression
register (method) getNonmaxSuppression in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_getNonmaxSuppression_const)

--- Incoming ---
[   'cv.AgastFeatureDetector.setType',
    'void',
    ['/A'],
    [['AgastFeatureDetector::DetectorType', 'type', '', []]],
    None,
    '']
parse_name: cv.AgastFeatureDetector.setType with ['cv'] -> fullname:cv::AgastFeatureDetector::setType namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:setType
register (method) setType in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_setType_AgastFeatureDetector_DetectorType)

--- Incoming ---
[   'cv.AgastFeatureDetector.getType',
    'AgastFeatureDetector::DetectorType',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.AgastFeatureDetector.getType with ['cv'] -> fullname:cv::AgastFeatureDetector::getType namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:getType
register (method) getType in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_getType_const)

--- Incoming ---
['cv.AgastFeatureDetector.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.AgastFeatureDetector.getDefaultName with ['cv'] -> fullname:cv::AgastFeatureDetector::getDefaultName namespace:cv classpath:AgastFeatureDetector classname:AgastFeatureDetector name:getDefaultName
register (method) getDefaultName in cv::AgastFeatureDetector (trait) (cv_AgastFeatureDetector_getDefaultName_const)

--- Incoming ---
[   'cv.AGAST',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['int', 'threshold', '', []],
        ['bool', 'nonmaxSuppression', 'true', []]],
    None,
    '@overload']
parse_name: cv.AGAST with ['cv'] -> fullname:cv::AGAST namespace:cv classpath: classname: name:AGAST
register (function) AGAST (cv_AGAST__InputArray_VectorOfKeyPoint_int_bool)

--- Incoming ---
[   'cv.AGAST',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['int', 'threshold', '', []],
        ['bool', 'nonmaxSuppression', '', []],
        ['AgastFeatureDetector::DetectorType', 'type', '', []]],
    None,
    '@brief Detects corners using the AGAST algorithm\n'
    '\n'
    '@param image grayscale image where keypoints (corners) are detected.\n'
    '@param keypoints keypoints detected on the image.\n'
    '@param threshold threshold on difference between intensity of the central '
    'pixel and pixels of a\n'
    'circle around this pixel.\n'
    '@param nonmaxSuppression if true, non-maximum suppression is applied to '
    'detected corners\n'
    '(keypoints).\n'
    '@param type one of the four neighborhoods as defined in the paper:\n'
    'AgastFeatureDetector::AGAST_5_8, AgastFeatureDetector::AGAST_7_12d,\n'
    'AgastFeatureDetector::AGAST_7_12s, AgastFeatureDetector::OAST_9_16\n'
    '\n'
    'For non-Intel platforms, there is a tree optimised variant of AGAST with '
    'same numerical results.\n'
    'The 32-bit binary tree tables were generated automatically from original '
    'code using perl script.\n'
    'The perl script and examples of tree generation are placed in '
    'features2d/doc folder.\n'
    'Detects corners using the AGAST algorithm by @cite mair2010_agast .']
parse_name: cv.AGAST with ['cv'] -> fullname:cv::AGAST namespace:cv classpath: classname: name:AGAST
register (function) AGAST (cv_AGAST__InputArray_VectorOfKeyPoint_int_bool_AgastFeatureDetector_DetectorType)

--- Incoming ---
[   'class cv.GFTTDetector',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Wrapping class for feature detection using the goodFeaturesToTrack '
    'function. :']
parse_name: class cv.GFTTDetector with ['cv'] -> fullname:cv::GFTTDetector namespace:cv classpath: classname: name:GFTTDetector
register class cv::GFTTDetector (['class cv.GFTTDetector', ': cv::Feature2D', [], [], None, '@brief Wrapping class for feature detection using the goodFeaturesToTrack function. :']) impl:cv::Feature2D

--- Incoming ---
[   'cv.GFTTDetector.create',
    'Ptr<GFTTDetector>',
    ['/S'],
    [   ['int', 'maxCorners', '1000', []],
        ['double', 'qualityLevel', '0.01', []],
        ['double', 'minDistance', '1', []],
        ['int', 'blockSize', '3', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    None,
    '']
parse_name: cv.GFTTDetector.create with ['cv'] -> fullname:cv::GFTTDetector::create namespace:cv classpath:GFTTDetector classname:GFTTDetector name:create
register (method) create in cv::GFTTDetector (cv_GFTTDetector_create_int_double_double_int_bool_double)

--- Incoming ---
[   'cv.GFTTDetector.create',
    'Ptr<GFTTDetector>',
    ['/S'],
    [   ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['int', 'blockSize', '', []],
        ['int', 'gradiantSize', '', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    None,
    '']
parse_name: cv.GFTTDetector.create with ['cv'] -> fullname:cv::GFTTDetector::create namespace:cv classpath:GFTTDetector classname:GFTTDetector name:create
register (method) create in cv::GFTTDetector (cv_GFTTDetector_create_int_double_double_int_int_bool_double)

--- Incoming ---
[   'cv.GFTTDetector.setMaxFeatures',
    'void',
    ['/A'],
    [['int', 'maxFeatures', '', []]],
    None,
    '']
parse_name: cv.GFTTDetector.setMaxFeatures with ['cv'] -> fullname:cv::GFTTDetector::setMaxFeatures namespace:cv classpath:GFTTDetector classname:GFTTDetector name:setMaxFeatures
register (method) setMaxFeatures in cv::GFTTDetector (trait) (cv_GFTTDetector_setMaxFeatures_int)

--- Incoming ---
['cv.GFTTDetector.getMaxFeatures', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.GFTTDetector.getMaxFeatures with ['cv'] -> fullname:cv::GFTTDetector::getMaxFeatures namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getMaxFeatures
register (method) getMaxFeatures in cv::GFTTDetector (trait) (cv_GFTTDetector_getMaxFeatures_const)

--- Incoming ---
[   'cv.GFTTDetector.setQualityLevel',
    'void',
    ['/A'],
    [['double', 'qlevel', '', []]],
    None,
    '']
parse_name: cv.GFTTDetector.setQualityLevel with ['cv'] -> fullname:cv::GFTTDetector::setQualityLevel namespace:cv classpath:GFTTDetector classname:GFTTDetector name:setQualityLevel
register (method) setQualityLevel in cv::GFTTDetector (trait) (cv_GFTTDetector_setQualityLevel_double)

--- Incoming ---
['cv.GFTTDetector.getQualityLevel', 'double', ['/A', '/C'], [], None, '']
parse_name: cv.GFTTDetector.getQualityLevel with ['cv'] -> fullname:cv::GFTTDetector::getQualityLevel namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getQualityLevel
register (method) getQualityLevel in cv::GFTTDetector (trait) (cv_GFTTDetector_getQualityLevel_const)

--- Incoming ---
[   'cv.GFTTDetector.setMinDistance',
    'void',
    ['/A'],
    [['double', 'minDistance', '', []]],
    None,
    '']
parse_name: cv.GFTTDetector.setMinDistance with ['cv'] -> fullname:cv::GFTTDetector::setMinDistance namespace:cv classpath:GFTTDetector classname:GFTTDetector name:setMinDistance
register (method) setMinDistance in cv::GFTTDetector (trait) (cv_GFTTDetector_setMinDistance_double)

--- Incoming ---
['cv.GFTTDetector.getMinDistance', 'double', ['/A', '/C'], [], None, '']
parse_name: cv.GFTTDetector.getMinDistance with ['cv'] -> fullname:cv::GFTTDetector::getMinDistance namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getMinDistance
register (method) getMinDistance in cv::GFTTDetector (trait) (cv_GFTTDetector_getMinDistance_const)

--- Incoming ---
[   'cv.GFTTDetector.setBlockSize',
    'void',
    ['/A'],
    [['int', 'blockSize', '', []]],
    None,
    '']
parse_name: cv.GFTTDetector.setBlockSize with ['cv'] -> fullname:cv::GFTTDetector::setBlockSize namespace:cv classpath:GFTTDetector classname:GFTTDetector name:setBlockSize
register (method) setBlockSize in cv::GFTTDetector (trait) (cv_GFTTDetector_setBlockSize_int)

--- Incoming ---
['cv.GFTTDetector.getBlockSize', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.GFTTDetector.getBlockSize with ['cv'] -> fullname:cv::GFTTDetector::getBlockSize namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getBlockSize
register (method) getBlockSize in cv::GFTTDetector (trait) (cv_GFTTDetector_getBlockSize_const)

--- Incoming ---
[   'cv.GFTTDetector.setHarrisDetector',
    'void',
    ['/A'],
    [['bool', 'val', '', []]],
    None,
    '']
parse_name: cv.GFTTDetector.setHarrisDetector with ['cv'] -> fullname:cv::GFTTDetector::setHarrisDetector namespace:cv classpath:GFTTDetector classname:GFTTDetector name:setHarrisDetector
register (method) setHarrisDetector in cv::GFTTDetector (trait) (cv_GFTTDetector_setHarrisDetector_bool)

--- Incoming ---
['cv.GFTTDetector.getHarrisDetector', 'bool', ['/A', '/C'], [], None, '']
parse_name: cv.GFTTDetector.getHarrisDetector with ['cv'] -> fullname:cv::GFTTDetector::getHarrisDetector namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getHarrisDetector
register (method) getHarrisDetector in cv::GFTTDetector (trait) (cv_GFTTDetector_getHarrisDetector_const)

--- Incoming ---
['cv.GFTTDetector.setK', 'void', ['/A'], [['double', 'k', '', []]], None, '']
parse_name: cv.GFTTDetector.setK with ['cv'] -> fullname:cv::GFTTDetector::setK namespace:cv classpath:GFTTDetector classname:GFTTDetector name:setK
register (method) setK in cv::GFTTDetector (trait) (cv_GFTTDetector_setK_double)

--- Incoming ---
['cv.GFTTDetector.getK', 'double', ['/A', '/C'], [], None, '']
parse_name: cv.GFTTDetector.getK with ['cv'] -> fullname:cv::GFTTDetector::getK namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getK
register (method) getK in cv::GFTTDetector (trait) (cv_GFTTDetector_getK_const)

--- Incoming ---
['cv.GFTTDetector.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.GFTTDetector.getDefaultName with ['cv'] -> fullname:cv::GFTTDetector::getDefaultName namespace:cv classpath:GFTTDetector classname:GFTTDetector name:getDefaultName
register (method) getDefaultName in cv::GFTTDetector (trait) (cv_GFTTDetector_getDefaultName_const)

--- Incoming ---
[   'class cv.SimpleBlobDetector',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Class for extracting blobs from an image. :\n'
    '\n'
    'The class implements a simple algorithm for extracting blobs from an '
    'image:\n'
    '\n'
    '1.  Convert the source image to binary images by applying thresholding '
    'with several thresholds from\n'
    'minThreshold (inclusive) to maxThreshold (exclusive) with distance '
    'thresholdStep between\n'
    'neighboring thresholds.\n'
    '2.  Extract connected components from every binary image by findContours '
    'and calculate their\n'
    'centers.\n'
    '3.  Group centers from several binary images by their coordinates. Close '
    'centers form one group that\n'
    'corresponds to one blob, which is controlled by the minDistBetweenBlobs '
    'parameter.\n'
    '4.  From the groups, estimate final centers of blobs and their radiuses '
    'and return as locations and\n'
    'sizes of keypoints.\n'
    '\n'
    'This class performs several filtrations of returned blobs. You should set '
    'filterBy\\* to true/false\n'
    'to turn on/off corresponding filtration. Available filtrations:\n'
    '\n'
    '-   **By color**. This filter compares the intensity of a binary image at '
    'the center of a blob to\n'
    'blobColor. If they differ, the blob is filtered out. Use blobColor = 0 to '
    'extract dark blobs\n'
    'and blobColor = 255 to extract light blobs.\n'
    '-   **By area**. Extracted blobs have an area between minArea (inclusive) '
    'and maxArea (exclusive).\n'
    '-   **By circularity**. Extracted blobs have circularity\n'
    '(\\f$\\frac{4*\\pi*Area}{perimeter * perimeter}\\f$) between '
    'minCircularity (inclusive) and\n'
    'maxCircularity (exclusive).\n'
    '-   **By ratio of the minimum inertia to maximum inertia**. Extracted '
    'blobs have this ratio\n'
    'between minInertiaRatio (inclusive) and maxInertiaRatio (exclusive).\n'
    '-   **By convexity**. Extracted blobs have convexity (area / area of blob '
    'convex hull) between\n'
    'minConvexity (inclusive) and maxConvexity (exclusive).\n'
    '\n'
    'Default values of parameters are tuned to extract dark circular blobs.']
parse_name: class cv.SimpleBlobDetector with ['cv'] -> fullname:cv::SimpleBlobDetector namespace:cv classpath: classname: name:SimpleBlobDetector
register class cv::SimpleBlobDetector (['class cv.SimpleBlobDetector', ': cv::Feature2D', [], [], None, '@brief Class for extracting blobs from an image. :\n\nThe class implements a simple algorithm for extracting blobs from an image:\n\n1.  Convert the source image to binary images by applying thresholding with several thresholds from\nminThreshold (inclusive) to maxThreshold (exclusive) with distance thresholdStep between\nneighboring thresholds.\n2.  Extract connected components from every binary image by findContours and calculate their\ncenters.\n3.  Group centers from several binary images by their coordinates. Close centers form one group that\ncorresponds to one blob, which is controlled by the minDistBetweenBlobs parameter.\n4.  From the groups, estimate final centers of blobs and their radiuses and return as locations and\nsizes of keypoints.\n\nThis class performs several filtrations of returned blobs. You should set filterBy\\* to true/false\nto turn on/off corresponding filtration. Available filtrations:\n\n-   **By color**. This filter compares the intensity of a binary image at the center of a blob to\nblobColor. If they differ, the blob is filtered out. Use blobColor = 0 to extract dark blobs\nand blobColor = 255 to extract light blobs.\n-   **By area**. Extracted blobs have an area between minArea (inclusive) and maxArea (exclusive).\n-   **By circularity**. Extracted blobs have circularity\n(\\f$\\frac{4*\\pi*Area}{perimeter * perimeter}\\f$) between minCircularity (inclusive) and\nmaxCircularity (exclusive).\n-   **By ratio of the minimum inertia to maximum inertia**. Extracted blobs have this ratio\nbetween minInertiaRatio (inclusive) and maxInertiaRatio (exclusive).\n-   **By convexity**. Extracted blobs have convexity (area / area of blob convex hull) between\nminConvexity (inclusive) and maxConvexity (exclusive).\n\nDefault values of parameters are tuned to extract dark circular blobs.']) impl:cv::Feature2D

--- Incoming ---
[   'struct cv.SimpleBlobDetector.Params',
    '',
    ['/Simple'],
    [   ['float', 'thresholdStep', '', ['/RW']],
        ['float', 'minThreshold', '', ['/RW']],
        ['float', 'maxThreshold', '', ['/RW']],
        ['size_t', 'minRepeatability', '', ['/RW']],
        ['float', 'minDistBetweenBlobs', '', ['/RW']],
        ['bool', 'filterByColor', '', ['/RW']],
        ['uchar', 'blobColor', '', ['/RW']],
        ['bool', 'filterByArea', '', ['/RW']],
        ['float', 'minArea', '', ['/RW']],
        ['float', 'maxArea', '', ['/RW']],
        ['bool', 'filterByCircularity', '', ['/RW']],
        ['float', 'minCircularity', '', ['/RW']],
        ['float', 'maxCircularity', '', ['/RW']],
        ['bool', 'filterByInertia', '', ['/RW']],
        ['float', 'minInertiaRatio', '', ['/RW']],
        ['float', 'maxInertiaRatio', '', ['/RW']],
        ['bool', 'filterByConvexity', '', ['/RW']],
        ['float', 'minConvexity', '', ['/RW']],
        ['float', 'maxConvexity', '', ['/RW']]],
    None,
    '']
parse_name: struct cv.SimpleBlobDetector.Params with ['cv'] -> fullname:cv::SimpleBlobDetector::Params namespace:cv classpath:SimpleBlobDetector classname:SimpleBlobDetector name:Params
register class cv::SimpleBlobDetector::Params (['struct cv.SimpleBlobDetector.Params', '', ['/Simple'], [['float', 'thresholdStep', '', ['/RW']], ['float', 'minThreshold', '', ['/RW']], ['float', 'maxThreshold', '', ['/RW']], ['size_t', 'minRepeatability', '', ['/RW']], ['float', 'minDistBetweenBlobs', '', ['/RW']], ['bool', 'filterByColor', '', ['/RW']], ['uchar', 'blobColor', '', ['/RW']], ['bool', 'filterByArea', '', ['/RW']], ['float', 'minArea', '', ['/RW']], ['float', 'maxArea', '', ['/RW']], ['bool', 'filterByCircularity', '', ['/RW']], ['float', 'minCircularity', '', ['/RW']], ['float', 'maxCircularity', '', ['/RW']], ['bool', 'filterByInertia', '', ['/RW']], ['float', 'minInertiaRatio', '', ['/RW']], ['float', 'maxInertiaRatio', '', ['/RW']], ['bool', 'filterByConvexity', '', ['/RW']], ['float', 'minConvexity', '', ['/RW']], ['float', 'maxConvexity', '', ['/RW']]], None, ''])

--- Incoming ---
['cv.SimpleBlobDetector.Params.Params', 'P', [], [], None, '']
parse_name: cv.SimpleBlobDetector.Params.Params with ['cv'] -> fullname:cv::SimpleBlobDetector::Params::Params namespace:cv classpath:SimpleBlobDetector::Params classname:Params name:Params
register (constructor) default in cv::SimpleBlobDetector::Params (simple) (cv_SimpleBlobDetector_Params_Params)

--- Incoming ---
[   'cv.SimpleBlobDetector.Params.read',
    'void',
    [],
    [['const FileNode&', 'fn', '', []]],
    None,
    '']
parse_name: cv.SimpleBlobDetector.Params.read with ['cv'] -> fullname:cv::SimpleBlobDetector::Params::read namespace:cv classpath:SimpleBlobDetector::Params classname:Params name:read
register (method) read in cv::SimpleBlobDetector::Params (simple) (cv_SimpleBlobDetector_Params_read_FileNode)

--- Incoming ---
[   'cv.SimpleBlobDetector.Params.write',
    'void',
    ['/C'],
    [['FileStorage&', 'fs', '', []]],
    None,
    '']
parse_name: cv.SimpleBlobDetector.Params.write with ['cv'] -> fullname:cv::SimpleBlobDetector::Params::write namespace:cv classpath:SimpleBlobDetector::Params classname:Params name:write
register (method) write in cv::SimpleBlobDetector::Params (simple) (cv_SimpleBlobDetector_Params_write_const_FileStorage)

--- Incoming ---
[   'cv.SimpleBlobDetector.create',
    'Ptr<SimpleBlobDetector>',
    ['/S'],
    [   [   'const SimpleBlobDetector::Params &',
            'parameters',
            'SimpleBlobDetector::Params()',
            []]],
    None,
    '']
parse_name: cv.SimpleBlobDetector.create with ['cv'] -> fullname:cv::SimpleBlobDetector::create namespace:cv classpath:SimpleBlobDetector classname:SimpleBlobDetector name:create
register (method) create in cv::SimpleBlobDetector (cv_SimpleBlobDetector_create_SimpleBlobDetector_Params)

--- Incoming ---
['cv.SimpleBlobDetector.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.SimpleBlobDetector.getDefaultName with ['cv'] -> fullname:cv::SimpleBlobDetector::getDefaultName namespace:cv classpath:SimpleBlobDetector classname:SimpleBlobDetector name:getDefaultName
register (method) getDefaultName in cv::SimpleBlobDetector (cv_SimpleBlobDetector_getDefaultName_const)

--- Incoming ---
[   'class cv.KAZE',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Class implementing the KAZE keypoint detector and descriptor '
    'extractor, described in @cite ABD12 .\n'
    '\n'
    '@note AKAZE descriptor can only be used with KAZE or AKAZE keypoints .. '
    '[ABD12] KAZE Features. Pablo\n'
    'F. Alcantarilla, Adrien Bartoli and Andrew J. Davison. In European '
    'Conference on Computer Vision\n'
    '(ECCV), Fiorenze, Italy, October 2012.']
parse_name: class cv.KAZE with ['cv'] -> fullname:cv::KAZE namespace:cv classpath: classname: name:KAZE
register class cv::KAZE (['class cv.KAZE', ': cv::Feature2D', [], [], None, '@brief Class implementing the KAZE keypoint detector and descriptor extractor, described in @cite ABD12 .\n\n@note AKAZE descriptor can only be used with KAZE or AKAZE keypoints .. [ABD12] KAZE Features. Pablo\nF. Alcantarilla, Adrien Bartoli and Andrew J. Davison. In European Conference on Computer Vision\n(ECCV), Fiorenze, Italy, October 2012.']) impl:cv::Feature2D

--- Incoming ---
[   'enum cv.KAZE.DiffusivityType',
    '',
    [],
    [   ['const cv.KAZE.DIFF_PM_G1', '0', [], [], None, ''],
        ['const cv.KAZE.DIFF_PM_G2', '1', [], [], None, ''],
        ['const cv.KAZE.DIFF_WEICKERT', '2', [], [], None, ''],
        ['const cv.KAZE.DIFF_CHARBONNIER', '3', [], [], None, '']],
    None,
    '']
parse_name: const cv.KAZE.DIFF_PM_G1 with ['cv'] -> fullname:cv::KAZE::DIFF_PM_G1 namespace:cv classpath:KAZE classname:KAZE name:DIFF_PM_G1
parse_name: const cv.KAZE.DIFF_PM_G2 with ['cv'] -> fullname:cv::KAZE::DIFF_PM_G2 namespace:cv classpath:KAZE classname:KAZE name:DIFF_PM_G2
parse_name: const cv.KAZE.DIFF_WEICKERT with ['cv'] -> fullname:cv::KAZE::DIFF_WEICKERT namespace:cv classpath:KAZE classname:KAZE name:DIFF_WEICKERT
parse_name: const cv.KAZE.DIFF_CHARBONNIER with ['cv'] -> fullname:cv::KAZE::DIFF_CHARBONNIER namespace:cv classpath:KAZE classname:KAZE name:DIFF_CHARBONNIER
parse_name: enum cv.KAZE.DiffusivityType with ['cv'] -> fullname:cv::KAZE::DiffusivityType namespace:cv classpath:KAZE classname:KAZE name:DiffusivityType
parse_name: const cv.KAZE.DIFF_PM_G1 with ['cv'] -> fullname:cv::KAZE::DIFF_PM_G1 namespace:cv classpath:KAZE classname:KAZE name:DIFF_PM_G1
parse_name: const cv.KAZE.DIFF_PM_G2 with ['cv'] -> fullname:cv::KAZE::DIFF_PM_G2 namespace:cv classpath:KAZE classname:KAZE name:DIFF_PM_G2
parse_name: const cv.KAZE.DIFF_WEICKERT with ['cv'] -> fullname:cv::KAZE::DIFF_WEICKERT namespace:cv classpath:KAZE classname:KAZE name:DIFF_WEICKERT
parse_name: const cv.KAZE.DIFF_CHARBONNIER with ['cv'] -> fullname:cv::KAZE::DIFF_CHARBONNIER namespace:cv classpath:KAZE classname:KAZE name:DIFF_CHARBONNIER

--- Incoming ---
[   'cv.KAZE.create',
    'Ptr<KAZE>',
    ['/S'],
    [   ['bool', 'extended', 'false', []],
        ['bool', 'upright', 'false', []],
        ['float', 'threshold', '0.001f', []],
        ['int', 'nOctaves', '4', []],
        ['int', 'nOctaveLayers', '4', []],
        ['KAZE::DiffusivityType', 'diffusivity', 'KAZE::DIFF_PM_G2', []]],
    None,
    '@brief The KAZE constructor\n'
    '\n'
    '@param extended Set to enable extraction of extended (128-byte) '
    'descriptor.\n'
    '@param upright Set to enable use of upright descriptors (non '
    'rotation-invariant).\n'
    '@param threshold Detector response threshold to accept point\n'
    '@param nOctaves Maximum octave evolution of the image\n'
    '@param nOctaveLayers Default number of sublevels per scale level\n'
    '@param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, '
    'DIFF_WEICKERT or\n'
    'DIFF_CHARBONNIER']
parse_name: cv.KAZE.create with ['cv'] -> fullname:cv::KAZE::create namespace:cv classpath:KAZE classname:KAZE name:create
register (method) create in cv::KAZE (cv_KAZE_create_bool_bool_float_int_int_KAZE_DiffusivityType)

--- Incoming ---
[   'cv.KAZE.setExtended',
    'void',
    ['/A'],
    [['bool', 'extended', '', []]],
    None,
    '']
parse_name: cv.KAZE.setExtended with ['cv'] -> fullname:cv::KAZE::setExtended namespace:cv classpath:KAZE classname:KAZE name:setExtended
register (method) setExtended in cv::KAZE (trait) (cv_KAZE_setExtended_bool)

--- Incoming ---
['cv.KAZE.getExtended', 'bool', ['/A', '/C'], [], None, '']
parse_name: cv.KAZE.getExtended with ['cv'] -> fullname:cv::KAZE::getExtended namespace:cv classpath:KAZE classname:KAZE name:getExtended
register (method) getExtended in cv::KAZE (trait) (cv_KAZE_getExtended_const)

--- Incoming ---
['cv.KAZE.setUpright', 'void', ['/A'], [['bool', 'upright', '', []]], None, '']
parse_name: cv.KAZE.setUpright with ['cv'] -> fullname:cv::KAZE::setUpright namespace:cv classpath:KAZE classname:KAZE name:setUpright
register (method) setUpright in cv::KAZE (trait) (cv_KAZE_setUpright_bool)

--- Incoming ---
['cv.KAZE.getUpright', 'bool', ['/A', '/C'], [], None, '']
parse_name: cv.KAZE.getUpright with ['cv'] -> fullname:cv::KAZE::getUpright namespace:cv classpath:KAZE classname:KAZE name:getUpright
register (method) getUpright in cv::KAZE (trait) (cv_KAZE_getUpright_const)

--- Incoming ---
[   'cv.KAZE.setThreshold',
    'void',
    ['/A'],
    [['double', 'threshold', '', []]],
    None,
    '']
parse_name: cv.KAZE.setThreshold with ['cv'] -> fullname:cv::KAZE::setThreshold namespace:cv classpath:KAZE classname:KAZE name:setThreshold
register (method) setThreshold in cv::KAZE (trait) (cv_KAZE_setThreshold_double)

--- Incoming ---
['cv.KAZE.getThreshold', 'double', ['/A', '/C'], [], None, '']
parse_name: cv.KAZE.getThreshold with ['cv'] -> fullname:cv::KAZE::getThreshold namespace:cv classpath:KAZE classname:KAZE name:getThreshold
register (method) getThreshold in cv::KAZE (trait) (cv_KAZE_getThreshold_const)

--- Incoming ---
['cv.KAZE.setNOctaves', 'void', ['/A'], [['int', 'octaves', '', []]], None, '']
parse_name: cv.KAZE.setNOctaves with ['cv'] -> fullname:cv::KAZE::setNOctaves namespace:cv classpath:KAZE classname:KAZE name:setNOctaves
register (method) setNOctaves in cv::KAZE (trait) (cv_KAZE_setNOctaves_int)

--- Incoming ---
['cv.KAZE.getNOctaves', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.KAZE.getNOctaves with ['cv'] -> fullname:cv::KAZE::getNOctaves namespace:cv classpath:KAZE classname:KAZE name:getNOctaves
register (method) getNOctaves in cv::KAZE (trait) (cv_KAZE_getNOctaves_const)

--- Incoming ---
[   'cv.KAZE.setNOctaveLayers',
    'void',
    ['/A'],
    [['int', 'octaveLayers', '', []]],
    None,
    '']
parse_name: cv.KAZE.setNOctaveLayers with ['cv'] -> fullname:cv::KAZE::setNOctaveLayers namespace:cv classpath:KAZE classname:KAZE name:setNOctaveLayers
register (method) setNOctaveLayers in cv::KAZE (trait) (cv_KAZE_setNOctaveLayers_int)

--- Incoming ---
['cv.KAZE.getNOctaveLayers', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.KAZE.getNOctaveLayers with ['cv'] -> fullname:cv::KAZE::getNOctaveLayers namespace:cv classpath:KAZE classname:KAZE name:getNOctaveLayers
register (method) getNOctaveLayers in cv::KAZE (trait) (cv_KAZE_getNOctaveLayers_const)

--- Incoming ---
[   'cv.KAZE.setDiffusivity',
    'void',
    ['/A'],
    [['KAZE::DiffusivityType', 'diff', '', []]],
    None,
    '']
parse_name: cv.KAZE.setDiffusivity with ['cv'] -> fullname:cv::KAZE::setDiffusivity namespace:cv classpath:KAZE classname:KAZE name:setDiffusivity
register (method) setDiffusivity in cv::KAZE (trait) (cv_KAZE_setDiffusivity_KAZE_DiffusivityType)

--- Incoming ---
['cv.KAZE.getDiffusivity', 'KAZE::DiffusivityType', ['/A', '/C'], [], None, '']
parse_name: cv.KAZE.getDiffusivity with ['cv'] -> fullname:cv::KAZE::getDiffusivity namespace:cv classpath:KAZE classname:KAZE name:getDiffusivity
register (method) getDiffusivity in cv::KAZE (trait) (cv_KAZE_getDiffusivity_const)

--- Incoming ---
['cv.KAZE.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.KAZE.getDefaultName with ['cv'] -> fullname:cv::KAZE::getDefaultName namespace:cv classpath:KAZE classname:KAZE name:getDefaultName
register (method) getDefaultName in cv::KAZE (trait) (cv_KAZE_getDefaultName_const)

--- Incoming ---
[   'class cv.AKAZE',
    ': cv::Feature2D',
    [],
    [],
    None,
    '@brief Class implementing the AKAZE keypoint detector and descriptor '
    'extractor, described in @cite ANB13.\n'
    '\n'
    '@details AKAZE descriptors can only be used with KAZE or AKAZE keypoints. '
    'This class is thread-safe.\n'
    '\n'
    '@note When you need descriptors use Feature2D::detectAndCompute, which\n'
    'provides better performance. When using Feature2D::detect followed by\n'
    'Feature2D::compute scale space pyramid is computed twice.\n'
    '\n'
    '@note AKAZE implements T-API. When image is passed as UMat some parts of '
    'the algorithm\n'
    'will use OpenCL.\n'
    '\n'
    '@note [ANB13] Fast Explicit Diffusion for Accelerated Features in '
    'Nonlinear\n'
    'Scale Spaces. Pablo F. Alcantarilla, Jesús Nuevo and Adrien Bartoli. In\n'
    'British Machine Vision Conference (BMVC), Bristol, UK, September 2013.']
parse_name: class cv.AKAZE with ['cv'] -> fullname:cv::AKAZE namespace:cv classpath: classname: name:AKAZE
register class cv::AKAZE (['class cv.AKAZE', ': cv::Feature2D', [], [], None, '@brief Class implementing the AKAZE keypoint detector and descriptor extractor, described in @cite ANB13.\n\n@details AKAZE descriptors can only be used with KAZE or AKAZE keypoints. This class is thread-safe.\n\n@note When you need descriptors use Feature2D::detectAndCompute, which\nprovides better performance. When using Feature2D::detect followed by\nFeature2D::compute scale space pyramid is computed twice.\n\n@note AKAZE implements T-API. When image is passed as UMat some parts of the algorithm\nwill use OpenCL.\n\n@note [ANB13] Fast Explicit Diffusion for Accelerated Features in Nonlinear\nScale Spaces. Pablo F. Alcantarilla, Jesús Nuevo and Adrien Bartoli. In\nBritish Machine Vision Conference (BMVC), Bristol, UK, September 2013.']) impl:cv::Feature2D

--- Incoming ---
[   'enum cv.AKAZE.DescriptorType',
    '',
    [],
    [   ['const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT', '2', [], [], None, ''],
        ['const cv.AKAZE.DESCRIPTOR_KAZE', '3', [], [], None, ''],
        ['const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT', '4', [], [], None, ''],
        ['const cv.AKAZE.DESCRIPTOR_MLDB', '5', [], [], None, '']],
    None,
    '']
parse_name: const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_KAZE_UPRIGHT namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_KAZE_UPRIGHT
parse_name: const cv.AKAZE.DESCRIPTOR_KAZE with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_KAZE namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_KAZE
parse_name: const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_MLDB_UPRIGHT namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_MLDB_UPRIGHT
parse_name: const cv.AKAZE.DESCRIPTOR_MLDB with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_MLDB namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_MLDB
parse_name: enum cv.AKAZE.DescriptorType with ['cv'] -> fullname:cv::AKAZE::DescriptorType namespace:cv classpath:AKAZE classname:AKAZE name:DescriptorType
parse_name: const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_KAZE_UPRIGHT namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_KAZE_UPRIGHT
parse_name: const cv.AKAZE.DESCRIPTOR_KAZE with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_KAZE namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_KAZE
parse_name: const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_MLDB_UPRIGHT namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_MLDB_UPRIGHT
parse_name: const cv.AKAZE.DESCRIPTOR_MLDB with ['cv'] -> fullname:cv::AKAZE::DESCRIPTOR_MLDB namespace:cv classpath:AKAZE classname:AKAZE name:DESCRIPTOR_MLDB

--- Incoming ---
[   'cv.AKAZE.create',
    'Ptr<AKAZE>',
    ['/S'],
    [   [   'AKAZE::DescriptorType',
            'descriptor_type',
            'AKAZE::DESCRIPTOR_MLDB',
            []],
        ['int', 'descriptor_size', '0', []],
        ['int', 'descriptor_channels', '3', []],
        ['float', 'threshold', '0.001f', []],
        ['int', 'nOctaves', '4', []],
        ['int', 'nOctaveLayers', '4', []],
        ['KAZE::DiffusivityType', 'diffusivity', 'KAZE::DIFF_PM_G2', []]],
    None,
    '@brief The AKAZE constructor\n'
    '\n'
    '@param descriptor_type Type of the extracted descriptor: '
    'DESCRIPTOR_KAZE,\n'
    'DESCRIPTOR_KAZE_UPRIGHT, DESCRIPTOR_MLDB or DESCRIPTOR_MLDB_UPRIGHT.\n'
    '@param descriptor_size Size of the descriptor in bits. 0 -\\> Full size\n'
    '@param descriptor_channels Number of channels in the descriptor (1, 2, '
    '3)\n'
    '@param threshold Detector response threshold to accept point\n'
    '@param nOctaves Maximum octave evolution of the image\n'
    '@param nOctaveLayers Default number of sublevels per scale level\n'
    '@param diffusivity Diffusivity type. DIFF_PM_G1, DIFF_PM_G2, '
    'DIFF_WEICKERT or\n'
    'DIFF_CHARBONNIER']
parse_name: cv.AKAZE.create with ['cv'] -> fullname:cv::AKAZE::create namespace:cv classpath:AKAZE classname:AKAZE name:create
register (method) create in cv::AKAZE (cv_AKAZE_create_AKAZE_DescriptorType_int_int_float_int_int_KAZE_DiffusivityType)

--- Incoming ---
[   'cv.AKAZE.setDescriptorType',
    'void',
    ['/A'],
    [['AKAZE::DescriptorType', 'dtype', '', []]],
    None,
    '']
parse_name: cv.AKAZE.setDescriptorType with ['cv'] -> fullname:cv::AKAZE::setDescriptorType namespace:cv classpath:AKAZE classname:AKAZE name:setDescriptorType
register (method) setDescriptorType in cv::AKAZE (trait) (cv_AKAZE_setDescriptorType_AKAZE_DescriptorType)

--- Incoming ---
[   'cv.AKAZE.getDescriptorType',
    'AKAZE::DescriptorType',
    ['/A', '/C'],
    [],
    None,
    '']
parse_name: cv.AKAZE.getDescriptorType with ['cv'] -> fullname:cv::AKAZE::getDescriptorType namespace:cv classpath:AKAZE classname:AKAZE name:getDescriptorType
register (method) getDescriptorType in cv::AKAZE (trait) (cv_AKAZE_getDescriptorType_const)

--- Incoming ---
[   'cv.AKAZE.setDescriptorSize',
    'void',
    ['/A'],
    [['int', 'dsize', '', []]],
    None,
    '']
parse_name: cv.AKAZE.setDescriptorSize with ['cv'] -> fullname:cv::AKAZE::setDescriptorSize namespace:cv classpath:AKAZE classname:AKAZE name:setDescriptorSize
register (method) setDescriptorSize in cv::AKAZE (trait) (cv_AKAZE_setDescriptorSize_int)

--- Incoming ---
['cv.AKAZE.getDescriptorSize', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AKAZE.getDescriptorSize with ['cv'] -> fullname:cv::AKAZE::getDescriptorSize namespace:cv classpath:AKAZE classname:AKAZE name:getDescriptorSize
register (method) getDescriptorSize in cv::AKAZE (trait) (cv_AKAZE_getDescriptorSize_const)

--- Incoming ---
[   'cv.AKAZE.setDescriptorChannels',
    'void',
    ['/A'],
    [['int', 'dch', '', []]],
    None,
    '']
parse_name: cv.AKAZE.setDescriptorChannels with ['cv'] -> fullname:cv::AKAZE::setDescriptorChannels namespace:cv classpath:AKAZE classname:AKAZE name:setDescriptorChannels
register (method) setDescriptorChannels in cv::AKAZE (trait) (cv_AKAZE_setDescriptorChannels_int)

--- Incoming ---
['cv.AKAZE.getDescriptorChannels', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AKAZE.getDescriptorChannels with ['cv'] -> fullname:cv::AKAZE::getDescriptorChannels namespace:cv classpath:AKAZE classname:AKAZE name:getDescriptorChannels
register (method) getDescriptorChannels in cv::AKAZE (trait) (cv_AKAZE_getDescriptorChannels_const)

--- Incoming ---
[   'cv.AKAZE.setThreshold',
    'void',
    ['/A'],
    [['double', 'threshold', '', []]],
    None,
    '']
parse_name: cv.AKAZE.setThreshold with ['cv'] -> fullname:cv::AKAZE::setThreshold namespace:cv classpath:AKAZE classname:AKAZE name:setThreshold
register (method) setThreshold in cv::AKAZE (trait) (cv_AKAZE_setThreshold_double)

--- Incoming ---
['cv.AKAZE.getThreshold', 'double', ['/A', '/C'], [], None, '']
parse_name: cv.AKAZE.getThreshold with ['cv'] -> fullname:cv::AKAZE::getThreshold namespace:cv classpath:AKAZE classname:AKAZE name:getThreshold
register (method) getThreshold in cv::AKAZE (trait) (cv_AKAZE_getThreshold_const)

--- Incoming ---
['cv.AKAZE.setNOctaves', 'void', ['/A'], [['int', 'octaves', '', []]], None, '']
parse_name: cv.AKAZE.setNOctaves with ['cv'] -> fullname:cv::AKAZE::setNOctaves namespace:cv classpath:AKAZE classname:AKAZE name:setNOctaves
register (method) setNOctaves in cv::AKAZE (trait) (cv_AKAZE_setNOctaves_int)

--- Incoming ---
['cv.AKAZE.getNOctaves', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AKAZE.getNOctaves with ['cv'] -> fullname:cv::AKAZE::getNOctaves namespace:cv classpath:AKAZE classname:AKAZE name:getNOctaves
register (method) getNOctaves in cv::AKAZE (trait) (cv_AKAZE_getNOctaves_const)

--- Incoming ---
[   'cv.AKAZE.setNOctaveLayers',
    'void',
    ['/A'],
    [['int', 'octaveLayers', '', []]],
    None,
    '']
parse_name: cv.AKAZE.setNOctaveLayers with ['cv'] -> fullname:cv::AKAZE::setNOctaveLayers namespace:cv classpath:AKAZE classname:AKAZE name:setNOctaveLayers
register (method) setNOctaveLayers in cv::AKAZE (trait) (cv_AKAZE_setNOctaveLayers_int)

--- Incoming ---
['cv.AKAZE.getNOctaveLayers', 'int', ['/A', '/C'], [], None, '']
parse_name: cv.AKAZE.getNOctaveLayers with ['cv'] -> fullname:cv::AKAZE::getNOctaveLayers namespace:cv classpath:AKAZE classname:AKAZE name:getNOctaveLayers
register (method) getNOctaveLayers in cv::AKAZE (trait) (cv_AKAZE_getNOctaveLayers_const)

--- Incoming ---
[   'cv.AKAZE.setDiffusivity',
    'void',
    ['/A'],
    [['KAZE::DiffusivityType', 'diff', '', []]],
    None,
    '']
parse_name: cv.AKAZE.setDiffusivity with ['cv'] -> fullname:cv::AKAZE::setDiffusivity namespace:cv classpath:AKAZE classname:AKAZE name:setDiffusivity
register (method) setDiffusivity in cv::AKAZE (trait) (cv_AKAZE_setDiffusivity_KAZE_DiffusivityType)

--- Incoming ---
['cv.AKAZE.getDiffusivity', 'KAZE::DiffusivityType', ['/A', '/C'], [], None, '']
parse_name: cv.AKAZE.getDiffusivity with ['cv'] -> fullname:cv::AKAZE::getDiffusivity namespace:cv classpath:AKAZE classname:AKAZE name:getDiffusivity
register (method) getDiffusivity in cv::AKAZE (trait) (cv_AKAZE_getDiffusivity_const)

--- Incoming ---
['cv.AKAZE.getDefaultName', 'String', ['/C'], [], None, '']
parse_name: cv.AKAZE.getDefaultName with ['cv'] -> fullname:cv::AKAZE::getDefaultName namespace:cv classpath:AKAZE classname:AKAZE name:getDefaultName
register (method) getDefaultName in cv::AKAZE (trait) (cv_AKAZE_getDefaultName_const)

--- Incoming ---
[   'class cv.DescriptorMatcher',
    ': cv::Algorithm',
    [],
    [],
    None,
    '@brief Abstract base class for matching keypoint descriptors.\n'
    '\n'
    'It has two groups of match methods: for matching descriptors of an image '
    'with another image or with\n'
    'an image set.']
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (['class cv.DescriptorMatcher', ': cv::Algorithm', [], [], None, '@brief Abstract base class for matching keypoint descriptors.\n\nIt has two groups of match methods: for matching descriptors of an image with another image or with\nan image set.']) impl:cv::Algorithm

--- Incoming ---
[   'enum cv.DescriptorMatcher.MatcherType',
    '',
    [],
    [   ['const cv.DescriptorMatcher.FLANNBASED', '1', [], [], None, ''],
        ['const cv.DescriptorMatcher.BRUTEFORCE', '2', [], [], None, ''],
        ['const cv.DescriptorMatcher.BRUTEFORCE_L1', '3', [], [], None, ''],
        [   'const cv.DescriptorMatcher.BRUTEFORCE_HAMMING',
            '4',
            [],
            [],
            None,
            ''],
        [   'const cv.DescriptorMatcher.BRUTEFORCE_HAMMINGLUT',
            '5',
            [],
            [],
            None,
            ''],
        ['const cv.DescriptorMatcher.BRUTEFORCE_SL2', '6', [], [], None, '']],
    None,
    '']
parse_name: const cv.DescriptorMatcher.FLANNBASED with ['cv'] -> fullname:cv::DescriptorMatcher::FLANNBASED namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:FLANNBASED
parse_name: const cv.DescriptorMatcher.BRUTEFORCE with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_L1 with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_L1 namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_L1
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_HAMMING with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_HAMMING namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_HAMMING
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_HAMMINGLUT with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_HAMMINGLUT namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_HAMMINGLUT
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_SL2 with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_SL2 namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_SL2
parse_name: enum cv.DescriptorMatcher.MatcherType with ['cv'] -> fullname:cv::DescriptorMatcher::MatcherType namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:MatcherType
parse_name: const cv.DescriptorMatcher.FLANNBASED with ['cv'] -> fullname:cv::DescriptorMatcher::FLANNBASED namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:FLANNBASED
parse_name: const cv.DescriptorMatcher.BRUTEFORCE with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_L1 with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_L1 namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_L1
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_HAMMING with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_HAMMING namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_HAMMING
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_HAMMINGLUT with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_HAMMINGLUT namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_HAMMINGLUT
parse_name: const cv.DescriptorMatcher.BRUTEFORCE_SL2 with ['cv'] -> fullname:cv::DescriptorMatcher::BRUTEFORCE_SL2 namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:BRUTEFORCE_SL2

--- Incoming ---
['cv.DescriptorMatcher.~DescriptorMatcher', '~', [], [], None, '']
parse_name: cv.DescriptorMatcher.~DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher::~DescriptorMatcher namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:~DescriptorMatcher
ignore destructor (method) ~DescriptorMatcher in cv::DescriptorMatcher

--- Incoming ---
[   'cv.DescriptorMatcher.add',
    'void',
    [],
    [['InputArrayOfArrays', 'descriptors', '', []]],
    None,
    '@brief Adds descriptors to train a CPU(trainDescCollectionis) or '
    'GPU(utrainDescCollectionis) descriptor\n'
    'collection.\n'
    '\n'
    'If the collection is not empty, the new descriptors are added to existing '
    'train descriptors.\n'
    '\n'
    '@param descriptors Descriptors to add. Each descriptors[i] is a set of '
    'descriptors from the same\n'
    'train image.']
parse_name: cv.DescriptorMatcher.add with ['cv'] -> fullname:cv::DescriptorMatcher::add namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:add
register (method) add in cv::DescriptorMatcher (cv_DescriptorMatcher_add__InputArray)

--- Incoming ---
[   'cv.DescriptorMatcher.getTrainDescriptors',
    'const std::vector<Mat>&',
    ['/C'],
    [],
    None,
    '@brief Returns a constant link to the train descriptor collection '
    'trainDescCollection .']
parse_name: cv.DescriptorMatcher.getTrainDescriptors with ['cv'] -> fullname:cv::DescriptorMatcher::getTrainDescriptors namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:getTrainDescriptors
register (method) getTrainDescriptors in cv::DescriptorMatcher (cv_DescriptorMatcher_getTrainDescriptors_const)

--- Incoming ---
[   'cv.DescriptorMatcher.clear',
    'void',
    [],
    [],
    None,
    '@brief Clears the train descriptor collections.']
parse_name: cv.DescriptorMatcher.clear with ['cv'] -> fullname:cv::DescriptorMatcher::clear namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:clear
register (method) clear in cv::DescriptorMatcher (cv_DescriptorMatcher_clear)

--- Incoming ---
[   'cv.DescriptorMatcher.empty',
    'bool',
    ['/C'],
    [],
    None,
    '@brief Returns true if there are no train descriptors in the both '
    'collections.']
parse_name: cv.DescriptorMatcher.empty with ['cv'] -> fullname:cv::DescriptorMatcher::empty namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:empty
register (method) empty in cv::DescriptorMatcher (cv_DescriptorMatcher_empty_const)

--- Incoming ---
[   'cv.DescriptorMatcher.isMaskSupported',
    'bool',
    ['/A', '/C'],
    [],
    None,
    '@brief Returns true if the descriptor matcher supports masking '
    'permissible matches.']
parse_name: cv.DescriptorMatcher.isMaskSupported with ['cv'] -> fullname:cv::DescriptorMatcher::isMaskSupported namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:isMaskSupported
register (method) isMaskSupported in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_isMaskSupported_const)

--- Incoming ---
[   'cv.DescriptorMatcher.train',
    'void',
    [],
    [],
    None,
    '@brief Trains a descriptor matcher\n'
    '\n'
    'Trains a descriptor matcher (for example, the flann index). In all '
    'methods to match, the method\n'
    'train() is run every time before matching. Some descriptor matchers (for '
    'example, BruteForceMatcher)\n'
    'have an empty implementation of this method. Other matchers really train '
    'their inner structures (for\n'
    'example, FlannBasedMatcher trains flann::Index ).']
parse_name: cv.DescriptorMatcher.train with ['cv'] -> fullname:cv::DescriptorMatcher::train namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:train
register (method) train in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_train)

--- Incoming ---
[   'cv.DescriptorMatcher.match',
    'void',
    ['/C'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['InputArray', 'trainDescriptors', '', []],
        ['std::vector<DMatch>&', 'matches', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Finds the best match for each descriptor from a query set.\n'
    '\n'
    '@param queryDescriptors Query set of descriptors.\n'
    '@param trainDescriptors Train set of descriptors. This set is not added '
    'to the train descriptors\n'
    'collection stored in the class object.\n'
    '@param matches Matches. If a query descriptor is masked out in mask , no '
    'match is added for this\n'
    'descriptor. So, matches size may be smaller than the query descriptors '
    'count.\n'
    '@param mask Mask specifying permissible matches between an input query '
    'and train matrices of\n'
    'descriptors.\n'
    '\n'
    'In the first variant of this method, the train descriptors are passed as '
    'an input argument. In the\n'
    'second variant of the method, train descriptors collection that was set '
    'by DescriptorMatcher::add is\n'
    'used. Optional mask (or masks) can be passed to specify which query and '
    'training descriptors can be\n'
    'matched. Namely, queryDescriptors[i] can be matched with '
    'trainDescriptors[j] only if\n'
    'mask.at\\<uchar\\>(i,j) is non-zero.']
parse_name: cv.DescriptorMatcher.match with ['cv'] -> fullname:cv::DescriptorMatcher::match namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:match
register (method) match in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_match_const__InputArray__InputArray_VectorOfDMatch__InputArray)

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatch',
    'void',
    ['/C'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['InputArray', 'trainDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['int', 'k', '', []],
        ['InputArray', 'mask', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '@brief Finds the k best matches for each descriptor from a query set.\n'
    '\n'
    '@param queryDescriptors Query set of descriptors.\n'
    '@param trainDescriptors Train set of descriptors. This set is not added '
    'to the train descriptors\n'
    'collection stored in the class object.\n'
    '@param mask Mask specifying permissible matches between an input query '
    'and train matrices of\n'
    'descriptors.\n'
    '@param matches Matches. Each matches[i] is k or less matches for the same '
    'query descriptor.\n'
    '@param k Count of best matches found per each query descriptor or less if '
    'a query descriptor has\n'
    'less than k possible matches in total.\n'
    '@param compactResult Parameter used when the mask (or masks) is not '
    'empty. If compactResult is\n'
    'false, the matches vector has the same size as queryDescriptors rows. If '
    'compactResult is true,\n'
    'the matches vector does not contain matches for fully masked-out query '
    'descriptors.\n'
    '\n'
    'These extended variants of DescriptorMatcher::match methods find several '
    'best matches for each query\n'
    'descriptor. The matches are returned in the distance increasing order. '
    'See DescriptorMatcher::match\n'
    'for the details about query and train descriptors.']
parse_name: cv.DescriptorMatcher.knnMatch with ['cv'] -> fullname:cv::DescriptorMatcher::knnMatch namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:knnMatch
register (method) knnMatch in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_knnMatch_const__InputArray__InputArray_VectorOfVectorOfDMatch_int__InputArray_bool)

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatch',
    'void',
    ['/C'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['InputArray', 'trainDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['float', 'maxDistance', '', []],
        ['InputArray', 'mask', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '@brief For each query descriptor, finds the training descriptors not '
    'farther than the specified distance.\n'
    '\n'
    '@param queryDescriptors Query set of descriptors.\n'
    '@param trainDescriptors Train set of descriptors. This set is not added '
    'to the train descriptors\n'
    'collection stored in the class object.\n'
    '@param matches Found matches.\n'
    '@param compactResult Parameter used when the mask (or masks) is not '
    'empty. If compactResult is\n'
    'false, the matches vector has the same size as queryDescriptors rows. If '
    'compactResult is true,\n'
    'the matches vector does not contain matches for fully masked-out query '
    'descriptors.\n'
    '@param maxDistance Threshold for the distance between matched '
    'descriptors. Distance means here\n'
    'metric distance (e.g. Hamming distance), not the distance between '
    'coordinates (which is measured\n'
    'in Pixels)!\n'
    '@param mask Mask specifying permissible matches between an input query '
    'and train matrices of\n'
    'descriptors.\n'
    '\n'
    'For each query descriptor, the methods find such training descriptors '
    'that the distance between the\n'
    'query descriptor and the training descriptor is equal or smaller than '
    'maxDistance. Found matches are\n'
    'returned in the distance increasing order.']
parse_name: cv.DescriptorMatcher.radiusMatch with ['cv'] -> fullname:cv::DescriptorMatcher::radiusMatch namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:radiusMatch
register (method) radiusMatch in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_radiusMatch_const__InputArray__InputArray_VectorOfVectorOfDMatch_float__InputArray_bool)

--- Incoming ---
[   'cv.DescriptorMatcher.match',
    'void',
    [],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<DMatch>&', 'matches', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []]],
    None,
    '@overload\n'
    '@param queryDescriptors Query set of descriptors.\n'
    '@param matches Matches. If a query descriptor is masked out in mask , no '
    'match is added for this\n'
    'descriptor. So, matches size may be smaller than the query descriptors '
    'count.\n'
    '@param masks Set of masks. Each masks[i] specifies permissible matches '
    'between the input query\n'
    'descriptors and stored train descriptors from the i-th image '
    'trainDescCollection[i].']
parse_name: cv.DescriptorMatcher.match with ['cv'] -> fullname:cv::DescriptorMatcher::match namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:match
register (method) match in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_match__InputArray_VectorOfDMatch__InputArray)

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatch',
    'void',
    [],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['int', 'k', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '@overload\n'
    '@param queryDescriptors Query set of descriptors.\n'
    '@param matches Matches. Each matches[i] is k or less matches for the same '
    'query descriptor.\n'
    '@param k Count of best matches found per each query descriptor or less if '
    'a query descriptor has\n'
    'less than k possible matches in total.\n'
    '@param masks Set of masks. Each masks[i] specifies permissible matches '
    'between the input query\n'
    'descriptors and stored train descriptors from the i-th image '
    'trainDescCollection[i].\n'
    '@param compactResult Parameter used when the mask (or masks) is not '
    'empty. If compactResult is\n'
    'false, the matches vector has the same size as queryDescriptors rows. If '
    'compactResult is true,\n'
    'the matches vector does not contain matches for fully masked-out query '
    'descriptors.']
parse_name: cv.DescriptorMatcher.knnMatch with ['cv'] -> fullname:cv::DescriptorMatcher::knnMatch namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:knnMatch
register (method) knnMatch in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_knnMatch__InputArray_VectorOfVectorOfDMatch_int__InputArray_bool)

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatch',
    'void',
    [],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['float', 'maxDistance', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '@overload\n'
    '@param queryDescriptors Query set of descriptors.\n'
    '@param matches Found matches.\n'
    '@param maxDistance Threshold for the distance between matched '
    'descriptors. Distance means here\n'
    'metric distance (e.g. Hamming distance), not the distance between '
    'coordinates (which is measured\n'
    'in Pixels)!\n'
    '@param masks Set of masks. Each masks[i] specifies permissible matches '
    'between the input query\n'
    'descriptors and stored train descriptors from the i-th image '
    'trainDescCollection[i].\n'
    '@param compactResult Parameter used when the mask (or masks) is not '
    'empty. If compactResult is\n'
    'false, the matches vector has the same size as queryDescriptors rows. If '
    'compactResult is true,\n'
    'the matches vector does not contain matches for fully masked-out query '
    'descriptors.']
parse_name: cv.DescriptorMatcher.radiusMatch with ['cv'] -> fullname:cv::DescriptorMatcher::radiusMatch namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:radiusMatch
register (method) radiusMatch in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_radiusMatch__InputArray_VectorOfVectorOfDMatch_float__InputArray_bool)

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [['const String&', 'fileName', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.write with ['cv'] -> fullname:cv::DescriptorMatcher::write namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:write
register (method) write in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_write_const_String)

--- Incoming ---
[   'cv.DescriptorMatcher.read',
    'void',
    [],
    [['const String&', 'fileName', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.read with ['cv'] -> fullname:cv::DescriptorMatcher::read namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:read
register (method) read in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_read_String)

--- Incoming ---
[   'cv.DescriptorMatcher.read',
    'void',
    [],
    [['const FileNode&', '', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.read with ['cv'] -> fullname:cv::DescriptorMatcher::read namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:read
register (method) read in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_read_FileNode)

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [['FileStorage&', '', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.write with ['cv'] -> fullname:cv::DescriptorMatcher::write namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:write
register (method) write in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_write_const_FileStorage)

--- Incoming ---
[   'cv.DescriptorMatcher.clone',
    'Ptr<DescriptorMatcher>',
    ['/A', '/C'],
    [['bool', 'emptyTrainData', 'false', []]],
    None,
    '@brief Clones the matcher.\n'
    '\n'
    '@param emptyTrainData If emptyTrainData is false, the method creates a '
    'deep copy of the object,\n'
    'that is, copies both parameters and train data. If emptyTrainData is '
    'true, the method creates an\n'
    'object copy with the current parameters but with empty train data.']
parse_name: cv.DescriptorMatcher.clone with ['cv'] -> fullname:cv::DescriptorMatcher::clone namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:clone
register (method) clone in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_clone_const_bool)

--- Incoming ---
[   'cv.DescriptorMatcher.create',
    'Ptr<DescriptorMatcher>',
    ['/S'],
    [['const String&', 'descriptorMatcherType', '', []]],
    None,
    '@brief Creates a descriptor matcher of a given type with the default '
    'parameters (using default\n'
    'constructor).\n'
    '\n'
    '@param descriptorMatcherType Descriptor matcher type. Now the following '
    'matcher types are\n'
    'supported:\n'
    '-   `BruteForce` (it uses L2 )\n'
    '-   `BruteForce-L1`\n'
    '-   `BruteForce-Hamming`\n'
    '-   `BruteForce-Hamming(2)`\n'
    '-   `FlannBased`']
parse_name: cv.DescriptorMatcher.create with ['cv'] -> fullname:cv::DescriptorMatcher::create namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:create
register (method) create in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_create_String)

--- Incoming ---
[   'cv.DescriptorMatcher.create',
    'Ptr<DescriptorMatcher>',
    ['/S'],
    [['const DescriptorMatcher::MatcherType&', 'matcherType', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.create with ['cv'] -> fullname:cv::DescriptorMatcher::create namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:create
register (method) create in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_create_DescriptorMatcher_MatcherType)

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [   ['const Ptr<FileStorage>&', 'fs', '', []],
        ['const String&', 'name', 'String()', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.write with ['cv'] -> fullname:cv::DescriptorMatcher::write namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:write
register (method) write in cv::DescriptorMatcher (trait) (cv_DescriptorMatcher_write_const_PtrOfFileStorage_String)

--- Incoming ---
[   'class cv.DescriptorMatcher.DescriptorCollection',
    '',
    ['/Hidden'],
    [],
    None,
    '* Class to work with descriptors from several images as with one merged '
    'matrix.\n'
    '* It is used e.g. in FlannBasedMatcher.']
parse_name: class cv.DescriptorMatcher.DescriptorCollection with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:DescriptorCollection
register class cv::DescriptorMatcher::DescriptorCollection (['class cv.DescriptorMatcher.DescriptorCollection', '', ['/Hidden'], [], None, '* Class to work with descriptors from several images as with one merged matrix.\n* It is used e.g. in FlannBasedMatcher.']) [ignored]

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.DescriptorCollection',
    'D',
    [],
    [],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.DescriptorCollection with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::DescriptorCollection namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:DescriptorCollection
Registering an unknown type: DescriptorMatcher::DescriptorCollection
register (constructor) default in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_DescriptorCollection)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.DescriptorCollection',
    'D',
    [],
    [['const DescriptorCollection&', 'collection', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.DescriptorCollection with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::DescriptorCollection namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:DescriptorCollection
Registering an unknown type: DescriptorCollection
register (constructor) copy in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_DescriptorCollection_DescriptorCollection)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.~DescriptorCollection',
    '~',
    [],
    [],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.~DescriptorCollection with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::~DescriptorCollection namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:~DescriptorCollection
ignore destructor (method) ~DescriptorCollection in cv::DescriptorMatcher::DescriptorCollection (ignored)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.set',
    'void',
    [],
    [['const std::vector<Mat>&', 'descriptors', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.set with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::set namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:set
register (method) set in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_set_VectorOfMat)

--- Incoming ---
['cv.DescriptorMatcher.DescriptorCollection.clear', 'void', [], [], None, '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.clear with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::clear namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:clear
register (method) clear in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_clear)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.getDescriptors',
    'const Mat&',
    ['/C'],
    [],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.getDescriptors with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::getDescriptors namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:getDescriptors
register (method) getDescriptors in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_getDescriptors_const)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.getDescriptor',
    'const Mat',
    ['/C'],
    [['int', 'imgIdx', '', []], ['int', 'localDescIdx', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.getDescriptor with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::getDescriptor namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:getDescriptor
register (method) getDescriptor in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_getDescriptor_const_int_int)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.getDescriptor',
    'const Mat',
    ['/C'],
    [['int', 'globalDescIdx', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.getDescriptor with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::getDescriptor namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:getDescriptor
register (method) getDescriptor in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_getDescriptor_const_int)

--- Incoming ---
[   'cv.DescriptorMatcher.DescriptorCollection.getLocalIdx',
    'void',
    ['/C'],
    [   ['int', 'globalDescIdx', '', []],
        ['int&', 'imgIdx', '', []],
        ['int&', 'localDescIdx', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.getLocalIdx with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::getLocalIdx namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:getLocalIdx
register (method) getLocalIdx in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_getLocalIdx_const_int_int_int)

--- Incoming ---
['cv.DescriptorMatcher.DescriptorCollection.size', 'int', ['/C'], [], None, '']
parse_name: cv.DescriptorMatcher.DescriptorCollection.size with ['cv'] -> fullname:cv::DescriptorMatcher::DescriptorCollection::size namespace:cv classpath:DescriptorMatcher::DescriptorCollection classname:DescriptorCollection name:size
register (method) size in cv::DescriptorMatcher::DescriptorCollection (ignored) (cv_DescriptorMatcher_DescriptorCollection_size_const)

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatchImpl',
    'void',
    ['/A', '/H'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['int', 'k', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    'In fact the matching is implemented only by the following two methods. '
    'These methods suppose\n'
    'that the class object has been trained already. Public match methods call '
    'these methods\n'
    'after calling train().']
parse_name: cv.DescriptorMatcher.knnMatchImpl with ['cv'] -> fullname:cv::DescriptorMatcher::knnMatchImpl namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:knnMatchImpl

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatchImpl',
    'void',
    ['/A', '/H'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['float', 'maxDistance', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.radiusMatchImpl with ['cv'] -> fullname:cv::DescriptorMatcher::radiusMatchImpl namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:radiusMatchImpl

--- Incoming ---
[   'cv.DescriptorMatcher.isPossibleMatch',
    'bool',
    ['/S', '/H'],
    [   ['InputArray', 'mask', '', []],
        ['int', 'queryIdx', '', []],
        ['int', 'trainIdx', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.isPossibleMatch with ['cv'] -> fullname:cv::DescriptorMatcher::isPossibleMatch namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:isPossibleMatch

--- Incoming ---
[   'cv.DescriptorMatcher.isMaskedOut',
    'bool',
    ['/S', '/H'],
    [['InputArrayOfArrays', 'masks', '', []], ['int', 'queryIdx', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.isMaskedOut with ['cv'] -> fullname:cv::DescriptorMatcher::isMaskedOut namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:isMaskedOut

--- Incoming ---
[   'cv.DescriptorMatcher.clone_op',
    'Mat',
    ['/S', '/H'],
    [['Mat', 'm', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.clone_op with ['cv'] -> fullname:cv::DescriptorMatcher::clone_op namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:clone_op

--- Incoming ---
[   'cv.DescriptorMatcher.checkMasks',
    'void',
    ['/C', '/H'],
    [   ['InputArrayOfArrays', 'masks', '', []],
        ['int', 'queryDescriptorsCount', '', []]],
    None,
    '']
parse_name: cv.DescriptorMatcher.checkMasks with ['cv'] -> fullname:cv::DescriptorMatcher::checkMasks namespace:cv classpath:DescriptorMatcher classname:DescriptorMatcher name:checkMasks

--- Incoming ---
[   'class cv.BFMatcher',
    ': cv::DescriptorMatcher',
    [],
    [],
    None,
    '@brief Brute-force descriptor matcher.\n'
    '\n'
    'For each descriptor in the first set, this matcher finds the closest '
    'descriptor in the second set\n'
    'by trying each one. This descriptor matcher supports masking permissible '
    'matches of descriptor\n'
    'sets.']
parse_name: class cv.BFMatcher with ['cv'] -> fullname:cv::BFMatcher namespace:cv classpath: classname: name:BFMatcher
register class cv::BFMatcher (['class cv.BFMatcher', ': cv::DescriptorMatcher', [], [], None, '@brief Brute-force descriptor matcher.\n\nFor each descriptor in the first set, this matcher finds the closest descriptor in the second set\nby trying each one. This descriptor matcher supports masking permissible matches of descriptor\nsets.']) impl:cv::DescriptorMatcher

--- Incoming ---
[   'cv.BFMatcher.BFMatcher',
    'B',
    [],
    [['int', 'normType', 'NORM_L2', []], ['bool', 'crossCheck', 'false', []]],
    None,
    '@brief Brute-force matcher constructor (obsolete). Please use '
    'BFMatcher.create()\n'
    '*\n'
    '*']
parse_name: cv.BFMatcher.BFMatcher with ['cv'] -> fullname:cv::BFMatcher::BFMatcher namespace:cv classpath:BFMatcher classname:BFMatcher name:BFMatcher
register (constructor) new in cv::BFMatcher (cv_BFMatcher_BFMatcher_int_bool)

--- Incoming ---
['cv.BFMatcher.~BFMatcher', '~', [], [], None, '']
parse_name: cv.BFMatcher.~BFMatcher with ['cv'] -> fullname:cv::BFMatcher::~BFMatcher namespace:cv classpath:BFMatcher classname:BFMatcher name:~BFMatcher
ignore destructor (method) ~BFMatcher in cv::BFMatcher

--- Incoming ---
['cv.BFMatcher.isMaskSupported', 'bool', ['/C'], [], None, '']
parse_name: cv.BFMatcher.isMaskSupported with ['cv'] -> fullname:cv::BFMatcher::isMaskSupported namespace:cv classpath:BFMatcher classname:BFMatcher name:isMaskSupported
register (method) isMaskSupported in cv::BFMatcher (cv_BFMatcher_isMaskSupported_const)

--- Incoming ---
[   'cv.BFMatcher.create',
    'Ptr<BFMatcher>',
    ['/S'],
    [['int', 'normType', 'NORM_L2', []], ['bool', 'crossCheck', 'false', []]],
    None,
    '@brief Brute-force matcher create method.\n'
    '@param normType One of NORM_L1, NORM_L2, NORM_HAMMING, NORM_HAMMING2. L1 '
    'and L2 norms are\n'
    'preferable choices for SIFT and SURF descriptors, NORM_HAMMING should be '
    'used with ORB, BRISK and\n'
    'BRIEF, NORM_HAMMING2 should be used with ORB when WTA_K==3 or 4 (see '
    'ORB::ORB constructor\n'
    'description).\n'
    '@param crossCheck If it is false, this is will be default BFMatcher '
    'behaviour when it finds the k\n'
    'nearest neighbors for each query descriptor. If crossCheck==true, then '
    'the knnMatch() method with\n'
    'k=1 will only return pairs (i,j) such that for i-th query descriptor the '
    'j-th descriptor in the\n'
    "matcher's collection is the nearest and vice versa, i.e. the BFMatcher "
    'will only return consistent\n'
    'pairs. Such technique usually produces best results with minimal number '
    'of outliers when there are\n'
    'enough matches. This is alternative to the ratio test, used by D. Lowe in '
    'SIFT paper.']
parse_name: cv.BFMatcher.create with ['cv'] -> fullname:cv::BFMatcher::create namespace:cv classpath:BFMatcher classname:BFMatcher name:create
register (method) create in cv::BFMatcher (cv_BFMatcher_create_int_bool)

--- Incoming ---
[   'cv.BFMatcher.clone',
    'Ptr<DescriptorMatcher>',
    ['/C'],
    [['bool', 'emptyTrainData', 'false', []]],
    None,
    '']
parse_name: cv.BFMatcher.clone with ['cv'] -> fullname:cv::BFMatcher::clone namespace:cv classpath:BFMatcher classname:BFMatcher name:clone
register (method) clone in cv::BFMatcher (cv_BFMatcher_clone_const_bool)

--- Incoming ---
[   'cv.BFMatcher.knnMatchImpl',
    'void',
    ['/H'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['int', 'k', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '']
parse_name: cv.BFMatcher.knnMatchImpl with ['cv'] -> fullname:cv::BFMatcher::knnMatchImpl namespace:cv classpath:BFMatcher classname:BFMatcher name:knnMatchImpl

--- Incoming ---
[   'cv.BFMatcher.radiusMatchImpl',
    'void',
    ['/H'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['float', 'maxDistance', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '']
parse_name: cv.BFMatcher.radiusMatchImpl with ['cv'] -> fullname:cv::BFMatcher::radiusMatchImpl namespace:cv classpath:BFMatcher classname:BFMatcher name:radiusMatchImpl

--- Incoming ---
[   'class cv.FlannBasedMatcher',
    ': cv::DescriptorMatcher',
    [],
    [],
    None,
    '@brief Flann-based descriptor matcher.\n'
    '\n'
    'This matcher trains cv::flann::Index on a train descriptor collection and '
    'calls its nearest search\n'
    'methods to find the best matches. So, this matcher may be faster when '
    'matching a large train\n'
    'collection than the brute force matcher. FlannBasedMatcher does not '
    'support masking permissible\n'
    'matches of descriptor sets because flann::Index does not support this. :']
parse_name: class cv.FlannBasedMatcher with ['cv'] -> fullname:cv::FlannBasedMatcher namespace:cv classpath: classname: name:FlannBasedMatcher
register class cv::FlannBasedMatcher (['class cv.FlannBasedMatcher', ': cv::DescriptorMatcher', [], [], None, '@brief Flann-based descriptor matcher.\n\nThis matcher trains cv::flann::Index on a train descriptor collection and calls its nearest search\nmethods to find the best matches. So, this matcher may be faster when matching a large train\ncollection than the brute force matcher. FlannBasedMatcher does not support masking permissible\nmatches of descriptor sets because flann::Index does not support this. :']) impl:cv::DescriptorMatcher

--- Incoming ---
[   'cv.FlannBasedMatcher.FlannBasedMatcher',
    'F',
    [],
    [   [   'const Ptr<flann::IndexParams>&',
            'indexParams',
            'makePtr<flann::KDTreeIndexParams>()',
            []],
        [   'const Ptr<flann::SearchParams>&',
            'searchParams',
            'makePtr<flann::SearchParams>()',
            []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.FlannBasedMatcher with ['cv'] -> fullname:cv::FlannBasedMatcher::FlannBasedMatcher namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:FlannBasedMatcher
Registering an unknown type: flann::IndexParams
Registering an unknown type: flann::SearchParams
register (constructor) new in cv::FlannBasedMatcher (cv_FlannBasedMatcher_FlannBasedMatcher_Ptr<flann_IndexParams>_Ptr<flann_SearchParams>)

--- Incoming ---
[   'cv.FlannBasedMatcher.add',
    'void',
    [],
    [['InputArrayOfArrays', 'descriptors', '', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.add with ['cv'] -> fullname:cv::FlannBasedMatcher::add namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:add
register (method) add in cv::FlannBasedMatcher (cv_FlannBasedMatcher_add__InputArray)

--- Incoming ---
['cv.FlannBasedMatcher.clear', 'void', [], [], None, '']
parse_name: cv.FlannBasedMatcher.clear with ['cv'] -> fullname:cv::FlannBasedMatcher::clear namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:clear
register (method) clear in cv::FlannBasedMatcher (cv_FlannBasedMatcher_clear)

--- Incoming ---
[   'cv.FlannBasedMatcher.read',
    'void',
    [],
    [['const FileNode&', '', '', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.read with ['cv'] -> fullname:cv::FlannBasedMatcher::read namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:read
register (method) read in cv::FlannBasedMatcher (cv_FlannBasedMatcher_read_FileNode)

--- Incoming ---
[   'cv.FlannBasedMatcher.write',
    'void',
    ['/C'],
    [['FileStorage&', '', '', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.write with ['cv'] -> fullname:cv::FlannBasedMatcher::write namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:write
register (method) write in cv::FlannBasedMatcher (cv_FlannBasedMatcher_write_const_FileStorage)

--- Incoming ---
['cv.FlannBasedMatcher.train', 'void', [], [], None, '']
parse_name: cv.FlannBasedMatcher.train with ['cv'] -> fullname:cv::FlannBasedMatcher::train namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:train
register (method) train in cv::FlannBasedMatcher (cv_FlannBasedMatcher_train)

--- Incoming ---
['cv.FlannBasedMatcher.isMaskSupported', 'bool', ['/C'], [], None, '']
parse_name: cv.FlannBasedMatcher.isMaskSupported with ['cv'] -> fullname:cv::FlannBasedMatcher::isMaskSupported namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:isMaskSupported
register (method) isMaskSupported in cv::FlannBasedMatcher (cv_FlannBasedMatcher_isMaskSupported_const)

--- Incoming ---
['cv.FlannBasedMatcher.create', 'Ptr<FlannBasedMatcher>', ['/S'], [], None, '']
parse_name: cv.FlannBasedMatcher.create with ['cv'] -> fullname:cv::FlannBasedMatcher::create namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:create
register (method) create in cv::FlannBasedMatcher (cv_FlannBasedMatcher_create)

--- Incoming ---
[   'cv.FlannBasedMatcher.clone',
    'Ptr<DescriptorMatcher>',
    ['/C'],
    [['bool', 'emptyTrainData', 'false', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.clone with ['cv'] -> fullname:cv::FlannBasedMatcher::clone namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:clone
register (method) clone in cv::FlannBasedMatcher (cv_FlannBasedMatcher_clone_const_bool)

--- Incoming ---
[   'cv.FlannBasedMatcher.convertToDMatches',
    'void',
    ['/S', '/H'],
    [   ['const DescriptorCollection&', 'descriptors', '', []],
        ['const Mat&', 'indices', '', []],
        ['const Mat&', 'distances', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.convertToDMatches with ['cv'] -> fullname:cv::FlannBasedMatcher::convertToDMatches namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:convertToDMatches

--- Incoming ---
[   'cv.FlannBasedMatcher.knnMatchImpl',
    'void',
    ['/H'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['int', 'k', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.knnMatchImpl with ['cv'] -> fullname:cv::FlannBasedMatcher::knnMatchImpl namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:knnMatchImpl

--- Incoming ---
[   'cv.FlannBasedMatcher.radiusMatchImpl',
    'void',
    ['/H'],
    [   ['InputArray', 'queryDescriptors', '', []],
        ['std::vector<std::vector<DMatch> >&', 'matches', '', []],
        ['float', 'maxDistance', '', []],
        ['InputArrayOfArrays', 'masks', 'noArray()', []],
        ['bool', 'compactResult', 'false', []]],
    None,
    '']
parse_name: cv.FlannBasedMatcher.radiusMatchImpl with ['cv'] -> fullname:cv::FlannBasedMatcher::radiusMatchImpl namespace:cv classpath:FlannBasedMatcher classname:FlannBasedMatcher name:radiusMatchImpl

--- Incoming ---
[   'enum struct cv.DrawMatchesFlags',
    '',
    [],
    [   ['const cv.DrawMatchesFlags.DEFAULT', '0', [], [], None, ''],
        ['const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG', '1', [], [], None, ''],
        [   'const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS',
            '2',
            [],
            [],
            None,
            ''],
        [   'const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS',
            '4',
            [],
            [],
            None,
            '']],
    None,
    '**************************************************************************************\\\n'
    '*                                   Drawing '
    'functions                                    *\n'
    '\\***************************************************************************************\n'
    '@addtogroup features2d_draw\n'
    '@{']
parse_name: const cv.DrawMatchesFlags.DEFAULT with ['cv'] -> fullname:cv::DrawMatchesFlags::DEFAULT namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:DEFAULT
parse_name: const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG with ['cv'] -> fullname:cv::DrawMatchesFlags::DRAW_OVER_OUTIMG namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:DRAW_OVER_OUTIMG
parse_name: const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS with ['cv'] -> fullname:cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:NOT_DRAW_SINGLE_POINTS
parse_name: const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS with ['cv'] -> fullname:cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:DRAW_RICH_KEYPOINTS
parse_name: enum struct cv.DrawMatchesFlags with ['cv'] -> fullname:cv::DrawMatchesFlags namespace:cv classpath: classname: name:DrawMatchesFlags
parse_name: const cv.DrawMatchesFlags.DEFAULT with ['cv'] -> fullname:cv::DrawMatchesFlags::DEFAULT namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:DEFAULT
parse_name: const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG with ['cv'] -> fullname:cv::DrawMatchesFlags::DRAW_OVER_OUTIMG namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:DRAW_OVER_OUTIMG
parse_name: const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS with ['cv'] -> fullname:cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:NOT_DRAW_SINGLE_POINTS
parse_name: const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS with ['cv'] -> fullname:cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS namespace:cv classpath:DrawMatchesFlags classname:DrawMatchesFlags name:DRAW_RICH_KEYPOINTS

--- Incoming ---
[   'cv.drawKeypoints',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['const std::vector<KeyPoint>&', 'keypoints', '', []],
        ['InputOutputArray', 'outImage', '', []],
        ['const Scalar&', 'color', 'Scalar::all(-1)', []],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    None,
    '@brief Draws keypoints.\n'
    '\n'
    '@param image Source image.\n'
    '@param keypoints Keypoints from the source image.\n'
    '@param outImage Output image. Its content depends on the flags value '
    'defining what is drawn in the\n'
    'output image. See possible flags bit values below.\n'
    '@param color Color of keypoints.\n'
    '@param flags Flags setting drawing features. Possible flags bit values '
    'are defined by\n'
    'DrawMatchesFlags. See details above in drawMatches .\n'
    '\n'
    '@note\n'
    'For Python API, flags are modified as cv.DRAW_MATCHES_FLAGS_DEFAULT,\n'
    'cv.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS, '
    'cv.DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG,\n'
    'cv.DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS']
parse_name: cv.drawKeypoints with ['cv'] -> fullname:cv::drawKeypoints namespace:cv classpath: classname: name:drawKeypoints
register (function) drawKeypoints (cv_drawKeypoints__InputArray_VectorOfKeyPoint__InputOutputArray_Scalar_DrawMatchesFlags)

--- Incoming ---
[   'cv.drawMatches',
    'void',
    [],
    [   ['InputArray', 'img1', '', []],
        ['const std::vector<KeyPoint>&', 'keypoints1', '', []],
        ['InputArray', 'img2', '', []],
        ['const std::vector<KeyPoint>&', 'keypoints2', '', []],
        ['const std::vector<DMatch>&', 'matches1to2', '', []],
        ['InputOutputArray', 'outImg', '', []],
        ['const Scalar&', 'matchColor', 'Scalar::all(-1)', []],
        ['const Scalar&', 'singlePointColor', 'Scalar::all(-1)', []],
        ['const std::vector<char>&', 'matchesMask', 'std::vector<char>()', []],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    None,
    '@brief Draws the found matches of keypoints from two images.\n'
    '\n'
    '@param img1 First source image.\n'
    '@param keypoints1 Keypoints from the first source image.\n'
    '@param img2 Second source image.\n'
    '@param keypoints2 Keypoints from the second source image.\n'
    '@param matches1to2 Matches from the first image to the second one, which '
    'means that keypoints1[i]\n'
    'has a corresponding point in keypoints2[matches[i]] .\n'
    '@param outImg Output image. Its content depends on the flags value '
    'defining what is drawn in the\n'
    'output image. See possible flags bit values below.\n'
    '@param matchColor Color of matches (lines and connected keypoints). If '
    'matchColor==Scalar::all(-1)\n'
    ', the color is generated randomly.\n'
    '@param singlePointColor Color of single keypoints (circles), which means '
    'that keypoints do not\n'
    'have the matches. If singlePointColor==Scalar::all(-1) , the color is '
    'generated randomly.\n'
    '@param matchesMask Mask determining which matches are drawn. If the mask '
    'is empty, all matches are\n'
    'drawn.\n'
    '@param flags Flags setting drawing features. Possible flags bit values '
    'are defined by\n'
    'DrawMatchesFlags.\n'
    '\n'
    'This function draws matches of keypoints from two images in the output '
    'image. Match is a line\n'
    'connecting two keypoints (circles). See cv::DrawMatchesFlags.']
parse_name: cv.drawMatches with ['cv'] -> fullname:cv::drawMatches namespace:cv classpath: classname: name:drawMatches
register (function) drawMatches (cv_drawMatches__InputArray_VectorOfKeyPoint__InputArray_VectorOfKeyPoint_VectorOfDMatch__InputOutputArray_Scalar_Scalar_VectorOfchar_DrawMatchesFlags)

--- Incoming ---
[   'cv.drawMatches',
    'void',
    [],
    [   ['InputArray', 'img1', '', []],
        ['const std::vector<KeyPoint>&', 'keypoints1', '', []],
        ['InputArray', 'img2', '', []],
        ['const std::vector<KeyPoint>&', 'keypoints2', '', []],
        ['const std::vector<std::vector<DMatch> >&', 'matches1to2', '', []],
        ['InputOutputArray', 'outImg', '', []],
        ['const Scalar&', 'matchColor', 'Scalar::all(-1)', []],
        ['const Scalar&', 'singlePointColor', 'Scalar::all(-1)', []],
        [   'const std::vector<std::vector<char> >&',
            'matchesMask',
            'std::vector<std::vector<char> >()',
            []],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    None,
    '@overload']
parse_name: cv.drawMatches with ['cv'] -> fullname:cv::drawMatches namespace:cv classpath: classname: name:drawMatches
register (function) drawMatches (cv_drawMatches__InputArray_VectorOfKeyPoint__InputArray_VectorOfKeyPoint_VectorOfVectorOfDMatch__InputOutputArray_Scalar_Scalar_VectorOfVectorOfchar_DrawMatchesFlags)

--- Incoming ---
[   'cv.evaluateFeatureDetector',
    'void',
    [],
    [   ['const Mat&', 'img1', '', []],
        ['const Mat&', 'img2', '', []],
        ['const Mat&', 'H1to2', '', []],
        ['std::vector<KeyPoint>*', 'keypoints1', '', []],
        ['std::vector<KeyPoint>*', 'keypoints2', '', []],
        ['float&', 'repeatability', '', []],
        ['int&', 'correspCount', '', []],
        [   'const Ptr<FeatureDetector>&',
            'fdetector',
            'Ptr<FeatureDetector>()',
            []]],
    None,
    '**************************************************************************************\\\n'
    '*   Functions to evaluate the feature detectors and [generic] descriptor '
    'extractors      *\n'
    '\\***************************************************************************************']
parse_name: cv.evaluateFeatureDetector with ['cv'] -> fullname:cv::evaluateFeatureDetector namespace:cv classpath: classname: name:evaluateFeatureDetector
register (function) evaluateFeatureDetector (cv_evaluateFeatureDetector_Mat_Mat_Mat_VectorOfKeyPoint_VectorOfKeyPoint_float_int_PtrOfFeature2D)

--- Incoming ---
[   'cv.computeRecallPrecisionCurve',
    'void',
    [],
    [   ['const std::vector<std::vector<DMatch> >&', 'matches1to2', '', []],
        [   'const std::vector<std::vector<uchar> >&',
            'correctMatches1to2Mask',
            '',
            []],
        ['std::vector<Point2f>&', 'recallPrecisionCurve', '', []]],
    None,
    '']
parse_name: cv.computeRecallPrecisionCurve with ['cv'] -> fullname:cv::computeRecallPrecisionCurve namespace:cv classpath: classname: name:computeRecallPrecisionCurve
register (function) computeRecallPrecisionCurve (cv_computeRecallPrecisionCurve_VectorOfVectorOfDMatch_VectorOfVectorOfuchar_VectorOfPoint2f)

--- Incoming ---
[   'cv.getRecall',
    'float',
    [],
    [   ['const std::vector<Point2f>&', 'recallPrecisionCurve', '', []],
        ['float', 'l_precision', '', []]],
    None,
    '']
parse_name: cv.getRecall with ['cv'] -> fullname:cv::getRecall namespace:cv classpath: classname: name:getRecall
register (function) getRecall (cv_getRecall_VectorOfPoint2f_float)

--- Incoming ---
[   'cv.getNearestPoint',
    'int',
    [],
    [   ['const std::vector<Point2f>&', 'recallPrecisionCurve', '', []],
        ['float', 'l_precision', '', []]],
    None,
    '']
parse_name: cv.getNearestPoint with ['cv'] -> fullname:cv::getNearestPoint namespace:cv classpath: classname: name:getNearestPoint
register (function) getNearestPoint (cv_getNearestPoint_VectorOfPoint2f_float)

--- Incoming ---
[   'class cv.BOWTrainer',
    '',
    [],
    [],
    None,
    '@brief Abstract base class for training the *bag of visual words* '
    'vocabulary from a set of descriptors.\n'
    '\n'
    'For details, see, for example, *Visual Categorization with Bags of '
    'Keypoints* by Gabriella Csurka,\n'
    'Christopher R. Dance, Lixin Fan, Jutta Willamowski, Cedric Bray, 2004. :']
parse_name: class cv.BOWTrainer with ['cv'] -> fullname:cv::BOWTrainer namespace:cv classpath: classname: name:BOWTrainer
register class cv::BOWTrainer (['class cv.BOWTrainer', '', [], [], None, '@brief Abstract base class for training the *bag of visual words* vocabulary from a set of descriptors.\n\nFor details, see, for example, *Visual Categorization with Bags of Keypoints* by Gabriella Csurka,\nChristopher R. Dance, Lixin Fan, Jutta Willamowski, Cedric Bray, 2004. :'])

--- Incoming ---
['cv.BOWTrainer.BOWTrainer', 'B', [], [], None, '']
parse_name: cv.BOWTrainer.BOWTrainer with ['cv'] -> fullname:cv::BOWTrainer::BOWTrainer namespace:cv classpath:BOWTrainer classname:BOWTrainer name:BOWTrainer
register (constructor) default in cv::BOWTrainer (cv_BOWTrainer_BOWTrainer)

--- Incoming ---
['cv.BOWTrainer.~BOWTrainer', '~', [], [], None, '']
parse_name: cv.BOWTrainer.~BOWTrainer with ['cv'] -> fullname:cv::BOWTrainer::~BOWTrainer namespace:cv classpath:BOWTrainer classname:BOWTrainer name:~BOWTrainer
ignore destructor (method) ~BOWTrainer in cv::BOWTrainer

--- Incoming ---
[   'cv.BOWTrainer.add',
    'void',
    [],
    [['const Mat&', 'descriptors', '', []]],
    None,
    '@brief Adds descriptors to a training set.\n'
    '\n'
    '@param descriptors Descriptors to add to a training set. Each row of the '
    'descriptors matrix is a\n'
    'descriptor.\n'
    '\n'
    'The training set is clustered using clustermethod to construct the '
    'vocabulary.']
parse_name: cv.BOWTrainer.add with ['cv'] -> fullname:cv::BOWTrainer::add namespace:cv classpath:BOWTrainer classname:BOWTrainer name:add
register (method) add in cv::BOWTrainer (cv_BOWTrainer_add_Mat)

--- Incoming ---
[   'cv.BOWTrainer.getDescriptors',
    'const std::vector<Mat>&',
    ['/C'],
    [],
    None,
    '@brief Returns a training set of descriptors.']
parse_name: cv.BOWTrainer.getDescriptors with ['cv'] -> fullname:cv::BOWTrainer::getDescriptors namespace:cv classpath:BOWTrainer classname:BOWTrainer name:getDescriptors
register (method) getDescriptors in cv::BOWTrainer (cv_BOWTrainer_getDescriptors_const)

--- Incoming ---
[   'cv.BOWTrainer.descriptorsCount',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns the count of all descriptors stored in the training set.']
parse_name: cv.BOWTrainer.descriptorsCount with ['cv'] -> fullname:cv::BOWTrainer::descriptorsCount namespace:cv classpath:BOWTrainer classname:BOWTrainer name:descriptorsCount
register (method) descriptorsCount in cv::BOWTrainer (cv_BOWTrainer_descriptorsCount_const)

--- Incoming ---
['cv.BOWTrainer.clear', 'void', [], [], None, '']
parse_name: cv.BOWTrainer.clear with ['cv'] -> fullname:cv::BOWTrainer::clear namespace:cv classpath:BOWTrainer classname:BOWTrainer name:clear
register (method) clear in cv::BOWTrainer (cv_BOWTrainer_clear)

--- Incoming ---
['cv.BOWTrainer.cluster', 'Mat', ['/A', '/C'], [], None, '@overload']
parse_name: cv.BOWTrainer.cluster with ['cv'] -> fullname:cv::BOWTrainer::cluster namespace:cv classpath:BOWTrainer classname:BOWTrainer name:cluster
register (method) cluster in cv::BOWTrainer (trait) (cv_BOWTrainer_cluster_const)

--- Incoming ---
[   'cv.BOWTrainer.cluster',
    'Mat',
    ['/A', '/C'],
    [['const Mat&', 'descriptors', '', []]],
    None,
    '@brief Clusters train descriptors.\n'
    '\n'
    '@param descriptors Descriptors to cluster. Each row of the descriptors '
    'matrix is a descriptor.\n'
    'Descriptors are not added to the inner train descriptor set.\n'
    '\n'
    'The vocabulary consists of cluster centers. So, this method returns the '
    'vocabulary. In the first\n'
    'variant of the method, train descriptors stored in the object are '
    'clustered. In the second variant,\n'
    'input descriptors are clustered.']
parse_name: cv.BOWTrainer.cluster with ['cv'] -> fullname:cv::BOWTrainer::cluster namespace:cv classpath:BOWTrainer classname:BOWTrainer name:cluster
register (method) cluster in cv::BOWTrainer (trait) (cv_BOWTrainer_cluster_const_Mat)

--- Incoming ---
[   'class cv.BOWKMeansTrainer',
    ': cv::BOWTrainer',
    [],
    [],
    None,
    '@brief kmeans -based class to train visual vocabulary using the *bag of '
    'visual words* approach. :']
parse_name: class cv.BOWKMeansTrainer with ['cv'] -> fullname:cv::BOWKMeansTrainer namespace:cv classpath: classname: name:BOWKMeansTrainer
register class cv::BOWKMeansTrainer (['class cv.BOWKMeansTrainer', ': cv::BOWTrainer', [], [], None, '@brief kmeans -based class to train visual vocabulary using the *bag of visual words* approach. :']) impl:cv::BOWTrainer

--- Incoming ---
[   'cv.BOWKMeansTrainer.BOWKMeansTrainer',
    'B',
    [],
    [   ['int', 'clusterCount', '', []],
        ['const TermCriteria&', 'termcrit', 'TermCriteria()', []],
        ['int', 'attempts', '3', []],
        ['int', 'flags', 'KMEANS_PP_CENTERS', []]],
    None,
    '@brief The constructor.\n\n@see cv::kmeans']
parse_name: cv.BOWKMeansTrainer.BOWKMeansTrainer with ['cv'] -> fullname:cv::BOWKMeansTrainer::BOWKMeansTrainer namespace:cv classpath:BOWKMeansTrainer classname:BOWKMeansTrainer name:BOWKMeansTrainer
register (constructor) new in cv::BOWKMeansTrainer (cv_BOWKMeansTrainer_BOWKMeansTrainer_int_TermCriteria_int_int)

--- Incoming ---
['cv.BOWKMeansTrainer.~BOWKMeansTrainer', '~', [], [], None, '']
parse_name: cv.BOWKMeansTrainer.~BOWKMeansTrainer with ['cv'] -> fullname:cv::BOWKMeansTrainer::~BOWKMeansTrainer namespace:cv classpath:BOWKMeansTrainer classname:BOWKMeansTrainer name:~BOWKMeansTrainer
ignore destructor (method) ~BOWKMeansTrainer in cv::BOWKMeansTrainer

--- Incoming ---
['cv.BOWKMeansTrainer.cluster', 'Mat', ['/C'], [], None, '']
parse_name: cv.BOWKMeansTrainer.cluster with ['cv'] -> fullname:cv::BOWKMeansTrainer::cluster namespace:cv classpath:BOWKMeansTrainer classname:BOWKMeansTrainer name:cluster
register (method) cluster in cv::BOWKMeansTrainer (cv_BOWKMeansTrainer_cluster_const)

--- Incoming ---
[   'cv.BOWKMeansTrainer.cluster',
    'Mat',
    ['/C'],
    [['const Mat&', 'descriptors', '', []]],
    None,
    '']
parse_name: cv.BOWKMeansTrainer.cluster with ['cv'] -> fullname:cv::BOWKMeansTrainer::cluster namespace:cv classpath:BOWKMeansTrainer classname:BOWKMeansTrainer name:cluster
register (method) cluster in cv::BOWKMeansTrainer (cv_BOWKMeansTrainer_cluster_const_Mat)

--- Incoming ---
[   'class cv.BOWImgDescriptorExtractor',
    '',
    [],
    [],
    None,
    '@brief Class to compute an image descriptor using the *bag of visual '
    'words*.\n'
    '\n'
    'Such a computation consists of the following steps:\n'
    '\n'
    '1.  Compute descriptors for a given image and its keypoints set.\n'
    '2.  Find the nearest visual words from the vocabulary for each keypoint '
    'descriptor.\n'
    '3.  Compute the bag-of-words image descriptor as is a normalized '
    'histogram of vocabulary words\n'
    'encountered in the image. The i-th bin of the histogram is a frequency of '
    'i-th word of the\n'
    'vocabulary in the given image.']
parse_name: class cv.BOWImgDescriptorExtractor with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor namespace:cv classpath: classname: name:BOWImgDescriptorExtractor
register class cv::BOWImgDescriptorExtractor (['class cv.BOWImgDescriptorExtractor', '', [], [], None, '@brief Class to compute an image descriptor using the *bag of visual words*.\n\nSuch a computation consists of the following steps:\n\n1.  Compute descriptors for a given image and its keypoints set.\n2.  Find the nearest visual words from the vocabulary for each keypoint descriptor.\n3.  Compute the bag-of-words image descriptor as is a normalized histogram of vocabulary words\nencountered in the image. The i-th bin of the histogram is a frequency of i-th word of the\nvocabulary in the given image.'])

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor',
    'B',
    [],
    [   ['const Ptr<DescriptorExtractor>&', 'dextractor', '', []],
        ['const Ptr<DescriptorMatcher>&', 'dmatcher', '', []]],
    None,
    '@brief The constructor.\n'
    '\n'
    '@param dextractor Descriptor extractor that is used to compute '
    'descriptors for an input image and\n'
    'its keypoints.\n'
    '@param dmatcher Descriptor matcher that is used to find the nearest word '
    'of the trained vocabulary\n'
    'for each keypoint descriptor of the image.']
parse_name: cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::BOWImgDescriptorExtractor namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:BOWImgDescriptorExtractor
register (constructor) new in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_BOWImgDescriptorExtractor_PtrOfFeature2D_PtrOfDescriptorMatcher)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor',
    'B',
    [],
    [['const Ptr<DescriptorMatcher>&', 'dmatcher', '', []]],
    None,
    '@overload']
parse_name: cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::BOWImgDescriptorExtractor namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:BOWImgDescriptorExtractor
register (constructor) new in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_BOWImgDescriptorExtractor_PtrOfDescriptorMatcher)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.~BOWImgDescriptorExtractor',
    '~',
    [],
    [],
    None,
    '']
parse_name: cv.BOWImgDescriptorExtractor.~BOWImgDescriptorExtractor with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::~BOWImgDescriptorExtractor namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:~BOWImgDescriptorExtractor
ignore destructor (method) ~BOWImgDescriptorExtractor in cv::BOWImgDescriptorExtractor

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.setVocabulary',
    'void',
    [],
    [['const Mat&', 'vocabulary', '', []]],
    None,
    '@brief Sets a visual vocabulary.\n'
    '\n'
    '@param vocabulary Vocabulary (can be trained using the inheritor of '
    'BOWTrainer ). Each row of the\n'
    'vocabulary is a visual word (cluster center).']
parse_name: cv.BOWImgDescriptorExtractor.setVocabulary with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::setVocabulary namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:setVocabulary
register (method) setVocabulary in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_setVocabulary_Mat)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.getVocabulary',
    'const Mat&',
    ['/C'],
    [],
    None,
    '@brief Returns the set vocabulary.']
parse_name: cv.BOWImgDescriptorExtractor.getVocabulary with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::getVocabulary namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:getVocabulary
register (method) getVocabulary in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_getVocabulary_const)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.compute',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['OutputArray', 'imgDescriptor', '', []],
        ['std::vector<std::vector<int> >*', 'pointIdxsOfClusters', '0', []],
        ['Mat*', 'descriptors', '0', []]],
    None,
    '@brief Computes an image descriptor using the set visual vocabulary.\n'
    '\n'
    '@param image Image, for which the descriptor is computed.\n'
    '@param keypoints Keypoints detected in the input image.\n'
    '@param imgDescriptor Computed output image descriptor.\n'
    '@param pointIdxsOfClusters Indices of keypoints that belong to the '
    'cluster. This means that\n'
    'pointIdxsOfClusters[i] are keypoint indices that belong to the i -th '
    'cluster (word of vocabulary)\n'
    'returned if it is non-zero.\n'
    '@param descriptors Descriptors of the image keypoints that are returned '
    'if they are non-zero.']
parse_name: cv.BOWImgDescriptorExtractor.compute with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::compute namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:compute
register (method) compute in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_compute__InputArray_VectorOfKeyPoint__OutputArray_VectorOfVectorOfint_Mat)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.compute',
    'void',
    [],
    [   ['InputArray', 'keypointDescriptors', '', []],
        ['OutputArray', 'imgDescriptor', '', []],
        ['std::vector<std::vector<int> >*', 'pointIdxsOfClusters', '0', []]],
    None,
    '@overload\n'
    '@param keypointDescriptors Computed descriptors to match with '
    'vocabulary.\n'
    '@param imgDescriptor Computed output image descriptor.\n'
    '@param pointIdxsOfClusters Indices of keypoints that belong to the '
    'cluster. This means that\n'
    'pointIdxsOfClusters[i] are keypoint indices that belong to the i -th '
    'cluster (word of vocabulary)\n'
    'returned if it is non-zero.']
parse_name: cv.BOWImgDescriptorExtractor.compute with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::compute namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:compute
register (method) compute in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_compute__InputArray__OutputArray_VectorOfVectorOfint)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.compute2',
    'void',
    [],
    [   ['const Mat&', 'image', '', []],
        ['std::vector<KeyPoint>&', 'keypoints', '', []],
        ['Mat&', 'imgDescriptor', '', []]],
    None,
    '']
parse_name: cv.BOWImgDescriptorExtractor.compute2 with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::compute2 namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:compute2
register (method) compute2 in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_compute2_Mat_VectorOfKeyPoint_Mat)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.descriptorSize',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns an image descriptor size if the vocabulary is set. '
    'Otherwise, it returns 0.']
parse_name: cv.BOWImgDescriptorExtractor.descriptorSize with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::descriptorSize namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:descriptorSize
register (method) descriptorSize in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_descriptorSize_const)

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.descriptorType',
    'int',
    ['/C'],
    [],
    None,
    '@brief Returns an image descriptor type.']
parse_name: cv.BOWImgDescriptorExtractor.descriptorType with ['cv'] -> fullname:cv::BOWImgDescriptorExtractor::descriptorType namespace:cv classpath:BOWImgDescriptorExtractor classname:BOWImgDescriptorExtractor name:descriptorType
register (method) descriptorType in cv::BOWImgDescriptorExtractor (cv_BOWImgDescriptorExtractor_descriptorType_const)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/features2d/features2d.hpp ================


Namespaces: ['cv']
Comment: {'features2d': '\n@defgroup features2d 2D Features Framework\n@{\n@defgroup features2d_main Feature Detection and Description\n@defgroup features2d_match Descriptor Matchers\n\nMatchers of keypoint descriptors in OpenCV have wrappers with a common interface that enables you to\neasily switch between different algorithms solving the same problem. This section is devoted to\nmatching descriptors that are represented as vectors in a multidimensional space. All objects that\nimplement vector descriptor matchers inherit the DescriptorMatcher interface.\n\n@note\n-   An example explaining keypoint matching can be found at\nopencv_source_code/samples/cpp/descriptor_extractor_matcher.cpp\n-   An example on descriptor matching evaluation can be found at\nopencv_source_code/samples/cpp/detector_descriptor_matcher_evaluation.cpp\n-   An example on one to many image matching can be found at\nopencv_source_code/samples/cpp/matching_to_many_images.cpp\n\n@defgroup features2d_draw Drawing Function of Keypoints and Matches\n@defgroup features2d_category Object Categorization\n\nThis section describes approaches based on local 2D features and used to categorize objects.\n\n@note\n-   A complete Bag-Of-Words sample can be found at\nopencv_source_code/samples/cpp/bagofwords_classification.cpp\n-   (Python) An example using the features2D framework to perform object categorization can be\nfound at opencv_source_code/samples/python/find_obj.py\n\n@}\n\n'}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/features2d/hal/interface.h ================


Namespaces: ['cv']
Comment: {'features2d': '\n@defgroup features2d 2D Features Framework\n@{\n@defgroup features2d_main Feature Detection and Description\n@defgroup features2d_match Descriptor Matchers\n\nMatchers of keypoint descriptors in OpenCV have wrappers with a common interface that enables you to\neasily switch between different algorithms solving the same problem. This section is devoted to\nmatching descriptors that are represented as vectors in a multidimensional space. All objects that\nimplement vector descriptor matchers inherit the DescriptorMatcher interface.\n\n@note\n-   An example explaining keypoint matching can be found at\nopencv_source_code/samples/cpp/descriptor_extractor_matcher.cpp\n-   An example on descriptor matching evaluation can be found at\nopencv_source_code/samples/cpp/detector_descriptor_matcher_evaluation.cpp\n-   An example on one to many image matching can be found at\nopencv_source_code/samples/cpp/matching_to_many_images.cpp\n\n@defgroup features2d_draw Drawing Function of Keypoints and Matches\n@defgroup features2d_category Object Categorization\n\nThis section describes approaches based on local 2D features and used to categorize objects.\n\n@note\n-   A complete Bag-Of-Words sample can be found at\nopencv_source_code/samples/cpp/bagofwords_classification.cpp\n-   (Python) An example using the features2D framework to perform object categorization can be\nfound at opencv_source_code/samples/python/find_obj.py\n\n@}\n\n'}

--- Incoming ---
[   'const CV_HAL_TYPE_5_8',
    '0',
    [],
    [],
    '@addtogroup featrure2d_hal_interface\n'
    '@{\n'
    '@name Fast feature detector types\n'
    '@sa cv::FastFeatureDetector\n'
    '@{\n']
parse_name: const CV_HAL_TYPE_5_8 with ['cv'] -> fullname:CV_HAL_TYPE_5_8 namespace: classpath: classname: name:CV_HAL_TYPE_5_8

--- Incoming ---
[   'const CV_HAL_TYPE_7_12',
    '1',
    [],
    [],
    '@addtogroup featrure2d_hal_interface\n'
    '@{\n'
    '@name Fast feature detector types\n'
    '@sa cv::FastFeatureDetector\n'
    '@{\n']
parse_name: const CV_HAL_TYPE_7_12 with ['cv'] -> fullname:CV_HAL_TYPE_7_12 namespace: classpath: classname: name:CV_HAL_TYPE_7_12

--- Incoming ---
[   'const CV_HAL_TYPE_9_16',
    '2',
    [],
    [],
    '@addtogroup featrure2d_hal_interface\n'
    '@{\n'
    '@name Fast feature detector types\n'
    '@sa cv::FastFeatureDetector\n'
    '@{\n']
parse_name: const CV_HAL_TYPE_9_16 with ['cv'] -> fullname:CV_HAL_TYPE_9_16 namespace: classpath: classname: name:CV_HAL_TYPE_9_16

--- Incoming ---
[   'struct cvhalKeyPoint',
    '',
    [],
    [],
    None,
    '@addtogroup featrure2d_hal_interface\n'
    '@{\n'
    '@name Fast feature detector types\n'
    '@sa cv::FastFeatureDetector\n'
    '@{\n'
    '@}\n'
    '@name Key point\n'
    '@sa cv::KeyPoint\n'
    '@{']
parse_name: struct cvhalKeyPoint with ['cv'] -> fullname:cvhalKeyPoint namespace: classpath: classname: name:cvhalKeyPoint
register class cvhalKeyPoint (['struct cvhalKeyPoint', '', [], [], None, '@addtogroup featrure2d_hal_interface\n@{\n@name Fast feature detector types\n@sa cv::FastFeatureDetector\n@{\n@}\n@name Key point\n@sa cv::KeyPoint\n@{'])

--- Manual ---
('cv.ORB.create', 'Ptr<ORB>', ['/S'], [], None, '@overload')
parse_name: cv.ORB.create with ['cv'] -> fullname:cv::ORB::create namespace:cv classpath:ORB classname:ORB name:create
register (method) create in cv::ORB (trait) (cv_ORB_create)


===== Generating... =====
Registering an unknown type: cv::class
Generating func cv_AGAST__InputArray_VectorOfKeyPoint_int_bool
Generating func cv_AGAST__InputArray_VectorOfKeyPoint_int_bool_AgastFeatureDetector_DetectorType
Generating func cv_FAST__InputArray_VectorOfKeyPoint_int_bool
Generating func cv_FAST__InputArray_VectorOfKeyPoint_int_bool_FastFeatureDetector_DetectorType
Generating func cv_computeRecallPrecisionCurve_VectorOfVectorOfDMatch_VectorOfVectorOfuchar_VectorOfPoint2f
Generating func cv_drawKeypoints__InputArray_VectorOfKeyPoint__InputOutputArray_Scalar_DrawMatchesFlags
Generating func cv_drawMatches__InputArray_VectorOfKeyPoint__InputArray_VectorOfKeyPoint_VectorOfDMatch__InputOutputArray_Scalar_Scalar_VectorOfchar_DrawMatchesFlags
Generating func cv_drawMatches__InputArray_VectorOfKeyPoint__InputArray_VectorOfKeyPoint_VectorOfVectorOfDMatch__InputOutputArray_Scalar_Scalar_VectorOfVectorOfchar_DrawMatchesFlags
Generating func cv_evaluateFeatureDetector_Mat_Mat_Mat_VectorOfKeyPoint_VectorOfKeyPoint_float_int_PtrOfFeature2D
Generating func cv_getNearestPoint_VectorOfPoint2f_float
Generating func cv_getRecall_VectorOfPoint2f_float
Generating impl for trait cv::AKAZE (trait)
Generating func cv_AKAZE_setDescriptorType_AKAZE_DescriptorType
Generating func cv_AKAZE_getDescriptorType_const
Generating func cv_AKAZE_setDescriptorSize_int
Generating func cv_AKAZE_getDescriptorSize_const
Generating func cv_AKAZE_setDescriptorChannels_int
Generating func cv_AKAZE_getDescriptorChannels_const
Generating func cv_AKAZE_setThreshold_double
Generating func cv_AKAZE_getThreshold_const
Generating func cv_AKAZE_setNOctaves_int
Generating func cv_AKAZE_getNOctaves_const
Generating func cv_AKAZE_setNOctaveLayers_int
Generating func cv_AKAZE_getNOctaveLayers_const
Generating func cv_AKAZE_setDiffusivity_KAZE_DiffusivityType
Generating func cv_AKAZE_getDiffusivity_const
Generating func cv_AKAZE_getDefaultName_const
Generating func cv_AKAZE_create_AKAZE_DescriptorType_int_int_float_int_int_KAZE_DiffusivityType
Generating impl for trait cv::AgastFeatureDetector (trait)
Generating func cv_AgastFeatureDetector_setThreshold_int
Generating func cv_AgastFeatureDetector_getThreshold_const
Generating func cv_AgastFeatureDetector_setNonmaxSuppression_bool
Generating func cv_AgastFeatureDetector_getNonmaxSuppression_const
Generating func cv_AgastFeatureDetector_setType_AgastFeatureDetector_DetectorType
Generating func cv_AgastFeatureDetector_getType_const
Generating func cv_AgastFeatureDetector_getDefaultName_const
Generating func cv_AgastFeatureDetector_create_int_bool_AgastFeatureDetector_DetectorType
Ghost class cv::Algorithm (ghost, trait), ignoring
Generating box for cv::BFMatcher
Generating func cv_BFMatcher_BFMatcher_int_bool
Generating func cv_BFMatcher_isMaskSupported_const
Generating func cv_BFMatcher_create_int_bool
Generating func cv_BFMatcher_clone_const_bool
Generating box for cv::BOWImgDescriptorExtractor
Generating func cv_BOWImgDescriptorExtractor_BOWImgDescriptorExtractor_PtrOfFeature2D_PtrOfDescriptorMatcher
Generating func cv_BOWImgDescriptorExtractor_BOWImgDescriptorExtractor_PtrOfDescriptorMatcher
Generating func cv_BOWImgDescriptorExtractor_setVocabulary_Mat
Generating func cv_BOWImgDescriptorExtractor_getVocabulary_const
Generating func cv_BOWImgDescriptorExtractor_compute__InputArray_VectorOfKeyPoint__OutputArray_VectorOfVectorOfint_Mat
Generating func cv_BOWImgDescriptorExtractor_compute__InputArray__OutputArray_VectorOfVectorOfint
Generating func cv_BOWImgDescriptorExtractor_compute2_Mat_VectorOfKeyPoint_Mat
Generating func cv_BOWImgDescriptorExtractor_descriptorSize_const
Generating func cv_BOWImgDescriptorExtractor_descriptorType_const
Generating box for cv::BOWKMeansTrainer
Generating func cv_BOWKMeansTrainer_BOWKMeansTrainer_int_TermCriteria_int_int
Generating func cv_BOWKMeansTrainer_cluster_const
Generating func cv_BOWKMeansTrainer_cluster_const_Mat
Generating impl for trait cv::BOWTrainer (trait)
Generating func cv_BOWTrainer_add_Mat
Generating func cv_BOWTrainer_getDescriptors_const
Generating func cv_BOWTrainer_descriptorsCount_const
Generating func cv_BOWTrainer_clear
Generating func cv_BOWTrainer_cluster_const
Generating func cv_BOWTrainer_cluster_const_Mat
Generating box for cv::BRISK
Generating func cv_BRISK_create_int_int_float
Generating func cv_BRISK_create_VectorOffloat_VectorOfint_float_float_VectorOfint
Generating func cv_BRISK_create_int_int_VectorOffloat_VectorOfint_float_float_VectorOfint
Generating func cv_BRISK_getDefaultName_const
Generating func cv_BRISK_setThreshold_int
Generating func cv_BRISK_getThreshold_const
Generating func cv_BRISK_setOctaves_int
Generating func cv_BRISK_getOctaves_const
Ghost class cv::DMatch (simple, ghost), ignoring
Generating impl for trait cv::DescriptorMatcher (trait)
Generating func cv_DescriptorMatcher_add__InputArray
Generating func cv_DescriptorMatcher_getTrainDescriptors_const
Generating func cv_DescriptorMatcher_clear
Generating func cv_DescriptorMatcher_empty_const
Generating func cv_DescriptorMatcher_isMaskSupported_const
Generating func cv_DescriptorMatcher_train
Generating func cv_DescriptorMatcher_match_const__InputArray__InputArray_VectorOfDMatch__InputArray
Generating func cv_DescriptorMatcher_knnMatch_const__InputArray__InputArray_VectorOfVectorOfDMatch_int__InputArray_bool
Generating func cv_DescriptorMatcher_radiusMatch_const__InputArray__InputArray_VectorOfVectorOfDMatch_float__InputArray_bool
Generating func cv_DescriptorMatcher_match__InputArray_VectorOfDMatch__InputArray
Generating func cv_DescriptorMatcher_knnMatch__InputArray_VectorOfVectorOfDMatch_int__InputArray_bool
Generating func cv_DescriptorMatcher_radiusMatch__InputArray_VectorOfVectorOfDMatch_float__InputArray_bool
Generating func cv_DescriptorMatcher_write_const_String
Generating func cv_DescriptorMatcher_read_String
Generating func cv_DescriptorMatcher_read_FileNode
Generating func cv_DescriptorMatcher_write_const_FileStorage
Generating func cv_DescriptorMatcher_clone_const_bool
Generating func cv_DescriptorMatcher_write_const_PtrOfFileStorage_String
Generating func cv_DescriptorMatcher_create_String
Generating func cv_DescriptorMatcher_create_DescriptorMatcher_MatcherType
Manual ignore class cv::DescriptorMatcher::DescriptorCollection (ignored)
Generating impl for trait cv::FastFeatureDetector (trait)
Generating func cv_FastFeatureDetector_setThreshold_int
Generating func cv_FastFeatureDetector_getThreshold_const
Generating func cv_FastFeatureDetector_setNonmaxSuppression_bool
Generating func cv_FastFeatureDetector_getNonmaxSuppression_const
Generating func cv_FastFeatureDetector_setType_FastFeatureDetector_DetectorType
Generating func cv_FastFeatureDetector_getType_const
Generating func cv_FastFeatureDetector_getDefaultName_const
Generating func cv_FastFeatureDetector_create_int_bool_FastFeatureDetector_DetectorType
Generating impl for trait cv::Feature2D (trait)
Generating func cv_Feature2D_detect__InputArray_VectorOfKeyPoint__InputArray
Generating func cv_Feature2D_detect__InputArray_VectorOfVectorOfKeyPoint__InputArray
Generating func cv_Feature2D_compute__InputArray_VectorOfKeyPoint__OutputArray
Generating func cv_Feature2D_compute__InputArray_VectorOfVectorOfKeyPoint__OutputArray
Generating func cv_Feature2D_detectAndCompute__InputArray__InputArray_VectorOfKeyPoint__OutputArray_bool
Generating func cv_Feature2D_descriptorSize_const
Generating func cv_Feature2D_descriptorType_const
Generating func cv_Feature2D_defaultNorm_const
Generating func cv_Feature2D_write_const_String
Generating func cv_Feature2D_read_String
Generating func cv_Feature2D_write_const_FileStorage
Generating func cv_Feature2D_read_FileNode
Generating func cv_Feature2D_empty_const
Generating func cv_Feature2D_getDefaultName_const
Generating func cv_Feature2D_write_const_PtrOfFileStorage_String
Generating box for cv::Feature2D (trait)
Generating func cv_Feature2D_detect__InputArray_VectorOfKeyPoint__InputArray
  ignored: already there
Generating func cv_Feature2D_detect__InputArray_VectorOfVectorOfKeyPoint__InputArray
  ignored: already there
Generating func cv_Feature2D_compute__InputArray_VectorOfKeyPoint__OutputArray
  ignored: already there
Generating func cv_Feature2D_compute__InputArray_VectorOfVectorOfKeyPoint__OutputArray
  ignored: already there
Generating func cv_Feature2D_detectAndCompute__InputArray__InputArray_VectorOfKeyPoint__OutputArray_bool
  ignored: already there
Generating func cv_Feature2D_descriptorSize_const
  ignored: already there
Generating func cv_Feature2D_descriptorType_const
  ignored: already there
Generating func cv_Feature2D_defaultNorm_const
  ignored: already there
Generating func cv_Feature2D_write_const_String
  ignored: already there
Generating func cv_Feature2D_read_String
  ignored: already there
Generating func cv_Feature2D_write_const_FileStorage
  ignored: already there
Generating func cv_Feature2D_read_FileNode
  ignored: already there
Generating func cv_Feature2D_empty_const
  ignored: already there
Generating func cv_Feature2D_getDefaultName_const
  ignored: already there
Generating func cv_Feature2D_write_const_PtrOfFileStorage_String
  ignored: already there
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Generating box for cv::FlannBasedMatcher
Generating func cv_FlannBasedMatcher_FlannBasedMatcher_Ptr<flann_IndexParams>_Ptr<flann_SearchParams>
  ignored: can not map type SmartPtr[Unknown[flann::IndexParams]] yet
Generating func cv_FlannBasedMatcher_add__InputArray
Generating func cv_FlannBasedMatcher_clear
Generating func cv_FlannBasedMatcher_read_FileNode
Generating func cv_FlannBasedMatcher_write_const_FileStorage
Generating func cv_FlannBasedMatcher_train
Generating func cv_FlannBasedMatcher_isMaskSupported_const
Generating func cv_FlannBasedMatcher_create
Generating func cv_FlannBasedMatcher_clone_const_bool
Generating impl for trait cv::GFTTDetector (trait)
Generating func cv_GFTTDetector_setMaxFeatures_int
Generating func cv_GFTTDetector_getMaxFeatures_const
Generating func cv_GFTTDetector_setQualityLevel_double
Generating func cv_GFTTDetector_getQualityLevel_const
Generating func cv_GFTTDetector_setMinDistance_double
Generating func cv_GFTTDetector_getMinDistance_const
Generating func cv_GFTTDetector_setBlockSize_int
Generating func cv_GFTTDetector_getBlockSize_const
Generating func cv_GFTTDetector_setHarrisDetector_bool
Generating func cv_GFTTDetector_getHarrisDetector_const
Generating func cv_GFTTDetector_setK_double
Generating func cv_GFTTDetector_getK_const
Generating func cv_GFTTDetector_getDefaultName_const
Generating func cv_GFTTDetector_create_int_double_double_int_bool_double
Generating func cv_GFTTDetector_create_int_double_double_int_int_bool_double
Generating impl for trait cv::KAZE (trait)
Generating func cv_KAZE_setExtended_bool
Generating func cv_KAZE_getExtended_const
Generating func cv_KAZE_setUpright_bool
Generating func cv_KAZE_getUpright_const
Generating func cv_KAZE_setThreshold_double
Generating func cv_KAZE_getThreshold_const
Generating func cv_KAZE_setNOctaves_int
Generating func cv_KAZE_getNOctaves_const
Generating func cv_KAZE_setNOctaveLayers_int
Generating func cv_KAZE_getNOctaveLayers_const
Generating func cv_KAZE_setDiffusivity_KAZE_DiffusivityType
Generating func cv_KAZE_getDiffusivity_const
Generating func cv_KAZE_getDefaultName_const
Generating func cv_KAZE_create_bool_bool_float_int_int_KAZE_DiffusivityType
Ghost class cv::KeyPoint (simple, ghost), ignoring
Generating box for cv::KeyPointsFilter
Generating func cv_KeyPointsFilter_KeyPointsFilter
Generating func cv_KeyPointsFilter_runByImageBorder_VectorOfKeyPoint_Size_int
Generating func cv_KeyPointsFilter_runByKeypointSize_VectorOfKeyPoint_float_float
Generating func cv_KeyPointsFilter_runByPixelsMask_VectorOfKeyPoint_Mat
Generating func cv_KeyPointsFilter_removeDuplicated_VectorOfKeyPoint
Generating func cv_KeyPointsFilter_removeDuplicatedSorted_VectorOfKeyPoint
Generating func cv_KeyPointsFilter_retainBest_VectorOfKeyPoint_int
Generating impl for trait cv::MSER (trait)
Generating func cv_MSER_detectRegions__InputArray_VectorOfVectorOfPoint_VectorOfRect
Generating func cv_MSER_setDelta_int
Generating func cv_MSER_getDelta_const
Generating func cv_MSER_setMinArea_int
Generating func cv_MSER_getMinArea_const
Generating func cv_MSER_setMaxArea_int
Generating func cv_MSER_getMaxArea_const
Generating func cv_MSER_setPass2Only_bool
Generating func cv_MSER_getPass2Only_const
Generating func cv_MSER_getDefaultName_const
Generating func cv_MSER_create_int_int_int_double_double_int_double_double_int
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Generating impl for trait cv::ORB (trait)
Generating func cv_ORB_setMaxFeatures_int
Generating func cv_ORB_getMaxFeatures_const
Generating func cv_ORB_setScaleFactor_double
Generating func cv_ORB_getScaleFactor_const
Generating func cv_ORB_setNLevels_int
Generating func cv_ORB_getNLevels_const
Generating func cv_ORB_setEdgeThreshold_int
Generating func cv_ORB_getEdgeThreshold_const
Generating func cv_ORB_setFirstLevel_int
Generating func cv_ORB_getFirstLevel_const
Generating func cv_ORB_setWTA_K_int
Generating func cv_ORB_getWTA_K_const
Generating func cv_ORB_setScoreType_ORB_ScoreType
Generating func cv_ORB_getScoreType_const
Generating func cv_ORB_setPatchSize_int
Generating func cv_ORB_getPatchSize_const
Generating func cv_ORB_setFastThreshold_int
Generating func cv_ORB_getFastThreshold_const
Generating func cv_ORB_getDefaultName_const
Generating func cv_ORB_create_int_float_int_int_int_int_ORB_ScoreType_int_int
Generating func cv_ORB_create
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Generating box for cv::SimpleBlobDetector
Generating func cv_SimpleBlobDetector_create_SimpleBlobDetector_Params
Generating func cv_SimpleBlobDetector_getDefaultName_const
Generating func cv_SimpleBlobDetector_Params_Params
Generating func cv_SimpleBlobDetector_Params_read_FileNode
Generating func cv_SimpleBlobDetector_Params_write_const_FileStorage
Ghost class cv::TermCriteria (ghost), ignoring
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Ghost class cv::utils::logging::LogTag (ghost), ignoring
Not namespaced. Skipped cvhalKeyPoint
