
--- Manual ---
('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']])
parse_name: class cv.Vec8i with ['cv'] -> fullname:cv::Vec8i namespace:cv classpath: classname: name:Vec8i
register class cv::Vec8i (('class cv.Vec8i', '', ['/Simple'], [['int', 'data[8]', '', '/RW']]))

--- Manual ---
('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6d with ['cv'] -> fullname:cv::Vec6d namespace:cv classpath: classname: name:Vec6d
register class cv::Vec6d (('class cv.Vec6d', '', ['/Simple'], [['double', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6f with ['cv'] -> fullname:cv::Vec6f namespace:cv classpath: classname: name:Vec6f
register class cv::Vec6f (('class cv.Vec6f', '', ['/Simple'], [['float', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']])
parse_name: class cv.Vec6i with ['cv'] -> fullname:cv::Vec6i namespace:cv classpath: classname: name:Vec6i
register class cv::Vec6i (('class cv.Vec6i', '', ['/Simple'], [['int', 'data[6]', '', '/RW']]))

--- Manual ---
('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4d with ['cv'] -> fullname:cv::Vec4d namespace:cv classpath: classname: name:Vec4d
register class cv::Vec4d (('class cv.Vec4d', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4f with ['cv'] -> fullname:cv::Vec4f namespace:cv classpath: classname: name:Vec4f
register class cv::Vec4f (('class cv.Vec4f', '', ['/Simple'], [['float', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4i with ['cv'] -> fullname:cv::Vec4i namespace:cv classpath: classname: name:Vec4i
register class cv::Vec4i (('class cv.Vec4i', '', ['/Simple'], [['int', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4w with ['cv'] -> fullname:cv::Vec4w namespace:cv classpath: classname: name:Vec4w
register class cv::Vec4w (('class cv.Vec4w', '', ['/Simple'], [['unsigned short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4s with ['cv'] -> fullname:cv::Vec4s namespace:cv classpath: classname: name:Vec4s
register class cv::Vec4s (('class cv.Vec4s', '', ['/Simple'], [['short', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']])
parse_name: class cv.Vec4b with ['cv'] -> fullname:cv::Vec4b namespace:cv classpath: classname: name:Vec4b
register class cv::Vec4b (('class cv.Vec4b', '', ['/Simple'], [['unsigned char', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3d with ['cv'] -> fullname:cv::Vec3d namespace:cv classpath: classname: name:Vec3d
register class cv::Vec3d (('class cv.Vec3d', '', ['/Simple'], [['double', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3f with ['cv'] -> fullname:cv::Vec3f namespace:cv classpath: classname: name:Vec3f
register class cv::Vec3f (('class cv.Vec3f', '', ['/Simple'], [['float', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3i with ['cv'] -> fullname:cv::Vec3i namespace:cv classpath: classname: name:Vec3i
register class cv::Vec3i (('class cv.Vec3i', '', ['/Simple'], [['int', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3w with ['cv'] -> fullname:cv::Vec3w namespace:cv classpath: classname: name:Vec3w
register class cv::Vec3w (('class cv.Vec3w', '', ['/Simple'], [['unsigned short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3s with ['cv'] -> fullname:cv::Vec3s namespace:cv classpath: classname: name:Vec3s
register class cv::Vec3s (('class cv.Vec3s', '', ['/Simple'], [['short', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']])
parse_name: class cv.Vec3b with ['cv'] -> fullname:cv::Vec3b namespace:cv classpath: classname: name:Vec3b
register class cv::Vec3b (('class cv.Vec3b', '', ['/Simple'], [['unsigned char', 'data[3]', '', '/RW']]))

--- Manual ---
('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2d with ['cv'] -> fullname:cv::Vec2d namespace:cv classpath: classname: name:Vec2d
register class cv::Vec2d (('class cv.Vec2d', '', ['/Simple'], [['double', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2d',
    '',
    ['/Simple'],
    [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']])
parse_name: class cv.Size2d with ['cv'] -> fullname:cv::Size2d namespace:cv classpath: classname: name:Size2d
register class cv::Size2d (('class cv.Size2d', '', ['/Simple'], [['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2d',
    '',
    ['/Simple'],
    [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']])
parse_name: class cv.Point2d with ['cv'] -> fullname:cv::Point2d namespace:cv classpath: classname: name:Point2d
register class cv::Point2d (('class cv.Point2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2d',
    '',
    ['/Simple'],
    [   ['double', 'x', '', '/RW'],
        ['double', 'y', '', '/RW'],
        ['double', 'width', '', '/RW'],
        ['double', 'height', '', '/RW']])
parse_name: class cv.Rect2d with ['cv'] -> fullname:cv::Rect2d namespace:cv classpath: classname: name:Rect2d
register class cv::Rect2d (('class cv.Rect2d', '', ['/Simple'], [['double', 'x', '', '/RW'], ['double', 'y', '', '/RW'], ['double', 'width', '', '/RW'], ['double', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2f with ['cv'] -> fullname:cv::Vec2f namespace:cv classpath: classname: name:Vec2f
register class cv::Vec2f (('class cv.Vec2f', '', ['/Simple'], [['float', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2f',
    '',
    ['/Simple'],
    [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']])
parse_name: class cv.Size2f with ['cv'] -> fullname:cv::Size2f namespace:cv classpath: classname: name:Size2f
register class cv::Size2f (('class cv.Size2f', '', ['/Simple'], [['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2f',
    '',
    ['/Simple'],
    [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']])
parse_name: class cv.Point2f with ['cv'] -> fullname:cv::Point2f namespace:cv classpath: classname: name:Point2f
register class cv::Point2f (('class cv.Point2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2f',
    '',
    ['/Simple'],
    [   ['float', 'x', '', '/RW'],
        ['float', 'y', '', '/RW'],
        ['float', 'width', '', '/RW'],
        ['float', 'height', '', '/RW']])
parse_name: class cv.Rect2f with ['cv'] -> fullname:cv::Rect2f namespace:cv classpath: classname: name:Rect2f
register class cv::Rect2f (('class cv.Rect2f', '', ['/Simple'], [['float', 'x', '', '/RW'], ['float', 'y', '', '/RW'], ['float', 'width', '', '/RW'], ['float', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size2l',
    '',
    ['/Simple'],
    [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']])
parse_name: class cv.Size2l with ['cv'] -> fullname:cv::Size2l namespace:cv classpath: classname: name:Size2l
register class cv::Size2l (('class cv.Size2l', '', ['/Simple'], [['int64', 'width', '', '/RW'], ['int64', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2l',
    '',
    ['/Simple'],
    [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']])
parse_name: class cv.Point2l with ['cv'] -> fullname:cv::Point2l namespace:cv classpath: classname: name:Point2l
register class cv::Point2l (('class cv.Point2l', '', ['/Simple'], [['int64', 'x', '', '/RW'], ['int64', 'y', '', '/RW']]))

--- Manual ---
('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2i with ['cv'] -> fullname:cv::Vec2i namespace:cv classpath: classname: name:Vec2i
register class cv::Vec2i (('class cv.Vec2i', '', ['/Simple'], [['int', 'data[2]', '', '/RW']]))

--- Manual ---
(   'class cv.Size2i',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size2i with ['cv'] -> fullname:cv::Size2i namespace:cv classpath: classname: name:Size2i
register class cv::Size2i (('class cv.Size2i', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point2i',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point2i with ['cv'] -> fullname:cv::Point2i namespace:cv classpath: classname: name:Point2i
register class cv::Point2i (('class cv.Point2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect2i',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect2i with ['cv'] -> fullname:cv::Rect2i namespace:cv classpath: classname: name:Rect2i
register class cv::Rect2i (('class cv.Rect2i', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Size',
    '',
    ['/Simple'],
    [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']])
parse_name: class cv.Size with ['cv'] -> fullname:cv::Size namespace:cv classpath: classname: name:Size
register class cv::Size (('class cv.Size', '', ['/Simple'], [['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
(   'class cv.Point',
    '',
    ['/Simple'],
    [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']])
parse_name: class cv.Point with ['cv'] -> fullname:cv::Point namespace:cv classpath: classname: name:Point
register class cv::Point (('class cv.Point', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW']]))

--- Manual ---
(   'class cv.Rect',
    '',
    ['/Simple'],
    [   ['int', 'x', '', '/RW'],
        ['int', 'y', '', '/RW'],
        ['int', 'width', '', '/RW'],
        ['int', 'height', '', '/RW']])
parse_name: class cv.Rect with ['cv'] -> fullname:cv::Rect namespace:cv classpath: classname: name:Rect
register class cv::Rect (('class cv.Rect', '', ['/Simple'], [['int', 'x', '', '/RW'], ['int', 'y', '', '/RW'], ['int', 'width', '', '/RW'], ['int', 'height', '', '/RW']]))

--- Manual ---
('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2w with ['cv'] -> fullname:cv::Vec2w namespace:cv classpath: classname: name:Vec2w
register class cv::Vec2w (('class cv.Vec2w', '', ['/Simple'], [['unsigned short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2s with ['cv'] -> fullname:cv::Vec2s namespace:cv classpath: classname: name:Vec2s
register class cv::Vec2s (('class cv.Vec2s', '', ['/Simple'], [['short', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']])
parse_name: class cv.Vec2b with ['cv'] -> fullname:cv::Vec2b namespace:cv classpath: classname: name:Vec2b
register class cv::Vec2b (('class cv.Vec2b', '', ['/Simple'], [['unsigned char', 'data[2]', '', '/RW']]))

--- Manual ---
('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']])
parse_name: class cv.Scalar with ['cv'] -> fullname:cv::Scalar namespace:cv classpath: classname: name:Scalar
register class cv::Scalar (('class cv.Scalar', '', ['/Simple'], [['double', 'data[4]', '', '/RW']]))

--- Manual ---
('class cv._InputArray', '', ['/Ghost'], [])
parse_name: class cv._InputArray with ['cv'] -> fullname:cv::_InputArray namespace:cv classpath: classname: name:_InputArray
register class cv::_InputArray (('class cv._InputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputArray', 'const _InputArray&', [], [])
parse_name: typedef cv.InputArray with ['cv'] -> fullname:cv::InputArray namespace:cv classpath: classname: name:InputArray
Registering an unknown type: InputArray

--- Manual ---
('class cv._OutputArray', '', ['/Ghost'], [])
parse_name: class cv._OutputArray with ['cv'] -> fullname:cv::_OutputArray namespace:cv classpath: classname: name:_OutputArray
register class cv::_OutputArray (('class cv._OutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.OutputArray', '_OutputArray&', [], [])
parse_name: typedef cv.OutputArray with ['cv'] -> fullname:cv::OutputArray namespace:cv classpath: classname: name:OutputArray
Registering an unknown type: OutputArray

--- Manual ---
('class cv._InputOutputArray', '', ['/Ghost'], [])
parse_name: class cv._InputOutputArray with ['cv'] -> fullname:cv::_InputOutputArray namespace:cv classpath: classname: name:_InputOutputArray
register class cv::_InputOutputArray (('class cv._InputOutputArray', '', ['/Ghost'], []))

--- Manual ---
('typedef cv.InputOutputArray', '_InputOutputArray&', [], [])
parse_name: typedef cv.InputOutputArray with ['cv'] -> fullname:cv::InputOutputArray namespace:cv classpath: classname: name:InputOutputArray
Registering an unknown type: InputOutputArray

--- Manual ---
('typedef cv.InputArrayOfArrays', 'InputArray', [], [])
parse_name: typedef cv.InputArrayOfArrays with ['cv'] -> fullname:cv::InputArrayOfArrays namespace:cv classpath: classname: name:InputArrayOfArrays
Registering an unknown type: InputArrayOfArrays

--- Manual ---
('typedef cv.OutputArrayOfArrays', 'OutputArray', [], [])
parse_name: typedef cv.OutputArrayOfArrays with ['cv'] -> fullname:cv::OutputArrayOfArrays namespace:cv classpath: classname: name:OutputArrayOfArrays
Registering an unknown type: OutputArrayOfArrays

--- Manual ---
('typedef cv.InputOutputArrayOfArrays', 'InputOutputArray', [], [])
parse_name: typedef cv.InputOutputArrayOfArrays with ['cv'] -> fullname:cv::InputOutputArrayOfArrays namespace:cv classpath: classname: name:InputOutputArrayOfArrays
Registering an unknown type: InputOutputArrayOfArrays

--- Manual ---
('class cv.Range', '', ['/Ghost'], [])
parse_name: class cv.Range with ['cv'] -> fullname:cv::Range namespace:cv classpath: classname: name:Range
register class cv::Range (('class cv.Range', '', ['/Ghost'], []))

--- Manual ---
('class cv.MatExpr', '', ['/Ghost'], [])
parse_name: class cv.MatExpr with ['cv'] -> fullname:cv::MatExpr namespace:cv classpath: classname: name:MatExpr
register class cv::MatExpr (('class cv.MatExpr', '', ['/Ghost'], []))

--- Manual ---
('class cv.Mat', '', ['/Ghost'], [])
parse_name: class cv.Mat with ['cv'] -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (('class cv.Mat', '', ['/Ghost'], []))

--- Manual ---
('class cv.UMat', '', ['/Ghost'], [])
parse_name: class cv.UMat with ['cv'] -> fullname:cv::UMat namespace:cv classpath: classname: name:UMat
register class cv::UMat (('class cv.UMat', '', ['/Ghost'], []))

--- Manual ---
('class cv.Algorithm', '', ['/Ghost'], [])
parse_name: class cv.Algorithm with ['cv'] -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (('class cv.Algorithm', '', ['/Ghost'], []))

--- Manual ---
('class cv.DMatch', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.DMatch with ['cv'] -> fullname:cv::DMatch namespace:cv classpath: classname: name:DMatch
register class cv::DMatch (('class cv.DMatch', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.KeyPoint', '', ['/Ghost', '/Simple'], [])
parse_name: class cv.KeyPoint with ['cv'] -> fullname:cv::KeyPoint namespace:cv classpath: classname: name:KeyPoint
register class cv::KeyPoint (('class cv.KeyPoint', '', ['/Ghost', '/Simple'], []))

--- Manual ---
('class cv.RotatedRect', '', ['/Ghost'], [])
parse_name: class cv.RotatedRect with ['cv'] -> fullname:cv::RotatedRect namespace:cv classpath: classname: name:RotatedRect
register class cv::RotatedRect (('class cv.RotatedRect', '', ['/Ghost'], []))

--- Manual ---
('class cv.TermCriteria', '', ['/Ghost'], [])
parse_name: class cv.TermCriteria with ['cv'] -> fullname:cv::TermCriteria namespace:cv classpath: classname: name:TermCriteria
register class cv::TermCriteria (('class cv.TermCriteria', '', ['/Ghost'], []))

--- Manual ---
('class cv.utils.logging.LogTag', '', ['/Ghost'], [])
parse_name: class cv.utils.logging.LogTag with ['cv'] -> fullname:cv::utils::logging::LogTag namespace:cv classpath:utils::logging classname:logging name:LogTag
register class cv::utils::logging::LogTag (('class cv.utils.logging.LogTag', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileNode', '', ['/Ghost'], [])
parse_name: class cv.FileNode with ['cv'] -> fullname:cv::FileNode namespace:cv classpath: classname: name:FileNode
register class cv::FileNode (('class cv.FileNode', '', ['/Ghost'], []))

--- Manual ---
('class cv.FileStorage', '', ['/Ghost'], [])
parse_name: class cv.FileStorage with ['cv'] -> fullname:cv::FileStorage namespace:cv classpath: classname: name:FileStorage
register class cv::FileStorage (('class cv.FileStorage', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.LayerParams', '', ['/Ghost'], [])
parse_name: class cv.dnn.LayerParams with ['cv'] -> fullname:cv::dnn::LayerParams namespace:cv classpath:dnn classname:dnn name:LayerParams
register class cv::dnn::LayerParams (('class cv.dnn.LayerParams', '', ['/Ghost'], []))

--- Manual ---
('class cv.dnn.Layer', '', ['/Ghost'], [])
parse_name: class cv.dnn.Layer with ['cv'] -> fullname:cv::dnn::Layer namespace:cv classpath:dnn classname:dnn name:Layer
register class cv::dnn::Layer (('class cv.dnn.Layer', '', ['/Ghost'], []))

--- Manual ---
('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])
parse_name: class cv.Feature2D with ['cv'] -> fullname:cv::Feature2D namespace:cv classpath: classname: name:Feature2D
register class cv::Feature2D (('class cv.Feature2D', ': cv::Algorithm', ['/Ghost'], [])) impl:cv::Algorithm

--- Manual ---
('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])
parse_name: class cv.DescriptorMatcher with ['cv'] -> fullname:cv::DescriptorMatcher namespace:cv classpath: classname: name:DescriptorMatcher
register class cv::DescriptorMatcher (('class cv.DescriptorMatcher', ': cv::Algorithm', ['/Ghost', '/A'], [])) impl:cv::Algorithm

--- Manual ---
('typedef cv.FeatureDetector', 'Feature2D', [], [])
parse_name: typedef cv.FeatureDetector with ['cv'] -> fullname:cv::FeatureDetector namespace:cv classpath: classname: name:FeatureDetector
Registering an unknown type: FeatureDetector

--- Manual ---
('typedef cv.DescriptorExtractor', 'Feature2D', [], [])
parse_name: typedef cv.DescriptorExtractor with ['cv'] -> fullname:cv::DescriptorExtractor namespace:cv classpath: classname: name:DescriptorExtractor
Registering an unknown type: DescriptorExtractor

--- Manual ---
('enum cv.InterpolationFlags', '', ['/Ghost'], [])
parse_name: enum cv.InterpolationFlags with ['cv'] -> fullname:cv::InterpolationFlags namespace:cv classpath: classname: name:InterpolationFlags


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/fuzzy.hpp ================


Namespaces: []
Comment: {'fuzzy': '\n@defgroup fuzzy Image processing based on fuzzy mathematics\n\nNamespace for all functions is `ft`. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern `FT`_degree_dimension`_`method.\n\n@{\n@defgroup f0_math Math with F0-transform support\n\nFuzzy transform (\\f$F^0\\f$-transform) of the 0th degree transforms whole image to a matrix of its components. These components are used in latter computation where each of them represents average color of certain subarea.\n\n@defgroup f1_math Math with F1-transform support\n\nFuzzy transform (\\f$F^1\\f$-transform) of the 1th degree transforms whole image to a matrix of its components. Each component is polynomial of the 1th degree carrying information about average color and average gradient of certain subarea.\n\n@defgroup f_image Fuzzy image processing\n\nImage proceesing based on fuzzy mathematics namely F-transform.\n@}\n\n\n'}


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/fuzzy/fuzzy_F0_math.hpp ================


Namespaces: ['cv', 'cv.ft']
Comment: {'fuzzy': '\n@defgroup fuzzy Image processing based on fuzzy mathematics\n\nNamespace for all functions is `ft`. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern `FT`_degree_dimension`_`method.\n\n@{\n@defgroup f0_math Math with F0-transform support\n\nFuzzy transform (\\f$F^0\\f$-transform) of the 0th degree transforms whole image to a matrix of its components. These components are used in latter computation where each of them represents average color of certain subarea.\n\n@defgroup f1_math Math with F1-transform support\n\nFuzzy transform (\\f$F^1\\f$-transform) of the 1th degree transforms whole image to a matrix of its components. Each component is polynomial of the 1th degree carrying information about average color and average gradient of certain subarea.\n\n@defgroup f_image Fuzzy image processing\n\nImage proceesing based on fuzzy mathematics namely F-transform.\n@}\n\n\n'}

--- Incoming ---
[   'cv.ft.FT02D_components',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'components', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Computes components of the array using direct '
    '\\f$F^0\\f$-transform.\n'
    '@param matrix Input array.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param components Output 32-bit float array for the components.\n'
    '@param mask Mask can be used for unwanted area marking.\n'
    '\n'
    'The function computes components using predefined kernel and mask.']
parse_name: cv.ft.FT02D_components with ['cv', 'cv::ft'] -> fullname:cv::ft::FT02D_components namespace:cv::ft classpath: classname: name:FT02D_components
register (function) FT02D_components (cv_ft_FT02D_components__InputArray__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.ft.FT02D_inverseFT',
    'void',
    [],
    [   ['InputArray', 'components', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'output', '', []],
        ['int', 'width', '', []],
        ['int', 'height', '', []]],
    None,
    '@brief Computes inverse \\f$F^0\\f$-transfrom.\n'
    '@param components Input 32-bit float single channel array for the '
    'components.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param output Output 32-bit float array.\n'
    '@param width Width of the output array.\n'
    '@param height Height of the output array.\n'
    '\n'
    'Computation of inverse F-transform.']
parse_name: cv.ft.FT02D_inverseFT with ['cv', 'cv::ft'] -> fullname:cv::ft::FT02D_inverseFT namespace:cv::ft classpath: classname: name:FT02D_inverseFT
register (function) FT02D_inverseFT (cv_ft_FT02D_inverseFT__InputArray__InputArray__OutputArray_int_int)

--- Incoming ---
[   'cv.ft.FT02D_process',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'output', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Computes \\f$F^0\\f$-transfrom and inverse \\f$F^0\\f$-transfrom '
    'at once.\n'
    '@param matrix Input matrix.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param output Output 32-bit float array.\n'
    '@param mask Mask used for unwanted area marking.\n'
    '\n'
    'This function computes F-transfrom and inverse F-transfotm in one step. '
    'It is fully sufficient and optimized for `cv::Mat`.']
parse_name: cv.ft.FT02D_process with ['cv', 'cv::ft'] -> fullname:cv::ft::FT02D_process namespace:cv::ft classpath: classname: name:FT02D_process
register (function) FT02D_process (cv_ft_FT02D_process__InputArray__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.ft.FT02D_iteration',
    'int',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'output', '', []],
        ['InputArray', 'mask', '', []],
        ['OutputArray', 'maskOutput', '', []],
        ['bool', 'firstStop', '', []]],
    None,
    '@brief Computes \\f$F^0\\f$-transfrom and inverse \\f$F^0\\f$-transfrom '
    'at once and return state.\n'
    '@param matrix Input matrix.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param output Output 32-bit float array.\n'
    '@param mask Mask used for unwanted area marking.\n'
    '@param maskOutput Mask after one iteration.\n'
    '@param firstStop If **true** function returns -1 when first problem '
    'appears. In case of `false` the process is completed and summation of all '
    'problems returned.\n'
    '\n'
    'This function computes iteration of F-transfrom and inverse F-transfotm '
    'and handle image and mask change. The function is used in `ft::inpaint` '
    'function.']
parse_name: cv.ft.FT02D_iteration with ['cv', 'cv::ft'] -> fullname:cv::ft::FT02D_iteration namespace:cv::ft classpath: classname: name:FT02D_iteration
register (function) FT02D_iteration (cv_ft_FT02D_iteration__InputArray__InputArray__OutputArray__InputArray__OutputArray_bool)

--- Incoming ---
[   'cv.ft.FT02D_FL_process',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['const int', 'radius', '', []],
        ['OutputArray', 'output', '', []]],
    None,
    '@brief Sligtly less accurate version of \\f$F^0\\f$-transfrom computation '
    'optimized for higher speed. The methods counts with linear basic '
    'function.\n'
    '@param matrix Input 3 channels matrix.\n'
    '@param radius Radius of the `ft::LINEAR` basic function.\n'
    '@param output Output array.\n'
    '\n'
    'This function computes F-transfrom and inverse F-transfotm using linear '
    'basic function in one step. It is ~10 times faster than '
    '`ft::FT02D_process` method.']
parse_name: cv.ft.FT02D_FL_process with ['cv', 'cv::ft'] -> fullname:cv::ft::FT02D_FL_process namespace:cv::ft classpath: classname: name:FT02D_FL_process
register (function) FT02D_FL_process (cv_ft_FT02D_FL_process__InputArray_int__OutputArray)

--- Incoming ---
[   'cv.ft.FT02D_FL_process_float',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['const int', 'radius', '', []],
        ['OutputArray', 'output', '', []]],
    None,
    '@brief Sligtly less accurate version of \\f$F^0\\f$-transfrom computation '
    'optimized for higher speed. The methods counts with linear basic '
    'function.\n'
    '@param matrix Input 3 channels matrix.\n'
    '@param radius Radius of the `ft::LINEAR` basic function.\n'
    '@param output Output array.\n'
    '\n'
    'This function computes F-transfrom and inverse F-transfotm using linear '
    'basic function in one step. It is ~9 times faster then '
    '`ft::FT02D_process` method and more accurate than `ft::FT02D_FL_process` '
    'method.']
parse_name: cv.ft.FT02D_FL_process_float with ['cv', 'cv::ft'] -> fullname:cv::ft::FT02D_FL_process_float namespace:cv::ft classpath: classname: name:FT02D_FL_process_float
register (function) FT02D_FL_process_float (cv_ft_FT02D_FL_process_float__InputArray_int__OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/fuzzy/fuzzy_F1_math.hpp ================


Namespaces: ['cv', 'cv.ft']
Comment: {'fuzzy': '\n@defgroup fuzzy Image processing based on fuzzy mathematics\n\nNamespace for all functions is `ft`. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern `FT`_degree_dimension`_`method.\n\n@{\n@defgroup f0_math Math with F0-transform support\n\nFuzzy transform (\\f$F^0\\f$-transform) of the 0th degree transforms whole image to a matrix of its components. These components are used in latter computation where each of them represents average color of certain subarea.\n\n@defgroup f1_math Math with F1-transform support\n\nFuzzy transform (\\f$F^1\\f$-transform) of the 1th degree transforms whole image to a matrix of its components. Each component is polynomial of the 1th degree carrying information about average color and average gradient of certain subarea.\n\n@defgroup f_image Fuzzy image processing\n\nImage proceesing based on fuzzy mathematics namely F-transform.\n@}\n\n\n'}

--- Incoming ---
[   'cv.ft.FT12D_components',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'components', '', []]],
    None,
    '@brief Computes components of the array using direct '
    '\\f$F^1\\f$-transform.\n'
    '@param matrix Input array.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param components Output 32-bit float array for the components.\n'
    '\n'
    'The function computes linear components using predefined kernel.']
parse_name: cv.ft.FT12D_components with ['cv', 'cv::ft'] -> fullname:cv::ft::FT12D_components namespace:cv::ft classpath: classname: name:FT12D_components
register (function) FT12D_components (cv_ft_FT12D_components__InputArray__InputArray__OutputArray)

--- Incoming ---
[   'cv.ft.FT12D_polynomial',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'c00', '', []],
        ['OutputArray', 'c10', '', []],
        ['OutputArray', 'c01', '', []],
        ['OutputArray', 'components', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Computes elements of \\f$F^1\\f$-transform components.\n'
    '@param matrix Input array.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param c00 Elements represent average color.\n'
    '@param c10 Elements represent average vertical gradient.\n'
    '@param c01 Elements represent average horizontal gradient.\n'
    '@param components Output 32-bit float array for the components.\n'
    '@param mask Mask can be used for unwanted area marking.\n'
    '\n'
    'The function computes components and its elements using predefined kernel '
    'and mask.']
parse_name: cv.ft.FT12D_polynomial with ['cv', 'cv::ft'] -> fullname:cv::ft::FT12D_polynomial namespace:cv::ft classpath: classname: name:FT12D_polynomial
register (function) FT12D_polynomial (cv_ft_FT12D_polynomial__InputArray__InputArray__OutputArray__OutputArray__OutputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.ft.FT12D_createPolynomMatrixVertical',
    'void',
    [],
    [   ['int', 'radius', '', []],
        ['OutputArray', 'matrix', '', []],
        ['const int', 'chn', '', []]],
    None,
    '@brief Creates vertical matrix for \\f$F^1\\f$-transform computation.\n'
    '@param radius Radius of the basic function.\n'
    '@param matrix The vertical matrix.\n'
    '@param chn Number of channels.\n'
    '\n'
    'The function creates helper vertical matrix for \\f$F^1\\f$-transfrom '
    'processing. It is used for gradient computation.']
parse_name: cv.ft.FT12D_createPolynomMatrixVertical with ['cv', 'cv::ft'] -> fullname:cv::ft::FT12D_createPolynomMatrixVertical namespace:cv::ft classpath: classname: name:FT12D_createPolynomMatrixVertical
register (function) FT12D_createPolynomMatrixVertical (cv_ft_FT12D_createPolynomMatrixVertical_int__OutputArray_int)

--- Incoming ---
[   'cv.ft.FT12D_createPolynomMatrixHorizontal',
    'void',
    [],
    [   ['int', 'radius', '', []],
        ['OutputArray', 'matrix', '', []],
        ['const int', 'chn', '', []]],
    None,
    '@brief Creates horizontal matrix for \\f$F^1\\f$-transform computation.\n'
    '@param radius Radius of the basic function.\n'
    '@param matrix The horizontal matrix.\n'
    '@param chn Number of channels.\n'
    '\n'
    'The function creates helper horizontal matrix for \\f$F^1\\f$-transfrom '
    'processing. It is used for gradient computation.']
parse_name: cv.ft.FT12D_createPolynomMatrixHorizontal with ['cv', 'cv::ft'] -> fullname:cv::ft::FT12D_createPolynomMatrixHorizontal namespace:cv::ft classpath: classname: name:FT12D_createPolynomMatrixHorizontal
register (function) FT12D_createPolynomMatrixHorizontal (cv_ft_FT12D_createPolynomMatrixHorizontal_int__OutputArray_int)

--- Incoming ---
[   'cv.ft.FT12D_process',
    'void',
    [],
    [   ['InputArray', 'matrix', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'output', '', []],
        ['InputArray', 'mask', 'noArray()', []]],
    None,
    '@brief Computes \\f$F^1\\f$-transfrom and inverse \\f$F^1\\f$-transfrom '
    'at once.\n'
    '@param matrix Input matrix.\n'
    '@param kernel Kernel used for processing. Function `ft::createKernel` can '
    'be used.\n'
    '@param output Output 32-bit float array.\n'
    '@param mask Mask used for unwanted area marking.\n'
    '\n'
    'This function computes \\f$F^1\\f$-transfrom and inverse '
    '\\f$F^1\\f$-transfotm in one step. It is fully sufficient and optimized '
    'for `cv::Mat`.\n'
    '\n'
    '@note\n'
    'F-transform technique of first degreee is described in paper @cite '
    'Vlas:FT.']
parse_name: cv.ft.FT12D_process with ['cv', 'cv::ft'] -> fullname:cv::ft::FT12D_process namespace:cv::ft classpath: classname: name:FT12D_process
register (function) FT12D_process (cv_ft_FT12D_process__InputArray__InputArray__OutputArray__InputArray)

--- Incoming ---
[   'cv.ft.FT12D_inverseFT',
    'void',
    [],
    [   ['InputArray', 'components', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'output', '', []],
        ['int', 'width', '', []],
        ['int', 'height', '', []]],
    None,
    '@brief Computes inverse \\f$F^1\\f$-transfrom.\n'
    '@param components Input 32-bit float single channel array for the '
    'components.\n'
    '@param kernel Kernel used for processing. The same kernel as for '
    'components computation must be used.\n'
    '@param output Output 32-bit float array.\n'
    '@param width Width of the output array.\n'
    '@param height Height of the output array.\n'
    '\n'
    'Computation of inverse \\f$F^1\\f$-transform.']
parse_name: cv.ft.FT12D_inverseFT with ['cv', 'cv::ft'] -> fullname:cv::ft::FT12D_inverseFT namespace:cv::ft classpath: classname: name:FT12D_inverseFT
register (function) FT12D_inverseFT (cv_ft_FT12D_inverseFT__InputArray__InputArray__OutputArray_int_int)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/fuzzy/fuzzy_image.hpp ================


Namespaces: ['cv', 'cv.ft']
Comment: {'fuzzy': '\n@defgroup fuzzy Image processing based on fuzzy mathematics\n\nNamespace for all functions is `ft`. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern `FT`_degree_dimension`_`method.\n\n@{\n@defgroup f0_math Math with F0-transform support\n\nFuzzy transform (\\f$F^0\\f$-transform) of the 0th degree transforms whole image to a matrix of its components. These components are used in latter computation where each of them represents average color of certain subarea.\n\n@defgroup f1_math Math with F1-transform support\n\nFuzzy transform (\\f$F^1\\f$-transform) of the 1th degree transforms whole image to a matrix of its components. Each component is polynomial of the 1th degree carrying information about average color and average gradient of certain subarea.\n\n@defgroup f_image Fuzzy image processing\n\nImage proceesing based on fuzzy mathematics namely F-transform.\n@}\n\n\n'}

--- Incoming ---
[   'cv.ft.createKernel',
    'void',
    [],
    [   ['InputArray', 'A', '', []],
        ['InputArray', 'B', '', []],
        ['OutputArray', 'kernel', '', []],
        ['const int', 'chn', '', []]],
    None,
    '@brief Creates kernel from basic functions.\n'
    '@param A Basic function used in axis **x**.\n'
    '@param B Basic function used in axis **y**.\n'
    '@param kernel Final 32-bit kernel derived from **A** and **B**.\n'
    '@param chn Number of kernel channels.\n'
    '\n'
    'The function creates kernel usable for latter fuzzy image processing.']
parse_name: cv.ft.createKernel with ['cv', 'cv::ft'] -> fullname:cv::ft::createKernel namespace:cv::ft classpath: classname: name:createKernel
register (function) createKernel (cv_ft_createKernel__InputArray__InputArray__OutputArray_int)

--- Incoming ---
[   'cv.ft.createKernel',
    'void',
    [],
    [   ['int', 'function', '', []],
        ['int', 'radius', '', []],
        ['OutputArray', 'kernel', '', []],
        ['const int', 'chn', '', []]],
    None,
    '@brief Creates kernel from general functions.\n'
    '@param function Function type could be one of the following:\n'
    '-   **LINEAR** Linear basic function.\n'
    '@param radius Radius of the basic function.\n'
    '@param kernel Final 32-bit kernel.\n'
    '@param chn Number of kernel channels.\n'
    '\n'
    'The function creates kernel from predefined functions.']
parse_name: cv.ft.createKernel with ['cv', 'cv::ft'] -> fullname:cv::ft::createKernel namespace:cv::ft classpath: classname: name:createKernel
register (function) createKernel (cv_ft_createKernel_int_int__OutputArray_int)

--- Incoming ---
[   'cv.ft.inpaint',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['InputArray', 'mask', '', []],
        ['OutputArray', 'output', '', []],
        ['int', 'radius', '', []],
        ['int', 'function', '', []],
        ['int', 'algorithm', '', []]],
    None,
    '@brief Image inpainting\n'
    '@param image Input image.\n'
    '@param mask Mask used for unwanted area marking.\n'
    '@param output Output 32-bit image.\n'
    '@param radius Radius of the basic function.\n'
    '@param function Function type could be one of the following:\n'
    '-   `ft::LINEAR` Linear basic function.\n'
    '@param algorithm Algorithm could be one of the following:\n'
    '-   `ft::ONE_STEP` One step algorithm.\n'
    '-   `ft::MULTI_STEP` This algorithm automaticaly increases radius of the '
    'basic function.\n'
    '-   `ft::ITERATIVE` Iterative algorithm running in more steps using '
    'partial computations.\n'
    '\n'
    'This function provides inpainting technique based on the fuzzy '
    'mathematic.\n'
    '\n'
    '@note\n'
    'The algorithms are described in paper @cite Perf:rec.']
parse_name: cv.ft.inpaint with ['cv', 'cv::ft'] -> fullname:cv::ft::inpaint namespace:cv::ft classpath: classname: name:inpaint
register (function) inpaint (cv_ft_inpaint__InputArray__InputArray__OutputArray_int_int_int)

--- Incoming ---
[   'cv.ft.filter',
    'void',
    [],
    [   ['InputArray', 'image', '', []],
        ['InputArray', 'kernel', '', []],
        ['OutputArray', 'output', '', []]],
    None,
    '@brief Image filtering\n'
    '@param image Input image.\n'
    '@param kernel Final 32-bit kernel.\n'
    '@param output Output 32-bit image.\n'
    '\n'
    'Filtering of the input image by means of F-transform.']
parse_name: cv.ft.filter with ['cv', 'cv::ft'] -> fullname:cv::ft::filter namespace:cv::ft classpath: classname: name:filter
register (function) filter (cv_ft_filter__InputArray__InputArray__OutputArray)


=============== Header: /Users/ianlum/.cargo/registry/src/github.com-1ecc6299db9ec823/opencv-0.23.0/headers/4.1/opencv2/fuzzy/types.hpp ================


Namespaces: ['cv', 'cv.ft']
Comment: {'fuzzy': '\n@defgroup fuzzy Image processing based on fuzzy mathematics\n\nNamespace for all functions is `ft`. The module brings implementation of the last image processing algorithms based on fuzzy mathematics. Method are named based on the pattern `FT`_degree_dimension`_`method.\n\n@{\n@defgroup f0_math Math with F0-transform support\n\nFuzzy transform (\\f$F^0\\f$-transform) of the 0th degree transforms whole image to a matrix of its components. These components are used in latter computation where each of them represents average color of certain subarea.\n\n@defgroup f1_math Math with F1-transform support\n\nFuzzy transform (\\f$F^1\\f$-transform) of the 1th degree transforms whole image to a matrix of its components. Each component is polynomial of the 1th degree carrying information about average color and average gradient of certain subarea.\n\n@defgroup f_image Fuzzy image processing\n\nImage proceesing based on fuzzy mathematics namely F-transform.\n@}\n\n\n'}

--- Incoming ---
[   'enum cv.ft.<unnamed>',
    '',
    [],
    [   [   'const cv.ft.LINEAR',
            '1',
            [],
            [],
            None,
            'linear (triangular) shape\n'],
        ['const cv.ft.SINUS', '2', [], [], None, 'sinusoidal shape\n']],
    None,
    '@addtogroup fuzzy\n@{']
parse_name: const cv.ft.LINEAR with ['cv', 'cv::ft'] -> fullname:cv::ft::LINEAR namespace:cv::ft classpath: classname: name:LINEAR
parse_name: const cv.ft.SINUS with ['cv', 'cv::ft'] -> fullname:cv::ft::SINUS namespace:cv::ft classpath: classname: name:SINUS

--- Incoming ---
[   'enum cv.ft.<unnamed>',
    '',
    [],
    [   ['const cv.ft.ONE_STEP', '1', [], [], None, 'processing in one step\n'],
        [   'const cv.ft.MULTI_STEP',
            '2',
            [],
            [],
            None,
            'processing in multiple step\n'],
        [   'const cv.ft.ITERATIVE',
            '3',
            [],
            [],
            None,
            'processing in several iterations\n']],
    None,
    '']
parse_name: const cv.ft.ONE_STEP with ['cv', 'cv::ft'] -> fullname:cv::ft::ONE_STEP namespace:cv::ft classpath: classname: name:ONE_STEP
parse_name: const cv.ft.MULTI_STEP with ['cv', 'cv::ft'] -> fullname:cv::ft::MULTI_STEP namespace:cv::ft classpath: classname: name:MULTI_STEP
parse_name: const cv.ft.ITERATIVE with ['cv', 'cv::ft'] -> fullname:cv::ft::ITERATIVE namespace:cv::ft classpath: classname: name:ITERATIVE


===== Generating... =====
Generating func cv_ft_FT02D_FL_process__InputArray_int__OutputArray
Generating func cv_ft_FT02D_FL_process_float__InputArray_int__OutputArray
Generating func cv_ft_FT02D_components__InputArray__InputArray__OutputArray__InputArray
Generating func cv_ft_FT02D_inverseFT__InputArray__InputArray__OutputArray_int_int
Generating func cv_ft_FT02D_iteration__InputArray__InputArray__OutputArray__InputArray__OutputArray_bool
Generating func cv_ft_FT02D_process__InputArray__InputArray__OutputArray__InputArray
Generating func cv_ft_FT12D_components__InputArray__InputArray__OutputArray
Generating func cv_ft_FT12D_createPolynomMatrixHorizontal_int__OutputArray_int
Generating func cv_ft_FT12D_createPolynomMatrixVertical_int__OutputArray_int
Generating func cv_ft_FT12D_inverseFT__InputArray__InputArray__OutputArray_int_int
Generating func cv_ft_FT12D_polynomial__InputArray__InputArray__OutputArray__OutputArray__OutputArray__OutputArray__InputArray
Generating func cv_ft_FT12D_process__InputArray__InputArray__OutputArray__InputArray
Generating func cv_ft_createKernel__InputArray__InputArray__OutputArray_int
Generating func cv_ft_createKernel_int_int__OutputArray_int
Generating func cv_ft_filter__InputArray__InputArray__OutputArray
Generating func cv_ft_inpaint__InputArray__InputArray__OutputArray_int_int_int
Ghost class cv::Algorithm (ghost, trait), ignoring
Ghost class cv::DMatch (simple, ghost), ignoring
Ghost class cv::DescriptorMatcher (ghost, trait), ignoring
Ghost class cv::Feature2D (ghost, trait), ignoring
Ghost class cv::FileNode (ghost), ignoring
Ghost class cv::FileStorage (ghost), ignoring
Ghost class cv::KeyPoint (simple, ghost), ignoring
Ghost class cv::Mat (ghost), ignoring
Ghost class cv::MatExpr (ghost), ignoring
Ghost class cv::Range (ghost), ignoring
Ghost class cv::RotatedRect (ghost), ignoring
Ghost class cv::TermCriteria (ghost), ignoring
Ghost class cv::UMat (ghost), ignoring
Ghost class cv::_InputArray (ghost, trait), ignoring
Ghost class cv::_InputOutputArray (ghost, trait), ignoring
Ghost class cv::_OutputArray (ghost, trait), ignoring
Ghost class cv::dnn::Layer (ghost, trait), ignoring
Ghost class cv::dnn::LayerParams (ghost), ignoring
Ghost class cv::utils::logging::LogTag (ghost), ignoring
